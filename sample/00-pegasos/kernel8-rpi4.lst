
kernel8-rpi4.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	14008d1e 	b	a3500 <sysinit>
   8008c:	00000000 	.inst	0x00000000 ; undefined
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	000aa000 	.word	0x000aa000
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	d286fa0c 	mov	x12, #0x37d0                	// #14288
   80804:	cb2c63ff 	sub	sp, sp, x12
   80808:	910063e0 	add	x0, sp, #0x18
   8080c:	a9007bfd 	stp	x29, x30, [sp]
   80810:	910003fd 	mov	x29, sp
   80814:	9400000b 	bl	80840 <CKernel::CKernel()>
   80818:	910063e0 	add	x0, sp, #0x18
   8081c:	9400007d 	bl	80a10 <CKernel::Initialize()>
   80820:	72001c1f 	tst	w0, #0xff
   80824:	540000a0 	b.eq	80838 <main+0x38>  // b.none
   80828:	910063e0 	add	x0, sp, #0x18
   8082c:	940000b1 	bl	80af0 <CKernel::Run()>
   80830:	7100081f 	cmp	w0, #0x2
   80834:	54000040 	b.eq	8083c <main+0x3c>  // b.none
   80838:	94008b1e 	bl	a34b0 <halt>
   8083c:	94008b25 	bl	a34d0 <reboot>

0000000000080840 <CKernel::CKernel()>:
   80840:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80844:	52800021 	mov	w1, #0x1                   	// #1
   80848:	910003fd 	mov	x29, sp
   8084c:	a90153f3 	stp	x19, x20, [sp, #16]
   80850:	aa0003f3 	mov	x19, x0
   80854:	a9025bf5 	stp	x21, x22, [sp, #32]
   80858:	910d2016 	add	x22, x0, #0x348
   8085c:	a90363f7 	stp	x23, x24, [sp, #48]
   80860:	910cc017 	add	x23, x0, #0x330
   80864:	940095a7 	bl	a5f00 <CMemorySystem::CMemorySystem(bool)>
   80868:	aa1703e0 	mov	x0, x23
   8086c:	52800001 	mov	w1, #0x0                   	// #0
   80870:	94006ed0 	bl	9c3b0 <CActLED::CActLED(bool)>
   80874:	d283c201 	mov	x1, #0x1e10                	// #7696
   80878:	aa1603e0 	mov	x0, x22
   8087c:	8b010274 	add	x20, x19, x1
   80880:	94007700 	bl	9e480 <CKernelOptions::CKernelOptions()>
   80884:	d285c202 	mov	x2, #0x2e10                	// #11792
   80888:	912ec260 	add	x0, x19, #0xbb0
   8088c:	8b020275 	add	x21, x19, x2
   80890:	94007160 	bl	9ce10 <CDeviceNameService::CDeviceNameService()>
   80894:	aa1603e0 	mov	x0, x22
   80898:	940076ae 	bl	9e350 <CKernelOptions::GetWidth() const>
   8089c:	2a0003f8 	mov	w24, w0
   808a0:	aa1603e0 	mov	x0, x22
   808a4:	940076af 	bl	9e360 <CKernelOptions::GetHeight() const>
   808a8:	2a1803e1 	mov	w1, w24
   808ac:	2a0003e2 	mov	w2, w0
   808b0:	52800003 	mov	w3, #0x0                   	// #0
   808b4:	912f0260 	add	x0, x19, #0xbc0
   808b8:	94007c66 	bl	9fa50 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
   808bc:	52800002 	mov	w2, #0x0                   	// #0
   808c0:	d2800001 	mov	x1, #0x0                   	// #0
   808c4:	91322260 	add	x0, x19, #0xc88
   808c8:	52800003 	mov	w3, #0x0                   	// #0
   808cc:	94008145 	bl	a0de0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
   808d0:	d283c103 	mov	x3, #0x1e08                	// #7688
   808d4:	8b030260 	add	x0, x19, x3
   808d8:	94009512 	bl	a5d20 <CExceptionHandler::CExceptionHandler()>
   808dc:	aa1403e0 	mov	x0, x20
   808e0:	94009cf0 	bl	a7ca0 <CInterruptSystem::CInterruptSystem()>
   808e4:	aa1403e1 	mov	x1, x20
   808e8:	aa1503e0 	mov	x0, x21
   808ec:	94008b49 	bl	a3610 <CTimer::CTimer(CInterruptSystem*)>
   808f0:	aa1603e0 	mov	x0, x22
   808f4:	940076a3 	bl	9e380 <CKernelOptions::GetLogLevel() const>
   808f8:	d285ce04 	mov	x4, #0x2e70                	// #11888
   808fc:	aa1503e2 	mov	x2, x21
   80900:	2a0003e1 	mov	w1, w0
   80904:	8b040260 	add	x0, x19, x4
   80908:	940077de 	bl	9e880 <CLogger::CLogger(unsigned int, CTimer*)>
   8090c:	d2860a05 	mov	x5, #0x3050                	// #12368
   80910:	aa1503e2 	mov	x2, x21
   80914:	8b050260 	add	x0, x19, x5
   80918:	aa1403e1 	mov	x1, x20
   8091c:	940004a5 	bl	81bb0 <CXHCIDevice::CXHCIDevice(CInterruptSystem*, CTimer*)>
   80920:	d2862806 	mov	x6, #0x3140                	// #12608
   80924:	aa1703e3 	mov	x3, x23
   80928:	8b060260 	add	x0, x19, x6
   8092c:	aa1503e2 	mov	x2, x21
   80930:	aa1403e1 	mov	x1, x20
   80934:	9400a82b 	bl	aa9e0 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>
   80938:	d00001a4 	adrp	x4, b6000 <s_OldInfo+0x68>
   8093c:	aa1703e0 	mov	x0, x23
   80940:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80944:	52803e83 	mov	w3, #0x1f4                 	// #500
   80948:	52801902 	mov	w2, #0xc8                  	// #200
   8094c:	528000a1 	mov	w1, #0x5                   	// #5
   80950:	f9071893 	str	x19, [x4, #3632]
   80954:	a94363f7 	ldp	x23, x24, [sp, #48]
   80958:	b9354a7f 	str	wzr, [x19, #13640]
   8095c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80960:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80964:	14006edb 	b	9c4d0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
   80968:	d503201f 	nop
   8096c:	d503201f 	nop

0000000000080970 <CKernel::~CKernel()>:
   80970:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80974:	910003fd 	mov	x29, sp
   80978:	d00001a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   8097c:	f9000bf3 	str	x19, [sp, #16]
   80980:	aa0003f3 	mov	x19, x0
   80984:	d2862800 	mov	x0, #0x3140                	// #12608
   80988:	8b000260 	add	x0, x19, x0
   8098c:	f907183f 	str	xzr, [x1, #3632]
   80990:	9400a878 	bl	aab70 <CEMMCDevice::~CEMMCDevice()>
   80994:	d2860a01 	mov	x1, #0x3050                	// #12368
   80998:	8b010260 	add	x0, x19, x1
   8099c:	940004a5 	bl	81c30 <CXHCIDevice::~CXHCIDevice()>
   809a0:	d285ce02 	mov	x2, #0x2e70                	// #11888
   809a4:	8b020260 	add	x0, x19, x2
   809a8:	940077ca 	bl	9e8d0 <CLogger::~CLogger()>
   809ac:	d285c203 	mov	x3, #0x2e10                	// #11792
   809b0:	8b030260 	add	x0, x19, x3
   809b4:	94008b37 	bl	a3690 <CTimer::~CTimer()>
   809b8:	d283c204 	mov	x4, #0x1e10                	// #7696
   809bc:	8b040260 	add	x0, x19, x4
   809c0:	94009cc4 	bl	a7cd0 <CInterruptSystem::~CInterruptSystem()>
   809c4:	d283c105 	mov	x5, #0x1e08                	// #7688
   809c8:	8b050260 	add	x0, x19, x5
   809cc:	940094e5 	bl	a5d60 <CExceptionHandler::~CExceptionHandler()>
   809d0:	91322260 	add	x0, x19, #0xc88
   809d4:	9400817f 	bl	a0fd0 <CSerialDevice::~CSerialDevice()>
   809d8:	912f0260 	add	x0, x19, #0xbc0
   809dc:	94007c41 	bl	9fae0 <CScreenDevice::~CScreenDevice()>
   809e0:	912ec260 	add	x0, x19, #0xbb0
   809e4:	9400711b 	bl	9ce50 <CDeviceNameService::~CDeviceNameService()>
   809e8:	910d2260 	add	x0, x19, #0x348
   809ec:	94007655 	bl	9e340 <CKernelOptions::~CKernelOptions()>
   809f0:	910cc260 	add	x0, x19, #0x330
   809f4:	94006e9b 	bl	9c460 <CActLED::~CActLED()>
   809f8:	aa1303e0 	mov	x0, x19
   809fc:	f9400bf3 	ldr	x19, [sp, #16]
   80a00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80a04:	140095a7 	b	a60a0 <CMemorySystem::~CMemorySystem()>
   80a08:	d503201f 	nop
   80a0c:	d503201f 	nop

0000000000080a10 <CKernel::Initialize()>:
   80a10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80a14:	910003fd 	mov	x29, sp
   80a18:	a90153f3 	stp	x19, x20, [sp, #16]
   80a1c:	aa0003f3 	mov	x19, x0
   80a20:	912f0014 	add	x20, x0, #0xbc0
   80a24:	9400af73 	bl	ac7f0 <awful_funct()>
   80a28:	aa1403e0 	mov	x0, x20
   80a2c:	94007c59 	bl	9fb90 <CScreenDevice::Initialize()>
   80a30:	72001c1f 	tst	w0, #0xff
   80a34:	540000a1 	b.ne	80a48 <CKernel::Initialize()+0x38>  // b.any
   80a38:	52800000 	mov	w0, #0x0                   	// #0
   80a3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80a40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80a44:	d65f03c0 	ret
   80a48:	52984001 	mov	w1, #0xc200                	// #49664
   80a4c:	72a00021 	movk	w1, #0x1, lsl #16
   80a50:	91322260 	add	x0, x19, #0xc88
   80a54:	940081bf 	bl	a1150 <CSerialDevice::Initialize(unsigned int)>
   80a58:	72001c1f 	tst	w0, #0xff
   80a5c:	54fffee0 	b.eq	80a38 <CKernel::Initialize()+0x28>  // b.none
   80a60:	910d2260 	add	x0, x19, #0x348
   80a64:	94007643 	bl	9e370 <CKernelOptions::GetLogDevice() const>
   80a68:	aa0003e1 	mov	x1, x0
   80a6c:	52800002 	mov	w2, #0x0                   	// #0
   80a70:	912ec260 	add	x0, x19, #0xbb0
   80a74:	94007193 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   80a78:	aa0003e1 	mov	x1, x0
   80a7c:	d285ce04 	mov	x4, #0x2e70                	// #11888
   80a80:	f100003f 	cmp	x1, #0x0
   80a84:	8b040260 	add	x0, x19, x4
   80a88:	9a941021 	csel	x1, x1, x20, ne  // ne = any
   80a8c:	940077b5 	bl	9e960 <CLogger::Initialize(CDevice*)>
   80a90:	72001c1f 	tst	w0, #0xff
   80a94:	54fffd20 	b.eq	80a38 <CKernel::Initialize()+0x28>  // b.none
   80a98:	d283c203 	mov	x3, #0x1e10                	// #7696
   80a9c:	8b030260 	add	x0, x19, x3
   80aa0:	94009c94 	bl	a7cf0 <CInterruptSystem::Initialize()>
   80aa4:	72001c1f 	tst	w0, #0xff
   80aa8:	54fffc80 	b.eq	80a38 <CKernel::Initialize()+0x28>  // b.none
   80aac:	d285c202 	mov	x2, #0x2e10                	// #11792
   80ab0:	8b020260 	add	x0, x19, x2
   80ab4:	94008ddb 	bl	a4220 <CTimer::Initialize()>
   80ab8:	72001c1f 	tst	w0, #0xff
   80abc:	54fffbe0 	b.eq	80a38 <CKernel::Initialize()+0x28>  // b.none
   80ac0:	d2860a01 	mov	x1, #0x3050                	// #12368
   80ac4:	8b010260 	add	x0, x19, x1
   80ac8:	940004a6 	bl	81d60 <CXHCIDevice::Initialize()>
   80acc:	72001c1f 	tst	w0, #0xff
   80ad0:	54fffb40 	b.eq	80a38 <CKernel::Initialize()+0x28>  // b.none
   80ad4:	d2862800 	mov	x0, #0x3140                	// #12608
   80ad8:	8b000260 	add	x0, x19, x0
   80adc:	a94153f3 	ldp	x19, x20, [sp, #16]
   80ae0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80ae4:	1400a85f 	b	aac60 <CEMMCDevice::Initialize()>
   80ae8:	d503201f 	nop
   80aec:	d503201f 	nop

0000000000080af0 <CKernel::Run()>:
   80af0:	d11283ff 	sub	sp, sp, #0x4a0
   80af4:	d285ce01 	mov	x1, #0x2e70                	// #11888
   80af8:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80afc:	52800062 	mov	w2, #0x3                   	// #3
   80b00:	a9007bfd 	stp	x29, x30, [sp]
   80b04:	910003fd 	mov	x29, sp
   80b08:	911fe063 	add	x3, x3, #0x7f8
   80b0c:	a9025bf5 	stp	x21, x22, [sp, #32]
   80b10:	90000175 	adrp	x21, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80b14:	9128a2b5 	add	x21, x21, #0xa28
   80b18:	90000176 	adrp	x22, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80b1c:	912082d6 	add	x22, x22, #0x820
   80b20:	a90363f7 	stp	x23, x24, [sp, #48]
   80b24:	8b010017 	add	x23, x0, x1
   80b28:	aa1503e1 	mov	x1, x21
   80b2c:	a90153f3 	stp	x19, x20, [sp, #16]
   80b30:	aa0003f4 	mov	x20, x0
   80b34:	aa1703e0 	mov	x0, x23
   80b38:	90000173 	adrp	x19, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80b3c:	91212273 	add	x19, x19, #0x848
   80b40:	f90023f9 	str	x25, [sp, #64]
   80b44:	9400779f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80b48:	d286aa02 	mov	x2, #0x3550                	// #13648
   80b4c:	aa1603e1 	mov	x1, x22
   80b50:	8b020280 	add	x0, x20, x2
   80b54:	52800022 	mov	w2, #0x1                   	// #1
   80b58:	94005792 	bl	969a0 <f_mount>
   80b5c:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80b60:	90000162 	adrp	x2, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80b64:	910483e1 	add	x1, sp, #0x120
   80b68:	9120a063 	add	x3, x3, #0x828
   80b6c:	9120c042 	add	x2, x2, #0x830
   80b70:	910163e0 	add	x0, sp, #0x58
   80b74:	91006838 	add	x24, x1, #0x1a
   80b78:	94005e42 	bl	98480 <f_findfirst>
   80b7c:	340000c0 	cbz	w0, 80b94 <CKernel::Run()+0xa4>
   80b80:	14000016 	b	80bd8 <CKernel::Run()+0xe8>
   80b84:	910483e1 	add	x1, sp, #0x120
   80b88:	910163e0 	add	x0, sp, #0x58
   80b8c:	94005e11 	bl	983d0 <f_findnext>
   80b90:	35000240 	cbnz	w0, 80bd8 <CKernel::Run()+0xe8>
   80b94:	39c4ebe1 	ldrsb	w1, [sp, #314]
   80b98:	34000201 	cbz	w1, 80bd8 <CKernel::Run()+0xe8>
   80b9c:	3944b3e0 	ldrb	w0, [sp, #300]
   80ba0:	721f041f 	tst	w0, #0x6
   80ba4:	54ffff01 	b.ne	80b84 <CKernel::Run()+0x94>  // b.any
   80ba8:	910903e0 	add	x0, sp, #0x240
   80bac:	940084a1 	bl	a1e30 <CString::CString()>
   80bb0:	aa1303e1 	mov	x1, x19
   80bb4:	aa1803e2 	mov	x2, x24
   80bb8:	910903e0 	add	x0, sp, #0x240
   80bbc:	94008a0d 	bl	a33f0 <CString::Format(char const*, ...)>
   80bc0:	910903e0 	add	x0, sp, #0x240
   80bc4:	9400845f 	bl	a1d40 <CString::~CString()>
   80bc8:	910483e1 	add	x1, sp, #0x120
   80bcc:	910163e0 	add	x0, sp, #0x58
   80bd0:	94005e00 	bl	983d0 <f_findnext>
   80bd4:	34fffe00 	cbz	w0, 80b94 <CKernel::Run()+0xa4>
   80bd8:	90000178 	adrp	x24, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80bdc:	9120e318 	add	x24, x24, #0x838
   80be0:	aa1803e1 	mov	x1, x24
   80be4:	52800142 	mov	w2, #0xa                   	// #10
   80be8:	910903e0 	add	x0, sp, #0x240
   80bec:	528000b9 	mov	w25, #0x5                   	// #5
   80bf0:	940057b4 	bl	96ac0 <f_open>
   80bf4:	9102e3e0 	add	x0, sp, #0xb8
   80bf8:	9400848e 	bl	a1e30 <CString::CString()>
   80bfc:	9102e3e0 	add	x0, sp, #0xb8
   80c00:	940084a8 	bl	a1ea0 <CString::operator char const*() const>
   80c04:	aa0003f3 	mov	x19, x0
   80c08:	9102e3e0 	add	x0, sp, #0xb8
   80c0c:	940084dd 	bl	a1f80 <CString::GetLength() const>
   80c10:	2a0003e2 	mov	w2, w0
   80c14:	aa1303e1 	mov	x1, x19
   80c18:	910153e3 	add	x3, sp, #0x54
   80c1c:	910903e0 	add	x0, sp, #0x240
   80c20:	940059d0 	bl	97360 <f_write>
   80c24:	2a0003e1 	mov	w1, w0
   80c28:	9102e3e0 	add	x0, sp, #0xb8
   80c2c:	350013e1 	cbnz	w1, 80ea8 <CKernel::Run()+0x3b8>
   80c30:	b94057f3 	ldr	w19, [sp, #84]
   80c34:	940084d3 	bl	a1f80 <CString::GetLength() const>
   80c38:	aa0003e1 	mov	x1, x0
   80c3c:	9102e3e0 	add	x0, sp, #0xb8
   80c40:	eb01027f 	cmp	x19, x1
   80c44:	54001321 	b.ne	80ea8 <CKernel::Run()+0x3b8>  // b.any
   80c48:	9400843e 	bl	a1d40 <CString::~CString()>
   80c4c:	71000739 	subs	w25, w25, #0x1
   80c50:	54fffd21 	b.ne	80bf4 <CKernel::Run()+0x104>  // b.any
   80c54:	910903e0 	add	x0, sp, #0x240
   80c58:	912f0293 	add	x19, x20, #0xbc0
   80c5c:	94005b8d 	bl	97a90 <f_close>
   80c60:	52800022 	mov	w2, #0x1                   	// #1
   80c64:	aa1803e1 	mov	x1, x24
   80c68:	910903e0 	add	x0, sp, #0x240
   80c6c:	94005795 	bl	96ac0 <f_open>
   80c70:	910153e3 	add	x3, sp, #0x54
   80c74:	52800c82 	mov	w2, #0x64                  	// #100
   80c78:	9102e3e1 	add	x1, sp, #0xb8
   80c7c:	910903e0 	add	x0, sp, #0x240
   80c80:	940058ec 	bl	97030 <f_read>
   80c84:	35000a00 	cbnz	w0, 80dc4 <CKernel::Run()+0x2d4>
   80c88:	b94057e2 	ldr	w2, [sp, #84]
   80c8c:	35000822 	cbnz	w2, 80d90 <CKernel::Run()+0x2a0>
   80c90:	910903e0 	add	x0, sp, #0x240
   80c94:	94005b7f 	bl	97a90 <f_close>
   80c98:	35000a80 	cbnz	w0, 80de8 <CKernel::Run()+0x2f8>
   80c9c:	aa1803e1 	mov	x1, x24
   80ca0:	910903e0 	add	x0, sp, #0x240
   80ca4:	52800022 	mov	w2, #0x1                   	// #1
   80ca8:	94005786 	bl	96ac0 <f_open>
   80cac:	35000b40 	cbnz	w0, 80e14 <CKernel::Run()+0x324>
   80cb0:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80cb4:	52800002 	mov	w2, #0x0                   	// #0
   80cb8:	91224021 	add	x1, x1, #0x890
   80cbc:	912ec280 	add	x0, x20, #0xbb0
   80cc0:	94007100 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   80cc4:	aa0003f8 	mov	x24, x0
   80cc8:	b4000c40 	cbz	x0, 80e50 <CKernel::Run()+0x360>
   80ccc:	90000001 	adrp	x1, 80000 <_start>
   80cd0:	913c8021 	add	x1, x1, #0xf20
   80cd4:	9400032b 	bl	81980 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>
   80cd8:	aa1803e0 	mov	x0, x24
   80cdc:	90000001 	adrp	x1, 80000 <_start>
   80ce0:	913b0021 	add	x1, x1, #0xec0
   80ce4:	912f0299 	add	x25, x20, #0xbc0
   80ce8:	9400031e 	bl	81960 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
   80cec:	d00001a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   80cf0:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80cf4:	f9471800 	ldr	x0, [x0, #3632]
   80cf8:	9122c021 	add	x1, x1, #0x8b0
   80cfc:	d28002a2 	mov	x2, #0x15                  	// #21
   80d00:	912f0000 	add	x0, x0, #0xbc0
   80d04:	94007c7f 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   80d08:	52800062 	mov	w2, #0x3                   	// #3
   80d0c:	aa1503e1 	mov	x1, x21
   80d10:	aa1703e0 	mov	x0, x23
   80d14:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80d18:	91232063 	add	x3, x3, #0x8c8
   80d1c:	94007729 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80d20:	940000d4 	bl	81070 <CKernel::displayUserWithDirectory()>
   80d24:	b9754a93 	ldr	w19, [x20, #13640]
   80d28:	350001b3 	cbnz	w19, 80d5c <CKernel::Run()+0x26c>
   80d2c:	d503201f 	nop
   80d30:	aa1803e0 	mov	x0, x24
   80d34:	9400036f 	bl	81af0 <CUSBKeyboardDevice::UpdateLEDs()>
   80d38:	2a1303e2 	mov	w2, w19
   80d3c:	52800001 	mov	w1, #0x0                   	// #0
   80d40:	aa1903e0 	mov	x0, x25
   80d44:	11000673 	add	w19, w19, #0x1
   80d48:	94007fb2 	bl	a0c10 <CScreenDevice::Rotor(unsigned int, unsigned int)>
   80d4c:	52800c80 	mov	w0, #0x64                  	// #100
   80d50:	94008d88 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   80d54:	b9754a81 	ldr	w1, [x20, #13640]
   80d58:	34fffec1 	cbz	w1, 80d30 <CKernel::Run()+0x240>
   80d5c:	52800002 	mov	w2, #0x0                   	// #0
   80d60:	aa1603e1 	mov	x1, x22
   80d64:	d2800000 	mov	x0, #0x0                   	// #0
   80d68:	9400570e 	bl	969a0 <f_mount>
   80d6c:	350008e0 	cbnz	w0, 80e88 <CKernel::Run()+0x398>
   80d70:	b9754a80 	ldr	w0, [x20, #13640]
   80d74:	a9407bfd 	ldp	x29, x30, [sp]
   80d78:	a94153f3 	ldp	x19, x20, [sp, #16]
   80d7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80d80:	a94363f7 	ldp	x23, x24, [sp, #48]
   80d84:	f94023f9 	ldr	x25, [sp, #64]
   80d88:	911283ff 	add	sp, sp, #0x4a0
   80d8c:	d65f03c0 	ret
   80d90:	9102e3e1 	add	x1, sp, #0xb8
   80d94:	aa1303e0 	mov	x0, x19
   80d98:	2a0203e2 	mov	w2, w2
   80d9c:	94007c59 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   80da0:	b94057e1 	ldr	w1, [sp, #84]
   80da4:	71018c3f 	cmp	w1, #0x63
   80da8:	54fff749 	b.ls	80c90 <CKernel::Run()+0x1a0>  // b.plast
   80dac:	910153e3 	add	x3, sp, #0x54
   80db0:	52800c82 	mov	w2, #0x64                  	// #100
   80db4:	9102e3e1 	add	x1, sp, #0xb8
   80db8:	910903e0 	add	x0, sp, #0x240
   80dbc:	9400589d 	bl	97030 <f_read>
   80dc0:	34fff640 	cbz	w0, 80c88 <CKernel::Run()+0x198>
   80dc4:	aa1703e0 	mov	x0, x23
   80dc8:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80dcc:	91240063 	add	x3, x3, #0x900
   80dd0:	52800022 	mov	w2, #0x1                   	// #1
   80dd4:	aa1503e1 	mov	x1, x21
   80dd8:	940076fa 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80ddc:	910903e0 	add	x0, sp, #0x240
   80de0:	94005b2c 	bl	97a90 <f_close>
   80de4:	34fff5c0 	cbz	w0, 80c9c <CKernel::Run()+0x1ac>
   80de8:	52800002 	mov	w2, #0x0                   	// #0
   80dec:	aa1503e1 	mov	x1, x21
   80df0:	aa1703e0 	mov	x0, x23
   80df4:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80df8:	91214063 	add	x3, x3, #0x850
   80dfc:	940076f1 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80e00:	aa1803e1 	mov	x1, x24
   80e04:	910903e0 	add	x0, sp, #0x240
   80e08:	52800022 	mov	w2, #0x1                   	// #1
   80e0c:	9400572d 	bl	96ac0 <f_open>
   80e10:	34fff500 	cbz	w0, 80cb0 <CKernel::Run()+0x1c0>
   80e14:	90000164 	adrp	x4, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80e18:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80e1c:	9121a084 	add	x4, x4, #0x868
   80e20:	9121e063 	add	x3, x3, #0x878
   80e24:	52800002 	mov	w2, #0x0                   	// #0
   80e28:	aa1503e1 	mov	x1, x21
   80e2c:	aa1703e0 	mov	x0, x23
   80e30:	940076e4 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80e34:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80e38:	52800002 	mov	w2, #0x0                   	// #0
   80e3c:	91224021 	add	x1, x1, #0x890
   80e40:	912ec280 	add	x0, x20, #0xbb0
   80e44:	9400709f 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   80e48:	aa0003f8 	mov	x24, x0
   80e4c:	b5fff400 	cbnz	x0, 80ccc <CKernel::Run()+0x1dc>
   80e50:	aa1503e1 	mov	x1, x21
   80e54:	aa1703e0 	mov	x0, x23
   80e58:	52800022 	mov	w2, #0x1                   	// #1
   80e5c:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80e60:	91226063 	add	x3, x3, #0x898
   80e64:	940076d7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80e68:	52800020 	mov	w0, #0x1                   	// #1
   80e6c:	a9407bfd 	ldp	x29, x30, [sp]
   80e70:	a94153f3 	ldp	x19, x20, [sp, #16]
   80e74:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80e78:	a94363f7 	ldp	x23, x24, [sp, #48]
   80e7c:	f94023f9 	ldr	x25, [sp, #64]
   80e80:	911283ff 	add	sp, sp, #0x4a0
   80e84:	d65f03c0 	ret
   80e88:	90000163 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80e8c:	aa1603e4 	mov	x4, x22
   80e90:	aa1503e1 	mov	x1, x21
   80e94:	aa1703e0 	mov	x0, x23
   80e98:	91238063 	add	x3, x3, #0x8e0
   80e9c:	52800002 	mov	w2, #0x0                   	// #0
   80ea0:	940076c8 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80ea4:	17ffffb3 	b	80d70 <CKernel::Run()+0x280>
   80ea8:	9102e3e0 	add	x0, sp, #0xb8
   80eac:	940083a5 	bl	a1d40 <CString::~CString()>
   80eb0:	17ffff69 	b	80c54 <CKernel::Run()+0x164>
   80eb4:	d503201f 	nop
   80eb8:	d503201f 	nop
   80ebc:	d503201f 	nop

0000000000080ec0 <CKernel::KeyPressedHandler(char const*)>:
   80ec0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80ec4:	d00001a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   80ec8:	910003fd 	mov	x29, sp
   80ecc:	a90153f3 	stp	x19, x20, [sp, #16]
   80ed0:	f9471834 	ldr	x20, [x1, #3632]
   80ed4:	b4000174 	cbz	x20, 80f00 <CKernel::KeyPressedHandler(char const*)+0x40>
   80ed8:	aa0003f3 	mov	x19, x0
   80edc:	94008dad 	bl	a4590 <strlen>
   80ee0:	aa0003e2 	mov	x2, x0
   80ee4:	aa1303e1 	mov	x1, x19
   80ee8:	912f0280 	add	x0, x20, #0xbc0
   80eec:	94007c05 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   80ef0:	aa1303e0 	mov	x0, x19
   80ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   80ef8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80efc:	14000079 	b	810e0 <CKernel::CommandLineIn(char const*)>
   80f00:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80f04:	90000160 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80f08:	91244021 	add	x1, x1, #0x910
   80f0c:	91248000 	add	x0, x0, #0x920
   80f10:	52802362 	mov	w2, #0x11b                 	// #283
   80f14:	94006ddb 	bl	9c680 <assertion_failed>
   80f18:	d503201f 	nop
   80f1c:	d503201f 	nop

0000000000080f20 <CKernel::ShutdownHandler()>:
   80f20:	d00001a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   80f24:	f9471800 	ldr	x0, [x0, #3632]
   80f28:	b4000080 	cbz	x0, 80f38 <CKernel::ShutdownHandler()+0x18>
   80f2c:	52800041 	mov	w1, #0x2                   	// #2
   80f30:	b9354801 	str	w1, [x0, #13640]
   80f34:	d65f03c0 	ret
   80f38:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80f3c:	90000160 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80f40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   80f44:	91244021 	add	x1, x1, #0x910
   80f48:	910003fd 	mov	x29, sp
   80f4c:	91248000 	add	x0, x0, #0x920
   80f50:	52802442 	mov	w2, #0x122                 	// #290
   80f54:	94006dcb 	bl	9c680 <assertion_failed>
   80f58:	d503201f 	nop
   80f5c:	d503201f 	nop

0000000000080f60 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
   80f60:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   80f64:	910003fd 	mov	x29, sp
   80f68:	a9025bf5 	stp	x21, x22, [sp, #32]
   80f6c:	d00001b5 	adrp	x21, b6000 <s_OldInfo+0x68>
   80f70:	911182b5 	add	x21, x21, #0x460
   80f74:	a90153f3 	stp	x19, x20, [sp, #16]
   80f78:	f944eaa3 	ldr	x3, [x21, #2512]
   80f7c:	b4000683 	cbz	x3, 8104c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xec>
   80f80:	12001c16 	and	w22, w0, #0xff
   80f84:	9100c3e0 	add	x0, sp, #0x30
   80f88:	aa0103f3 	mov	x19, x1
   80f8c:	91001834 	add	x20, x1, #0x6
   80f90:	940083a8 	bl	a1e30 <CString::CString()>
   80f94:	90000161 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   80f98:	2a1603e2 	mov	w2, w22
   80f9c:	9100c3e0 	add	x0, sp, #0x30
   80fa0:	9124c021 	add	x1, x1, #0x930
   80fa4:	d0000196 	adrp	x22, b2000 <vtable for CPartition>
   80fa8:	9121c2d6 	add	x22, x22, #0x870
   80fac:	94008911 	bl	a33f0 <CString::Format(char const*, ...)>
   80fb0:	14000004 	b	80fc0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x60>
   80fb4:	91000673 	add	x19, x19, #0x1
   80fb8:	eb14027f 	cmp	x19, x20
   80fbc:	54000260 	b.eq	81008 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xa8>  // b.none
   80fc0:	39400260 	ldrb	w0, [x19]
   80fc4:	34ffff80 	cbz	w0, 80fb4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
   80fc8:	910143e0 	add	x0, sp, #0x50
   80fcc:	91000673 	add	x19, x19, #0x1
   80fd0:	94008398 	bl	a1e30 <CString::CString()>
   80fd4:	385ff262 	ldurb	w2, [x19, #-1]
   80fd8:	aa1603e1 	mov	x1, x22
   80fdc:	910143e0 	add	x0, sp, #0x50
   80fe0:	94008904 	bl	a33f0 <CString::Format(char const*, ...)>
   80fe4:	910143e0 	add	x0, sp, #0x50
   80fe8:	940083ae 	bl	a1ea0 <CString::operator char const*() const>
   80fec:	aa0003e1 	mov	x1, x0
   80ff0:	9100c3e0 	add	x0, sp, #0x30
   80ff4:	940083eb 	bl	a1fa0 <CString::Append(char const*)>
   80ff8:	910143e0 	add	x0, sp, #0x50
   80ffc:	94008351 	bl	a1d40 <CString::~CString()>
   81000:	eb14027f 	cmp	x19, x20
   81004:	54fffde1 	b.ne	80fc0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x60>  // b.any
   81008:	f944eab3 	ldr	x19, [x21, #2512]
   8100c:	d285ce01 	mov	x1, #0x2e70                	// #11888
   81010:	9100c3e0 	add	x0, sp, #0x30
   81014:	8b010273 	add	x19, x19, x1
   81018:	940083a2 	bl	a1ea0 <CString::operator char const*() const>
   8101c:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81020:	aa0003e3 	mov	x3, x0
   81024:	9128a021 	add	x1, x1, #0xa28
   81028:	aa1303e0 	mov	x0, x19
   8102c:	52800062 	mov	w2, #0x3                   	// #3
   81030:	94007664 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81034:	9100c3e0 	add	x0, sp, #0x30
   81038:	94008342 	bl	a1d40 <CString::~CString()>
   8103c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81040:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81044:	a8c77bfd 	ldp	x29, x30, [sp], #112
   81048:	d65f03c0 	ret
   8104c:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81050:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81054:	91244021 	add	x1, x1, #0x910
   81058:	91248000 	add	x0, x0, #0x920
   8105c:	52802502 	mov	w2, #0x128                 	// #296
   81060:	94006d88 	bl	9c680 <assertion_failed>
   81064:	d503201f 	nop
   81068:	d503201f 	nop
   8106c:	d503201f 	nop

0000000000081070 <CKernel::displayUserWithDirectory()>:
   81070:	d11083ff 	sub	sp, sp, #0x420
   81074:	900001a1 	adrp	x1, b5000 <font_data+0x1340>
   81078:	912a2021 	add	x1, x1, #0xa88
   8107c:	910083e0 	add	x0, sp, #0x20
   81080:	a9007bfd 	stp	x29, x30, [sp]
   81084:	91006021 	add	x1, x1, #0x18
   81088:	910003fd 	mov	x29, sp
   8108c:	f9000bf3 	str	x19, [sp, #16]
   81090:	94008dd0 	bl	a47d0 <strcpy>
   81094:	910083e0 	add	x0, sp, #0x20
   81098:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8109c:	91254021 	add	x1, x1, #0x950
   810a0:	94008de4 	bl	a4830 <strcat>
   810a4:	b00001a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   810a8:	910083e0 	add	x0, sp, #0x20
   810ac:	f9471833 	ldr	x19, [x1, #3632]
   810b0:	94008d38 	bl	a4590 <strlen>
   810b4:	aa0003e2 	mov	x2, x0
   810b8:	910083e1 	add	x1, sp, #0x20
   810bc:	912f0273 	add	x19, x19, #0xbc0
   810c0:	aa1303e0 	mov	x0, x19
   810c4:	94007b8f 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   810c8:	a9407bfd 	ldp	x29, x30, [sp]
   810cc:	f9400bf3 	ldr	x19, [sp, #16]
   810d0:	911083ff 	add	sp, sp, #0x420
   810d4:	d65f03c0 	ret
   810d8:	d503201f 	nop
   810dc:	d503201f 	nop

00000000000810e0 <CKernel::CommandLineIn(char const*)>:
   810e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   810e4:	910003fd 	mov	x29, sp
   810e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   810ec:	b00001b6 	adrp	x22, b6000 <s_OldInfo+0x68>
   810f0:	911182d5 	add	x21, x22, #0x460
   810f4:	a90153f3 	stp	x19, x20, [sp, #16]
   810f8:	f944eaa1 	ldr	x1, [x21, #2512]
   810fc:	b4000541 	cbz	x1, 811a4 <CKernel::CommandLineIn(char const*)+0xc4>
   81100:	f0000153 	adrp	x19, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81104:	91258273 	add	x19, x19, #0x960
   81108:	aa1303e1 	mov	x1, x19
   8110c:	aa0003f4 	mov	x20, x0
   81110:	94008d2c 	bl	a45c0 <strcmp>
   81114:	34000120 	cbz	w0, 81138 <CKernel::CommandLineIn(char const*)+0x58>
   81118:	aa1303e1 	mov	x1, x19
   8111c:	aa1403e0 	mov	x0, x20
   81120:	94008d28 	bl	a45c0 <strcmp>
   81124:	35000340 	cbnz	w0, 8118c <CKernel::CommandLineIn(char const*)+0xac>
   81128:	a94153f3 	ldp	x19, x20, [sp, #16]
   8112c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81130:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81134:	d65f03c0 	ret
   81138:	f9001bf7 	str	x23, [sp, #48]
   8113c:	910022b7 	add	x23, x21, #0x8
   81140:	aa1703e0 	mov	x0, x23
   81144:	94008d13 	bl	a4590 <strlen>
   81148:	aa0003e1 	mov	x1, x0
   8114c:	aa1703e0 	mov	x0, x23
   81150:	b90462c1 	str	w1, [x22, #1120]
   81154:	3821caff 	strb	wzr, [x23, w1, sxtw]
   81158:	9400001a 	bl	811c0 <CKernel::splitCommandLine(char const*)>
   8115c:	911342a0 	add	x0, x21, #0x4d0
   81160:	940000cc 	bl	81490 <CKernel::CommandMatch(char const*)>
   81164:	97ffffc3 	bl	81070 <CKernel::displayUserWithDirectory()>
   81168:	aa1703e0 	mov	x0, x23
   8116c:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81170:	9126c021 	add	x1, x1, #0x9b0
   81174:	94008d97 	bl	a47d0 <strcpy>
   81178:	aa1303e1 	mov	x1, x19
   8117c:	aa1403e0 	mov	x0, x20
   81180:	f9401bf7 	ldr	x23, [sp, #48]
   81184:	94008d0f 	bl	a45c0 <strcmp>
   81188:	34fffd00 	cbz	w0, 81128 <CKernel::CommandLineIn(char const*)+0x48>
   8118c:	aa1403e1 	mov	x1, x20
   81190:	910022a0 	add	x0, x21, #0x8
   81194:	a94153f3 	ldp	x19, x20, [sp, #16]
   81198:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8119c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   811a0:	14008da4 	b	a4830 <strcat>
   811a4:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   811a8:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   811ac:	f9001bf7 	str	x23, [sp, #48]
   811b0:	91244021 	add	x1, x1, #0x910
   811b4:	91248000 	add	x0, x0, #0x920
   811b8:	528028c2 	mov	w2, #0x146                 	// #326
   811bc:	94006d31 	bl	9c680 <assertion_failed>

00000000000811c0 <CKernel::splitCommandLine(char const*)>:
   811c0:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   811c4:	910003fd 	mov	x29, sp
   811c8:	d2800342 	mov	x2, #0x1a                  	// #26
   811cc:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   811d0:	9125a021 	add	x1, x1, #0x968
   811d4:	a90153f3 	stp	x19, x20, [sp, #16]
   811d8:	b00001b3 	adrp	x19, b6000 <s_OldInfo+0x68>
   811dc:	91118273 	add	x19, x19, #0x460
   811e0:	f944ea63 	ldr	x3, [x19, #2512]
   811e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   811e8:	aa0003f6 	mov	x22, x0
   811ec:	912f0060 	add	x0, x3, #0xbc0
   811f0:	94007b44 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   811f4:	f944ea74 	ldr	x20, [x19, #2512]
   811f8:	aa1603e0 	mov	x0, x22
   811fc:	94008ce5 	bl	a4590 <strlen>
   81200:	aa0003e2 	mov	x2, x0
   81204:	aa1603e1 	mov	x1, x22
   81208:	912f0294 	add	x20, x20, #0xbc0
   8120c:	aa1403e0 	mov	x0, x20
   81210:	f0000154 	adrp	x20, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81214:	9126c294 	add	x20, x20, #0x9b0
   81218:	94007b3a 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   8121c:	f944ea60 	ldr	x0, [x19, #2512]
   81220:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81224:	d2800042 	mov	x2, #0x2                   	// #2
   81228:	91262021 	add	x1, x1, #0x988
   8122c:	912f0000 	add	x0, x0, #0xbc0
   81230:	94007b34 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81234:	aa1403e1 	mov	x1, x20
   81238:	91134260 	add	x0, x19, #0x4d0
   8123c:	94008d65 	bl	a47d0 <strcpy>
   81240:	aa1403e1 	mov	x1, x20
   81244:	91234260 	add	x0, x19, #0x8d0
   81248:	94008d62 	bl	a47d0 <strcpy>
   8124c:	aa1603e0 	mov	x0, x22
   81250:	94008cd0 	bl	a4590 <strlen>
   81254:	39c002c3 	ldrsb	w3, [x22]
   81258:	7100287f 	cmp	w3, #0xa
   8125c:	540010c0 	b.eq	81474 <CKernel::splitCommandLine(char const*)+0x2b4>  // b.none
   81260:	f944ea62 	ldr	x2, [x19, #2512]
   81264:	910006d4 	add	x20, x22, #0x1
   81268:	52800015 	mov	w21, #0x0                   	// #0
   8126c:	a90363f7 	stp	x23, x24, [sp, #48]
   81270:	f0000157 	adrp	x23, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81274:	912642f7 	add	x23, x23, #0x990
   81278:	f0000158 	adrp	x24, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8127c:	91266318 	add	x24, x24, #0x998
   81280:	912f0040 	add	x0, x2, #0xbc0
   81284:	14000004 	b	81294 <CKernel::splitCommandLine(char const*)+0xd4>
   81288:	38c01683 	ldrsb	w3, [x20], #1
   8128c:	7100287f 	cmp	w3, #0xa
   81290:	54000380 	b.eq	81300 <CKernel::splitCommandLine(char const*)+0x140>  // b.none
   81294:	7100807f 	cmp	w3, #0x20
   81298:	54ffff81 	b.ne	81288 <CKernel::splitCommandLine(char const*)+0xc8>  // b.any
   8129c:	d2800022 	mov	x2, #0x1                   	// #1
   812a0:	aa1703e1 	mov	x1, x23
   812a4:	390123e3 	strb	w3, [sp, #72]
   812a8:	94007b16 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   812ac:	f944ea60 	ldr	x0, [x19, #2512]
   812b0:	d2800022 	mov	x2, #0x1                   	// #1
   812b4:	910123e1 	add	x1, sp, #0x48
   812b8:	52800035 	mov	w21, #0x1                   	// #1
   812bc:	912f0000 	add	x0, x0, #0xbc0
   812c0:	94007b10 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   812c4:	f944ea60 	ldr	x0, [x19, #2512]
   812c8:	d2800022 	mov	x2, #0x1                   	// #1
   812cc:	aa1703e1 	mov	x1, x23
   812d0:	912f0000 	add	x0, x0, #0xbc0
   812d4:	94007b0b 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   812d8:	f944ea60 	ldr	x0, [x19, #2512]
   812dc:	d2800302 	mov	x2, #0x18                  	// #24
   812e0:	aa1803e1 	mov	x1, x24
   812e4:	912f0000 	add	x0, x0, #0xbc0
   812e8:	94007b06 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   812ec:	38c01683 	ldrsb	w3, [x20], #1
   812f0:	f944ea60 	ldr	x0, [x19, #2512]
   812f4:	7100287f 	cmp	w3, #0xa
   812f8:	912f0000 	add	x0, x0, #0xbc0
   812fc:	54fffcc1 	b.ne	81294 <CKernel::splitCommandLine(char const*)+0xd4>  // b.any
   81300:	710006bf 	cmp	w21, #0x1
   81304:	54000300 	b.eq	81364 <CKernel::splitCommandLine(char const*)+0x1a4>  // b.none
   81308:	a94363f7 	ldp	x23, x24, [sp, #48]
   8130c:	d28002e2 	mov	x2, #0x17                  	// #23
   81310:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81314:	91274021 	add	x1, x1, #0x9d0
   81318:	94007afa 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   8131c:	aa1603e0 	mov	x0, x22
   81320:	94008c9c 	bl	a4590 <strlen>
   81324:	7100001f 	cmp	w0, #0x0
   81328:	2a0003f5 	mov	w21, w0
   8132c:	54000aad 	b.le	81480 <CKernel::splitCommandLine(char const*)+0x2c0>
   81330:	d2800001 	mov	x1, #0x0                   	// #0
   81334:	91134262 	add	x2, x19, #0x4d0
   81338:	38e16ac0 	ldrsb	w0, [x22, x1]
   8133c:	38226820 	strb	w0, [x1, x2]
   81340:	91000421 	add	x1, x1, #0x1
   81344:	6b0102bf 	cmp	w21, w1
   81348:	54ffff8c 	b.gt	81338 <CKernel::splitCommandLine(char const*)+0x178>
   8134c:	91134273 	add	x19, x19, #0x4d0
   81350:	3835ca7f 	strb	wzr, [x19, w21, sxtw]
   81354:	a94153f3 	ldp	x19, x20, [sp, #16]
   81358:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8135c:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   81360:	d65f03c0 	ret
   81364:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81368:	9126e021 	add	x1, x1, #0x9b8
   8136c:	d28002c2 	mov	x2, #0x16                  	// #22
   81370:	94007ae4 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81374:	39c002c1 	ldrsb	w1, [x22]
   81378:	7100803f 	cmp	w1, #0x20
   8137c:	54000860 	b.eq	81488 <CKernel::splitCommandLine(char const*)+0x2c8>  // b.none
   81380:	d2800020 	mov	x0, #0x1                   	// #1
   81384:	d10006c5 	sub	x5, x22, #0x1
   81388:	51000402 	sub	w2, w0, #0x1
   8138c:	2a0003e4 	mov	w4, w0
   81390:	91000400 	add	x0, x0, #0x1
   81394:	38e068a3 	ldrsb	w3, [x5, x0]
   81398:	7100807f 	cmp	w3, #0x20
   8139c:	54ffff61 	b.ne	81388 <CKernel::splitCommandLine(char const*)+0x1c8>  // b.any
   813a0:	93407c42 	sxtw	x2, w2
   813a4:	d2800000 	mov	x0, #0x0                   	// #0
   813a8:	91134263 	add	x3, x19, #0x4d0
   813ac:	14000002 	b	813b4 <CKernel::splitCommandLine(char const*)+0x1f4>
   813b0:	38e16ac1 	ldrsb	w1, [x22, x1]
   813b4:	eb00005f 	cmp	x2, x0
   813b8:	38236801 	strb	w1, [x0, x3]
   813bc:	91000401 	add	x1, x0, #0x1
   813c0:	aa0103e0 	mov	x0, x1
   813c4:	54ffff61 	b.ne	813b0 <CKernel::splitCommandLine(char const*)+0x1f0>  // b.any
   813c8:	11000495 	add	w21, w4, #0x1
   813cc:	f944ea74 	ldr	x20, [x19, #2512]
   813d0:	91134277 	add	x23, x19, #0x4d0
   813d4:	aa1703e0 	mov	x0, x23
   813d8:	3824caff 	strb	wzr, [x23, w4, sxtw]
   813dc:	94008c6d 	bl	a4590 <strlen>
   813e0:	aa0003e2 	mov	x2, x0
   813e4:	aa1703e1 	mov	x1, x23
   813e8:	912f0294 	add	x20, x20, #0xbc0
   813ec:	aa1403e0 	mov	x0, x20
   813f0:	94007ac4 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   813f4:	aa1603e0 	mov	x0, x22
   813f8:	94008c66 	bl	a4590 <strlen>
   813fc:	6b15001f 	cmp	w0, w21
   81400:	2a0003e4 	mov	w4, w0
   81404:	5400016d 	b.le	81430 <CKernel::splitCommandLine(char const*)+0x270>
   81408:	93407ea1 	sxtw	x1, w21
   8140c:	91234263 	add	x3, x19, #0x8d0
   81410:	cb010063 	sub	x3, x3, x1
   81414:	d503201f 	nop
   81418:	38e16ac2 	ldrsb	w2, [x22, x1]
   8141c:	38216862 	strb	w2, [x3, x1]
   81420:	91000421 	add	x1, x1, #0x1
   81424:	6b01009f 	cmp	w4, w1
   81428:	54ffff8c 	b.gt	81418 <CKernel::splitCommandLine(char const*)+0x258>
   8142c:	2a0003f5 	mov	w21, w0
   81430:	f944ea74 	ldr	x20, [x19, #2512]
   81434:	91234276 	add	x22, x19, #0x8d0
   81438:	91134273 	add	x19, x19, #0x4d0
   8143c:	aa1603e0 	mov	x0, x22
   81440:	3835cadf 	strb	wzr, [x22, w21, sxtw]
   81444:	94008c53 	bl	a4590 <strlen>
   81448:	aa0003e2 	mov	x2, x0
   8144c:	aa1603e1 	mov	x1, x22
   81450:	912f0294 	add	x20, x20, #0xbc0
   81454:	aa1403e0 	mov	x0, x20
   81458:	94007aaa 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   8145c:	a94363f7 	ldp	x23, x24, [sp, #48]
   81460:	3835ca7f 	strb	wzr, [x19, w21, sxtw]
   81464:	a94153f3 	ldp	x19, x20, [sp, #16]
   81468:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8146c:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   81470:	d65f03c0 	ret
   81474:	f944ea61 	ldr	x1, [x19, #2512]
   81478:	912f0020 	add	x0, x1, #0xbc0
   8147c:	17ffffa4 	b	8130c <CKernel::splitCommandLine(char const*)+0x14c>
   81480:	52800015 	mov	w21, #0x0                   	// #0
   81484:	17ffffb2 	b	8134c <CKernel::splitCommandLine(char const*)+0x18c>
   81488:	52800004 	mov	w4, #0x0                   	// #0
   8148c:	17ffffd0 	b	813cc <CKernel::splitCommandLine(char const*)+0x20c>

0000000000081490 <CKernel::CommandMatch(char const*)>:
   81490:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81494:	910003fd 	mov	x29, sp
   81498:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8149c:	a90153f3 	stp	x19, x20, [sp, #16]
   814a0:	aa0003f3 	mov	x19, x0
   814a4:	9127a020 	add	x0, x1, #0x9e8
   814a8:	aa1303e1 	mov	x1, x19
   814ac:	94008c45 	bl	a45c0 <strcmp>
   814b0:	350003c0 	cbnz	w0, 81528 <CKernel::CommandMatch(char const*)+0x98>
   814b4:	900001b3 	adrp	x19, b5000 <font_data+0x1340>
   814b8:	912a2273 	add	x19, x19, #0xa88
   814bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   814c0:	91046274 	add	x20, x19, #0x118
   814c4:	91006261 	add	x1, x19, #0x18
   814c8:	aa1403e0 	mov	x0, x20
   814cc:	94008cd9 	bl	a4830 <strcat>
   814d0:	91086261 	add	x1, x19, #0x218
   814d4:	aa1403e0 	mov	x0, x20
   814d8:	b00001b3 	adrp	x19, b6000 <s_OldInfo+0x68>
   814dc:	91118273 	add	x19, x19, #0x460
   814e0:	94008cd4 	bl	a4830 <strcat>
   814e4:	f944ea75 	ldr	x21, [x19, #2512]
   814e8:	aa1403e0 	mov	x0, x20
   814ec:	912f02b5 	add	x21, x21, #0xbc0
   814f0:	94008c28 	bl	a4590 <strlen>
   814f4:	aa0003e2 	mov	x2, x0
   814f8:	aa1403e1 	mov	x1, x20
   814fc:	aa1503e0 	mov	x0, x21
   81500:	94007a80 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81504:	f944ea60 	ldr	x0, [x19, #2512]
   81508:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8150c:	d2800022 	mov	x2, #0x1                   	// #1
   81510:	91258021 	add	x1, x1, #0x960
   81514:	a94153f3 	ldp	x19, x20, [sp, #16]
   81518:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8151c:	912f0000 	add	x0, x0, #0xbc0
   81520:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81524:	14007a77 	b	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81528:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8152c:	aa1303e1 	mov	x1, x19
   81530:	9127c000 	add	x0, x0, #0x9f0
   81534:	94008c23 	bl	a45c0 <strcmp>
   81538:	35000100 	cbnz	w0, 81558 <CKernel::CommandMatch(char const*)+0xc8>
   8153c:	b00001b3 	adrp	x19, b6000 <s_OldInfo+0x68>
   81540:	91118273 	add	x19, x19, #0x460
   81544:	a9025bf5 	stp	x21, x22, [sp, #32]
   81548:	900001b4 	adrp	x20, b5000 <font_data+0x1340>
   8154c:	912a2294 	add	x20, x20, #0xa88
   81550:	f944ea75 	ldr	x21, [x19, #2512]
   81554:	17ffffe5 	b	814e8 <CKernel::CommandMatch(char const*)+0x58>
   81558:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8155c:	aa1303e1 	mov	x1, x19
   81560:	91280000 	add	x0, x0, #0xa00
   81564:	94008c17 	bl	a45c0 <strcmp>
   81568:	340001c0 	cbz	w0, 815a0 <CKernel::CommandMatch(char const*)+0x110>
   8156c:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81570:	aa1303e1 	mov	x1, x19
   81574:	91286000 	add	x0, x0, #0xa18
   81578:	94008c12 	bl	a45c0 <strcmp>
   8157c:	34fffe00 	cbz	w0, 8153c <CKernel::CommandMatch(char const*)+0xac>
   81580:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81584:	aa1303e1 	mov	x1, x19
   81588:	91288000 	add	x0, x0, #0xa20
   8158c:	94008c0d 	bl	a45c0 <strcmp>
   81590:	34fffd60 	cbz	w0, 8153c <CKernel::CommandMatch(char const*)+0xac>
   81594:	a94153f3 	ldp	x19, x20, [sp, #16]
   81598:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8159c:	d65f03c0 	ret
   815a0:	900001b3 	adrp	x19, b5000 <font_data+0x1340>
   815a4:	912a2273 	add	x19, x19, #0xa88
   815a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   815ac:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   815b0:	aa1303e0 	mov	x0, x19
   815b4:	91282021 	add	x1, x1, #0xa08
   815b8:	b00001b4 	adrp	x20, b6000 <s_OldInfo+0x68>
   815bc:	91118294 	add	x20, x20, #0x460
   815c0:	94008c84 	bl	a47d0 <strcpy>
   815c4:	91234296 	add	x22, x20, #0x8d0
   815c8:	aa1303e0 	mov	x0, x19
   815cc:	aa1603e1 	mov	x1, x22
   815d0:	94008c98 	bl	a4830 <strcat>
   815d4:	aa1303e0 	mov	x0, x19
   815d8:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   815dc:	91284021 	add	x1, x1, #0xa10
   815e0:	94008c94 	bl	a4830 <strcat>
   815e4:	f944ea95 	ldr	x21, [x20, #2512]
   815e8:	aa1603e0 	mov	x0, x22
   815ec:	94008be9 	bl	a4590 <strlen>
   815f0:	aa0003e2 	mov	x2, x0
   815f4:	aa1603e1 	mov	x1, x22
   815f8:	912f02b5 	add	x21, x21, #0xbc0
   815fc:	aa1503e0 	mov	x0, x21
   81600:	94007a40 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81604:	f944ea95 	ldr	x21, [x20, #2512]
   81608:	aa1303e0 	mov	x0, x19
   8160c:	94008be1 	bl	a4590 <strlen>
   81610:	aa0003e2 	mov	x2, x0
   81614:	aa1303e1 	mov	x1, x19
   81618:	912f02b5 	add	x21, x21, #0xbc0
   8161c:	aa1503e0 	mov	x0, x21
   81620:	94007a38 	bl	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81624:	f944ea80 	ldr	x0, [x20, #2512]
   81628:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8162c:	d2800022 	mov	x2, #0x1                   	// #1
   81630:	91258021 	add	x1, x1, #0x960
   81634:	a94153f3 	ldp	x19, x20, [sp, #16]
   81638:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8163c:	912f0000 	add	x0, x0, #0xbc0
   81640:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81644:	14007a2f 	b	9ff00 <CScreenDevice::Write(void const*, unsigned long)>
   81648:	d503201f 	nop
   8164c:	d503201f 	nop

0000000000081650 <CKernel::getCurrentUserName()>:
   81650:	900001a0 	adrp	x0, b5000 <font_data+0x1340>
   81654:	912a2000 	add	x0, x0, #0xa88
   81658:	91006000 	add	x0, x0, #0x18
   8165c:	d65f03c0 	ret

0000000000081660 <CKernel::CommandParameter(char const*)>:
   81660:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81664:	910003fd 	mov	x29, sp
   81668:	f9000bf3 	str	x19, [sp, #16]
   8166c:	aa0003f3 	mov	x19, x0
   81670:	94008bc8 	bl	a4590 <strlen>
   81674:	39c00261 	ldrsb	w1, [x19]
   81678:	2a0003e5 	mov	w5, w0
   8167c:	7100803f 	cmp	w1, #0x20
   81680:	540003c0 	b.eq	816f8 <CKernel::CommandParameter(char const*)+0x98>  // b.none
   81684:	d2800021 	mov	x1, #0x1                   	// #1
   81688:	d1000666 	sub	x6, x19, #0x1
   8168c:	d503201f 	nop
   81690:	2a0103e3 	mov	w3, w1
   81694:	91000421 	add	x1, x1, #0x1
   81698:	38e168c4 	ldrsb	w4, [x6, x1]
   8169c:	7100809f 	cmp	w4, #0x20
   816a0:	54ffff81 	b.ne	81690 <CKernel::CommandParameter(char const*)+0x30>  // b.any
   816a4:	11000463 	add	w3, w3, #0x1
   816a8:	7100001f 	cmp	w0, #0x0
   816ac:	5400020d 	b.le	816ec <CKernel::CommandParameter(char const*)+0x8c>
   816b0:	b00001a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   816b4:	91118021 	add	x1, x1, #0x460
   816b8:	8b23c262 	add	x2, x19, w3, sxtw
   816bc:	d2800000 	mov	x0, #0x0                   	// #0
   816c0:	91234023 	add	x3, x1, #0x8d0
   816c4:	14000003 	b	816d0 <CKernel::CommandParameter(char const*)+0x70>
   816c8:	6b0000bf 	cmp	w5, w0
   816cc:	5400010d 	b.le	816ec <CKernel::CommandParameter(char const*)+0x8c>
   816d0:	38e06841 	ldrsb	w1, [x2, x0]
   816d4:	2a0003e4 	mov	w4, w0
   816d8:	7100283f 	cmp	w1, #0xa
   816dc:	38236801 	strb	w1, [x0, x3]
   816e0:	91000400 	add	x0, x0, #0x1
   816e4:	54ffff21 	b.ne	816c8 <CKernel::CommandParameter(char const*)+0x68>  // b.any
   816e8:	3824c87f 	strb	wzr, [x3, w4, sxtw]
   816ec:	f9400bf3 	ldr	x19, [sp, #16]
   816f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   816f4:	d65f03c0 	ret
   816f8:	52800023 	mov	w3, #0x1                   	// #1
   816fc:	17ffffeb 	b	816a8 <CKernel::CommandParameter(char const*)+0x48>

0000000000081700 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   81700:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81704:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81708:	912aa021 	add	x1, x1, #0xaa8
   8170c:	910003fd 	mov	x29, sp
   81710:	f9000bf3 	str	x19, [sp, #16]
   81714:	aa0003f3 	mov	x19, x0
   81718:	f9000001 	str	x1, [x0]
   8171c:	f9023c1f 	str	xzr, [x0, #1144]
   81720:	94006ea8 	bl	9d1c0 <CDeviceNameService::Get()>
   81724:	b9448e62 	ldr	w2, [x19, #1164]
   81728:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8172c:	52800003 	mov	w3, #0x0                   	// #0
   81730:	912c0021 	add	x1, x1, #0xb00
   81734:	94006ecf 	bl	9d270 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   81738:	91012260 	add	x0, x19, #0x48
   8173c:	94003fa9 	bl	915e0 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   81740:	aa1303e0 	mov	x0, x19
   81744:	f9400bf3 	ldr	x19, [sp, #16]
   81748:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8174c:	14002419 	b	8a7b0 <CUSBHIDDevice::~CUSBHIDDevice()>

0000000000081750 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   81750:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81754:	910003fd 	mov	x29, sp
   81758:	f9000bf3 	str	x19, [sp, #16]
   8175c:	aa0003f3 	mov	x19, x0
   81760:	97ffffe8 	bl	81700 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   81764:	aa1303e0 	mov	x0, x19
   81768:	d2809201 	mov	x1, #0x490                 	// #1168
   8176c:	f9400bf3 	ldr	x19, [sp, #16]
   81770:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81774:	14008fe7 	b	a5710 <operator delete(void*, unsigned long)>
   81778:	d503201f 	nop
   8177c:	d503201f 	nop

0000000000081780 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   81780:	f100003f 	cmp	x1, #0x0
   81784:	7a481840 	ccmp	w2, #0x8, #0x0, ne  // ne = any
   81788:	54000b61 	b.ne	818f4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x174>  // b.any
   8178c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   81790:	910003fd 	mov	x29, sp
   81794:	a9025bf5 	stp	x21, x22, [sp, #32]
   81798:	aa0003f5 	mov	x21, x0
   8179c:	a90153f3 	stp	x19, x20, [sp, #16]
   817a0:	aa0103f3 	mov	x19, x1
   817a4:	a90363f7 	stp	x23, x24, [sp, #48]
   817a8:	aa0103f8 	mov	x24, x1
   817ac:	f9423ea2 	ldr	x2, [x21, #1144]
   817b0:	38402660 	ldrb	w0, [x19], #2
   817b4:	b4000102 	cbz	x2, 817d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
   817b8:	aa1303e1 	mov	x1, x19
   817bc:	aa0203f0 	mov	x16, x2
   817c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   817c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   817c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   817cc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   817d0:	d61f0200 	br	x16
   817d4:	52800014 	mov	w20, #0x0                   	// #0
   817d8:	52800036 	mov	w22, #0x1                   	// #1
   817dc:	a9046bf9 	stp	x25, x26, [sp, #64]
   817e0:	910122b7 	add	x23, x21, #0x48
   817e4:	14000006 	b	817fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x7c>
   817e8:	35000882 	cbnz	w2, 818f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x178>
   817ec:	11000694 	add	w20, w20, #0x1
   817f0:	7100229f 	cmp	w20, #0x8
   817f4:	540001e0 	b.eq	81830 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xb0>  // b.none
   817f8:	39400300 	ldrb	w0, [x24]
   817fc:	1ad422c3 	lsl	w3, w22, w20
   81800:	395202a2 	ldrb	w2, [x21, #1152]
   81804:	6a03001f 	tst	w0, w3
   81808:	0a030042 	and	w2, w2, w3
   8180c:	54fffee0 	b.eq	817e8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>  // b.none
   81810:	35fffee2 	cbnz	w2, 817ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   81814:	51020281 	sub	w1, w20, #0x80
   81818:	aa1703e0 	mov	x0, x23
   8181c:	11000694 	add	w20, w20, #0x1
   81820:	94003fd8 	bl	91780 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   81824:	7100229f 	cmp	w20, #0x8
   81828:	54fffe81 	b.ne	817f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>  // b.any
   8182c:	d503201f 	nop
   81830:	91120ab9 	add	x25, x21, #0x482
   81834:	911222b7 	add	x23, x21, #0x488
   81838:	aa1903f4 	mov	x20, x25
   8183c:	91002316 	add	x22, x24, #0x8
   81840:	910122ba 	add	x26, x21, #0x48
   81844:	14000004 	b	81854 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   81848:	91000694 	add	x20, x20, #0x1
   8184c:	eb1402ff 	cmp	x23, x20
   81850:	540001c0 	b.eq	81888 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>  // b.none
   81854:	39400281 	ldrb	w1, [x20]
   81858:	aa1303e2 	mov	x2, x19
   8185c:	34ffff61 	cbz	w1, 81848 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
   81860:	38401443 	ldrb	w3, [x2], #1
   81864:	6b01007f 	cmp	w3, w1
   81868:	54ffff00 	b.eq	81848 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>  // b.none
   8186c:	eb0202df 	cmp	x22, x2
   81870:	54ffff81 	b.ne	81860 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>  // b.any
   81874:	aa1a03e0 	mov	x0, x26
   81878:	91000694 	add	x20, x20, #0x1
   8187c:	94003fd5 	bl	917d0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   81880:	eb1402ff 	cmp	x23, x20
   81884:	54fffe81 	b.ne	81854 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>  // b.any
   81888:	910122b4 	add	x20, x21, #0x48
   8188c:	14000004 	b	8189c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x11c>
   81890:	91000673 	add	x19, x19, #0x1
   81894:	eb1302df 	cmp	x22, x19
   81898:	540001c0 	b.eq	818d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x150>  // b.none
   8189c:	39400261 	ldrb	w1, [x19]
   818a0:	aa1903e2 	mov	x2, x25
   818a4:	34ffff61 	cbz	w1, 81890 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   818a8:	38401443 	ldrb	w3, [x2], #1
   818ac:	6b01007f 	cmp	w3, w1
   818b0:	54ffff00 	b.eq	81890 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>  // b.none
   818b4:	eb0202ff 	cmp	x23, x2
   818b8:	54ffff81 	b.ne	818a8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>  // b.any
   818bc:	aa1403e0 	mov	x0, x20
   818c0:	91000673 	add	x19, x19, #0x1
   818c4:	94003faf 	bl	91780 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   818c8:	eb1302df 	cmp	x22, x19
   818cc:	54fffe81 	b.ne	8189c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x11c>  // b.any
   818d0:	aa1803e1 	mov	x1, x24
   818d4:	911202a0 	add	x0, x21, #0x480
   818d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   818dc:	d2800102 	mov	x2, #0x8                   	// #8
   818e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   818e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   818e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   818ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   818f0:	14008d02 	b	a4cf8 <memcpy>
   818f4:	d65f03c0 	ret
   818f8:	51020281 	sub	w1, w20, #0x80
   818fc:	aa1703e0 	mov	x0, x23
   81900:	94003fb4 	bl	917d0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   81904:	17ffffba 	b	817ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   81908:	d503201f 	nop
   8190c:	d503201f 	nop

0000000000081910 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   81910:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81914:	52800102 	mov	w2, #0x8                   	// #8
   81918:	910003fd 	mov	x29, sp
   8191c:	f9000bf3 	str	x19, [sp, #16]
   81920:	aa0003f3 	mov	x19, x0
   81924:	9400238b 	bl	8a750 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   81928:	aa1303e0 	mov	x0, x19
   8192c:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81930:	912aa021 	add	x1, x1, #0xaa8
   81934:	f8048401 	str	x1, [x0], #72
   81938:	94003f22 	bl	915c0 <CKeyboardBehaviour::CKeyboardBehaviour()>
   8193c:	91120260 	add	x0, x19, #0x480
   81940:	d2800102 	mov	x2, #0x8                   	// #8
   81944:	f9023e7f 	str	xzr, [x19, #1144]
   81948:	52800001 	mov	w1, #0x0                   	// #0
   8194c:	3912227f 	strb	wzr, [x19, #1160]
   81950:	b9048e7f 	str	wzr, [x19, #1164]
   81954:	f9400bf3 	ldr	x19, [sp, #16]
   81958:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8195c:	14008acd 	b	a4490 <memset>

0000000000081960 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   81960:	91012000 	add	x0, x0, #0x48
   81964:	14003f27 	b	91600 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>
   81968:	d503201f 	nop
   8196c:	d503201f 	nop

0000000000081970 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   81970:	91012000 	add	x0, x0, #0x48
   81974:	14003f2f 	b	91630 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>
   81978:	d503201f 	nop
   8197c:	d503201f 	nop

0000000000081980 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   81980:	91012000 	add	x0, x0, #0x48
   81984:	14003f37 	b	91660 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>
   81988:	d503201f 	nop
   8198c:	d503201f 	nop

0000000000081990 <CUSBKeyboardDevice::GetLEDStatus() const>:
   81990:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81994:	91012000 	add	x0, x0, #0x48
   81998:	910003fd 	mov	x29, sp
   8199c:	94003f3d 	bl	91690 <CKeyboardBehaviour::GetLEDStatus() const>
   819a0:	12000800 	and	w0, w0, #0x7
   819a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   819a8:	d65f03c0 	ret
   819ac:	d503201f 	nop

00000000000819b0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   819b0:	b4000061 	cbz	x1, 819bc <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0xc>
   819b4:	f9023c01 	str	x1, [x0, #1144]
   819b8:	d65f03c0 	ret
   819bc:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   819c0:	f0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   819c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   819c8:	9128c021 	add	x1, x1, #0xa30
   819cc:	910003fd 	mov	x29, sp
   819d0:	91290000 	add	x0, x0, #0xa40
   819d4:	52800fa2 	mov	w2, #0x7d                  	// #125
   819d8:	94006b2a 	bl	9c680 <assertion_failed>
   819dc:	d503201f 	nop

00000000000819e0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   819e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   819e4:	910003fd 	mov	x29, sp
   819e8:	a90153f3 	stp	x19, x20, [sp, #16]
   819ec:	aa0003f3 	mov	x19, x0
   819f0:	3900a3e1 	strb	w1, [sp, #40]
   819f4:	9400191f 	bl	87e70 <CUSBFunction::GetHost() const>
   819f8:	aa0003f4 	mov	x20, x0
   819fc:	aa1303e0 	mov	x0, x19
   81a00:	94001910 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   81a04:	aa0003e1 	mov	x1, x0
   81a08:	aa1303e0 	mov	x0, x19
   81a0c:	aa0103f3 	mov	x19, x1
   81a10:	9400197c 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   81a14:	12001c05 	and	w5, w0, #0xff
   81a18:	aa1303e1 	mov	x1, x19
   81a1c:	9100a3e6 	add	x6, sp, #0x28
   81a20:	aa1403e0 	mov	x0, x20
   81a24:	52800027 	mov	w7, #0x1                   	// #1
   81a28:	52804004 	mov	w4, #0x200                 	// #512
   81a2c:	52800123 	mov	w3, #0x9                   	// #9
   81a30:	52800422 	mov	w2, #0x21                  	// #33
   81a34:	9400255b 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   81a38:	2a2003e0 	mvn	w0, w0
   81a3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81a40:	531f7c00 	lsr	w0, w0, #31
   81a44:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81a48:	d65f03c0 	ret
   81a4c:	d503201f 	nop

0000000000081a50 <CUSBKeyboardDevice::Configure()>:
   81a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81a54:	52800001 	mov	w1, #0x0                   	// #0
   81a58:	910003fd 	mov	x29, sp
   81a5c:	f9000bf3 	str	x19, [sp, #16]
   81a60:	aa0003f3 	mov	x19, x0
   81a64:	9400237f 	bl	8a860 <CUSBHIDDevice::Configure(unsigned int)>
   81a68:	72001c1f 	tst	w0, #0xff
   81a6c:	54000280 	b.eq	81abc <CUSBKeyboardDevice::Configure()+0x6c>  // b.none
   81a70:	39522261 	ldrb	w1, [x19, #1160]
   81a74:	aa1303e0 	mov	x0, x19
   81a78:	97ffffda 	bl	819e0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   81a7c:	900001a0 	adrp	x0, b5000 <font_data+0x1340>
   81a80:	b94da001 	ldr	w1, [x0, #3488]
   81a84:	11000422 	add	w2, w1, #0x1
   81a88:	b9048e61 	str	w1, [x19, #1164]
   81a8c:	b90da002 	str	w2, [x0, #3488]
   81a90:	94006dcc 	bl	9d1c0 <CDeviceNameService::Get()>
   81a94:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81a98:	b9448e62 	ldr	w2, [x19, #1164]
   81a9c:	aa1303e3 	mov	x3, x19
   81aa0:	52800004 	mov	w4, #0x0                   	// #0
   81aa4:	912c0021 	add	x1, x1, #0xb00
   81aa8:	94006dd2 	bl	9d1f0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   81aac:	aa1303e0 	mov	x0, x19
   81ab0:	f9400bf3 	ldr	x19, [sp, #16]
   81ab4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ab8:	1400249e 	b	8ad30 <CUSBHIDDevice::StartRequest()>
   81abc:	94007485 	bl	9ecd0 <CLogger::Get()>
   81ac0:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81ac4:	912c0021 	add	x1, x1, #0xb00
   81ac8:	f0000143 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81acc:	91002021 	add	x1, x1, #0x8
   81ad0:	91298063 	add	x3, x3, #0xa60
   81ad4:	52800022 	mov	w2, #0x1                   	// #1
   81ad8:	940073ba 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81adc:	52800000 	mov	w0, #0x0                   	// #0
   81ae0:	f9400bf3 	ldr	x19, [sp, #16]
   81ae4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ae8:	d65f03c0 	ret
   81aec:	d503201f 	nop

0000000000081af0 <CUSBKeyboardDevice::UpdateLEDs()>:
   81af0:	f9423c01 	ldr	x1, [x0, #1144]
   81af4:	b4000041 	cbz	x1, 81afc <CUSBKeyboardDevice::UpdateLEDs()+0xc>
   81af8:	d65f03c0 	ret
   81afc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81b00:	910003fd 	mov	x29, sp
   81b04:	f9000bf3 	str	x19, [sp, #16]
   81b08:	aa0003f3 	mov	x19, x0
   81b0c:	97ffffa1 	bl	81990 <CUSBKeyboardDevice::GetLEDStatus() const>
   81b10:	39522262 	ldrb	w2, [x19, #1160]
   81b14:	2a0003e1 	mov	w1, w0
   81b18:	6b20005f 	cmp	w2, w0, uxtb
   81b1c:	540000c0 	b.eq	81b34 <CUSBKeyboardDevice::UpdateLEDs()+0x44>  // b.none
   81b20:	aa1303e0 	mov	x0, x19
   81b24:	39122261 	strb	w1, [x19, #1160]
   81b28:	97ffffae 	bl	819e0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   81b2c:	72001c1f 	tst	w0, #0xff
   81b30:	54000080 	b.eq	81b40 <CUSBKeyboardDevice::UpdateLEDs()+0x50>  // b.none
   81b34:	f9400bf3 	ldr	x19, [sp, #16]
   81b38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81b3c:	d65f03c0 	ret
   81b40:	94007464 	bl	9ecd0 <CLogger::Get()>
   81b44:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81b48:	912c0021 	add	x1, x1, #0xb00
   81b4c:	f9400bf3 	ldr	x19, [sp, #16]
   81b50:	f0000143 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81b54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81b58:	91002021 	add	x1, x1, #0x8
   81b5c:	912a0063 	add	x3, x3, #0xa80
   81b60:	52800022 	mov	w2, #0x1                   	// #1
   81b64:	14007397 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81b68:	d503201f 	nop
   81b6c:	d503201f 	nop

0000000000081b70 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   81b70:	12001c21 	and	w1, w1, #0xff
   81b74:	8b224002 	add	x2, x0, w2, uxtw
   81b78:	14000004 	b	81b88 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x18>
   81b7c:	38401403 	ldrb	w3, [x0], #1
   81b80:	6b01007f 	cmp	w3, w1
   81b84:	540000a0 	b.eq	81b98 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x28>  // b.none
   81b88:	eb02001f 	cmp	x0, x2
   81b8c:	54ffff81 	b.ne	81b7c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0xc>  // b.any
   81b90:	52800000 	mov	w0, #0x0                   	// #0
   81b94:	d65f03c0 	ret
   81b98:	52800020 	mov	w0, #0x1                   	// #1
   81b9c:	d65f03c0 	ret

0000000000081ba0 <CUSBFunction::GetHubInfo() const>:
   81ba0:	d2800000 	mov	x0, #0x0                   	// #0
   81ba4:	d65f03c0 	ret
	...

0000000000081bb0 <CXHCIDevice::CXHCIDevice(CInterruptSystem*, CTimer*)>:
   81bb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81bb4:	910003fd 	mov	x29, sp
   81bb8:	a90153f3 	stp	x19, x20, [sp, #16]
   81bbc:	aa0003f3 	mov	x19, x0
   81bc0:	aa0103f4 	mov	x20, x1
   81bc4:	940024eb 	bl	8af70 <CUSBHostController::CUSBHostController()>
   81bc8:	aa1303e0 	mov	x0, x19
   81bcc:	f0000142 	adrp	x2, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81bd0:	912c8042 	add	x2, x2, #0xb20
   81bd4:	aa1403e1 	mov	x1, x20
   81bd8:	f8008402 	str	x2, [x0], #8
   81bdc:	94009455 	bl	a6d30 <CBcmPCIeHostBridge::CBcmPCIeHostBridge(CInterruptSystem*)>
   81be0:	52800200 	mov	w0, #0x10                  	// #16
   81be4:	9400919f 	bl	a6260 <CMemorySystem::GetCoherentPage(unsigned int)>
   81be8:	aa0003f4 	mov	x20, x0
   81bec:	528007e0 	mov	w0, #0x3f                  	// #63
   81bf0:	9400919c 	bl	a6260 <CMemorySystem::GetCoherentPage(unsigned int)>
   81bf4:	d29fffe2 	mov	x2, #0xffff                	// #65535
   81bf8:	aa1403e1 	mov	x1, x20
   81bfc:	8b020002 	add	x2, x0, x2
   81c00:	91026260 	add	x0, x19, #0x98
   81c04:	94000d0f 	bl	85040 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)>
   81c08:	a90b7e7f 	stp	xzr, xzr, [x19, #176]
   81c0c:	a90c7e7f 	stp	xzr, xzr, [x19, #192]
   81c10:	a90d7e7f 	stp	xzr, xzr, [x19, #208]
   81c14:	f900727f 	str	xzr, [x19, #224]
   81c18:	3903a27f 	strb	wzr, [x19, #232]
   81c1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81c20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81c24:	d65f03c0 	ret
   81c28:	d503201f 	nop
   81c2c:	d503201f 	nop

0000000000081c30 <CXHCIDevice::~CXHCIDevice()>:
   81c30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81c34:	910003fd 	mov	x29, sp
   81c38:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81c3c:	912c8021 	add	x1, x1, #0xb20
   81c40:	a90153f3 	stp	x19, x20, [sp, #16]
   81c44:	aa0003f3 	mov	x19, x0
   81c48:	52800020 	mov	w0, #0x1                   	// #1
   81c4c:	f9000261 	str	x1, [x19]
   81c50:	3903a260 	strb	w0, [x19, #232]
   81c54:	f9405a74 	ldr	x20, [x19, #176]
   81c58:	b4000154 	cbz	x20, 81c80 <CXHCIDevice::~CXHCIDevice()+0x50>
   81c5c:	52800001 	mov	w1, #0x0                   	// #0
   81c60:	aa1403e0 	mov	x0, x20
   81c64:	940007b7 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   81c68:	121f7802 	and	w2, w0, #0xfffffffe
   81c6c:	52800001 	mov	w1, #0x0                   	// #0
   81c70:	aa1403e0 	mov	x0, x20
   81c74:	940007e7 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   81c78:	aa1303e0 	mov	x0, x19
   81c7c:	94000205 	bl	82490 <CXHCIDevice::HWReset()>
   81c80:	a90d7e7f 	stp	xzr, xzr, [x19, #208]
   81c84:	f9406674 	ldr	x20, [x19, #200]
   81c88:	b40000d4 	cbz	x20, 81ca0 <CXHCIDevice::~CXHCIDevice()+0x70>
   81c8c:	aa1403e0 	mov	x0, x20
   81c90:	94003028 	bl	8dd30 <CXHCICommandManager::~CXHCICommandManager()>
   81c94:	aa1403e0 	mov	x0, x20
   81c98:	d2800a01 	mov	x1, #0x50                  	// #80
   81c9c:	94008e9d 	bl	a5710 <operator delete(void*, unsigned long)>
   81ca0:	f900667f 	str	xzr, [x19, #200]
   81ca4:	f9406274 	ldr	x20, [x19, #192]
   81ca8:	b40000d4 	cbz	x20, 81cc0 <CXHCIDevice::~CXHCIDevice()+0x90>
   81cac:	aa1403e0 	mov	x0, x20
   81cb0:	940006c0 	bl	837b0 <CXHCIEventManager::~CXHCIEventManager()>
   81cb4:	aa1403e0 	mov	x0, x20
   81cb8:	d2800801 	mov	x1, #0x40                  	// #64
   81cbc:	94008e95 	bl	a5710 <operator delete(void*, unsigned long)>
   81cc0:	f900627f 	str	xzr, [x19, #192]
   81cc4:	f9405e74 	ldr	x20, [x19, #184]
   81cc8:	b40000d4 	cbz	x20, 81ce0 <CXHCIDevice::~CXHCIDevice()+0xb0>
   81ccc:	aa1403e0 	mov	x0, x20
   81cd0:	94000de4 	bl	85460 <CXHCISlotManager::~CXHCISlotManager()>
   81cd4:	aa1403e0 	mov	x0, x20
   81cd8:	d2802301 	mov	x1, #0x118                 	// #280
   81cdc:	94008e8d 	bl	a5710 <operator delete(void*, unsigned long)>
   81ce0:	f9005e7f 	str	xzr, [x19, #184]
   81ce4:	f9405a74 	ldr	x20, [x19, #176]
   81ce8:	b40000d4 	cbz	x20, 81d00 <CXHCIDevice::~CXHCIDevice()+0xd0>
   81cec:	aa1403e0 	mov	x0, x20
   81cf0:	94000778 	bl	83ad0 <CXHCIMMIOSpace::~CXHCIMMIOSpace()>
   81cf4:	aa1403e0 	mov	x0, x20
   81cf8:	d2800801 	mov	x1, #0x40                  	// #64
   81cfc:	94008e85 	bl	a5710 <operator delete(void*, unsigned long)>
   81d00:	91026260 	add	x0, x19, #0x98
   81d04:	f9005a7f 	str	xzr, [x19, #176]
   81d08:	94000ce6 	bl	850a0 <CXHCISharedMemAllocator::~CXHCISharedMemAllocator()>
   81d0c:	91002260 	add	x0, x19, #0x8
   81d10:	9400943c 	bl	a6e00 <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()>
   81d14:	aa1303e0 	mov	x0, x19
   81d18:	a94153f3 	ldp	x19, x20, [sp, #16]
   81d1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81d20:	14002498 	b	8af80 <CUSBHostController::~CUSBHostController()>
   81d24:	d503201f 	nop
   81d28:	d503201f 	nop
   81d2c:	d503201f 	nop

0000000000081d30 <CXHCIDevice::~CXHCIDevice()>:
   81d30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81d34:	910003fd 	mov	x29, sp
   81d38:	f9000bf3 	str	x19, [sp, #16]
   81d3c:	aa0003f3 	mov	x19, x0
   81d40:	97ffffbc 	bl	81c30 <CXHCIDevice::~CXHCIDevice()>
   81d44:	aa1303e0 	mov	x0, x19
   81d48:	d2801e01 	mov	x1, #0xf0                  	// #240
   81d4c:	f9400bf3 	ldr	x19, [sp, #16]
   81d50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81d54:	14008e6f 	b	a5710 <operator delete(void*, unsigned long)>
   81d58:	d503201f 	nop
   81d5c:	d503201f 	nop

0000000000081d60 <CXHCIDevice::Initialize()>:
   81d60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81d64:	910003fd 	mov	x29, sp
   81d68:	52800021 	mov	w1, #0x1                   	// #1
   81d6c:	a90153f3 	stp	x19, x20, [sp, #16]
   81d70:	aa0003f4 	mov	x20, x0
   81d74:	52802000 	mov	w0, #0x100                 	// #256
   81d78:	a9025bf5 	stp	x21, x22, [sp, #32]
   81d7c:	91002295 	add	x21, x20, #0x8
   81d80:	94002c88 	bl	8cfa0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
   81d84:	aa1503e0 	mov	x0, x21
   81d88:	940095d6 	bl	a74e0 <CBcmPCIeHostBridge::Initialize()>
   81d8c:	72001c13 	ands	w19, w0, #0xff
   81d90:	54000c00 	b.eq	81f10 <CXHCIDevice::Initialize()+0x1b0>  // b.none
   81d94:	b0000001 	adrp	x1, 82000 <CXHCIDevice::Initialize()+0x2a0>
   81d98:	aa1403e2 	mov	x2, x20
   81d9c:	91114021 	add	x1, x1, #0x450
   81da0:	aa1503e0 	mov	x0, x21
   81da4:	9400973f 	bl	a7aa0 <CBcmPCIeHostBridge::ConnectMSI(void (*)(unsigned int, void*), void*)>
   81da8:	72001c13 	ands	w19, w0, #0xff
   81dac:	540009c0 	b.eq	81ee4 <CXHCIDevice::Initialize()+0x184>  // b.none
   81db0:	aa1503e0 	mov	x0, x21
   81db4:	52806601 	mov	w1, #0x330                 	// #816
   81db8:	72a00181 	movk	w1, #0xc, lsl #16
   81dbc:	52800003 	mov	w3, #0x0                   	// #0
   81dc0:	52800002 	mov	w2, #0x0                   	// #0
   81dc4:	940096b3 	bl	a7890 <CBcmPCIeHostBridge::EnableDevice(unsigned int, unsigned int, unsigned int)>
   81dc8:	72001c13 	ands	w19, w0, #0xff
   81dcc:	54000d20 	b.eq	81f70 <CXHCIDevice::Initialize()+0x210>  // b.none
   81dd0:	d2800040 	mov	x0, #0x2                   	// #2
   81dd4:	f2c000c0 	movk	x0, #0x6, lsl #32
   81dd8:	79400013 	ldrh	w19, [x0]
   81ddc:	12003e73 	and	w19, w19, #0xffff
   81de0:	7104027f 	cmp	w19, #0x100
   81de4:	54000ac1 	b.ne	81f3c <CXHCIDevice::Initialize()+0x1dc>  // b.any
   81de8:	d2800800 	mov	x0, #0x40                  	// #64
   81dec:	94008e25 	bl	a5680 <operator new(unsigned long)>
   81df0:	aa0003f3 	mov	x19, x0
   81df4:	d2c000c1 	mov	x1, #0x600000000           	// #25769803776
   81df8:	94000712 	bl	83a40 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)>
   81dfc:	aa1303e0 	mov	x0, x19
   81e00:	52800081 	mov	w1, #0x4                   	// #4
   81e04:	f9005a93 	str	x19, [x20, #176]
   81e08:	94000736 	bl	83ae0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   81e0c:	721b081f 	tst	w0, #0xe0
   81e10:	54001540 	b.eq	820b8 <CXHCIDevice::Initialize()+0x358>  // b.none
   81e14:	52800081 	mov	w1, #0x4                   	// #4
   81e18:	f9405a80 	ldr	x0, [x20, #176]
   81e1c:	94000731 	bl	83ae0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   81e20:	53187c15 	lsr	w21, w0, #24
   81e24:	710016bf 	cmp	w21, #0x5
   81e28:	54001548 	b.hi	820d0 <CXHCIDevice::Initialize()+0x370>  // b.pmore
   81e2c:	52800101 	mov	w1, #0x8                   	// #8
   81e30:	f9405a80 	ldr	x0, [x20, #176]
   81e34:	9400072b 	bl	83ae0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   81e38:	2a0003f6 	mov	w22, w0
   81e3c:	aa1403e0 	mov	x0, x20
   81e40:	94000194 	bl	82490 <CXHCIDevice::HWReset()>
   81e44:	72001c13 	ands	w19, w0, #0xff
   81e48:	540012a0 	b.eq	8209c <CXHCIDevice::Initialize()+0x33c>  // b.none
   81e4c:	52800101 	mov	w1, #0x8                   	// #8
   81e50:	f9405a80 	ldr	x0, [x20, #176]
   81e54:	9400073b 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   81e58:	36001480 	tbz	w0, #0, 820e8 <CXHCIDevice::Initialize()+0x388>
   81e5c:	d2802300 	mov	x0, #0x118                 	// #280
   81e60:	94008e08 	bl	a5680 <operator new(unsigned long)>
   81e64:	aa0003f3 	mov	x19, x0
   81e68:	aa1403e1 	mov	x1, x20
   81e6c:	94000d55 	bl	853c0 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)>
   81e70:	d2800800 	mov	x0, #0x40                  	// #64
   81e74:	f9005e93 	str	x19, [x20, #184]
   81e78:	94008e02 	bl	a5680 <operator new(unsigned long)>
   81e7c:	aa0003f3 	mov	x19, x0
   81e80:	aa1403e1 	mov	x1, x20
   81e84:	940005eb 	bl	83630 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)>
   81e88:	d2800a00 	mov	x0, #0x50                  	// #80
   81e8c:	f9006293 	str	x19, [x20, #192]
   81e90:	94008dfc 	bl	a5680 <operator new(unsigned long)>
   81e94:	aa0003f3 	mov	x19, x0
   81e98:	aa1403e1 	mov	x1, x20
   81e9c:	94002f71 	bl	8dc60 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)>
   81ea0:	f9006693 	str	x19, [x20, #200]
   81ea4:	f9405e80 	ldr	x0, [x20, #184]
   81ea8:	94000d7a 	bl	85490 <CXHCISlotManager::IsValid()>
   81eac:	72001c1f 	tst	w0, #0xff
   81eb0:	540000a0 	b.eq	81ec4 <CXHCIDevice::Initialize()+0x164>  // b.none
   81eb4:	f9406280 	ldr	x0, [x20, #192]
   81eb8:	94000666 	bl	83850 <CXHCIEventManager::IsValid()>
   81ebc:	72001c1f 	tst	w0, #0xff
   81ec0:	54000661 	b.ne	81f8c <CXHCIDevice::Initialize()+0x22c>  // b.any
   81ec4:	94007383 	bl	9ecd0 <CLogger::Get()>
   81ec8:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81ecc:	912d0021 	add	x1, x1, #0xb40
   81ed0:	91050023 	add	x3, x1, #0x140
   81ed4:	52800022 	mov	w2, #0x1                   	// #1
   81ed8:	52800013 	mov	w19, #0x0                   	// #0
   81edc:	940072b9 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81ee0:	14000007 	b	81efc <CXHCIDevice::Initialize()+0x19c>
   81ee4:	9400737b 	bl	9ecd0 <CLogger::Get()>
   81ee8:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81eec:	912d0021 	add	x1, x1, #0xb40
   81ef0:	9100c023 	add	x3, x1, #0x30
   81ef4:	52800022 	mov	w2, #0x1                   	// #1
   81ef8:	940072b2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81efc:	2a1303e0 	mov	w0, w19
   81f00:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81f08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81f0c:	d65f03c0 	ret
   81f10:	94007370 	bl	9ecd0 <CLogger::Get()>
   81f14:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81f18:	912d0021 	add	x1, x1, #0xb40
   81f1c:	91002023 	add	x3, x1, #0x8
   81f20:	52800022 	mov	w2, #0x1                   	// #1
   81f24:	940072a7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81f28:	2a1303e0 	mov	w0, w19
   81f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81f34:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81f38:	d65f03c0 	ret
   81f3c:	94007365 	bl	9ecd0 <CLogger::Get()>
   81f40:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81f44:	912d0021 	add	x1, x1, #0xb40
   81f48:	2a1303e4 	mov	w4, w19
   81f4c:	9101a023 	add	x3, x1, #0x68
   81f50:	52800022 	mov	w2, #0x1                   	// #1
   81f54:	52800013 	mov	w19, #0x0                   	// #0
   81f58:	9400729a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81f5c:	2a1303e0 	mov	w0, w19
   81f60:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81f68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81f6c:	d65f03c0 	ret
   81f70:	94007358 	bl	9ecd0 <CLogger::Get()>
   81f74:	f0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   81f78:	912d0021 	add	x1, x1, #0xb40
   81f7c:	91012023 	add	x3, x1, #0x48
   81f80:	52800022 	mov	w2, #0x1                   	// #1
   81f84:	9400728f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81f88:	17ffffdd 	b	81efc <CXHCIDevice::Initialize()+0x19c>
   81f8c:	f9406680 	ldr	x0, [x20, #200]
   81f90:	94002f78 	bl	8dd70 <CXHCICommandManager::IsValid()>
   81f94:	72001c1f 	tst	w0, #0xff
   81f98:	54fff960 	b.eq	81ec4 <CXHCIDevice::Initialize()+0x164>  // b.none
   81f9c:	6b566fff 	cmp	wzr, w22, lsr #27
   81fa0:	531b7ed6 	lsr	w22, w22, #27
   81fa4:	54000ae0 	b.eq	82100 <CXHCIDevice::Initialize()+0x3a0>  // b.none
   81fa8:	d2820003 	mov	x3, #0x1000                	// #4096
   81fac:	d37412c1 	ubfiz	x1, x22, #12, #5
   81fb0:	aa0303e2 	mov	x2, x3
   81fb4:	aa1403e0 	mov	x0, x20
   81fb8:	940000d6 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   81fbc:	aa0003e4 	mov	x4, x0
   81fc0:	d2820003 	mov	x3, #0x1000                	// #4096
   81fc4:	d37d12c1 	ubfiz	x1, x22, #3, #5
   81fc8:	d2800802 	mov	x2, #0x40                  	// #64
   81fcc:	aa1403e0 	mov	x0, x20
   81fd0:	f9006a84 	str	x4, [x20, #208]
   81fd4:	52800013 	mov	w19, #0x0                   	// #0
   81fd8:	940000ce 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   81fdc:	f9406a83 	ldr	x3, [x20, #208]
   81fe0:	aa0003e1 	mov	x1, x0
   81fe4:	f9006e80 	str	x0, [x20, #216]
   81fe8:	f100007f 	cmp	x3, #0x0
   81fec:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
   81ff0:	54fff860 	b.eq	81efc <CXHCIDevice::Initialize()+0x19c>  // b.none
   81ff4:	d2800002 	mov	x2, #0x0                   	// #0
   81ff8:	f8227823 	str	x3, [x1, x2, lsl #3]
   81ffc:	91000442 	add	x2, x2, #0x1
   82000:	91400463 	add	x3, x3, #0x1, lsl #12
   82004:	6b0202df 	cmp	w22, w2
   82008:	54ffff88 	b.hi	81ff8 <CXHCIDevice::Initialize()+0x298>  // b.pmore
   8200c:	f9405e80 	ldr	x0, [x20, #184]
   82010:	94000d80 	bl	85610 <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)>
   82014:	d2800700 	mov	x0, #0x38                  	// #56
   82018:	94008d9a 	bl	a5680 <operator new(unsigned long)>
   8201c:	2a1503e1 	mov	w1, w21
   82020:	aa1403e2 	mov	x2, x20
   82024:	aa0003f3 	mov	x19, x0
   82028:	940008fa 	bl	84410 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)>
   8202c:	f9405a95 	ldr	x21, [x20, #176]
   82030:	52800001 	mov	w1, #0x0                   	// #0
   82034:	f9007293 	str	x19, [x20, #224]
   82038:	aa1503e0 	mov	x0, x21
   8203c:	940006c1 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   82040:	321e0002 	orr	w2, w0, #0x4
   82044:	52800001 	mov	w1, #0x0                   	// #0
   82048:	aa1503e0 	mov	x0, x21
   8204c:	940006f1 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   82050:	f9405a93 	ldr	x19, [x20, #176]
   82054:	52800001 	mov	w1, #0x0                   	// #0
   82058:	aa1303e0 	mov	x0, x19
   8205c:	940006b9 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   82060:	32000002 	orr	w2, w0, #0x1
   82064:	52800001 	mov	w1, #0x0                   	// #0
   82068:	aa1303e0 	mov	x0, x19
   8206c:	940006e9 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   82070:	f9407280 	ldr	x0, [x20, #224]
   82074:	9400091b 	bl	844e0 <CXHCIRootHub::Initialize()>
   82078:	72001c13 	ands	w19, w0, #0xff
   8207c:	54fff401 	b.ne	81efc <CXHCIDevice::Initialize()+0x19c>  // b.any
   82080:	94007314 	bl	9ecd0 <CLogger::Get()>
   82084:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82088:	912d0021 	add	x1, x1, #0xb40
   8208c:	91062023 	add	x3, x1, #0x188
   82090:	52800022 	mov	w2, #0x1                   	// #1
   82094:	9400724b 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82098:	17ffff99 	b	81efc <CXHCIDevice::Initialize()+0x19c>
   8209c:	9400730d 	bl	9ecd0 <CLogger::Get()>
   820a0:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   820a4:	912d0021 	add	x1, x1, #0xb40
   820a8:	9103a023 	add	x3, x1, #0xe8
   820ac:	52800022 	mov	w2, #0x1                   	// #1
   820b0:	94007244 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   820b4:	17ffff92 	b	81efc <CXHCIDevice::Initialize()+0x19c>
   820b8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   820bc:	912d0000 	add	x0, x0, #0xb40
   820c0:	91022001 	add	x1, x0, #0x88
   820c4:	52800ee2 	mov	w2, #0x77                  	// #119
   820c8:	91026000 	add	x0, x0, #0x98
   820cc:	9400696d 	bl	9c680 <assertion_failed>
   820d0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   820d4:	912d0000 	add	x0, x0, #0xb40
   820d8:	91022001 	add	x1, x0, #0x88
   820dc:	52800fa2 	mov	w2, #0x7d                  	// #125
   820e0:	91030000 	add	x0, x0, #0xc0
   820e4:	94006967 	bl	9c680 <assertion_failed>
   820e8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   820ec:	912d0000 	add	x0, x0, #0xb40
   820f0:	91022001 	add	x1, x0, #0x88
   820f4:	52801242 	mov	w2, #0x92                  	// #146
   820f8:	9103e000 	add	x0, x0, #0xf8
   820fc:	94006961 	bl	9c680 <assertion_failed>
   82100:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82104:	912d0000 	add	x0, x0, #0xb40
   82108:	91022001 	add	x1, x0, #0x88
   8210c:	52801522 	mov	w2, #0xa9                  	// #169
   82110:	9105c000 	add	x0, x0, #0x170
   82114:	9400695b 	bl	9c680 <assertion_failed>
   82118:	d503201f 	nop
   8211c:	d503201f 	nop

0000000000082120 <CXHCIDevice::ReScanDevices()>:
   82120:	f9407000 	ldr	x0, [x0, #224]
   82124:	b4000040 	cbz	x0, 8212c <CXHCIDevice::ReScanDevices()+0xc>
   82128:	14000926 	b	845c0 <CXHCIRootHub::ReScanDevices()>
   8212c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82130:	912d0000 	add	x0, x0, #0xb40
   82134:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82138:	91022001 	add	x1, x0, #0x88
   8213c:	910003fd 	mov	x29, sp
   82140:	91068000 	add	x0, x0, #0x1a0
   82144:	52801ac2 	mov	w2, #0xd6                  	// #214
   82148:	9400694e 	bl	9c680 <assertion_failed>
   8214c:	d503201f 	nop

0000000000082150 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
   82150:	3943a000 	ldrb	w0, [x0, #232]
   82154:	35000200 	cbnz	w0, 82194 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x44>
   82158:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8215c:	910003fd 	mov	x29, sp
   82160:	a90153f3 	stp	x19, x20, [sp, #16]
   82164:	aa0103f3 	mov	x19, x1
   82168:	b40001a1 	cbz	x1, 8219c <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x4c>
   8216c:	aa0103e0 	mov	x0, x1
   82170:	2a0203f4 	mov	w20, w2
   82174:	94002acb 	bl	8cca0 <CUSBRequest::GetEndpoint() const>
   82178:	94001616 	bl	879d0 <CUSBEndpoint::GetXHCIEndpoint()>
   8217c:	b40001c0 	cbz	x0, 821b4 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x64>
   82180:	2a1403e2 	mov	w2, w20
   82184:	aa1303e1 	mov	x1, x19
   82188:	a94153f3 	ldp	x19, x20, [sp, #16]
   8218c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82190:	1400030c 	b	82dc0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)>
   82194:	52800000 	mov	w0, #0x0                   	// #0
   82198:	d65f03c0 	ret
   8219c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   821a0:	912d0000 	add	x0, x0, #0xb40
   821a4:	91022001 	add	x1, x0, #0x88
   821a8:	52801c22 	mov	w2, #0xe1                  	// #225
   821ac:	9106c000 	add	x0, x0, #0x1b0
   821b0:	94006934 	bl	9c680 <assertion_failed>
   821b4:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   821b8:	912d0000 	add	x0, x0, #0xb40
   821bc:	91022001 	add	x1, x0, #0x88
   821c0:	52801c62 	mov	w2, #0xe3                  	// #227
   821c4:	91070000 	add	x0, x0, #0x1c0
   821c8:	9400692e 	bl	9c680 <assertion_failed>
   821cc:	d503201f 	nop

00000000000821d0 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
   821d0:	3943a000 	ldrb	w0, [x0, #232]
   821d4:	35000200 	cbnz	w0, 82214 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x44>
   821d8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   821dc:	910003fd 	mov	x29, sp
   821e0:	a90153f3 	stp	x19, x20, [sp, #16]
   821e4:	aa0103f3 	mov	x19, x1
   821e8:	b40001a1 	cbz	x1, 8221c <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x4c>
   821ec:	aa0103e0 	mov	x0, x1
   821f0:	2a0203f4 	mov	w20, w2
   821f4:	94002aab 	bl	8cca0 <CUSBRequest::GetEndpoint() const>
   821f8:	940015f6 	bl	879d0 <CUSBEndpoint::GetXHCIEndpoint()>
   821fc:	b40001c0 	cbz	x0, 82234 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x64>
   82200:	2a1403e2 	mov	w2, w20
   82204:	aa1303e1 	mov	x1, x19
   82208:	a94153f3 	ldp	x19, x20, [sp, #16]
   8220c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82210:	14000210 	b	82a50 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)>
   82214:	52800000 	mov	w0, #0x0                   	// #0
   82218:	d65f03c0 	ret
   8221c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82220:	912d0000 	add	x0, x0, #0xb40
   82224:	91022001 	add	x1, x0, #0x88
   82228:	52801de2 	mov	w2, #0xef                  	// #239
   8222c:	9106c000 	add	x0, x0, #0x1b0
   82230:	94006914 	bl	9c680 <assertion_failed>
   82234:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82238:	912d0000 	add	x0, x0, #0xb40
   8223c:	91022001 	add	x1, x0, #0x88
   82240:	52801e22 	mov	w2, #0xf1                  	// #241
   82244:	91070000 	add	x0, x0, #0x1c0
   82248:	9400690e 	bl	9c680 <assertion_failed>
   8224c:	d503201f 	nop

0000000000082250 <CXHCIDevice::GetMMIOSpace()>:
   82250:	f9405800 	ldr	x0, [x0, #176]
   82254:	b4000040 	cbz	x0, 8225c <CXHCIDevice::GetMMIOSpace()+0xc>
   82258:	d65f03c0 	ret
   8225c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82260:	912d0000 	add	x0, x0, #0xb40
   82264:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82268:	91022001 	add	x1, x0, #0x88
   8226c:	910003fd 	mov	x29, sp
   82270:	91074000 	add	x0, x0, #0x1d0
   82274:	52801f02 	mov	w2, #0xf8                  	// #248
   82278:	94006902 	bl	9c680 <assertion_failed>
   8227c:	d503201f 	nop

0000000000082280 <CXHCIDevice::GetSlotManager()>:
   82280:	f9405c00 	ldr	x0, [x0, #184]
   82284:	b4000040 	cbz	x0, 8228c <CXHCIDevice::GetSlotManager()+0xc>
   82288:	d65f03c0 	ret
   8228c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82290:	912d0000 	add	x0, x0, #0xb40
   82294:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82298:	91022001 	add	x1, x0, #0x88
   8229c:	910003fd 	mov	x29, sp
   822a0:	91078000 	add	x0, x0, #0x1e0
   822a4:	52801fc2 	mov	w2, #0xfe                  	// #254
   822a8:	940068f6 	bl	9c680 <assertion_failed>
   822ac:	d503201f 	nop

00000000000822b0 <CXHCIDevice::GetCommandManager()>:
   822b0:	f9406400 	ldr	x0, [x0, #200]
   822b4:	b4000040 	cbz	x0, 822bc <CXHCIDevice::GetCommandManager()+0xc>
   822b8:	d65f03c0 	ret
   822bc:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   822c0:	912d0000 	add	x0, x0, #0xb40
   822c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   822c8:	91022001 	add	x1, x0, #0x88
   822cc:	910003fd 	mov	x29, sp
   822d0:	9107e000 	add	x0, x0, #0x1f8
   822d4:	52802082 	mov	w2, #0x104                 	// #260
   822d8:	940068ea 	bl	9c680 <assertion_failed>
   822dc:	d503201f 	nop

00000000000822e0 <CXHCIDevice::GetRootHub()>:
   822e0:	f9407000 	ldr	x0, [x0, #224]
   822e4:	b4000040 	cbz	x0, 822ec <CXHCIDevice::GetRootHub()+0xc>
   822e8:	d65f03c0 	ret
   822ec:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   822f0:	912d0000 	add	x0, x0, #0xb40
   822f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   822f8:	91022001 	add	x1, x0, #0x88
   822fc:	910003fd 	mov	x29, sp
   82300:	91068000 	add	x0, x0, #0x1a0
   82304:	52802142 	mov	w2, #0x10a                 	// #266
   82308:	940068de 	bl	9c680 <assertion_failed>
   8230c:	d503201f 	nop

0000000000082310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>:
   82310:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82314:	91026000 	add	x0, x0, #0x98
   82318:	910003fd 	mov	x29, sp
   8231c:	a90153f3 	stp	x19, x20, [sp, #16]
   82320:	aa0103f4 	mov	x20, x1
   82324:	94000b67 	bl	850c0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)>
   82328:	aa0003f3 	mov	x19, x0
   8232c:	b4000100 	cbz	x0, 8234c <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)+0x3c>
   82330:	aa1403e2 	mov	x2, x20
   82334:	52800001 	mov	w1, #0x0                   	// #0
   82338:	94008856 	bl	a4490 <memset>
   8233c:	aa1303e0 	mov	x0, x19
   82340:	a94153f3 	ldp	x19, x20, [sp, #16]
   82344:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82348:	d65f03c0 	ret
   8234c:	94007261 	bl	9ecd0 <CLogger::Get()>
   82350:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82354:	912d0021 	add	x1, x1, #0xb40
   82358:	91084023 	add	x3, x1, #0x210
   8235c:	52800022 	mov	w2, #0x1                   	// #1
   82360:	94007198 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82364:	aa1303e0 	mov	x0, x19
   82368:	a94153f3 	ldp	x19, x20, [sp, #16]
   8236c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82370:	d65f03c0 	ret
   82374:	d503201f 	nop
   82378:	d503201f 	nop
   8237c:	d503201f 	nop

0000000000082380 <CXHCIDevice::FreeSharedMem(void*)>:
   82380:	91026000 	add	x0, x0, #0x98
   82384:	14000bdf 	b	85300 <CXHCISharedMemAllocator::Free(void*)>
   82388:	d503201f 	nop
   8238c:	d503201f 	nop

0000000000082390 <CXHCIDevice::InterruptHandler(unsigned int)>:
   82390:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82394:	910003fd 	mov	x29, sp
   82398:	a90153f3 	stp	x19, x20, [sp, #16]
   8239c:	350003e1 	cbnz	w1, 82418 <CXHCIDevice::InterruptHandler(unsigned int)+0x88>
   823a0:	aa0003f3 	mov	x19, x0
   823a4:	52800081 	mov	w1, #0x4                   	// #4
   823a8:	f9405800 	ldr	x0, [x0, #176]
   823ac:	940005e5 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   823b0:	2a0003f4 	mov	w20, w0
   823b4:	321d0002 	orr	w2, w0, #0x8
   823b8:	f9405a60 	ldr	x0, [x19, #176]
   823bc:	52800081 	mov	w1, #0x4                   	// #4
   823c0:	94000614 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   823c4:	370001b4 	tbnz	w20, #0, 823f8 <CXHCIDevice::InterruptHandler(unsigned int)+0x68>
   823c8:	3943a260 	ldrb	w0, [x19, #232]
   823cc:	35000100 	cbnz	w0, 823ec <CXHCIDevice::InterruptHandler(unsigned int)+0x5c>
   823d0:	f9406260 	ldr	x0, [x19, #192]
   823d4:	b5000060 	cbnz	x0, 823e0 <CXHCIDevice::InterruptHandler(unsigned int)+0x50>
   823d8:	14000016 	b	82430 <CXHCIDevice::InterruptHandler(unsigned int)+0xa0>
   823dc:	f9406260 	ldr	x0, [x19, #192]
   823e0:	9400052c 	bl	83890 <CXHCIEventManager::HandleEvents()>
   823e4:	72001c1f 	tst	w0, #0xff
   823e8:	54ffffa1 	b.ne	823dc <CXHCIDevice::InterruptHandler(unsigned int)+0x4c>  // b.any
   823ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   823f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   823f4:	d65f03c0 	ret
   823f8:	94007236 	bl	9ecd0 <CLogger::Get()>
   823fc:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82400:	912d0021 	add	x1, x1, #0xb40
   82404:	a94153f3 	ldp	x19, x20, [sp, #16]
   82408:	91090023 	add	x3, x1, #0x240
   8240c:	52800022 	mov	w2, #0x1                   	// #1
   82410:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82414:	1400716b 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82418:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8241c:	912d0000 	add	x0, x0, #0xb40
   82420:	91022001 	add	x1, x0, #0x88
   82424:	528024e2 	mov	w2, #0x127                 	// #295
   82428:	9108c000 	add	x0, x0, #0x230
   8242c:	94006895 	bl	9c680 <assertion_failed>
   82430:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82434:	912d0000 	add	x0, x0, #0xb40
   82438:	91022001 	add	x1, x0, #0x88
   8243c:	52802722 	mov	w2, #0x139                 	// #313
   82440:	91094000 	add	x0, x0, #0x250
   82444:	9400688f 	bl	9c680 <assertion_failed>
   82448:	d503201f 	nop
   8244c:	d503201f 	nop

0000000000082450 <CXHCIDevice::InterruptStub(unsigned int, void*)>:
   82450:	aa0103e2 	mov	x2, x1
   82454:	b4000081 	cbz	x1, 82464 <CXHCIDevice::InterruptStub(unsigned int, void*)+0x14>
   82458:	2a0003e1 	mov	w1, w0
   8245c:	aa0203e0 	mov	x0, x2
   82460:	17ffffcc 	b	82390 <CXHCIDevice::InterruptHandler(unsigned int)>
   82464:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82468:	912d0000 	add	x0, x0, #0xb40
   8246c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82470:	91022001 	add	x1, x0, #0x88
   82474:	910003fd 	mov	x29, sp
   82478:	9109a000 	add	x0, x0, #0x268
   8247c:	52802862 	mov	w2, #0x143                 	// #323
   82480:	94006880 	bl	9c680 <assertion_failed>
   82484:	d503201f 	nop
   82488:	d503201f 	nop
   8248c:	d503201f 	nop

0000000000082490 <CXHCIDevice::HWReset()>:
   82490:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82494:	910003fd 	mov	x29, sp
   82498:	5290d404 	mov	w4, #0x86a0                	// #34464
   8249c:	72a00024 	movk	w4, #0x1, lsl #16
   824a0:	52800003 	mov	w3, #0x0                   	// #0
   824a4:	52810002 	mov	w2, #0x800                 	// #2048
   824a8:	52800081 	mov	w1, #0x4                   	// #4
   824ac:	a90153f3 	stp	x19, x20, [sp, #16]
   824b0:	aa0003f3 	mov	x19, x0
   824b4:	f9405800 	ldr	x0, [x0, #176]
   824b8:	9400063e 	bl	83db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   824bc:	72001c1f 	tst	w0, #0xff
   824c0:	540000c1 	b.ne	824d8 <CXHCIDevice::HWReset()+0x48>  // b.any
   824c4:	52800014 	mov	w20, #0x0                   	// #0
   824c8:	2a1403e0 	mov	w0, w20
   824cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   824d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824d4:	d65f03c0 	ret
   824d8:	52800023 	mov	w3, #0x1                   	// #1
   824dc:	5290d404 	mov	w4, #0x86a0                	// #34464
   824e0:	72a00024 	movk	w4, #0x1, lsl #16
   824e4:	2a0303e2 	mov	w2, w3
   824e8:	f9405a60 	ldr	x0, [x19, #176]
   824ec:	52800081 	mov	w1, #0x4                   	// #4
   824f0:	94000630 	bl	83db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   824f4:	72001c1f 	tst	w0, #0xff
   824f8:	54fffe60 	b.eq	824c4 <CXHCIDevice::HWReset()+0x34>  // b.none
   824fc:	f9405a74 	ldr	x20, [x19, #176]
   82500:	52800001 	mov	w1, #0x0                   	// #0
   82504:	aa1403e0 	mov	x0, x20
   82508:	9400058e 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   8250c:	321f0002 	orr	w2, w0, #0x2
   82510:	52800001 	mov	w1, #0x0                   	// #0
   82514:	aa1403e0 	mov	x0, x20
   82518:	940005be 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   8251c:	5289c404 	mov	w4, #0x4e20                	// #20000
   82520:	52800003 	mov	w3, #0x0                   	// #0
   82524:	f9405a60 	ldr	x0, [x19, #176]
   82528:	52800042 	mov	w2, #0x2                   	// #2
   8252c:	52800001 	mov	w1, #0x0                   	// #0
   82530:	94000620 	bl	83db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   82534:	72001c14 	ands	w20, w0, #0xff
   82538:	54fffc60 	b.eq	824c4 <CXHCIDevice::HWReset()+0x34>  // b.none
   8253c:	52800081 	mov	w1, #0x4                   	// #4
   82540:	f9405a60 	ldr	x0, [x19, #176]
   82544:	9400057f 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   82548:	365ffc00 	tbz	w0, #11, 824c8 <CXHCIDevice::HWReset()+0x38>
   8254c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82550:	912d0000 	add	x0, x0, #0xb40
   82554:	91022001 	add	x1, x0, #0x88
   82558:	52802b22 	mov	w2, #0x159                 	// #345
   8255c:	9109e000 	add	x0, x0, #0x278
   82560:	94006848 	bl	9c680 <assertion_failed>
   82564:	d503201f 	nop
   82568:	d503201f 	nop
   8256c:	d503201f 	nop

0000000000082570 <CXHCIDevice::DumpStatus()>:
   82570:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82574:	910003fd 	mov	x29, sp
   82578:	f9000bf3 	str	x19, [sp, #16]
   8257c:	aa0003f3 	mov	x19, x0
   82580:	f9407000 	ldr	x0, [x0, #224]
   82584:	9400084b 	bl	846b0 <CXHCIRootHub::DumpStatus()>
   82588:	f9406260 	ldr	x0, [x19, #192]
   8258c:	94000529 	bl	83a30 <CXHCIEventManager::DumpStatus()>
   82590:	f9406660 	ldr	x0, [x19, #200]
   82594:	94002dfb 	bl	8dd80 <CXHCICommandManager::DumpStatus()>
   82598:	f9405e60 	ldr	x0, [x19, #184]
   8259c:	94000c45 	bl	856b0 <CXHCISlotManager::DumpStatus()>
   825a0:	f9405a60 	ldr	x0, [x19, #176]
   825a4:	9400062f 	bl	83e60 <CXHCIMMIOSpace::DumpStatus()>
   825a8:	52800002 	mov	w2, #0x0                   	// #0
   825ac:	52800001 	mov	w1, #0x0                   	// #0
   825b0:	91002260 	add	x0, x19, #0x8
   825b4:	9400940f 	bl	a75f0 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)>
   825b8:	940071c6 	bl	9ecd0 <CLogger::Get()>
   825bc:	aa0003e1 	mov	x1, x0
   825c0:	91026260 	add	x0, x19, #0x98
   825c4:	aa0103f3 	mov	x19, x1
   825c8:	94000aba 	bl	850b0 <CXHCISharedMemAllocator::GetFreeSpace() const>
   825cc:	aa0003e4 	mov	x4, x0
   825d0:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   825d4:	912d0021 	add	x1, x1, #0xb40
   825d8:	aa1303e0 	mov	x0, x19
   825dc:	f9400bf3 	ldr	x19, [sp, #16]
   825e0:	d34aa484 	ubfx	x4, x4, #10, #32
   825e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   825e8:	910b0023 	add	x3, x1, #0x2c0
   825ec:	52800082 	mov	w2, #0x4                   	// #4
   825f0:	140070f4 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
	...

0000000000082600 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)>:
   82600:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82604:	910003fd 	mov	x29, sp
   82608:	b4000102 	cbz	x2, 82628 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)+0x28>
   8260c:	3940e040 	ldrb	w0, [x2, #56]
   82610:	72001c1f 	tst	w0, #0xff
   82614:	54000161 	b.ne	82640 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)+0x40>  // b.any
   82618:	52800020 	mov	w0, #0x1                   	// #1
   8261c:	3900e040 	strb	w0, [x2, #56]
   82620:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82624:	d65f03c0 	ret
   82628:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8262c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82630:	91388021 	add	x1, x1, #0xe20
   82634:	9138e000 	add	x0, x0, #0xe38
   82638:	52803362 	mov	w2, #0x19b                 	// #411
   8263c:	94006811 	bl	9c680 <assertion_failed>
   82640:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82644:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82648:	91388021 	add	x1, x1, #0xe20
   8264c:	91392000 	add	x0, x0, #0xe48
   82650:	528033a2 	mov	w2, #0x19d                 	// #413
   82654:	9400680b 	bl	9c680 <assertion_failed>
   82658:	d503201f 	nop
   8265c:	d503201f 	nop

0000000000082660 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)>:
   82660:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82664:	910003fd 	mov	x29, sp
   82668:	a90153f3 	stp	x19, x20, [sp, #16]
   8266c:	aa0003f3 	mov	x19, x0
   82670:	aa0203e0 	mov	x0, x2
   82674:	aa0203f4 	mov	x20, x2
   82678:	a9000a61 	stp	x1, x2, [x19]
   8267c:	97fffef5 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   82680:	aa0003e3 	mov	x3, x0
   82684:	52800021 	mov	w1, #0x1                   	// #1
   82688:	f900127f 	str	xzr, [x19, #32]
   8268c:	52808022 	mov	w2, #0x401                 	// #1025
   82690:	d2800500 	mov	x0, #0x28                  	// #40
   82694:	f9001a7f 	str	xzr, [x19, #48]
   82698:	f9000a63 	str	x3, [x19, #16]
   8269c:	39006261 	strb	w1, [x19, #24]
   826a0:	7802d262 	sturh	w2, [x19, #45]
   826a4:	3900e261 	strb	w1, [x19, #56]
   826a8:	f900227f 	str	xzr, [x19, #64]
   826ac:	94008bf5 	bl	a5680 <operator new(unsigned long)>
   826b0:	aa1403e3 	mov	x3, x20
   826b4:	52800802 	mov	w2, #0x40                  	// #64
   826b8:	aa0003f4 	mov	x20, x0
   826bc:	52800001 	mov	w1, #0x0                   	// #0
   826c0:	94000614 	bl	83f10 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   826c4:	aa1403e0 	mov	x0, x20
   826c8:	f9001274 	str	x20, [x19, #32]
   826cc:	9400064d 	bl	84000 <CXHCIRing::IsValid() const>
   826d0:	72001c1f 	tst	w0, #0xff
   826d4:	540000a1 	b.ne	826e8 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)+0x88>  // b.any
   826d8:	3900627f 	strb	wzr, [x19, #24]
   826dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   826e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   826e4:	d65f03c0 	ret
   826e8:	aa1303e2 	mov	x2, x19
   826ec:	3940b661 	ldrb	w1, [x19, #45]
   826f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   826f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   826f8:	f9400040 	ldr	x0, [x2]
   826fc:	14000ca1 	b	85980 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>

0000000000082700 <CXHCIEndpoint::~CXHCIEndpoint()>:
   82700:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82704:	910003fd 	mov	x29, sp
   82708:	3940e001 	ldrb	w1, [x0, #56]
   8270c:	f9000bf3 	str	x19, [sp, #16]
   82710:	72001c3f 	tst	w1, #0xff
   82714:	54000200 	b.eq	82754 <CXHCIEndpoint::~CXHCIEndpoint()+0x54>  // b.none
   82718:	f9402001 	ldr	x1, [x0, #64]
   8271c:	b5000281 	cbnz	x1, 8276c <CXHCIEndpoint::~CXHCIEndpoint()+0x6c>
   82720:	3900b41f 	strb	wzr, [x0, #45]
   82724:	f9401013 	ldr	x19, [x0, #32]
   82728:	b4000113 	cbz	x19, 82748 <CXHCIEndpoint::~CXHCIEndpoint()+0x48>
   8272c:	aa1303e0 	mov	x0, x19
   82730:	9400062c 	bl	83fe0 <CXHCIRing::~CXHCIRing()>
   82734:	aa1303e0 	mov	x0, x19
   82738:	d2800501 	mov	x1, #0x28                  	// #40
   8273c:	f9400bf3 	ldr	x19, [sp, #16]
   82740:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82744:	14008bf3 	b	a5710 <operator delete(void*, unsigned long)>
   82748:	f9400bf3 	ldr	x19, [sp, #16]
   8274c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82750:	d65f03c0 	ret
   82754:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82758:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8275c:	91388021 	add	x1, x1, #0xe20
   82760:	91394000 	add	x0, x0, #0xe50
   82764:	52801182 	mov	w2, #0x8c                  	// #140
   82768:	940067c6 	bl	9c680 <assertion_failed>
   8276c:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82770:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82774:	91388021 	add	x1, x1, #0xe20
   82778:	9139a000 	add	x0, x0, #0xe68
   8277c:	528011a2 	mov	w2, #0x8d                  	// #141
   82780:	940067c0 	bl	9c680 <assertion_failed>
   82784:	d503201f 	nop
   82788:	d503201f 	nop
   8278c:	d503201f 	nop

0000000000082790 <CXHCIEndpoint::IsValid()>:
   82790:	39406000 	ldrb	w0, [x0, #24]
   82794:	d65f03c0 	ret
   82798:	d503201f 	nop
   8279c:	d503201f 	nop

00000000000827a0 <CXHCIEndpoint::GetTransferRing()>:
   827a0:	f9401000 	ldr	x0, [x0, #32]
   827a4:	b4000040 	cbz	x0, 827ac <CXHCIEndpoint::GetTransferRing()+0xc>
   827a8:	d65f03c0 	ret
   827ac:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   827b0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   827b4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   827b8:	91388021 	add	x1, x1, #0xe20
   827bc:	910003fd 	mov	x29, sp
   827c0:	913a2000 	add	x0, x0, #0xe88
   827c4:	52801442 	mov	w2, #0xa2                  	// #162
   827c8:	940067ae 	bl	9c680 <assertion_failed>
   827cc:	d503201f 	nop

00000000000827d0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)>:
   827d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   827d4:	910003fd 	mov	x29, sp
   827d8:	a90153f3 	stp	x19, x20, [sp, #16]
   827dc:	d5033fbf 	dmb	sy
   827e0:	f9401814 	ldr	x20, [x0, #48]
   827e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   827e8:	b4000634 	cbz	x20, 828ac <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xdc>
   827ec:	12001c36 	and	w22, w1, #0xff
   827f0:	aa0003f3 	mov	x19, x0
   827f4:	710006df 	cmp	w22, #0x1
   827f8:	7a4d1ac4 	ccmp	w22, #0xd, #0x4, ne  // ne = any
   827fc:	540003a1 	b.ne	82870 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xa0>  // b.any
   82800:	aa1403e0 	mov	x0, x20
   82804:	2a0203f5 	mov	w21, w2
   82808:	f9001bf7 	str	x23, [sp, #48]
   8280c:	94002961 	bl	8cd90 <CUSBRequest::GetBuffer()>
   82810:	aa0003f7 	mov	x23, x0
   82814:	aa1403e0 	mov	x0, x20
   82818:	9400296e 	bl	8cdd0 <CUSBRequest::GetBufLen() const>
   8281c:	2a0003f6 	mov	w22, w0
   82820:	b40000b7 	cbz	x23, 82834 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x64>
   82824:	340005e0 	cbz	w0, 828e0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x110>
   82828:	aa1703e0 	mov	x0, x23
   8282c:	2a1603e1 	mov	w1, w22
   82830:	94008fbc 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   82834:	6b1502df 	cmp	w22, w21
   82838:	54000483 	b.cc	828c8 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xf8>  // b.lo, b.ul, b.last
   8283c:	4b1502c1 	sub	w1, w22, w21
   82840:	aa1403e0 	mov	x0, x20
   82844:	94002927 	bl	8cce0 <CUSBRequest::SetResultLen(unsigned int)>
   82848:	aa1403e0 	mov	x0, x20
   8284c:	52800021 	mov	w1, #0x1                   	// #1
   82850:	94002920 	bl	8ccd0 <CUSBRequest::SetStatus(int)>
   82854:	aa1403e0 	mov	x0, x20
   82858:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8285c:	f9401bf7 	ldr	x23, [sp, #48]
   82860:	f9001a7f 	str	xzr, [x19, #48]
   82864:	a94153f3 	ldp	x19, x20, [sp, #16]
   82868:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8286c:	14002969 	b	8ce10 <CUSBRequest::CallCompletionRoutine()>
   82870:	94007118 	bl	9ecd0 <CLogger::Get()>
   82874:	d0000143 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82878:	f0000141 	adrp	x1, ad000 <From+0x4c0>
   8287c:	3940b665 	ldrb	w5, [x19, #45]
   82880:	2a1603e4 	mov	w4, w22
   82884:	913b8063 	add	x3, x3, #0xee0
   82888:	91058021 	add	x1, x1, #0x160
   8288c:	52800042 	mov	w2, #0x2                   	// #2
   82890:	9400704c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82894:	aa1403e0 	mov	x0, x20
   82898:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8289c:	f9001a7f 	str	xzr, [x19, #48]
   828a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   828a4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   828a8:	1400295a 	b	8ce10 <CUSBRequest::CallCompletionRoutine()>
   828ac:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828b0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828b4:	f9001bf7 	str	x23, [sp, #48]
   828b8:	91388021 	add	x1, x1, #0xe20
   828bc:	913a8000 	add	x0, x0, #0xea0
   828c0:	52802bc2 	mov	w2, #0x15e                 	// #350
   828c4:	9400676f 	bl	9c680 <assertion_failed>
   828c8:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828cc:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828d0:	91388021 	add	x1, x1, #0xe20
   828d4:	913b0000 	add	x0, x0, #0xec0
   828d8:	52802d82 	mov	w2, #0x16c                 	// #364
   828dc:	94006769 	bl	9c680 <assertion_failed>
   828e0:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828e4:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   828e8:	91388021 	add	x1, x1, #0xe20
   828ec:	913ac000 	add	x0, x0, #0xeb0
   828f0:	52802d02 	mov	w2, #0x168                 	// #360
   828f4:	94006763 	bl	9c680 <assertion_failed>
   828f8:	d503201f 	nop
   828fc:	d503201f 	nop

0000000000082900 <CXHCIEndpoint::DumpStatus()>:
   82900:	d100c3ff 	sub	sp, sp, #0x30
   82904:	a9017bfd 	stp	x29, x30, [sp, #16]
   82908:	910043fd 	add	x29, sp, #0x10
   8290c:	f90013f3 	str	x19, [sp, #32]
   82910:	aa0003f3 	mov	x19, x0
   82914:	39406000 	ldrb	w0, [x0, #24]
   82918:	34000340 	cbz	w0, 82980 <CXHCIEndpoint::DumpStatus()+0x80>
   8291c:	3940b660 	ldrb	w0, [x19, #45]
   82920:	7100041f 	cmp	w0, #0x1
   82924:	54000128 	b.hi	82948 <CXHCIEndpoint::DumpStatus()+0x48>  // b.pmore
   82928:	f9401260 	ldr	x0, [x19, #32]
   8292c:	b40003e0 	cbz	x0, 829a8 <CXHCIEndpoint::DumpStatus()+0xa8>
   82930:	f0000141 	adrp	x1, ad000 <From+0x4c0>
   82934:	91058021 	add	x1, x1, #0x160
   82938:	a9417bfd 	ldp	x29, x30, [sp, #16]
   8293c:	f94013f3 	ldr	x19, [sp, #32]
   82940:	9100c3ff 	add	sp, sp, #0x30
   82944:	1400068b 	b	84370 <CXHCIRing::DumpStatus(char const*)>
   82948:	940070e2 	bl	9ecd0 <CLogger::Get()>
   8294c:	3940b264 	ldrb	w4, [x19, #44]
   82950:	d0000143 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82954:	f0000141 	adrp	x1, ad000 <From+0x4c0>
   82958:	913c8063 	add	x3, x3, #0xf20
   8295c:	91058021 	add	x1, x1, #0x160
   82960:	79405667 	ldrh	w7, [x19, #42]
   82964:	52800082 	mov	w2, #0x4                   	// #4
   82968:	3940a666 	ldrb	w6, [x19, #41]
   8296c:	b90003e4 	str	w4, [sp]
   82970:	3940a265 	ldrb	w5, [x19, #40]
   82974:	3940b664 	ldrb	w4, [x19, #45]
   82978:	94007012 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8297c:	17ffffeb 	b	82928 <CXHCIEndpoint::DumpStatus()+0x28>
   82980:	940070d4 	bl	9ecd0 <CLogger::Get()>
   82984:	d0000143 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82988:	f0000141 	adrp	x1, ad000 <From+0x4c0>
   8298c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   82990:	913c2063 	add	x3, x3, #0xf08
   82994:	91058021 	add	x1, x1, #0x160
   82998:	52800082 	mov	w2, #0x4                   	// #4
   8299c:	f94013f3 	ldr	x19, [sp, #32]
   829a0:	9100c3ff 	add	sp, sp, #0x30
   829a4:	14007007 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   829a8:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   829ac:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   829b0:	91388021 	add	x1, x1, #0xe20
   829b4:	913a2000 	add	x0, x0, #0xe88
   829b8:	52803242 	mov	w2, #0x192                 	// #402
   829bc:	94006731 	bl	9c680 <assertion_failed>

00000000000829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>:
   829c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   829c4:	910003fd 	mov	x29, sp
   829c8:	a90153f3 	stp	x19, x20, [sp, #16]
   829cc:	aa0003f4 	mov	x20, x0
   829d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   829d4:	a90363f7 	stp	x23, x24, [sp, #48]
   829d8:	f9401000 	ldr	x0, [x0, #32]
   829dc:	b40002e0 	cbz	x0, 82a38 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   829e0:	2a0103f5 	mov	w21, w1
   829e4:	2a0203f6 	mov	w22, w2
   829e8:	2a0303f8 	mov	w24, w3
   829ec:	2a0403f7 	mov	w23, w4
   829f0:	940005c0 	bl	840f0 <CXHCIRing::GetEnqueueTRB()>
   829f4:	aa0003f3 	mov	x19, x0
   829f8:	52800000 	mov	w0, #0x0                   	// #0
   829fc:	b4000153 	cbz	x19, 82a24 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)+0x64>
   82a00:	f9401280 	ldr	x0, [x20, #32]
   82a04:	29005e78 	stp	w24, w23, [x19]
   82a08:	b9000a76 	str	w22, [x19, #8]
   82a0c:	9400064d 	bl	84340 <CXHCIRing::GetCycleState() const>
   82a10:	2a150015 	orr	w21, w0, w21
   82a14:	f9401280 	ldr	x0, [x20, #32]
   82a18:	b9000e75 	str	w21, [x19, #12]
   82a1c:	9400060d 	bl	84250 <CXHCIRing::IncrementEnqueue()>
   82a20:	52800020 	mov	w0, #0x1                   	// #1
   82a24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82a2c:	a94363f7 	ldp	x23, x24, [sp, #48]
   82a30:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82a34:	d65f03c0 	ret
   82a38:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82a3c:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82a40:	91388021 	add	x1, x1, #0xe20
   82a44:	913a2000 	add	x0, x0, #0xe88
   82a48:	52803462 	mov	w2, #0x1a3                 	// #419
   82a4c:	9400670d 	bl	9c680 <assertion_failed>

0000000000082a50 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)>:
   82a50:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   82a54:	910003fd 	mov	x29, sp
   82a58:	b4000a61 	cbz	x1, 82ba4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x154>
   82a5c:	a90153f3 	stp	x19, x20, [sp, #16]
   82a60:	a9025bf5 	stp	x21, x22, [sp, #32]
   82a64:	2a0203f5 	mov	w21, w2
   82a68:	35000b22 	cbnz	w2, 82bcc <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x17c>
   82a6c:	aa0003f3 	mov	x19, x0
   82a70:	39406016 	ldrb	w22, [x0, #24]
   82a74:	350000f6 	cbnz	w22, 82a90 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x40>
   82a78:	52800016 	mov	w22, #0x0                   	// #0
   82a7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a80:	2a1603e0 	mov	w0, w22
   82a84:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82a88:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82a8c:	d65f03c0 	ret
   82a90:	aa0103e0 	mov	x0, x1
   82a94:	aa0103f4 	mov	x20, x1
   82a98:	a90363f7 	stp	x23, x24, [sp, #48]
   82a9c:	940028bd 	bl	8cd90 <CUSBRequest::GetBuffer()>
   82aa0:	aa0003f7 	mov	x23, x0
   82aa4:	aa1403e0 	mov	x0, x20
   82aa8:	940028ca 	bl	8cdd0 <CUSBRequest::GetBufLen() const>
   82aac:	3940ba61 	ldrb	w1, [x19, #46]
   82ab0:	2a0003f8 	mov	w24, w0
   82ab4:	360804e1 	tbz	w1, #1, 82b50 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x100>
   82ab8:	b4000fb7 	cbz	x23, 82cac <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x25c>
   82abc:	340011e0 	cbz	w0, 82cf8 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x2a8>
   82ac0:	f14a02ff 	cmp	x23, #0x280, lsl #12
   82ac4:	54001289 	b.ls	82d14 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x2c4>  // b.plast
   82ac8:	2a0003e1 	mov	w1, w0
   82acc:	aa1703e0 	mov	x0, x23
   82ad0:	94008f14 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   82ad4:	2a1803e2 	mov	w2, w24
   82ad8:	d360fee4 	lsr	x4, x23, #32
   82adc:	2a1703e3 	mov	w3, w23
   82ae0:	52808401 	mov	w1, #0x420                 	// #1056
   82ae4:	aa1303e0 	mov	x0, x19
   82ae8:	97ffffb6 	bl	829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   82aec:	72001c1f 	tst	w0, #0xff
   82af0:	54000da0 	b.eq	82ca4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x254>  // b.none
   82af4:	f9401a60 	ldr	x0, [x19, #48]
   82af8:	b50011c0 	cbnz	x0, 82d30 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x2e0>
   82afc:	f9001a74 	str	x20, [x19, #48]
   82b00:	d5033f9f 	dsb	sy
   82b04:	f9400260 	ldr	x0, [x19]
   82b08:	b4001220 	cbz	x0, 82d4c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x2fc>
   82b0c:	3940b661 	ldrb	w1, [x19, #45]
   82b10:	51000421 	sub	w1, w1, #0x1
   82b14:	12001c21 	and	w1, w1, #0xff
   82b18:	7100783f 	cmp	w1, #0x1e
   82b1c:	54001268 	b.hi	82d68 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x318>  // b.pmore
   82b20:	f9400a74 	ldr	x20, [x19, #16]
   82b24:	94000b7b 	bl	85910 <CXHCIUSBDevice::GetSlotID() const>
   82b28:	3940b662 	ldrb	w2, [x19, #45]
   82b2c:	12001c01 	and	w1, w0, #0xff
   82b30:	aa1403e0 	mov	x0, x20
   82b34:	94000447 	bl	83c50 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>
   82b38:	2a1603e0 	mov	w0, w22
   82b3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82b40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82b44:	a94363f7 	ldp	x23, x24, [sp, #48]
   82b48:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82b4c:	d65f03c0 	ret
   82b50:	7100103f 	cmp	w1, #0x4
   82b54:	f90023f9 	str	x25, [sp, #64]
   82b58:	54000b81 	b.ne	82cc8 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x278>  // b.any
   82b5c:	aa1403e0 	mov	x0, x20
   82b60:	94002874 	bl	8cd30 <CUSBRequest::GetSetupData()>
   82b64:	aa0003e4 	mov	x4, x0
   82b68:	b4000bc0 	cbz	x0, 82ce0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x290>
   82b6c:	39c00000 	ldrsb	w0, [x0]
   82b70:	37f803e0 	tbnz	w0, #31, 82bec <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x19c>
   82b74:	35000838 	cbnz	w24, 82c78 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x228>
   82b78:	29401083 	ldp	w3, w4, [x4]
   82b7c:	52800102 	mov	w2, #0x8                   	// #8
   82b80:	52810801 	mov	w1, #0x840                 	// #2112
   82b84:	aa1303e0 	mov	x0, x19
   82b88:	52a00035 	mov	w21, #0x10000               	// #65536
   82b8c:	97ffff8d 	bl	829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   82b90:	72001c1f 	tst	w0, #0xff
   82b94:	540005c1 	b.ne	82c4c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x1fc>  // b.any
   82b98:	a94363f7 	ldp	x23, x24, [sp, #48]
   82b9c:	f94023f9 	ldr	x25, [sp, #64]
   82ba0:	17ffffb6 	b	82a78 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x28>
   82ba4:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ba8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82bac:	a90153f3 	stp	x19, x20, [sp, #16]
   82bb0:	91388021 	add	x1, x1, #0xe20
   82bb4:	913d8000 	add	x0, x0, #0xf60
   82bb8:	52801c82 	mov	w2, #0xe4                  	// #228
   82bbc:	a9025bf5 	stp	x21, x22, [sp, #32]
   82bc0:	a90363f7 	stp	x23, x24, [sp, #48]
   82bc4:	f90023f9 	str	x25, [sp, #64]
   82bc8:	940066ae 	bl	9c680 <assertion_failed>
   82bcc:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82bd0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82bd4:	a90363f7 	stp	x23, x24, [sp, #48]
   82bd8:	91388021 	add	x1, x1, #0xe20
   82bdc:	913dc000 	add	x0, x0, #0xf70
   82be0:	52801ca2 	mov	w2, #0xe5                  	// #229
   82be4:	f90023f9 	str	x25, [sp, #64]
   82be8:	940066a6 	bl	9c680 <assertion_failed>
   82bec:	52810801 	mov	w1, #0x840                 	// #2112
   82bf0:	72a00061 	movk	w1, #0x3, lsl #16
   82bf4:	52a00039 	mov	w25, #0x10000               	// #65536
   82bf8:	34000d38 	cbz	w24, 82d9c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x34c>
   82bfc:	29401083 	ldp	w3, w4, [x4]
   82c00:	52800102 	mov	w2, #0x8                   	// #8
   82c04:	aa1303e0 	mov	x0, x19
   82c08:	97ffff6e 	bl	829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   82c0c:	72001c1f 	tst	w0, #0xff
   82c10:	54fffc40 	b.eq	82b98 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x148>  // b.none
   82c14:	b4000b97 	cbz	x23, 82d84 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x334>
   82c18:	f14a02ff 	cmp	x23, #0x280, lsl #12
   82c1c:	54000389 	b.ls	82c8c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x23c>  // b.plast
   82c20:	2a1803e1 	mov	w1, w24
   82c24:	aa1703e0 	mov	x0, x23
   82c28:	94008ebe 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   82c2c:	2a1803e2 	mov	w2, w24
   82c30:	32160721 	orr	w1, w25, #0xc00
   82c34:	d360fee4 	lsr	x4, x23, #32
   82c38:	2a1703e3 	mov	w3, w23
   82c3c:	aa1303e0 	mov	x0, x19
   82c40:	97ffff60 	bl	829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   82c44:	72001c1f 	tst	w0, #0xff
   82c48:	54fffa80 	b.eq	82b98 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x148>  // b.none
   82c4c:	52820401 	mov	w1, #0x1020                	// #4128
   82c50:	52800004 	mov	w4, #0x0                   	// #0
   82c54:	2a0102a1 	orr	w1, w21, w1
   82c58:	52800003 	mov	w3, #0x0                   	// #0
   82c5c:	52800002 	mov	w2, #0x0                   	// #0
   82c60:	aa1303e0 	mov	x0, x19
   82c64:	97ffff57 	bl	829c0 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   82c68:	72001c1f 	tst	w0, #0xff
   82c6c:	54fff960 	b.eq	82b98 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x148>  // b.none
   82c70:	f94023f9 	ldr	x25, [sp, #64]
   82c74:	17ffffa0 	b	82af4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0xa4>
   82c78:	52810801 	mov	w1, #0x840                 	// #2112
   82c7c:	72a00041 	movk	w1, #0x2, lsl #16
   82c80:	52800019 	mov	w25, #0x0                   	// #0
   82c84:	52a00035 	mov	w21, #0x10000               	// #65536
   82c88:	17ffffdd 	b	82bfc <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x1ac>
   82c8c:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82c90:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82c94:	91388021 	add	x1, x1, #0xe20
   82c98:	913e4000 	add	x0, x0, #0xf90
   82c9c:	52802622 	mov	w2, #0x131                 	// #305
   82ca0:	94006678 	bl	9c680 <assertion_failed>
   82ca4:	a94363f7 	ldp	x23, x24, [sp, #48]
   82ca8:	17ffff74 	b	82a78 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x28>
   82cac:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82cb0:	90000160 	adrp	x0, ae000 <FromDevice+0x108>
   82cb4:	f90023f9 	str	x25, [sp, #64]
   82cb8:	91388021 	add	x1, x1, #0xe20
   82cbc:	91326000 	add	x0, x0, #0xc98
   82cc0:	52801e62 	mov	w2, #0xf3                  	// #243
   82cc4:	9400666f 	bl	9c680 <assertion_failed>
   82cc8:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ccc:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82cd0:	91388021 	add	x1, x1, #0xe20
   82cd4:	913ee000 	add	x0, x0, #0xfb8
   82cd8:	52802062 	mov	w2, #0x103                 	// #259
   82cdc:	94006669 	bl	9c680 <assertion_failed>
   82ce0:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ce4:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ce8:	91388021 	add	x1, x1, #0xe20
   82cec:	913f4000 	add	x0, x0, #0xfd0
   82cf0:	528020c2 	mov	w2, #0x106                 	// #262
   82cf4:	94006663 	bl	9c680 <assertion_failed>
   82cf8:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82cfc:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d00:	f90023f9 	str	x25, [sp, #64]
   82d04:	91388021 	add	x1, x1, #0xe20
   82d08:	913ac000 	add	x0, x0, #0xeb0
   82d0c:	52801e82 	mov	w2, #0xf4                  	// #244
   82d10:	9400665c 	bl	9c680 <assertion_failed>
   82d14:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d18:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d1c:	f90023f9 	str	x25, [sp, #64]
   82d20:	91388021 	add	x1, x1, #0xe20
   82d24:	913e4000 	add	x0, x0, #0xf90
   82d28:	52801ea2 	mov	w2, #0xf5                  	// #245
   82d2c:	94006655 	bl	9c680 <assertion_failed>
   82d30:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d34:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d38:	f90023f9 	str	x25, [sp, #64]
   82d3c:	91388021 	add	x1, x1, #0xe20
   82d40:	913f8000 	add	x0, x0, #0xfe0
   82d44:	528028c2 	mov	w2, #0x146                 	// #326
   82d48:	9400664e 	bl	9c680 <assertion_failed>
   82d4c:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d50:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d54:	f90023f9 	str	x25, [sp, #64]
   82d58:	91388021 	add	x1, x1, #0xe20
   82d5c:	913fc000 	add	x0, x0, #0xff0
   82d60:	52802962 	mov	w2, #0x14b                 	// #331
   82d64:	94006647 	bl	9c680 <assertion_failed>
   82d68:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d6c:	f0000140 	adrp	x0, ad000 <From+0x4c0>
   82d70:	f90023f9 	str	x25, [sp, #64]
   82d74:	91388021 	add	x1, x1, #0xe20
   82d78:	91000000 	add	x0, x0, #0x0
   82d7c:	52802982 	mov	w2, #0x14c                 	// #332
   82d80:	94006640 	bl	9c680 <assertion_failed>
   82d84:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82d88:	90000160 	adrp	x0, ae000 <FromDevice+0x108>
   82d8c:	91388021 	add	x1, x1, #0xe20
   82d90:	91326000 	add	x0, x0, #0xc98
   82d94:	528025e2 	mov	w2, #0x12f                 	// #303
   82d98:	9400663a 	bl	9c680 <assertion_failed>
   82d9c:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82da0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82da4:	91388021 	add	x1, x1, #0xe20
   82da8:	913ac000 	add	x0, x0, #0xeb0
   82dac:	528021a2 	mov	w2, #0x10d                 	// #269
   82db0:	94006634 	bl	9c680 <assertion_failed>
   82db4:	d503201f 	nop
   82db8:	d503201f 	nop
   82dbc:	d503201f 	nop

0000000000082dc0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)>:
   82dc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82dc4:	910003fd 	mov	x29, sp
   82dc8:	a90153f3 	stp	x19, x20, [sp, #16]
   82dcc:	a9025bf5 	stp	x21, x22, [sp, #32]
   82dd0:	b40007a1 	cbz	x1, 82ec4 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x104>
   82dd4:	35000842 	cbnz	w2, 82edc <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x11c>
   82dd8:	aa0103f5 	mov	x21, x1
   82ddc:	90000001 	adrp	x1, 82000 <CXHCIDevice::Initialize()+0x2a0>
   82de0:	aa0003f4 	mov	x20, x0
   82de4:	aa0003e3 	mov	x3, x0
   82de8:	91180021 	add	x1, x1, #0x600
   82dec:	aa1503e0 	mov	x0, x21
   82df0:	d2800002 	mov	x2, #0x0                   	// #0
   82df4:	940027fb 	bl	8cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   82df8:	3940e280 	ldrb	w0, [x20, #56]
   82dfc:	72001c1f 	tst	w0, #0xff
   82e00:	540007a0 	b.eq	82ef4 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x134>  // b.none
   82e04:	52800002 	mov	w2, #0x0                   	// #0
   82e08:	aa1503e1 	mov	x1, x21
   82e0c:	3900e29f 	strb	wzr, [x20, #56]
   82e10:	aa1403e0 	mov	x0, x20
   82e14:	97ffff0f 	bl	82a50 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)>
   82e18:	72001c13 	ands	w19, w0, #0xff
   82e1c:	540000c1 	b.ne	82e34 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x74>  // b.any
   82e20:	2a1303e0 	mov	w0, w19
   82e24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82e2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e30:	d65f03c0 	ret
   82e34:	9400858b 	bl	a4460 <CTimer::Get()>
   82e38:	94008296 	bl	a3890 <CTimer::GetTicks() const>
   82e3c:	2a0003f6 	mov	w22, w0
   82e40:	14000006 	b	82e58 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x98>
   82e44:	94008587 	bl	a4460 <CTimer::Get()>
   82e48:	94008292 	bl	a3890 <CTimer::GetTicks() const>
   82e4c:	4b160002 	sub	w2, w0, w22
   82e50:	71018c5f 	cmp	w2, #0x63
   82e54:	540001c8 	b.hi	82e8c <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0xcc>  // b.pmore
   82e58:	3940e282 	ldrb	w2, [x20, #56]
   82e5c:	72001c53 	ands	w19, w2, #0xff
   82e60:	54ffff20 	b.eq	82e44 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x84>  // b.none
   82e64:	d5033fbf 	dmb	sy
   82e68:	aa1503e0 	mov	x0, x21
   82e6c:	940027a1 	bl	8ccf0 <CUSBRequest::GetStatus() const>
   82e70:	7100001f 	cmp	w0, #0x0
   82e74:	1a9f07f3 	cset	w19, ne  // ne = any
   82e78:	2a1303e0 	mov	w0, w19
   82e7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82e84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e88:	d65f03c0 	ret
   82e8c:	94006f91 	bl	9ecd0 <CLogger::Get()>
   82e90:	f0000143 	adrp	x3, ad000 <From+0x4c0>
   82e94:	f0000141 	adrp	x1, ad000 <From+0x4c0>
   82e98:	9100a063 	add	x3, x3, #0x28
   82e9c:	91058021 	add	x1, x1, #0x160
   82ea0:	52800082 	mov	w2, #0x4                   	// #4
   82ea4:	94006ec7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82ea8:	52800020 	mov	w0, #0x1                   	// #1
   82eac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82eb0:	3900e280 	strb	w0, [x20, #56]
   82eb4:	2a1303e0 	mov	w0, w19
   82eb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   82ebc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82ec0:	d65f03c0 	ret
   82ec4:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ec8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ecc:	91388021 	add	x1, x1, #0xe20
   82ed0:	913d8000 	add	x0, x0, #0xf60
   82ed4:	52801802 	mov	w2, #0xc0                  	// #192
   82ed8:	940065ea 	bl	9c680 <assertion_failed>
   82edc:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ee0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ee4:	91388021 	add	x1, x1, #0xe20
   82ee8:	913dc000 	add	x0, x0, #0xf70
   82eec:	52801822 	mov	w2, #0xc1                  	// #193
   82ef0:	940065e4 	bl	9c680 <assertion_failed>
   82ef4:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82ef8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82efc:	91388021 	add	x1, x1, #0xe20
   82f00:	91394000 	add	x0, x0, #0xe50
   82f04:	528018a2 	mov	w2, #0xc5                  	// #197
   82f08:	940065de 	bl	9c680 <assertion_failed>
   82f0c:	d503201f 	nop

0000000000082f10 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()>:
   82f10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82f14:	910003fd 	mov	x29, sp
   82f18:	a90153f3 	stp	x19, x20, [sp, #16]
   82f1c:	aa0003f3 	mov	x19, x0
   82f20:	f9402000 	ldr	x0, [x0, #64]
   82f24:	b50003c0 	cbnz	x0, 82f9c <CXHCIEndpoint::GetInputContextSetMaxPacketSize()+0x8c>
   82f28:	d28283e0 	mov	x0, #0x141f                	// #5151
   82f2c:	940089dd 	bl	a56a0 <operator new[](unsigned long)>
   82f30:	913ffc14 	add	x20, x0, #0xfff
   82f34:	f9002260 	str	x0, [x19, #64]
   82f38:	f9400261 	ldr	x1, [x19]
   82f3c:	9274ce94 	and	x20, x20, #0xfffffffffffff000
   82f40:	b40003a1 	cbz	x1, 82fb4 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()+0xa4>
   82f44:	d2800402 	mov	x2, #0x20                  	// #32
   82f48:	52800001 	mov	w1, #0x0                   	// #0
   82f4c:	aa1403e0 	mov	x0, x20
   82f50:	94008550 	bl	a4490 <memset>
   82f54:	f9400260 	ldr	x0, [x19]
   82f58:	94000a7e 	bl	85950 <CXHCIUSBDevice::GetDeviceContext()>
   82f5c:	aa0003e1 	mov	x1, x0
   82f60:	d2808002 	mov	x2, #0x400                 	// #1024
   82f64:	91008280 	add	x0, x20, #0x20
   82f68:	94008764 	bl	a4cf8 <memcpy>
   82f6c:	79405663 	ldrh	w3, [x19, #42]
   82f70:	aa1403e2 	mov	x2, x20
   82f74:	b21f03e4 	mov	x4, #0x200000002           	// #8589934594
   82f78:	aa1403e0 	mov	x0, x20
   82f7c:	d2808401 	mov	x1, #0x420                 	// #1056
   82f80:	f8040444 	str	x4, [x2], #64
   82f84:	79000c43 	strh	w3, [x2, #6]
   82f88:	94008de6 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   82f8c:	aa1403e0 	mov	x0, x20
   82f90:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82f98:	d65f03c0 	ret
   82f9c:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82fa0:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82fa4:	91388021 	add	x1, x1, #0xe20
   82fa8:	9139a000 	add	x0, x0, #0xe68
   82fac:	52803742 	mov	w2, #0x1ba                 	// #442
   82fb0:	940065b4 	bl	9c680 <assertion_failed>
   82fb4:	d0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82fb8:	d0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   82fbc:	91388021 	add	x1, x1, #0xe20
   82fc0:	913fc000 	add	x0, x0, #0xff0
   82fc4:	52803822 	mov	w2, #0x1c1                 	// #449
   82fc8:	940065ae 	bl	9c680 <assertion_failed>
   82fcc:	d503201f 	nop

0000000000082fd0 <CXHCIEndpoint::GetInputContextConfigureEndpoint()>:
   82fd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82fd4:	910003fd 	mov	x29, sp
   82fd8:	a90153f3 	stp	x19, x20, [sp, #16]
   82fdc:	aa0003f4 	mov	x20, x0
   82fe0:	a9025bf5 	stp	x21, x22, [sp, #32]
   82fe4:	f9402000 	ldr	x0, [x0, #64]
   82fe8:	b5000a40 	cbnz	x0, 83130 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x160>
   82fec:	d28283e0 	mov	x0, #0x141f                	// #5151
   82ff0:	940089ac 	bl	a56a0 <operator new[](unsigned long)>
   82ff4:	913ffc13 	add	x19, x0, #0xfff
   82ff8:	d2808402 	mov	x2, #0x420                 	// #1056
   82ffc:	f9002280 	str	x0, [x20, #64]
   83000:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   83004:	52800001 	mov	w1, #0x0                   	// #0
   83008:	aa1303e0 	mov	x0, x19
   8300c:	94008521 	bl	a4490 <memset>
   83010:	3940b695 	ldrb	w21, [x20, #45]
   83014:	510006b6 	sub	w22, w21, #0x1
   83018:	12001ec0 	and	w0, w22, #0xff
   8301c:	7100781f 	cmp	w0, #0x1e
   83020:	54000948 	b.hi	83148 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x178>  // b.pmore
   83024:	52800021 	mov	w1, #0x1                   	// #1
   83028:	f9401280 	ldr	x0, [x20, #32]
   8302c:	1ad52021 	lsl	w1, w1, w21
   83030:	29000661 	stp	w1, w1, [x19]
   83034:	b4000960 	cbz	x0, 83160 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x190>
   83038:	94000402 	bl	84040 <CXHCIRing::GetFirstTRB()>
   8303c:	93407ed6 	sxtw	x22, w22
   83040:	d37b1eb5 	ubfiz	x21, x21, #5, #8
   83044:	3940ba81 	ldrb	w1, [x20, #46]
   83048:	91000ac2 	add	x2, x22, #0x2
   8304c:	b2400004 	orr	x4, x0, #0x1
   83050:	d37be842 	lsl	x2, x2, #5
   83054:	8b150275 	add	x21, x19, x21
   83058:	79405685 	ldrh	w5, [x20, #42]
   8305c:	8b020263 	add	x3, x19, x2
   83060:	928f8006 	mov	x6, #0xffffffffffff83ff    	// #-31745
   83064:	f90016a4 	str	x4, [x21, #40]
   83068:	f2dfff26 	movk	x6, #0xfff9, lsl #32
   8306c:	39401064 	ldrb	w4, [x3, #4]
   83070:	7100183f 	cmp	w1, #0x6
   83074:	79000c65 	strh	w5, [x3, #6]
   83078:	331d0824 	bfi	w4, w1, #3, #3
   8307c:	39001064 	strb	w4, [x3, #4]
   83080:	390096bf 	strb	wzr, [x21, #37]
   83084:	f8626a60 	ldr	x0, [x19, x2]
   83088:	8a060000 	and	x0, x0, x6
   8308c:	b25f0400 	orr	x0, x0, #0x600000000
   83090:	f8226a60 	str	x0, [x19, x2]
   83094:	54000380 	b.eq	83104 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x134>  // b.none
   83098:	54000268 	b.hi	830e4 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x114>  // b.pmore
   8309c:	7100083f 	cmp	w1, #0x2
   830a0:	54000320 	b.eq	83104 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x134>  // b.none
   830a4:	71000c3f 	cmp	w1, #0x3
   830a8:	54000221 	b.ne	830ec <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x11c>  // b.any
   830ac:	3940b281 	ldrb	w1, [x20, #44]
   830b0:	8b161676 	add	x22, x19, x22, lsl #5
   830b4:	52800200 	mov	w0, #0x10                  	// #16
   830b8:	39008aa1 	strb	w1, [x21, #34]
   830bc:	d2808401 	mov	x1, #0x420                 	// #1056
   830c0:	7900a2c0 	strh	w0, [x22, #80]
   830c4:	aa1303e0 	mov	x0, x19
   830c8:	7900a6c5 	strh	w5, [x22, #82]
   830cc:	94008d95 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   830d0:	aa1303e0 	mov	x0, x19
   830d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   830d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   830dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   830e0:	d65f03c0 	ret
   830e4:	71001c3f 	cmp	w1, #0x7
   830e8:	54fffe20 	b.eq	830ac <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0xdc>  // b.none
   830ec:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   830f0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   830f4:	91388021 	add	x1, x1, #0xe20
   830f8:	912f4000 	add	x0, x0, #0xbd0
   830fc:	52804002 	mov	w2, #0x200                 	// #512
   83100:	94006560 	bl	9c680 <assertion_failed>
   83104:	8b161676 	add	x22, x19, x22, lsl #5
   83108:	52802000 	mov	w0, #0x100                 	// #256
   8310c:	d2808401 	mov	x1, #0x420                 	// #1056
   83110:	7900a2c0 	strh	w0, [x22, #80]
   83114:	aa1303e0 	mov	x0, x19
   83118:	94008d82 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   8311c:	aa1303e0 	mov	x0, x19
   83120:	a94153f3 	ldp	x19, x20, [sp, #16]
   83124:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83128:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8312c:	d65f03c0 	ret
   83130:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83134:	b0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83138:	91388021 	add	x1, x1, #0xe20
   8313c:	9139a000 	add	x0, x0, #0xe68
   83140:	52803ac2 	mov	w2, #0x1d6                 	// #470
   83144:	9400654f 	bl	9c680 <assertion_failed>
   83148:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8314c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83150:	91388021 	add	x1, x1, #0xe20
   83154:	91000000 	add	x0, x0, #0x0
   83158:	52803c02 	mov	w2, #0x1e0                 	// #480
   8315c:	94006549 	bl	9c680 <assertion_failed>
   83160:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83164:	b0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83168:	91388021 	add	x1, x1, #0xe20
   8316c:	913a2000 	add	x0, x0, #0xe88
   83170:	52803ce2 	mov	w2, #0x1e7                 	// #487
   83174:	94006543 	bl	9c680 <assertion_failed>
   83178:	d503201f 	nop
   8317c:	d503201f 	nop

0000000000083180 <CXHCIEndpoint::FreeInputContext()>:
   83180:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83184:	910003fd 	mov	x29, sp
   83188:	f9000bf3 	str	x19, [sp, #16]
   8318c:	aa0003f3 	mov	x19, x0
   83190:	f9402000 	ldr	x0, [x0, #64]
   83194:	b40000c0 	cbz	x0, 831ac <CXHCIEndpoint::FreeInputContext()+0x2c>
   83198:	94008952 	bl	a56e0 <operator delete[](void*)>
   8319c:	f900227f 	str	xzr, [x19, #64]
   831a0:	f9400bf3 	ldr	x19, [sp, #16]
   831a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   831a8:	d65f03c0 	ret
   831ac:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   831b0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   831b4:	91388021 	add	x1, x1, #0xe20
   831b8:	91010000 	add	x0, x0, #0x40
   831bc:	52804162 	mov	w2, #0x20b                 	// #523
   831c0:	94006530 	bl	9c680 <assertion_failed>
   831c4:	d503201f 	nop
   831c8:	d503201f 	nop
   831cc:	d503201f 	nop

00000000000831d0 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)>:
   831d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   831d4:	910003fd 	mov	x29, sp
   831d8:	a90153f3 	stp	x19, x20, [sp, #16]
   831dc:	f90013f5 	str	x21, [sp, #32]
   831e0:	3940b414 	ldrb	w20, [x0, #45]
   831e4:	7100069f 	cmp	w20, #0x1
   831e8:	54000541 	b.ne	83290 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xc0>  // b.any
   831ec:	aa0003f3 	mov	x19, x0
   831f0:	f9400000 	ldr	x0, [x0]
   831f4:	2a0103f5 	mov	w21, w1
   831f8:	94000d12 	bl	86640 <CUSBDevice::GetSpeed() const>
   831fc:	7100041f 	cmp	w0, #0x1
   83200:	540003e1 	b.ne	8327c <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xac>  // b.any
   83204:	510022a0 	sub	w0, w21, #0x8
   83208:	7100e01f 	cmp	w0, #0x38
   8320c:	540004e8 	b.hi	832a8 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xd8>  // b.pmore
   83210:	aa1303e0 	mov	x0, x19
   83214:	79005675 	strh	w21, [x19, #42]
   83218:	97ffff3e 	bl	82f10 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()>
   8321c:	aa0003f4 	mov	x20, x0
   83220:	b4000500 	cbz	x0, 832c0 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xf0>
   83224:	f9400660 	ldr	x0, [x19, #8]
   83228:	b4000580 	cbz	x0, 832d8 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0x108>
   8322c:	f9400261 	ldr	x1, [x19]
   83230:	b4000601 	cbz	x1, 832f0 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0x120>
   83234:	97fffc1f 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   83238:	aa0003f5 	mov	x21, x0
   8323c:	f9400260 	ldr	x0, [x19]
   83240:	940009b4 	bl	85910 <CXHCIUSBDevice::GetSlotID() const>
   83244:	aa1403e2 	mov	x2, x20
   83248:	2a0003e1 	mov	w1, w0
   8324c:	aa1503e0 	mov	x0, x21
   83250:	94002bb4 	bl	8e120 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>
   83254:	2a0003e1 	mov	w1, w0
   83258:	aa1303e0 	mov	x0, x19
   8325c:	2a0103f3 	mov	w19, w1
   83260:	97ffffc8 	bl	83180 <CXHCIEndpoint::FreeInputContext()>
   83264:	7100067f 	cmp	w19, #0x1
   83268:	1a9f17e0 	cset	w0, eq  // eq = none
   8326c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83270:	f94013f5 	ldr	x21, [sp, #32]
   83274:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83278:	d65f03c0 	ret
   8327c:	2a1403e0 	mov	w0, w20
   83280:	a94153f3 	ldp	x19, x20, [sp, #16]
   83284:	f94013f5 	ldr	x21, [sp, #32]
   83288:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8328c:	d65f03c0 	ret
   83290:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83294:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83298:	91388021 	add	x1, x1, #0xe20
   8329c:	91018000 	add	x0, x0, #0x60
   832a0:	52801502 	mov	w2, #0xa8                  	// #168
   832a4:	940064f7 	bl	9c680 <assertion_failed>
   832a8:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   832ac:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   832b0:	91388021 	add	x1, x1, #0xe20
   832b4:	9101e000 	add	x0, x0, #0x78
   832b8:	528015c2 	mov	w2, #0xae                  	// #174
   832bc:	940064f1 	bl	9c680 <assertion_failed>
   832c0:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   832c4:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   832c8:	91388021 	add	x1, x1, #0xe20
   832cc:	9102a000 	add	x0, x0, #0xa8
   832d0:	52801642 	mov	w2, #0xb2                  	// #178
   832d4:	940064eb 	bl	9c680 <assertion_failed>
   832d8:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   832dc:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   832e0:	91388021 	add	x1, x1, #0xe20
   832e4:	91030000 	add	x0, x0, #0xc0
   832e8:	52801682 	mov	w2, #0xb4                  	// #180
   832ec:	940064e5 	bl	9c680 <assertion_failed>
   832f0:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   832f4:	b0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   832f8:	91388021 	add	x1, x1, #0xe20
   832fc:	913fc000 	add	x0, x0, #0xff0
   83300:	528016a2 	mov	w2, #0xb5                  	// #181
   83304:	940064df 	bl	9c680 <assertion_failed>
   83308:	d503201f 	nop
   8330c:	d503201f 	nop

0000000000083310 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)>:
   83310:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83314:	910003fd 	mov	x29, sp
   83318:	a90153f3 	stp	x19, x20, [sp, #16]
   8331c:	aa0003f3 	mov	x19, x0
   83320:	aa0303e0 	mov	x0, x3
   83324:	aa0203f4 	mov	x20, x2
   83328:	a9025bf5 	stp	x21, x22, [sp, #32]
   8332c:	aa0303f5 	mov	x21, x3
   83330:	52800036 	mov	w22, #0x1                   	// #1
   83334:	a9000e61 	stp	x1, x3, [x19]
   83338:	97fffbc6 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   8333c:	aa0003e1 	mov	x1, x0
   83340:	d2800500 	mov	x0, #0x28                  	// #40
   83344:	39006276 	strb	w22, [x19, #24]
   83348:	f900127f 	str	xzr, [x19, #32]
   8334c:	f9000a61 	str	x1, [x19, #16]
   83350:	7802d27f 	sturh	wzr, [x19, #45]
   83354:	f9001a7f 	str	xzr, [x19, #48]
   83358:	3900e276 	strb	w22, [x19, #56]
   8335c:	f900227f 	str	xzr, [x19, #64]
   83360:	940088c8 	bl	a5680 <operator new(unsigned long)>
   83364:	aa1503e3 	mov	x3, x21
   83368:	52800802 	mov	w2, #0x40                  	// #64
   8336c:	aa0003f5 	mov	x21, x0
   83370:	52800001 	mov	w1, #0x0                   	// #0
   83374:	940002e7 	bl	83f10 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   83378:	aa1503e0 	mov	x0, x21
   8337c:	f9001275 	str	x21, [x19, #32]
   83380:	94000320 	bl	84000 <CXHCIRing::IsValid() const>
   83384:	72001c1f 	tst	w0, #0xff
   83388:	54000660 	b.eq	83454 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x144>  // b.none
   8338c:	b4000b94 	cbz	x20, 834fc <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1ec>
   83390:	39400280 	ldrb	w0, [x20]
   83394:	7100181f 	cmp	w0, #0x6
   83398:	54000be9 	b.ls	83514 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x204>  // b.plast
   8339c:	39400680 	ldrb	w0, [x20, #1]
   833a0:	7100141f 	cmp	w0, #0x5
   833a4:	540007c1 	b.ne	8349c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x18c>  // b.any
   833a8:	79400a83 	ldrh	w3, [x20, #4]
   833ac:	39400a82 	ldrb	w2, [x20, #2]
   833b0:	39400e81 	ldrb	w1, [x20, #3]
   833b4:	12002863 	and	w3, w3, #0x7ff
   833b8:	f9400260 	ldr	x0, [x19]
   833bc:	3900a262 	strb	w2, [x19, #40]
   833c0:	79005663 	strh	w3, [x19, #42]
   833c4:	3900a661 	strb	w1, [x19, #41]
   833c8:	b4000b20 	cbz	x0, 8352c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x21c>
   833cc:	12000435 	and	w21, w1, #0x3
   833d0:	71000ebf 	cmp	w21, #0x3
   833d4:	54000700 	b.eq	834b4 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1a4>  // b.none
   833d8:	3900b27f 	strb	wzr, [x19, #44]
   833dc:	72000c40 	ands	w0, w2, #0xf
   833e0:	54000b20 	b.eq	83544 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x234>  // b.none
   833e4:	531f1803 	ubfiz	w3, w0, #1, #7
   833e8:	531f7801 	lsl	w1, w0, #1
   833ec:	3940a660 	ldrb	w0, [x19, #41]
   833f0:	3900b663 	strb	w3, [x19, #45]
   833f4:	373803a2 	tbnz	w2, #7, 83468 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x158>
   833f8:	12000400 	and	w0, w0, #0x3
   833fc:	3900ba60 	strb	w0, [x19, #46]
   83400:	340003a0 	cbz	w0, 83474 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x164>
   83404:	aa1303e0 	mov	x0, x19
   83408:	97fffef2 	bl	82fd0 <CXHCIEndpoint::GetInputContextConfigureEndpoint()>
   8340c:	aa0003f4 	mov	x20, x0
   83410:	b4000b60 	cbz	x0, 8357c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x26c>
   83414:	f9400660 	ldr	x0, [x19, #8]
   83418:	b4000be0 	cbz	x0, 83594 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x284>
   8341c:	97fffba5 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   83420:	aa0003f5 	mov	x21, x0
   83424:	f9400260 	ldr	x0, [x19]
   83428:	9400093a 	bl	85910 <CXHCIUSBDevice::GetSlotID() const>
   8342c:	2a0003e1 	mov	w1, w0
   83430:	aa1403e2 	mov	x2, x20
   83434:	52800003 	mov	w3, #0x0                   	// #0
   83438:	aa1503e0 	mov	x0, x21
   8343c:	94002b19 	bl	8e0a0 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)>
   83440:	2a0003f4 	mov	w20, w0
   83444:	aa1303e0 	mov	x0, x19
   83448:	97ffff4e 	bl	83180 <CXHCIEndpoint::FreeInputContext()>
   8344c:	7100069f 	cmp	w20, #0x1
   83450:	54000180 	b.eq	83480 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x170>  // b.none
   83454:	3900627f 	strb	wzr, [x19, #24]
   83458:	a94153f3 	ldp	x19, x20, [sp, #16]
   8345c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83460:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83464:	d65f03c0 	ret
   83468:	11000421 	add	w1, w1, #0x1
   8346c:	12000400 	and	w0, w0, #0x3
   83470:	3900b661 	strb	w1, [x19, #45]
   83474:	11001000 	add	w0, w0, #0x4
   83478:	3900ba60 	strb	w0, [x19, #46]
   8347c:	17ffffe2 	b	83404 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0xf4>
   83480:	aa1303e2 	mov	x2, x19
   83484:	3940b661 	ldrb	w1, [x19, #45]
   83488:	a94153f3 	ldp	x19, x20, [sp, #16]
   8348c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83490:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83494:	f9400040 	ldr	x0, [x2]
   83498:	1400093a 	b	85980 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>
   8349c:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   834a0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   834a4:	91388021 	add	x1, x1, #0xe20
   834a8:	91042000 	add	x0, x0, #0x108
   834ac:	52800ac2 	mov	w2, #0x56                  	// #86
   834b0:	94006474 	bl	9c680 <assertion_failed>
   834b4:	39401a94 	ldrb	w20, [x20, #6]
   834b8:	94000c62 	bl	86640 <CUSBDevice::GetSpeed() const>
   834bc:	7100041f 	cmp	w0, #0x1
   834c0:	540004ec 	b.gt	8355c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x24c>
   834c4:	52807d00 	mov	w0, #0x3e8                 	// #1000
   834c8:	2a1503e1 	mov	w1, w21
   834cc:	52800fa3 	mov	w3, #0x7d                  	// #125
   834d0:	1b007e80 	mul	w0, w20, w0
   834d4:	d503201f 	nop
   834d8:	1ac12062 	lsl	w2, w3, w1
   834dc:	6b00005f 	cmp	w2, w0
   834e0:	5400066a 	b.ge	835ac <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x29c>  // b.tcont
   834e4:	11000421 	add	w1, w1, #0x1
   834e8:	71002c3f 	cmp	w1, #0xb
   834ec:	54ffff61 	b.ne	834d8 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1c8>  // b.any
   834f0:	3940a262 	ldrb	w2, [x19, #40]
   834f4:	3900b261 	strb	w1, [x19, #44]
   834f8:	17ffffb9 	b	833dc <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0xcc>
   834fc:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83500:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83504:	91388021 	add	x1, x1, #0xe20
   83508:	91036000 	add	x0, x0, #0xd8
   8350c:	52800a82 	mov	w2, #0x54                  	// #84
   83510:	9400645c 	bl	9c680 <assertion_failed>
   83514:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83518:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   8351c:	91388021 	add	x1, x1, #0xe20
   83520:	9103a000 	add	x0, x0, #0xe8
   83524:	52800aa2 	mov	w2, #0x55                  	// #85
   83528:	94006456 	bl	9c680 <assertion_failed>
   8352c:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83530:	b0000140 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83534:	91388021 	add	x1, x1, #0xe20
   83538:	913fc000 	add	x0, x0, #0xff0
   8353c:	52800b82 	mov	w2, #0x5c                  	// #92
   83540:	94006450 	bl	9c680 <assertion_failed>
   83544:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83548:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   8354c:	91388021 	add	x1, x1, #0xe20
   83550:	9104e000 	add	x0, x0, #0x138
   83554:	52800ce2 	mov	w2, #0x67                  	// #103
   83558:	9400644a 	bl	9c680 <assertion_failed>
   8355c:	7100429f 	cmp	w20, #0x10
   83560:	52800200 	mov	w0, #0x10                  	// #16
   83564:	1a809280 	csel	w0, w20, w0, ls  // ls = plast
   83568:	72001c1f 	tst	w0, #0xff
   8356c:	1a961000 	csel	w0, w0, w22, ne  // ne = any
   83570:	51000401 	sub	w1, w0, #0x1
   83574:	12001c21 	and	w1, w1, #0xff
   83578:	17ffffde 	b	834f0 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1e0>
   8357c:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83580:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83584:	91388021 	add	x1, x1, #0xe20
   83588:	9102a000 	add	x0, x0, #0xa8
   8358c:	52800f02 	mov	w2, #0x78                  	// #120
   83590:	9400643c 	bl	9c680 <assertion_failed>
   83594:	b0000141 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   83598:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   8359c:	91388021 	add	x1, x1, #0xe20
   835a0:	91030000 	add	x0, x0, #0xc0
   835a4:	52800f42 	mov	w2, #0x7a                  	// #122
   835a8:	94006436 	bl	9c680 <assertion_failed>
   835ac:	12001c21 	and	w1, w1, #0xff
   835b0:	17ffffd0 	b	834f0 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1e0>
   835b4:	d503201f 	nop
   835b8:	d503201f 	nop
   835bc:	d503201f 	nop

00000000000835c0 <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)>:
   835c0:	7100043f 	cmp	w1, #0x1
   835c4:	12001c02 	and	w2, w0, #0xff
   835c8:	540001ac 	b.gt	835fc <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x3c>
   835cc:	52807d01 	mov	w1, #0x3e8                 	// #1000
   835d0:	52800060 	mov	w0, #0x3                   	// #3
   835d4:	52800fa3 	mov	w3, #0x7d                  	// #125
   835d8:	1b017c41 	mul	w1, w2, w1
   835dc:	d503201f 	nop
   835e0:	1ac02062 	lsl	w2, w3, w0
   835e4:	6b01005f 	cmp	w2, w1
   835e8:	540001aa 	b.ge	8361c <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x5c>  // b.tcont
   835ec:	11000400 	add	w0, w0, #0x1
   835f0:	71002c1f 	cmp	w0, #0xb
   835f4:	54ffff61 	b.ne	835e0 <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x20>  // b.any
   835f8:	d65f03c0 	ret
   835fc:	7100405f 	cmp	w2, #0x10
   83600:	52800201 	mov	w1, #0x10                  	// #16
   83604:	1a819041 	csel	w1, w2, w1, ls  // ls = plast
   83608:	72001c3f 	tst	w1, #0xff
   8360c:	1a9f1420 	csinc	w0, w1, wzr, ne  // ne = any
   83610:	51000400 	sub	w0, w0, #0x1
   83614:	12001c00 	and	w0, w0, #0xff
   83618:	d65f03c0 	ret
   8361c:	12001c00 	and	w0, w0, #0xff
   83620:	d65f03c0 	ret
	...

0000000000083630 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)>:
   83630:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83634:	910003fd 	mov	x29, sp
   83638:	a90153f3 	stp	x19, x20, [sp, #16]
   8363c:	aa0003f3 	mov	x19, x0
   83640:	aa0103e0 	mov	x0, x1
   83644:	aa0103f4 	mov	x20, x1
   83648:	f90013f5 	str	x21, [sp, #32]
   8364c:	91004275 	add	x21, x19, #0x10
   83650:	f9000261 	str	x1, [x19]
   83654:	97fffaff 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   83658:	aa0003e4 	mov	x4, x0
   8365c:	aa1403e3 	mov	x3, x20
   83660:	aa1503e0 	mov	x0, x21
   83664:	52800802 	mov	w2, #0x40                  	// #64
   83668:	52800021 	mov	w1, #0x1                   	// #1
   8366c:	f9000664 	str	x4, [x19, #8]
   83670:	94000228 	bl	83f10 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   83674:	aa1503e0 	mov	x0, x21
   83678:	f9001e7f 	str	xzr, [x19, #56]
   8367c:	94000261 	bl	84000 <CXHCIRing::IsValid() const>
   83680:	72001c1f 	tst	w0, #0xff
   83684:	54000700 	b.eq	83764 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x134>  // b.none
   83688:	f9400260 	ldr	x0, [x19]
   8368c:	b4000740 	cbz	x0, 83774 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x144>
   83690:	d2820003 	mov	x3, #0x1000                	// #4096
   83694:	d2800802 	mov	x2, #0x40                  	// #64
   83698:	d2800201 	mov	x1, #0x10                  	// #16
   8369c:	97fffb1d 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   836a0:	f9001e60 	str	x0, [x19, #56]
   836a4:	b4000600 	cbz	x0, 83764 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x134>
   836a8:	aa1503e0 	mov	x0, x21
   836ac:	94000265 	bl	84040 <CXHCIRing::GetFirstTRB()>
   836b0:	f9401e74 	ldr	x20, [x19, #56]
   836b4:	aa0003e1 	mov	x1, x0
   836b8:	aa1503e0 	mov	x0, x21
   836bc:	f9000281 	str	x1, [x20]
   836c0:	94000254 	bl	84010 <CXHCIRing::GetTRBCount() const>
   836c4:	f9401e61 	ldr	x1, [x19, #56]
   836c8:	b9000a80 	str	w0, [x20, #8]
   836cc:	f9400660 	ldr	x0, [x19, #8]
   836d0:	b9000c3f 	str	wzr, [x1, #12]
   836d4:	b40005c0 	cbz	x0, 8378c <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x15c>
   836d8:	52800023 	mov	w3, #0x1                   	// #1
   836dc:	52800102 	mov	w2, #0x8                   	// #8
   836e0:	52800001 	mov	w1, #0x0                   	// #0
   836e4:	9400017b 	bl	83cd0 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   836e8:	52800202 	mov	w2, #0x10                  	// #16
   836ec:	52800001 	mov	w1, #0x0                   	// #0
   836f0:	f9400660 	ldr	x0, [x19, #8]
   836f4:	f9401e63 	ldr	x3, [x19, #56]
   836f8:	9400019a 	bl	83d60 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   836fc:	f9400674 	ldr	x20, [x19, #8]
   83700:	aa1503e0 	mov	x0, x21
   83704:	9400024f 	bl	84040 <CXHCIRing::GetFirstTRB()>
   83708:	aa0003e3 	mov	x3, x0
   8370c:	52800302 	mov	w2, #0x18                  	// #24
   83710:	52800001 	mov	w1, #0x0                   	// #0
   83714:	aa1403e0 	mov	x0, x20
   83718:	94000192 	bl	83d60 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   8371c:	52803e83 	mov	w3, #0x1f4                 	// #500
   83720:	52800082 	mov	w2, #0x4                   	// #4
   83724:	f9400660 	ldr	x0, [x19, #8]
   83728:	52800001 	mov	w1, #0x0                   	// #0
   8372c:	94000169 	bl	83cd0 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   83730:	f9400673 	ldr	x19, [x19, #8]
   83734:	52800002 	mov	w2, #0x0                   	// #0
   83738:	52800001 	mov	w1, #0x0                   	// #0
   8373c:	aa1303e0 	mov	x0, x19
   83740:	94000120 	bl	83bc0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>
   83744:	321f0003 	orr	w3, w0, #0x2
   83748:	52800002 	mov	w2, #0x0                   	// #0
   8374c:	f94013f5 	ldr	x21, [sp, #32]
   83750:	aa1303e0 	mov	x0, x19
   83754:	52800001 	mov	w1, #0x0                   	// #0
   83758:	a94153f3 	ldp	x19, x20, [sp, #16]
   8375c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83760:	1400015c 	b	83cd0 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   83764:	a94153f3 	ldp	x19, x20, [sp, #16]
   83768:	f94013f5 	ldr	x21, [sp, #32]
   8376c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83770:	d65f03c0 	ret
   83774:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83778:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   8377c:	9105a021 	add	x1, x1, #0x168
   83780:	91030000 	add	x0, x0, #0xc0
   83784:	528004c2 	mov	w2, #0x26                  	// #38
   83788:	940063be 	bl	9c680 <assertion_failed>
   8378c:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83790:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83794:	9105a021 	add	x1, x1, #0x168
   83798:	91060000 	add	x0, x0, #0x180
   8379c:	52800622 	mov	w2, #0x31                  	// #49
   837a0:	940063b8 	bl	9c680 <assertion_failed>
   837a4:	d503201f 	nop
   837a8:	d503201f 	nop
   837ac:	d503201f 	nop

00000000000837b0 <CXHCIEventManager::~CXHCIEventManager()>:
   837b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   837b4:	910003fd 	mov	x29, sp
   837b8:	a90153f3 	stp	x19, x20, [sp, #16]
   837bc:	aa0003f3 	mov	x19, x0
   837c0:	f9401c00 	ldr	x0, [x0, #56]
   837c4:	b4000220 	cbz	x0, 83808 <CXHCIEventManager::~CXHCIEventManager()+0x58>
   837c8:	f9400674 	ldr	x20, [x19, #8]
   837cc:	b40002b4 	cbz	x20, 83820 <CXHCIEventManager::~CXHCIEventManager()+0x70>
   837d0:	52800002 	mov	w2, #0x0                   	// #0
   837d4:	52800001 	mov	w1, #0x0                   	// #0
   837d8:	aa1403e0 	mov	x0, x20
   837dc:	940000f9 	bl	83bc0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>
   837e0:	121e7803 	and	w3, w0, #0xfffffffd
   837e4:	52800002 	mov	w2, #0x0                   	// #0
   837e8:	aa1403e0 	mov	x0, x20
   837ec:	52800001 	mov	w1, #0x0                   	// #0
   837f0:	94000138 	bl	83cd0 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   837f4:	f9400260 	ldr	x0, [x19]
   837f8:	b4000200 	cbz	x0, 83838 <CXHCIEventManager::~CXHCIEventManager()+0x88>
   837fc:	f9401e61 	ldr	x1, [x19, #56]
   83800:	97fffae0 	bl	82380 <CXHCIDevice::FreeSharedMem(void*)>
   83804:	f9001e7f 	str	xzr, [x19, #56]
   83808:	aa1303e0 	mov	x0, x19
   8380c:	f900067f 	str	xzr, [x19, #8]
   83810:	a94153f3 	ldp	x19, x20, [sp, #16]
   83814:	f801041f 	str	xzr, [x0], #16
   83818:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8381c:	140001f1 	b	83fe0 <CXHCIRing::~CXHCIRing()>
   83820:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83824:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83828:	9105a021 	add	x1, x1, #0x168
   8382c:	91060000 	add	x0, x0, #0x180
   83830:	528007c2 	mov	w2, #0x3e                  	// #62
   83834:	94006393 	bl	9c680 <assertion_failed>
   83838:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   8383c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83840:	9105a021 	add	x1, x1, #0x168
   83844:	91030000 	add	x0, x0, #0xc0
   83848:	52800862 	mov	w2, #0x43                  	// #67
   8384c:	9400638d 	bl	9c680 <assertion_failed>

0000000000083850 <CXHCIEventManager::IsValid()>:
   83850:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83854:	910003fd 	mov	x29, sp
   83858:	f9000bf3 	str	x19, [sp, #16]
   8385c:	aa0003f3 	mov	x19, x0
   83860:	91004000 	add	x0, x0, #0x10
   83864:	940001e7 	bl	84000 <CXHCIRing::IsValid() const>
   83868:	72001c00 	ands	w0, w0, #0xff
   8386c:	54000080 	b.eq	8387c <CXHCIEventManager::IsValid()+0x2c>  // b.none
   83870:	f9401e60 	ldr	x0, [x19, #56]
   83874:	f100001f 	cmp	x0, #0x0
   83878:	1a9f07e0 	cset	w0, ne  // ne = any
   8387c:	f9400bf3 	ldr	x19, [sp, #16]
   83880:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83884:	d65f03c0 	ret
   83888:	d503201f 	nop
   8388c:	d503201f 	nop

0000000000083890 <CXHCIEventManager::HandleEvents()>:
   83890:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83894:	910003fd 	mov	x29, sp
   83898:	a90153f3 	stp	x19, x20, [sp, #16]
   8389c:	aa0003f3 	mov	x19, x0
   838a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   838a4:	f9400000 	ldr	x0, [x0]
   838a8:	b40009c0 	cbz	x0, 839e0 <CXHCIEventManager::HandleEvents()+0x150>
   838ac:	91004276 	add	x22, x19, #0x10
   838b0:	aa1603e0 	mov	x0, x22
   838b4:	940001ef 	bl	84070 <CXHCIRing::GetDequeueTRB()>
   838b8:	aa0003f4 	mov	x20, x0
   838bc:	b4000780 	cbz	x0, 839ac <CXHCIEventManager::HandleEvents()+0x11c>
   838c0:	b9400c15 	ldr	w21, [x0, #12]
   838c4:	d34a3eb5 	ubfx	x21, x21, #10, #6
   838c8:	71008abf 	cmp	w21, #0x22
   838cc:	540007a0 	b.eq	839c0 <CXHCIEventManager::HandleEvents()+0x130>  // b.none
   838d0:	54000308 	b.hi	83930 <CXHCIEventManager::HandleEvents()+0xa0>  // b.pmore
   838d4:	710082bf 	cmp	w21, #0x20
   838d8:	54000460 	b.eq	83964 <CXHCIEventManager::HandleEvents()+0xd4>  // b.none
   838dc:	710086bf 	cmp	w21, #0x21
   838e0:	54000541 	b.ne	83988 <CXHCIEventManager::HandleEvents()+0xf8>  // b.any
   838e4:	f9400260 	ldr	x0, [x19]
   838e8:	97fffa72 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   838ec:	39402e82 	ldrb	w2, [x20, #11]
   838f0:	39403e83 	ldrb	w3, [x20, #15]
   838f4:	f9400281 	ldr	x1, [x20]
   838f8:	94002a2e 	bl	8e1b0 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)>
   838fc:	aa1603e0 	mov	x0, x22
   83900:	9400021c 	bl	84170 <CXHCIRing::IncrementDequeue()>
   83904:	b40007a0 	cbz	x0, 839f8 <CXHCIEventManager::HandleEvents()+0x168>
   83908:	b27d0003 	orr	x3, x0, #0x8
   8390c:	f9400660 	ldr	x0, [x19, #8]
   83910:	52800302 	mov	w2, #0x18                  	// #24
   83914:	52800001 	mov	w1, #0x0                   	// #0
   83918:	94000112 	bl	83d60 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   8391c:	52800020 	mov	w0, #0x1                   	// #1
   83920:	a94153f3 	ldp	x19, x20, [sp, #16]
   83924:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83928:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8392c:	d65f03c0 	ret
   83930:	710096bf 	cmp	w21, #0x25
   83934:	540002a1 	b.ne	83988 <CXHCIEventManager::HandleEvents()+0xf8>  // b.any
   83938:	f9400260 	ldr	x0, [x19]
   8393c:	97fffb0d 	bl	82570 <CXHCIDevice::DumpStatus()>
   83940:	94006ce4 	bl	9ecd0 <CLogger::Get()>
   83944:	d0000143 	adrp	x3, ad000 <From+0x4c0>
   83948:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   8394c:	39402e84 	ldrb	w4, [x20, #11]
   83950:	9107e063 	add	x3, x3, #0x1f8
   83954:	91090021 	add	x1, x1, #0x240
   83958:	52800002 	mov	w2, #0x0                   	// #0
   8395c:	94006c19 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83960:	17ffffe7 	b	838fc <CXHCIEventManager::HandleEvents()+0x6c>
   83964:	f9400260 	ldr	x0, [x19]
   83968:	97fffa46 	bl	82280 <CXHCIDevice::GetSlotManager()>
   8396c:	29410e81 	ldp	w1, w3, [x20, #8]
   83970:	d3505064 	ubfx	x4, x3, #16, #5
   83974:	12005c22 	and	w2, w1, #0xffffff
   83978:	53187c63 	lsr	w3, w3, #24
   8397c:	53187c21 	lsr	w1, w1, #24
   83980:	94000730 	bl	85640 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)>
   83984:	17ffffde 	b	838fc <CXHCIEventManager::HandleEvents()+0x6c>
   83988:	94006cd2 	bl	9ecd0 <CLogger::Get()>
   8398c:	d0000143 	adrp	x3, ad000 <From+0x4c0>
   83990:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83994:	2a1503e4 	mov	w4, w21
   83998:	91086063 	add	x3, x3, #0x218
   8399c:	91090021 	add	x1, x1, #0x240
   839a0:	52800002 	mov	w2, #0x0                   	// #0
   839a4:	94006c07 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   839a8:	17ffffd5 	b	838fc <CXHCIEventManager::HandleEvents()+0x6c>
   839ac:	52800000 	mov	w0, #0x0                   	// #0
   839b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   839b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   839b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   839bc:	d65f03c0 	ret
   839c0:	39402c00 	ldrb	w0, [x0, #11]
   839c4:	7100041f 	cmp	w0, #0x1
   839c8:	54000241 	b.ne	83a10 <CXHCIEventManager::HandleEvents()+0x180>  // b.any
   839cc:	f9400260 	ldr	x0, [x19]
   839d0:	97fffa44 	bl	822e0 <CXHCIDevice::GetRootHub()>
   839d4:	39400e81 	ldrb	w1, [x20, #3]
   839d8:	9400031e 	bl	84650 <CXHCIRootHub::StatusChanged(unsigned char)>
   839dc:	17ffffc8 	b	838fc <CXHCIEventManager::HandleEvents()+0x6c>
   839e0:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   839e4:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   839e8:	9105a021 	add	x1, x1, #0x168
   839ec:	91030000 	add	x0, x0, #0xc0
   839f0:	52800a82 	mov	w2, #0x54                  	// #84
   839f4:	94006323 	bl	9c680 <assertion_failed>
   839f8:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   839fc:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83a00:	9105a021 	add	x1, x1, #0x168
   83a04:	9108c000 	add	x0, x0, #0x230
   83a08:	528010c2 	mov	w2, #0x86                  	// #134
   83a0c:	9400631d 	bl	9c680 <assertion_failed>
   83a10:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83a14:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83a18:	9105a021 	add	x1, x1, #0x168
   83a1c:	91064000 	add	x0, x0, #0x190
   83a20:	52800e22 	mov	w2, #0x71                  	// #113
   83a24:	94006317 	bl	9c680 <assertion_failed>
   83a28:	d503201f 	nop
   83a2c:	d503201f 	nop

0000000000083a30 <CXHCIEventManager::DumpStatus()>:
   83a30:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83a34:	91090021 	add	x1, x1, #0x240
   83a38:	91004000 	add	x0, x0, #0x10
   83a3c:	1400024d 	b	84370 <CXHCIRing::DumpStatus(char const*)>

0000000000083a40 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)>:
   83a40:	39400022 	ldrb	w2, [x1]
   83a44:	8b220022 	add	x2, x1, w2, uxtb
   83a48:	a9000801 	stp	x1, x2, [x0]
   83a4c:	b40002c1 	cbz	x1, 83aa4 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)+0x64>
   83a50:	b9401424 	ldr	w4, [x1, #20]
   83a54:	91100042 	add	x2, x2, #0x400
   83a58:	b9401823 	ldr	w3, [x1, #24]
   83a5c:	f9001002 	str	x2, [x0, #32]
   83a60:	b9400427 	ldr	w7, [x1, #4]
   83a64:	927e7484 	and	x4, x4, #0xfffffffc
   83a68:	b9400826 	ldr	w6, [x1, #8]
   83a6c:	8b010084 	add	x4, x4, x1
   83a70:	927b6862 	and	x2, x3, #0xffffffe0
   83a74:	b9400c25 	ldr	w5, [x1, #12]
   83a78:	8b010042 	add	x2, x2, x1
   83a7c:	f9000804 	str	x4, [x0, #16]
   83a80:	b9401023 	ldr	w3, [x1, #16]
   83a84:	f9000c02 	str	x2, [x0, #24]
   83a88:	29061807 	stp	w7, w6, [x0, #48]
   83a8c:	b9003805 	str	w5, [x0, #56]
   83a90:	53107c62 	lsr	w2, w3, #16
   83a94:	8b222821 	add	x1, x1, w2, uxth #2
   83a98:	f9001401 	str	x1, [x0, #40]
   83a9c:	b9003c03 	str	w3, [x0, #60]
   83aa0:	d65f03c0 	ret
   83aa4:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83aa8:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83aac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83ab0:	91092021 	add	x1, x1, #0x248
   83ab4:	910003fd 	mov	x29, sp
   83ab8:	91098000 	add	x0, x0, #0x260
   83abc:	52801422 	mov	w2, #0xa1                  	// #161
   83ac0:	940062f0 	bl	9c680 <assertion_failed>
   83ac4:	d503201f 	nop
   83ac8:	d503201f 	nop
   83acc:	d503201f 	nop

0000000000083ad0 <CXHCIMMIOSpace::~CXHCIMMIOSpace()>:
   83ad0:	d65f03c0 	ret
   83ad4:	d503201f 	nop
   83ad8:	d503201f 	nop
   83adc:	d503201f 	nop

0000000000083ae0 <CXHCIMMIOSpace::cap_read32(unsigned int)>:
   83ae0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83ae4:	910003fd 	mov	x29, sp
   83ae8:	f9400002 	ldr	x2, [x0]
   83aec:	b4000122 	cbz	x2, 83b10 <CXHCIMMIOSpace::cap_read32(unsigned int)+0x30>
   83af0:	51001021 	sub	w1, w1, #0x4
   83af4:	71003c3f 	cmp	w1, #0xf
   83af8:	53027c21 	lsr	w1, w1, #2
   83afc:	54000168 	b.hi	83b28 <CXHCIMMIOSpace::cap_read32(unsigned int)+0x48>  // b.pmore
   83b00:	91003021 	add	x1, x1, #0xc
   83b04:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83b08:	b8617800 	ldr	w0, [x0, x1, lsl #2]
   83b0c:	d65f03c0 	ret
   83b10:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83b14:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83b18:	91092021 	add	x1, x1, #0x248
   83b1c:	91098000 	add	x0, x0, #0x260
   83b20:	528006a2 	mov	w2, #0x35                  	// #53
   83b24:	940062d7 	bl	9c680 <assertion_failed>
   83b28:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83b2c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83b30:	91092021 	add	x1, x1, #0x248
   83b34:	9109c000 	add	x0, x0, #0x270
   83b38:	52800742 	mov	w2, #0x3a                  	// #58
   83b3c:	940062d1 	bl	9c680 <assertion_failed>

0000000000083b40 <CXHCIMMIOSpace::op_read32(unsigned int)>:
   83b40:	f9400002 	ldr	x2, [x0]
   83b44:	b4000082 	cbz	x2, 83b54 <CXHCIMMIOSpace::op_read32(unsigned int)+0x14>
   83b48:	f9400400 	ldr	x0, [x0, #8]
   83b4c:	b8614800 	ldr	w0, [x0, w1, uxtw]
   83b50:	d65f03c0 	ret
   83b54:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83b58:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83b5c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83b60:	91092021 	add	x1, x1, #0x248
   83b64:	910003fd 	mov	x29, sp
   83b68:	91098000 	add	x0, x0, #0x260
   83b6c:	52800802 	mov	w2, #0x40                  	// #64
   83b70:	940062c4 	bl	9c680 <assertion_failed>
   83b74:	d503201f 	nop
   83b78:	d503201f 	nop
   83b7c:	d503201f 	nop

0000000000083b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>:
   83b80:	f9400003 	ldr	x3, [x0]
   83b84:	b40000c3 	cbz	x3, 83b9c <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)+0x1c>
   83b88:	f9401000 	ldr	x0, [x0, #32]
   83b8c:	531c6c21 	lsl	w1, w1, #4
   83b90:	8b000021 	add	x1, x1, x0
   83b94:	b8624820 	ldr	w0, [x1, w2, uxtw]
   83b98:	d65f03c0 	ret
   83b9c:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83ba0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83ba4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83ba8:	91092021 	add	x1, x1, #0x248
   83bac:	910003fd 	mov	x29, sp
   83bb0:	91098000 	add	x0, x0, #0x260
   83bb4:	528008e2 	mov	w2, #0x47                  	// #71
   83bb8:	940062b2 	bl	9c680 <assertion_failed>
   83bbc:	d503201f 	nop

0000000000083bc0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>:
   83bc0:	f9400003 	ldr	x3, [x0]
   83bc4:	b4000103 	cbz	x3, 83be4 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)+0x24>
   83bc8:	f9400c00 	ldr	x0, [x0, #24]
   83bcc:	531b6821 	lsl	w1, w1, #5
   83bd0:	2a0203e2 	mov	w2, w2
   83bd4:	91008042 	add	x2, x2, #0x20
   83bd8:	8b000021 	add	x1, x1, x0
   83bdc:	b8626820 	ldr	w0, [x1, x2]
   83be0:	d65f03c0 	ret
   83be4:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83be8:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83bec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83bf0:	91092021 	add	x1, x1, #0x248
   83bf4:	910003fd 	mov	x29, sp
   83bf8:	91098000 	add	x0, x0, #0x260
   83bfc:	528009c2 	mov	w2, #0x4e                  	// #78
   83c00:	940062a0 	bl	9c680 <assertion_failed>
   83c04:	d503201f 	nop
   83c08:	d503201f 	nop
   83c0c:	d503201f 	nop

0000000000083c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>:
   83c10:	f9400003 	ldr	x3, [x0]
   83c14:	b4000083 	cbz	x3, 83c24 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)+0x14>
   83c18:	f9400400 	ldr	x0, [x0, #8]
   83c1c:	b8214802 	str	w2, [x0, w1, uxtw]
   83c20:	d65f03c0 	ret
   83c24:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83c28:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83c2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83c30:	91092021 	add	x1, x1, #0x248
   83c34:	910003fd 	mov	x29, sp
   83c38:	91098000 	add	x0, x0, #0x260
   83c3c:	52800aa2 	mov	w2, #0x55                  	// #85
   83c40:	94006290 	bl	9c680 <assertion_failed>
   83c44:	d503201f 	nop
   83c48:	d503201f 	nop
   83c4c:	d503201f 	nop

0000000000083c50 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>:
   83c50:	f9400003 	ldr	x3, [x0]
   83c54:	b40000a3 	cbz	x3, 83c68 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)+0x18>
   83c58:	f9400800 	ldr	x0, [x0, #16]
   83c5c:	531e7421 	lsl	w1, w1, #2
   83c60:	b8214802 	str	w2, [x0, w1, uxtw]
   83c64:	d65f03c0 	ret
   83c68:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83c6c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83c70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83c74:	91092021 	add	x1, x1, #0x248
   83c78:	910003fd 	mov	x29, sp
   83c7c:	91098000 	add	x0, x0, #0x260
   83c80:	52800b82 	mov	w2, #0x5c                  	// #92
   83c84:	9400627f 	bl	9c680 <assertion_failed>
   83c88:	d503201f 	nop
   83c8c:	d503201f 	nop

0000000000083c90 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>:
   83c90:	f9400004 	ldr	x4, [x0]
   83c94:	b40000c4 	cbz	x4, 83cac <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)+0x1c>
   83c98:	f9401000 	ldr	x0, [x0, #32]
   83c9c:	531c6c21 	lsl	w1, w1, #4
   83ca0:	8b000021 	add	x1, x1, x0
   83ca4:	b8224823 	str	w3, [x1, w2, uxtw]
   83ca8:	d65f03c0 	ret
   83cac:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83cb0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83cb4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83cb8:	91092021 	add	x1, x1, #0x248
   83cbc:	910003fd 	mov	x29, sp
   83cc0:	91098000 	add	x0, x0, #0x260
   83cc4:	52800c62 	mov	w2, #0x63                  	// #99
   83cc8:	9400626e 	bl	9c680 <assertion_failed>
   83ccc:	d503201f 	nop

0000000000083cd0 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>:
   83cd0:	f9400004 	ldr	x4, [x0]
   83cd4:	b4000104 	cbz	x4, 83cf4 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)+0x24>
   83cd8:	f9400c00 	ldr	x0, [x0, #24]
   83cdc:	531b6821 	lsl	w1, w1, #5
   83ce0:	2a0203e2 	mov	w2, w2
   83ce4:	91008042 	add	x2, x2, #0x20
   83ce8:	8b000021 	add	x1, x1, x0
   83cec:	b8226823 	str	w3, [x1, x2]
   83cf0:	d65f03c0 	ret
   83cf4:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83cf8:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83cfc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83d00:	91092021 	add	x1, x1, #0x248
   83d04:	910003fd 	mov	x29, sp
   83d08:	91098000 	add	x0, x0, #0x260
   83d0c:	52800d42 	mov	w2, #0x6a                  	// #106
   83d10:	9400625c 	bl	9c680 <assertion_failed>
   83d14:	d503201f 	nop
   83d18:	d503201f 	nop
   83d1c:	d503201f 	nop

0000000000083d20 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>:
   83d20:	f9400003 	ldr	x3, [x0]
   83d24:	b40000e3 	cbz	x3, 83d40 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)+0x20>
   83d28:	f9400400 	ldr	x0, [x0, #8]
   83d2c:	d360fc44 	lsr	x4, x2, #32
   83d30:	11001023 	add	w3, w1, #0x4
   83d34:	b8214802 	str	w2, [x0, w1, uxtw]
   83d38:	b8234804 	str	w4, [x0, w3, uxtw]
   83d3c:	d65f03c0 	ret
   83d40:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83d44:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83d48:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83d4c:	91092021 	add	x1, x1, #0x248
   83d50:	910003fd 	mov	x29, sp
   83d54:	91098000 	add	x0, x0, #0x260
   83d58:	52800aa2 	mov	w2, #0x55                  	// #85
   83d5c:	94006249 	bl	9c680 <assertion_failed>

0000000000083d60 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>:
   83d60:	f9400004 	ldr	x4, [x0]
   83d64:	b4000124 	cbz	x4, 83d88 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)+0x28>
   83d68:	f9400c04 	ldr	x4, [x0, #24]
   83d6c:	531b6821 	lsl	w1, w1, #5
   83d70:	d360fc60 	lsr	x0, x3, #32
   83d74:	8b040021 	add	x1, x1, x4
   83d78:	8b224021 	add	x1, x1, w2, uxtw
   83d7c:	b9002023 	str	w3, [x1, #32]
   83d80:	b9002420 	str	w0, [x1, #36]
   83d84:	d65f03c0 	ret
   83d88:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83d8c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83d90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83d94:	91092021 	add	x1, x1, #0x248
   83d98:	910003fd 	mov	x29, sp
   83d9c:	91098000 	add	x0, x0, #0x260
   83da0:	52800ee2 	mov	w2, #0x77                  	// #119
   83da4:	94006237 	bl	9c680 <assertion_failed>
   83da8:	d503201f 	nop
   83dac:	d503201f 	nop

0000000000083db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>:
   83db0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83db4:	910003fd 	mov	x29, sp
   83db8:	a90153f3 	stp	x19, x20, [sp, #16]
   83dbc:	2a0103f4 	mov	w20, w1
   83dc0:	aa0003f3 	mov	x19, x0
   83dc4:	a9025bf5 	stp	x21, x22, [sp, #32]
   83dc8:	2a0203f6 	mov	w22, w2
   83dcc:	2a0303f5 	mov	w21, w3
   83dd0:	a90363f7 	stp	x23, x24, [sp, #48]
   83dd4:	2a0403f8 	mov	w24, w4
   83dd8:	940081a2 	bl	a4460 <CTimer::Get()>
   83ddc:	94007ea5 	bl	a3870 <CTimer::GetClockTicks()>
   83de0:	2a0003f7 	mov	w23, w0
   83de4:	1400000b 	b	83e10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x60>
   83de8:	f9400660 	ldr	x0, [x19, #8]
   83dec:	b8606a81 	ldr	w1, [x20, x0]
   83df0:	0a0102c1 	and	w1, w22, w1
   83df4:	6b15003f 	cmp	w1, w21
   83df8:	540001c0 	b.eq	83e30 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x80>  // b.none
   83dfc:	94008199 	bl	a4460 <CTimer::Get()>
   83e00:	94007e9c 	bl	a3870 <CTimer::GetClockTicks()>
   83e04:	4b170001 	sub	w1, w0, w23
   83e08:	6b18003f 	cmp	w1, w24
   83e0c:	540001e2 	b.cs	83e48 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x98>  // b.hs, b.nlast
   83e10:	f9400260 	ldr	x0, [x19]
   83e14:	b5fffea0 	cbnz	x0, 83de8 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   83e18:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83e1c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83e20:	91092021 	add	x1, x1, #0x248
   83e24:	91098000 	add	x0, x0, #0x260
   83e28:	52800802 	mov	w2, #0x40                  	// #64
   83e2c:	94006215 	bl	9c680 <assertion_failed>
   83e30:	52800020 	mov	w0, #0x1                   	// #1
   83e34:	a94153f3 	ldp	x19, x20, [sp, #16]
   83e38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83e3c:	a94363f7 	ldp	x23, x24, [sp, #48]
   83e40:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83e44:	d65f03c0 	ret
   83e48:	52800000 	mov	w0, #0x0                   	// #0
   83e4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83e50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83e54:	a94363f7 	ldp	x23, x24, [sp, #48]
   83e58:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83e5c:	d65f03c0 	ret

0000000000083e60 <CXHCIMMIOSpace::DumpStatus()>:
   83e60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83e64:	910003fd 	mov	x29, sp
   83e68:	f9000bf3 	str	x19, [sp, #16]
   83e6c:	aa0003f3 	mov	x19, x0
   83e70:	f9400000 	ldr	x0, [x0]
   83e74:	b4000240 	cbz	x0, 83ebc <CXHCIMMIOSpace::DumpStatus()+0x5c>
   83e78:	52800381 	mov	w1, #0x1c                  	// #28
   83e7c:	d0000142 	adrp	x2, ad000 <From+0x4c0>
   83e80:	910a0042 	add	x2, x2, #0x280
   83e84:	94006353 	bl	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   83e88:	52800781 	mov	w1, #0x3c                  	// #60
   83e8c:	d0000142 	adrp	x2, ad000 <From+0x4c0>
   83e90:	910a2042 	add	x2, x2, #0x288
   83e94:	f9400660 	ldr	x0, [x19, #8]
   83e98:	9400634e 	bl	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   83e9c:	f9400e60 	ldr	x0, [x19, #24]
   83ea0:	d0000142 	adrp	x2, ad000 <From+0x4c0>
   83ea4:	52800401 	mov	w1, #0x20                  	// #32
   83ea8:	910a4042 	add	x2, x2, #0x290
   83eac:	f9400bf3 	ldr	x19, [sp, #16]
   83eb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83eb4:	91008000 	add	x0, x0, #0x20
   83eb8:	14006346 	b	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   83ebc:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83ec0:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83ec4:	91092021 	add	x1, x1, #0x248
   83ec8:	91098000 	add	x0, x0, #0x260
   83ecc:	528012c2 	mov	w2, #0x96                  	// #150
   83ed0:	940061ec 	bl	9c680 <assertion_failed>
   83ed4:	d503201f 	nop
   83ed8:	d503201f 	nop
   83edc:	d503201f 	nop

0000000000083ee0 <CXHCIMMIOSpace::cap_read32_raw(unsigned int)>:
   83ee0:	f9400000 	ldr	x0, [x0]
   83ee4:	b4000060 	cbz	x0, 83ef0 <CXHCIMMIOSpace::cap_read32_raw(unsigned int)+0x10>
   83ee8:	b8614800 	ldr	w0, [x0, w1, uxtw]
   83eec:	d65f03c0 	ret
   83ef0:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83ef4:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83ef8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83efc:	91092021 	add	x1, x1, #0x248
   83f00:	910003fd 	mov	x29, sp
   83f04:	91098000 	add	x0, x0, #0x260
   83f08:	52801422 	mov	w2, #0xa1                  	// #161
   83f0c:	940061dd 	bl	9c680 <assertion_failed>

0000000000083f10 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>:
   83f10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83f14:	910003fd 	mov	x29, sp
   83f18:	71003c5f 	cmp	w2, #0xf
   83f1c:	f9000bf3 	str	x19, [sp, #16]
   83f20:	aa0003f3 	mov	x19, x0
   83f24:	aa0303e0 	mov	x0, x3
   83f28:	52800023 	mov	w3, #0x1                   	// #1
   83f2c:	29000a61 	stp	w1, w2, [x19]
   83f30:	a900fe60 	stp	x0, xzr, [x19, #8]
   83f34:	f9000e7f 	str	xzr, [x19, #24]
   83f38:	b9002263 	str	w3, [x19, #32]
   83f3c:	540002e9 	b.ls	83f98 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0x88>  // b.plast
   83f40:	f240045f 	tst	x2, #0x3
   83f44:	54000361 	b.ne	83fb0 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0xa0>  // b.any
   83f48:	b4000400 	cbz	x0, 83fc8 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0xb8>
   83f4c:	d37c7c41 	ubfiz	x1, x2, #4, #32
   83f50:	d2a00023 	mov	x3, #0x10000               	// #65536
   83f54:	d2800802 	mov	x2, #0x40                  	// #64
   83f58:	97fff8ee 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   83f5c:	f9000a60 	str	x0, [x19, #16]
   83f60:	b4000160 	cbz	x0, 83f8c <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0x7c>
   83f64:	b9400261 	ldr	w1, [x19]
   83f68:	7100043f 	cmp	w1, #0x1
   83f6c:	54000100 	b.eq	83f8c <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0x7c>  // b.none
   83f70:	b9400661 	ldr	w1, [x19, #4]
   83f74:	d2c30043 	mov	x3, #0x180200000000        	// #26396869001216
   83f78:	51000421 	sub	w1, w1, #0x1
   83f7c:	d37cec21 	lsl	x1, x1, #4
   83f80:	8b010002 	add	x2, x0, x1
   83f84:	f8216800 	str	x0, [x0, x1]
   83f88:	f9000443 	str	x3, [x2, #8]
   83f8c:	f9400bf3 	ldr	x19, [sp, #16]
   83f90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83f94:	d65f03c0 	ret
   83f98:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83f9c:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83fa0:	910a6021 	add	x1, x1, #0x298
   83fa4:	910aa000 	add	x0, x0, #0x2a8
   83fa8:	528004a2 	mov	w2, #0x25                  	// #37
   83fac:	940061b5 	bl	9c680 <assertion_failed>
   83fb0:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83fb4:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83fb8:	910a6021 	add	x1, x1, #0x298
   83fbc:	910b0000 	add	x0, x0, #0x2c0
   83fc0:	528004c2 	mov	w2, #0x26                  	// #38
   83fc4:	940061af 	bl	9c680 <assertion_failed>
   83fc8:	d0000141 	adrp	x1, ad000 <From+0x4c0>
   83fcc:	d0000140 	adrp	x0, ad000 <From+0x4c0>
   83fd0:	910a6021 	add	x1, x1, #0x298
   83fd4:	910b6000 	add	x0, x0, #0x2d8
   83fd8:	52800502 	mov	w2, #0x28                  	// #40
   83fdc:	940061a9 	bl	9c680 <assertion_failed>

0000000000083fe0 <CXHCIRing::~CXHCIRing()>:
   83fe0:	f9400801 	ldr	x1, [x0, #16]
   83fe4:	b4000061 	cbz	x1, 83ff0 <CXHCIRing::~CXHCIRing()+0x10>
   83fe8:	f9400400 	ldr	x0, [x0, #8]
   83fec:	17fff8e5 	b	82380 <CXHCIDevice::FreeSharedMem(void*)>
   83ff0:	d65f03c0 	ret
   83ff4:	d503201f 	nop
   83ff8:	d503201f 	nop
   83ffc:	d503201f 	nop

0000000000084000 <CXHCIRing::IsValid() const>:
   84000:	f9400800 	ldr	x0, [x0, #16]
   84004:	f100001f 	cmp	x0, #0x0
   84008:	1a9f07e0 	cset	w0, ne  // ne = any
   8400c:	d65f03c0 	ret

0000000000084010 <CXHCIRing::GetTRBCount() const>:
   84010:	f9400801 	ldr	x1, [x0, #16]
   84014:	b4000061 	cbz	x1, 84020 <CXHCIRing::GetTRBCount() const+0x10>
   84018:	b9400400 	ldr	w0, [x0, #4]
   8401c:	d65f03c0 	ret
   84020:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84024:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84028:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8402c:	910a6021 	add	x1, x1, #0x298
   84030:	910003fd 	mov	x29, sp
   84034:	910bc000 	add	x0, x0, #0x2f0
   84038:	52800982 	mov	w2, #0x4c                  	// #76
   8403c:	94006191 	bl	9c680 <assertion_failed>

0000000000084040 <CXHCIRing::GetFirstTRB()>:
   84040:	f9400800 	ldr	x0, [x0, #16]
   84044:	b4000040 	cbz	x0, 8404c <CXHCIRing::GetFirstTRB()+0xc>
   84048:	d65f03c0 	ret
   8404c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84050:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84054:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84058:	910a6021 	add	x1, x1, #0x298
   8405c:	910003fd 	mov	x29, sp
   84060:	910bc000 	add	x0, x0, #0x2f0
   84064:	52800a62 	mov	w2, #0x53                  	// #83
   84068:	94006186 	bl	9c680 <assertion_failed>
   8406c:	d503201f 	nop

0000000000084070 <CXHCIRing::GetDequeueTRB()>:
   84070:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84074:	910003fd 	mov	x29, sp
   84078:	f9400801 	ldr	x1, [x0, #16]
   8407c:	b40001c1 	cbz	x1, 840b4 <CXHCIRing::GetDequeueTRB()+0x44>
   84080:	b9400403 	ldr	w3, [x0, #4]
   84084:	b9401c02 	ldr	w2, [x0, #28]
   84088:	6b03005f 	cmp	w2, w3
   8408c:	54000202 	b.cs	840cc <CXHCIRing::GetDequeueTRB()+0x5c>  // b.hs, b.nlast
   84090:	d37c7c42 	ubfiz	x2, x2, #4, #32
   84094:	b9402003 	ldr	w3, [x0, #32]
   84098:	8b020020 	add	x0, x1, x2
   8409c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   840a0:	b9400c01 	ldr	w1, [x0, #12]
   840a4:	12000021 	and	w1, w1, #0x1
   840a8:	6b03003f 	cmp	w1, w3
   840ac:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
   840b0:	d65f03c0 	ret
   840b4:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   840b8:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   840bc:	910a6021 	add	x1, x1, #0x298
   840c0:	910bc000 	add	x0, x0, #0x2f0
   840c4:	52800b42 	mov	w2, #0x5a                  	// #90
   840c8:	9400616e 	bl	9c680 <assertion_failed>
   840cc:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   840d0:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   840d4:	910a6021 	add	x1, x1, #0x298
   840d8:	910c2000 	add	x0, x0, #0x308
   840dc:	52800b62 	mov	w2, #0x5b                  	// #91
   840e0:	94006168 	bl	9c680 <assertion_failed>
   840e4:	d503201f 	nop
   840e8:	d503201f 	nop
   840ec:	d503201f 	nop

00000000000840f0 <CXHCIRing::GetEnqueueTRB()>:
   840f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   840f4:	910003fd 	mov	x29, sp
   840f8:	f9400801 	ldr	x1, [x0, #16]
   840fc:	b40001c1 	cbz	x1, 84134 <CXHCIRing::GetEnqueueTRB()+0x44>
   84100:	b9400403 	ldr	w3, [x0, #4]
   84104:	b9401802 	ldr	w2, [x0, #24]
   84108:	6b03005f 	cmp	w2, w3
   8410c:	54000202 	b.cs	8414c <CXHCIRing::GetEnqueueTRB()+0x5c>  // b.hs, b.nlast
   84110:	d37c7c42 	ubfiz	x2, x2, #4, #32
   84114:	b9402003 	ldr	w3, [x0, #32]
   84118:	8b020020 	add	x0, x1, x2
   8411c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84120:	b9400c01 	ldr	w1, [x0, #12]
   84124:	12000021 	and	w1, w1, #0x1
   84128:	6b03003f 	cmp	w1, w3
   8412c:	9a9f1000 	csel	x0, x0, xzr, ne  // ne = any
   84130:	d65f03c0 	ret
   84134:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84138:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   8413c:	910a6021 	add	x1, x1, #0x298
   84140:	910bc000 	add	x0, x0, #0x2f0
   84144:	52800ce2 	mov	w2, #0x67                  	// #103
   84148:	9400614e 	bl	9c680 <assertion_failed>
   8414c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84150:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84154:	910a6021 	add	x1, x1, #0x298
   84158:	910ca000 	add	x0, x0, #0x328
   8415c:	52800d02 	mov	w2, #0x68                  	// #104
   84160:	94006148 	bl	9c680 <assertion_failed>
   84164:	d503201f 	nop
   84168:	d503201f 	nop
   8416c:	d503201f 	nop

0000000000084170 <CXHCIRing::IncrementDequeue()>:
   84170:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84174:	aa0003e1 	mov	x1, x0
   84178:	910003fd 	mov	x29, sp
   8417c:	f9400800 	ldr	x0, [x0, #16]
   84180:	b4000360 	cbz	x0, 841ec <CXHCIRing::IncrementDequeue()+0x7c>
   84184:	b9400022 	ldr	w2, [x1]
   84188:	7100045f 	cmp	w2, #0x1
   8418c:	540003c1 	b.ne	84204 <CXHCIRing::IncrementDequeue()+0x94>  // b.any
   84190:	b9400424 	ldr	w4, [x1, #4]
   84194:	b9401c22 	ldr	w2, [x1, #28]
   84198:	6b04005f 	cmp	w2, w4
   8419c:	54000402 	b.cs	8421c <CXHCIRing::IncrementDequeue()+0xac>  // b.hs, b.nlast
   841a0:	d37c7c43 	ubfiz	x3, x2, #4, #32
   841a4:	b9402025 	ldr	w5, [x1, #32]
   841a8:	8b030003 	add	x3, x0, x3
   841ac:	b9400c63 	ldr	w3, [x3, #12]
   841b0:	12000063 	and	w3, w3, #0x1
   841b4:	6b05007f 	cmp	w3, w5
   841b8:	540003e1 	b.ne	84234 <CXHCIRing::IncrementDequeue()+0xc4>  // b.any
   841bc:	11000442 	add	w2, w2, #0x1
   841c0:	6b02009f 	cmp	w4, w2
   841c4:	540000c0 	b.eq	841dc <CXHCIRing::IncrementDequeue()+0x6c>  // b.none
   841c8:	d37c7c43 	ubfiz	x3, x2, #4, #32
   841cc:	b9001c22 	str	w2, [x1, #28]
   841d0:	8b030000 	add	x0, x0, x3
   841d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   841d8:	d65f03c0 	ret
   841dc:	52000063 	eor	w3, w3, #0x1
   841e0:	29038c3f 	stp	wzr, w3, [x1, #28]
   841e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   841e8:	d65f03c0 	ret
   841ec:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   841f0:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   841f4:	910a6021 	add	x1, x1, #0x298
   841f8:	910bc000 	add	x0, x0, #0x2f0
   841fc:	52800e82 	mov	w2, #0x74                  	// #116
   84200:	94006120 	bl	9c680 <assertion_failed>
   84204:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84208:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   8420c:	910a6021 	add	x1, x1, #0x298
   84210:	910d2000 	add	x0, x0, #0x348
   84214:	52800ea2 	mov	w2, #0x75                  	// #117
   84218:	9400611a 	bl	9c680 <assertion_failed>
   8421c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84220:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84224:	910a6021 	add	x1, x1, #0x298
   84228:	910c2000 	add	x0, x0, #0x308
   8422c:	52800ec2 	mov	w2, #0x76                  	// #118
   84230:	94006114 	bl	9c680 <assertion_failed>
   84234:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84238:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   8423c:	910a6021 	add	x1, x1, #0x298
   84240:	910da000 	add	x0, x0, #0x368
   84244:	52800f02 	mov	w2, #0x78                  	// #120
   84248:	9400610e 	bl	9c680 <assertion_failed>
   8424c:	d503201f 	nop

0000000000084250 <CXHCIRing::IncrementEnqueue()>:
   84250:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84254:	910003fd 	mov	x29, sp
   84258:	f9400803 	ldr	x3, [x0, #16]
   8425c:	b4000423 	cbz	x3, 842e0 <CXHCIRing::IncrementEnqueue()+0x90>
   84260:	b9400001 	ldr	w1, [x0]
   84264:	7100043f 	cmp	w1, #0x1
   84268:	54000480 	b.eq	842f8 <CXHCIRing::IncrementEnqueue()+0xa8>  // b.none
   8426c:	b9400404 	ldr	w4, [x0, #4]
   84270:	b9401801 	ldr	w1, [x0, #24]
   84274:	6b04003f 	cmp	w1, w4
   84278:	540004c2 	b.cs	84310 <CXHCIRing::IncrementEnqueue()+0xc0>  // b.hs, b.nlast
   8427c:	d37c7c22 	ubfiz	x2, x1, #4, #32
   84280:	b9402005 	ldr	w5, [x0, #32]
   84284:	8b020062 	add	x2, x3, x2
   84288:	b9400c42 	ldr	w2, [x2, #12]
   8428c:	12000042 	and	w2, w2, #0x1
   84290:	6b05005f 	cmp	w2, w5
   84294:	540004a1 	b.ne	84328 <CXHCIRing::IncrementEnqueue()+0xd8>  // b.any
   84298:	11000421 	add	w1, w1, #0x1
   8429c:	51000484 	sub	w4, w4, #0x1
   842a0:	6b04003f 	cmp	w1, w4
   842a4:	b9001801 	str	w1, [x0, #24]
   842a8:	54000060 	b.eq	842b4 <CXHCIRing::IncrementEnqueue()+0x64>  // b.none
   842ac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   842b0:	d65f03c0 	ret
   842b4:	d37c7c21 	ubfiz	x1, x1, #4, #32
   842b8:	8b010061 	add	x1, x3, x1
   842bc:	b9400c23 	ldr	w3, [x1, #12]
   842c0:	52000063 	eor	w3, w3, #0x1
   842c4:	b9000c23 	str	w3, [x1, #12]
   842c8:	36080063 	tbz	w3, #1, 842d4 <CXHCIRing::IncrementEnqueue()+0x84>
   842cc:	52000042 	eor	w2, w2, #0x1
   842d0:	b9002002 	str	w2, [x0, #32]
   842d4:	b900181f 	str	wzr, [x0, #24]
   842d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   842dc:	d65f03c0 	ret
   842e0:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   842e4:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   842e8:	910a6021 	add	x1, x1, #0x298
   842ec:	910bc000 	add	x0, x0, #0x2f0
   842f0:	528010e2 	mov	w2, #0x87                  	// #135
   842f4:	940060e3 	bl	9c680 <assertion_failed>
   842f8:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   842fc:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84300:	910a6021 	add	x1, x1, #0x298
   84304:	910ee000 	add	x0, x0, #0x3b8
   84308:	52801102 	mov	w2, #0x88                  	// #136
   8430c:	940060dd 	bl	9c680 <assertion_failed>
   84310:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84314:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84318:	910a6021 	add	x1, x1, #0x298
   8431c:	910ca000 	add	x0, x0, #0x328
   84320:	52801122 	mov	w2, #0x89                  	// #137
   84324:	940060d7 	bl	9c680 <assertion_failed>
   84328:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   8432c:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84330:	910a6021 	add	x1, x1, #0x298
   84334:	910f6000 	add	x0, x0, #0x3d8
   84338:	52801162 	mov	w2, #0x8b                  	// #139
   8433c:	940060d1 	bl	9c680 <assertion_failed>

0000000000084340 <CXHCIRing::GetCycleState() const>:
   84340:	f9400801 	ldr	x1, [x0, #16]
   84344:	b4000061 	cbz	x1, 84350 <CXHCIRing::GetCycleState() const+0x10>
   84348:	b9402000 	ldr	w0, [x0, #32]
   8434c:	d65f03c0 	ret
   84350:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84354:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84358:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8435c:	910a6021 	add	x1, x1, #0x298
   84360:	910003fd 	mov	x29, sp
   84364:	910bc000 	add	x0, x0, #0x2f0
   84368:	528013e2 	mov	w2, #0x9f                  	// #159
   8436c:	940060c5 	bl	9c680 <assertion_failed>

0000000000084370 <CXHCIRing::DumpStatus(char const*)>:
   84370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84374:	910003fd 	mov	x29, sp
   84378:	a90153f3 	stp	x19, x20, [sp, #16]
   8437c:	aa0103f4 	mov	x20, x1
   84380:	aa0003f3 	mov	x19, x0
   84384:	94006a53 	bl	9ecd0 <CLogger::Get()>
   84388:	29401262 	ldp	w2, w4, [x19]
   8438c:	f100029f 	cmp	x20, #0x0
   84390:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84394:	91116021 	add	x1, x1, #0x458
   84398:	9a940034 	csel	x20, x1, x20, eq  // eq = none
   8439c:	29431a61 	ldp	w1, w6, [x19, #24]
   843a0:	7100045f 	cmp	w2, #0x1
   843a4:	540002a0 	b.eq	843f8 <CXHCIRing::DumpStatus(char const*)+0x88>  // b.none
   843a8:	b0000145 	adrp	x5, ad000 <From+0x4c0>
   843ac:	9110c0a5 	add	x5, x5, #0x430
   843b0:	2a0103e6 	mov	w6, w1
   843b4:	b9402267 	ldr	w7, [x19, #32]
   843b8:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   843bc:	9110e063 	add	x3, x3, #0x438
   843c0:	52800082 	mov	w2, #0x4                   	// #4
   843c4:	aa1403e1 	mov	x1, x20
   843c8:	9400697e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   843cc:	f9400a60 	ldr	x0, [x19, #16]
   843d0:	b40000e0 	cbz	x0, 843ec <CXHCIRing::DumpStatus(char const*)+0x7c>
   843d4:	b9400661 	ldr	w1, [x19, #4]
   843d8:	aa1403e2 	mov	x2, x20
   843dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   843e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   843e4:	531c6c21 	lsl	w1, w1, #4
   843e8:	140061fa 	b	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   843ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   843f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   843f4:	d65f03c0 	ret
   843f8:	b0000145 	adrp	x5, ad000 <From+0x4c0>
   843fc:	9110a0a5 	add	x5, x5, #0x428
   84400:	17ffffed 	b	843b4 <CXHCIRing::DumpStatus(char const*)+0x44>
	...

0000000000084410 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)>:
   84410:	b9000001 	str	w1, [x0]
   84414:	f9000402 	str	x2, [x0, #8]
   84418:	34000321 	cbz	w1, 8447c <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)+0x6c>
   8441c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84420:	910003fd 	mov	x29, sp
   84424:	a90153f3 	stp	x19, x20, [sp, #16]
   84428:	52800013 	mov	w19, #0x0                   	// #0
   8442c:	a9025bf5 	stp	x21, x22, [sp, #32]
   84430:	aa0003f5 	mov	x21, x0
   84434:	d503201f 	nop
   84438:	d2800600 	mov	x0, #0x30                  	// #48
   8443c:	11000676 	add	w22, w19, #0x1
   84440:	94008490 	bl	a5680 <operator new(unsigned long)>
   84444:	2a1603e1 	mov	w1, w22
   84448:	f94006a2 	ldr	x2, [x21, #8]
   8444c:	aa0003f4 	mov	x20, x0
   84450:	94000110 	bl	84890 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)>
   84454:	b94002a0 	ldr	w0, [x21]
   84458:	8b334ea1 	add	x1, x21, w19, uxtw #3
   8445c:	2a1603f3 	mov	w19, w22
   84460:	f9000834 	str	x20, [x1, #16]
   84464:	6b16001f 	cmp	w0, w22
   84468:	54fffe88 	b.hi	84438 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)+0x28>  // b.pmore
   8446c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84470:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84474:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84478:	d65f03c0 	ret
   8447c:	d65f03c0 	ret

0000000000084480 <CXHCIRootHub::~CXHCIRootHub()>:
   84480:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84484:	910003fd 	mov	x29, sp
   84488:	f90013f5 	str	x21, [sp, #32]
   8448c:	aa0003f5 	mov	x21, x0
   84490:	b9400000 	ldr	w0, [x0]
   84494:	340001e0 	cbz	w0, 844d0 <CXHCIRootHub::~CXHCIRootHub()+0x50>
   84498:	a90153f3 	stp	x19, x20, [sp, #16]
   8449c:	52800013 	mov	w19, #0x0                   	// #0
   844a0:	8b334eb4 	add	x20, x21, w19, uxtw #3
   844a4:	11000673 	add	w19, w19, #0x1
   844a8:	f9400a80 	ldr	x0, [x20, #16]
   844ac:	b4000080 	cbz	x0, 844bc <CXHCIRootHub::~CXHCIRootHub()+0x3c>
   844b0:	f9400001 	ldr	x1, [x0]
   844b4:	f9400421 	ldr	x1, [x1, #8]
   844b8:	d63f0020 	blr	x1
   844bc:	f9000a9f 	str	xzr, [x20, #16]
   844c0:	b94002a0 	ldr	w0, [x21]
   844c4:	6b13001f 	cmp	w0, w19
   844c8:	54fffec8 	b.hi	844a0 <CXHCIRootHub::~CXHCIRootHub()+0x20>  // b.pmore
   844cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   844d0:	f94013f5 	ldr	x21, [sp, #32]
   844d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   844d8:	d65f03c0 	ret
   844dc:	d503201f 	nop

00000000000844e0 <CXHCIRootHub::Initialize()>:
   844e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   844e4:	910003fd 	mov	x29, sp
   844e8:	a90153f3 	stp	x19, x20, [sp, #16]
   844ec:	aa0003f4 	mov	x20, x0
   844f0:	940067c4 	bl	9e400 <CKernelOptions::Get()>
   844f4:	b4000320 	cbz	x0, 84558 <CXHCIRootHub::Initialize()+0x78>
   844f8:	940067aa 	bl	9e3a0 <CKernelOptions::GetUSBPowerDelay() const>
   844fc:	2a0003f3 	mov	w19, w0
   84500:	340002c0 	cbz	w0, 84558 <CXHCIRootHub::Initialize()+0x78>
   84504:	94007fd7 	bl	a4460 <CTimer::Get()>
   84508:	2a1303e0 	mov	w0, w19
   8450c:	52800013 	mov	w19, #0x0                   	// #0
   84510:	94007f98 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   84514:	b9400280 	ldr	w0, [x20]
   84518:	350000e0 	cbnz	w0, 84534 <CXHCIRootHub::Initialize()+0x54>
   8451c:	14000022 	b	845a4 <CXHCIRootHub::Initialize()+0xc4>
   84520:	94000250 	bl	84e60 <CXHCIRootPort::Initialize()>
   84524:	b9400280 	ldr	w0, [x20]
   84528:	11000673 	add	w19, w19, #0x1
   8452c:	6b13001f 	cmp	w0, w19
   84530:	54000189 	b.ls	84560 <CXHCIRootHub::Initialize()+0x80>  // b.plast
   84534:	8b334e80 	add	x0, x20, w19, uxtw #3
   84538:	f9400800 	ldr	x0, [x0, #16]
   8453c:	b5ffff20 	cbnz	x0, 84520 <CXHCIRootHub::Initialize()+0x40>
   84540:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84544:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84548:	9111a021 	add	x1, x1, #0x468
   8454c:	9111e000 	add	x0, x0, #0x478
   84550:	52800802 	mov	w2, #0x40                  	// #64
   84554:	9400604b 	bl	9c680 <assertion_failed>
   84558:	52802593 	mov	w19, #0x12c                 	// #300
   8455c:	17ffffea 	b	84504 <CXHCIRootHub::Initialize()+0x24>
   84560:	34000220 	cbz	w0, 845a4 <CXHCIRootHub::Initialize()+0xc4>
   84564:	52800013 	mov	w19, #0x0                   	// #0
   84568:	14000006 	b	84580 <CXHCIRootHub::Initialize()+0xa0>
   8456c:	940001fd 	bl	84d60 <CXHCIRootPort::Configure()>
   84570:	b9400280 	ldr	w0, [x20]
   84574:	11000673 	add	w19, w19, #0x1
   84578:	6b13001f 	cmp	w0, w19
   8457c:	54000149 	b.ls	845a4 <CXHCIRootHub::Initialize()+0xc4>  // b.plast
   84580:	8b334e80 	add	x0, x20, w19, uxtw #3
   84584:	f9400800 	ldr	x0, [x0, #16]
   84588:	b5ffff20 	cbnz	x0, 8456c <CXHCIRootHub::Initialize()+0x8c>
   8458c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84590:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84594:	9111a021 	add	x1, x1, #0x468
   84598:	9111e000 	add	x0, x0, #0x478
   8459c:	528008c2 	mov	w2, #0x46                  	// #70
   845a0:	94006038 	bl	9c680 <assertion_failed>
   845a4:	52800020 	mov	w0, #0x1                   	// #1
   845a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   845ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   845b0:	d65f03c0 	ret
   845b4:	d503201f 	nop
   845b8:	d503201f 	nop
   845bc:	d503201f 	nop

00000000000845c0 <CXHCIRootHub::ReScanDevices()>:
   845c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   845c4:	910003fd 	mov	x29, sp
   845c8:	a90153f3 	stp	x19, x20, [sp, #16]
   845cc:	aa0003f4 	mov	x20, x0
   845d0:	b9400000 	ldr	w0, [x0]
   845d4:	f90013f5 	str	x21, [sp, #32]
   845d8:	340002c0 	cbz	w0, 84630 <CXHCIRootHub::ReScanDevices()+0x70>
   845dc:	52800013 	mov	w19, #0x0                   	// #0
   845e0:	52800015 	mov	w21, #0x0                   	// #0
   845e4:	1400000a 	b	8460c <CXHCIRootHub::ReScanDevices()+0x4c>
   845e8:	f9400001 	ldr	x1, [x0]
   845ec:	11000673 	add	w19, w19, #0x1
   845f0:	f9400821 	ldr	x1, [x1, #16]
   845f4:	d63f0020 	blr	x1
   845f8:	b9400281 	ldr	w1, [x20]
   845fc:	72001c00 	ands	w0, w0, #0xff
   84600:	1a8002b5 	csel	w21, w21, w0, eq  // eq = none
   84604:	6b13003f 	cmp	w1, w19
   84608:	54000169 	b.ls	84634 <CXHCIRootHub::ReScanDevices()+0x74>  // b.plast
   8460c:	8b334e80 	add	x0, x20, w19, uxtw #3
   84610:	f9400800 	ldr	x0, [x0, #16]
   84614:	b5fffea0 	cbnz	x0, 845e8 <CXHCIRootHub::ReScanDevices()+0x28>
   84618:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   8461c:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84620:	9111a021 	add	x1, x1, #0x468
   84624:	9111e000 	add	x0, x0, #0x478
   84628:	52800a62 	mov	w2, #0x53                  	// #83
   8462c:	94006015 	bl	9c680 <assertion_failed>
   84630:	52800015 	mov	w21, #0x0                   	// #0
   84634:	2a1503e0 	mov	w0, w21
   84638:	a94153f3 	ldp	x19, x20, [sp, #16]
   8463c:	f94013f5 	ldr	x21, [sp, #32]
   84640:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84644:	d65f03c0 	ret
   84648:	d503201f 	nop
   8464c:	d503201f 	nop

0000000000084650 <CXHCIRootHub::StatusChanged(unsigned char)>:
   84650:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84654:	910003fd 	mov	x29, sp
   84658:	12001c21 	and	w1, w1, #0xff
   8465c:	51000421 	sub	w1, w1, #0x1
   84660:	b9400002 	ldr	w2, [x0]
   84664:	6b01005f 	cmp	w2, w1
   84668:	540000c9 	b.ls	84680 <CXHCIRootHub::StatusChanged(unsigned char)+0x30>  // b.plast
   8466c:	8b214c01 	add	x1, x0, w1, uxtw #3
   84670:	f9400820 	ldr	x0, [x1, #16]
   84674:	b4000120 	cbz	x0, 84698 <CXHCIRootHub::StatusChanged(unsigned char)+0x48>
   84678:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8467c:	140000c5 	b	84990 <CXHCIRootPort::StatusChanged()>
   84680:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84684:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84688:	9111a021 	add	x1, x1, #0x468
   8468c:	91124000 	add	x0, x0, #0x490
   84690:	52800c02 	mov	w2, #0x60                  	// #96
   84694:	94005ffb 	bl	9c680 <assertion_failed>
   84698:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   8469c:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   846a0:	9111a021 	add	x1, x1, #0x468
   846a4:	9111e000 	add	x0, x0, #0x478
   846a8:	52800c22 	mov	w2, #0x61                  	// #97
   846ac:	94005ff5 	bl	9c680 <assertion_failed>

00000000000846b0 <CXHCIRootHub::DumpStatus()>:
   846b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   846b4:	910003fd 	mov	x29, sp
   846b8:	a90153f3 	stp	x19, x20, [sp, #16]
   846bc:	aa0003f4 	mov	x20, x0
   846c0:	b9400000 	ldr	w0, [x0]
   846c4:	34000140 	cbz	w0, 846ec <CXHCIRootHub::DumpStatus()+0x3c>
   846c8:	52800013 	mov	w19, #0x0                   	// #0
   846cc:	d503201f 	nop
   846d0:	8b334e80 	add	x0, x20, w19, uxtw #3
   846d4:	f9400800 	ldr	x0, [x0, #16]
   846d8:	11000673 	add	w19, w19, #0x1
   846dc:	940000d9 	bl	84a40 <CXHCIRootPort::DumpStatus()>
   846e0:	b9400280 	ldr	w0, [x20]
   846e4:	6b13001f 	cmp	w0, w19
   846e8:	54ffff48 	b.hi	846d0 <CXHCIRootHub::DumpStatus()+0x20>  // b.pmore
   846ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   846f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   846f4:	d65f03c0 	ret
	...

0000000000084700 <CXHCIRootPort::~CXHCIRootPort()>:
   84700:	aa0003e1 	mov	x1, x0
   84704:	b0000142 	adrp	x2, ad000 <From+0x4c0>
   84708:	91176042 	add	x2, x2, #0x5d8
   8470c:	f9401000 	ldr	x0, [x0, #32]
   84710:	f9000022 	str	x2, [x1]
   84714:	b40000a0 	cbz	x0, 84728 <CXHCIRootPort::~CXHCIRootPort()+0x28>
   84718:	f9400001 	ldr	x1, [x0]
   8471c:	f9400421 	ldr	x1, [x1, #8]
   84720:	aa0103f0 	mov	x16, x1
   84724:	d61f0200 	br	x16
   84728:	d65f03c0 	ret
   8472c:	d503201f 	nop

0000000000084730 <CXHCIRootPort::~CXHCIRootPort()>:
   84730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84734:	910003fd 	mov	x29, sp
   84738:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   8473c:	91176021 	add	x1, x1, #0x5d8
   84740:	f9000bf3 	str	x19, [sp, #16]
   84744:	aa0003f3 	mov	x19, x0
   84748:	f9401000 	ldr	x0, [x0, #32]
   8474c:	f9000261 	str	x1, [x19]
   84750:	b4000080 	cbz	x0, 84760 <CXHCIRootPort::~CXHCIRootPort()+0x30>
   84754:	f9400001 	ldr	x1, [x0]
   84758:	f9400421 	ldr	x1, [x1, #8]
   8475c:	d63f0020 	blr	x1
   84760:	aa1303e0 	mov	x0, x19
   84764:	d2800601 	mov	x1, #0x30                  	// #48
   84768:	f9400bf3 	ldr	x19, [sp, #16]
   8476c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84770:	140083e8 	b	a5710 <operator delete(void*, unsigned long)>
   84774:	d503201f 	nop
   84778:	d503201f 	nop
   8477c:	d503201f 	nop

0000000000084780 <CXHCIRootPort::RemoveDevice()>:
   84780:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84784:	910003fd 	mov	x29, sp
   84788:	f9000bf3 	str	x19, [sp, #16]
   8478c:	aa0003f3 	mov	x19, x0
   84790:	f9400c00 	ldr	x0, [x0, #24]
   84794:	b4000400 	cbz	x0, 84814 <CXHCIRootPort::RemoveDevice()+0x94>
   84798:	b9400a61 	ldr	w1, [x19, #8]
   8479c:	7100103f 	cmp	w1, #0x4
   847a0:	54000468 	b.hi	8482c <CXHCIRootPort::RemoveDevice()+0xac>  // b.pmore
   847a4:	b9402a62 	ldr	w2, [x19, #40]
   847a8:	35000282 	cbnz	w2, 847f8 <CXHCIRootPort::RemoveDevice()+0x78>
   847ac:	52800002 	mov	w2, #0x0                   	// #0
   847b0:	97fffcf4 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   847b4:	321f0003 	orr	w3, w0, #0x2
   847b8:	b9400a61 	ldr	w1, [x19, #8]
   847bc:	52800002 	mov	w2, #0x0                   	// #0
   847c0:	f9400e60 	ldr	x0, [x19, #24]
   847c4:	97fffd33 	bl	83c90 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   847c8:	b9402a60 	ldr	w0, [x19, #40]
   847cc:	35000200 	cbnz	w0, 8480c <CXHCIRootPort::RemoveDevice()+0x8c>
   847d0:	f9401260 	ldr	x0, [x19, #32]
   847d4:	b4000080 	cbz	x0, 847e4 <CXHCIRootPort::RemoveDevice()+0x64>
   847d8:	f9400001 	ldr	x1, [x0]
   847dc:	f9400421 	ldr	x1, [x1, #8]
   847e0:	d63f0020 	blr	x1
   847e4:	52800020 	mov	w0, #0x1                   	// #1
   847e8:	f900127f 	str	xzr, [x19, #32]
   847ec:	f9400bf3 	ldr	x19, [sp, #16]
   847f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   847f4:	d65f03c0 	ret
   847f8:	2a0203e0 	mov	w0, w2
   847fc:	940086b5 	bl	a62d0 <EnterCritical>
   84800:	b9400a61 	ldr	w1, [x19, #8]
   84804:	f9400e60 	ldr	x0, [x19, #24]
   84808:	17ffffe9 	b	847ac <CXHCIRootPort::RemoveDevice()+0x2c>
   8480c:	940086e1 	bl	a6390 <LeaveCritical>
   84810:	17fffff0 	b	847d0 <CXHCIRootPort::RemoveDevice()+0x50>
   84814:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84818:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   8481c:	9112a021 	add	x1, x1, #0x4a8
   84820:	91060000 	add	x0, x0, #0x180
   84824:	52801702 	mov	w2, #0xb8                  	// #184
   84828:	94005f96 	bl	9c680 <assertion_failed>
   8482c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84830:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84834:	9112a021 	add	x1, x1, #0x4a8
   84838:	91130000 	add	x0, x0, #0x4c0
   8483c:	52801722 	mov	w2, #0xb9                  	// #185
   84840:	94005f90 	bl	9c680 <assertion_failed>
   84844:	d503201f 	nop
   84848:	d503201f 	nop
   8484c:	d503201f 	nop

0000000000084850 <CXHCIRootPort::GetPortID() const>:
   84850:	b9400800 	ldr	w0, [x0, #8]
   84854:	7100101f 	cmp	w0, #0x4
   84858:	54000068 	b.hi	84864 <CXHCIRootPort::GetPortID() const+0x14>  // b.pmore
   8485c:	11000400 	add	w0, w0, #0x1
   84860:	d65f03c0 	ret
   84864:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84868:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   8486c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84870:	9112a021 	add	x1, x1, #0x4a8
   84874:	910003fd 	mov	x29, sp
   84878:	91130000 	add	x0, x0, #0x4c0
   8487c:	52801182 	mov	w2, #0x8c                  	// #140
   84880:	94005f80 	bl	9c680 <assertion_failed>
   84884:	d503201f 	nop
   84888:	d503201f 	nop
   8488c:	d503201f 	nop

0000000000084890 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)>:
   84890:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84894:	12001c21 	and	w1, w1, #0xff
   84898:	910003fd 	mov	x29, sp
   8489c:	a90153f3 	stp	x19, x20, [sp, #16]
   848a0:	aa0003f3 	mov	x19, x0
   848a4:	51000434 	sub	w20, w1, #0x1
   848a8:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   848ac:	91176021 	add	x1, x1, #0x5d8
   848b0:	aa0203e0 	mov	x0, x2
   848b4:	f9000261 	str	x1, [x19]
   848b8:	b9000a74 	str	w20, [x19, #8]
   848bc:	12001e94 	and	w20, w20, #0xff
   848c0:	f9000a62 	str	x2, [x19, #16]
   848c4:	97fff663 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   848c8:	52800021 	mov	w1, #0x1                   	// #1
   848cc:	7100129f 	cmp	w20, #0x4
   848d0:	a901fe60 	stp	x0, xzr, [x19, #24]
   848d4:	b9002a61 	str	w1, [x19, #40]
   848d8:	54000088 	b.hi	848e8 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)+0x58>  // b.pmore
   848dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   848e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   848e4:	d65f03c0 	ret
   848e8:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   848ec:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   848f0:	9112a021 	add	x1, x1, #0x4a8
   848f4:	9113a000 	add	x0, x0, #0x4e8
   848f8:	52800422 	mov	w2, #0x21                  	// #33
   848fc:	94005f61 	bl	9c680 <assertion_failed>

0000000000084900 <CXHCIRootPort::GetPortSpeed()>:
   84900:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84904:	aa0003e1 	mov	x1, x0
   84908:	910003fd 	mov	x29, sp
   8490c:	f9400c00 	ldr	x0, [x0, #24]
   84910:	b4000240 	cbz	x0, 84958 <CXHCIRootPort::GetPortSpeed()+0x58>
   84914:	b9400821 	ldr	w1, [x1, #8]
   84918:	7100103f 	cmp	w1, #0x4
   8491c:	540002a8 	b.hi	84970 <CXHCIRootPort::GetPortSpeed()+0x70>  // b.pmore
   84920:	52800002 	mov	w2, #0x0                   	// #0
   84924:	97fffc97 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84928:	2a0003e1 	mov	w1, w0
   8492c:	52800080 	mov	w0, #0x4                   	// #4
   84930:	d34a3421 	ubfx	x1, x1, #10, #4
   84934:	51000422 	sub	w2, w1, #0x1
   84938:	12001c43 	and	w3, w2, #0xff
   8493c:	71000c7f 	cmp	w3, #0x3
   84940:	54000088 	b.hi	84950 <CXHCIRootPort::GetPortSpeed()+0x50>  // b.pmore
   84944:	71000c3f 	cmp	w1, #0x3
   84948:	52000040 	eor	w0, w2, #0x1
   8494c:	1a823000 	csel	w0, w0, w2, cc  // cc = lo, ul, last
   84950:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84954:	d65f03c0 	ret
   84958:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   8495c:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84960:	9112a021 	add	x1, x1, #0x4a8
   84964:	91060000 	add	x0, x0, #0x180
   84968:	52801262 	mov	w2, #0x93                  	// #147
   8496c:	94005f45 	bl	9c680 <assertion_failed>
   84970:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84974:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84978:	9112a021 	add	x1, x1, #0x4a8
   8497c:	91130000 	add	x0, x0, #0x4c0
   84980:	52801282 	mov	w2, #0x94                  	// #148
   84984:	94005f3f 	bl	9c680 <assertion_failed>
   84988:	d503201f 	nop
   8498c:	d503201f 	nop

0000000000084990 <CXHCIRootPort::StatusChanged()>:
   84990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84994:	910003fd 	mov	x29, sp
   84998:	f9000bf3 	str	x19, [sp, #16]
   8499c:	aa0003f3 	mov	x19, x0
   849a0:	f9400c00 	ldr	x0, [x0, #24]
   849a4:	b4000340 	cbz	x0, 84a0c <CXHCIRootPort::StatusChanged()+0x7c>
   849a8:	b9400a61 	ldr	w1, [x19, #8]
   849ac:	7100103f 	cmp	w1, #0x4
   849b0:	540003a8 	b.hi	84a24 <CXHCIRootPort::StatusChanged()+0x94>  // b.pmore
   849b4:	b9402a62 	ldr	w2, [x19, #40]
   849b8:	350001a2 	cbnz	w2, 849ec <CXHCIRootPort::StatusChanged()+0x5c>
   849bc:	52800002 	mov	w2, #0x0                   	// #0
   849c0:	97fffc70 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   849c4:	121e7803 	and	w3, w0, #0xfffffffd
   849c8:	b9400a61 	ldr	w1, [x19, #8]
   849cc:	52800002 	mov	w2, #0x0                   	// #0
   849d0:	f9400e60 	ldr	x0, [x19, #24]
   849d4:	97fffcaf 	bl	83c90 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   849d8:	b9402a60 	ldr	w0, [x19, #40]
   849dc:	35000120 	cbnz	w0, 84a00 <CXHCIRootPort::StatusChanged()+0x70>
   849e0:	f9400bf3 	ldr	x19, [sp, #16]
   849e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   849e8:	d65f03c0 	ret
   849ec:	2a0203e0 	mov	w0, w2
   849f0:	94008638 	bl	a62d0 <EnterCritical>
   849f4:	b9400a61 	ldr	w1, [x19, #8]
   849f8:	f9400e60 	ldr	x0, [x19, #24]
   849fc:	17fffff0 	b	849bc <CXHCIRootPort::StatusChanged()+0x2c>
   84a00:	f9400bf3 	ldr	x19, [sp, #16]
   84a04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84a08:	14008662 	b	a6390 <LeaveCritical>
   84a0c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84a10:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84a14:	9112a021 	add	x1, x1, #0x4a8
   84a18:	91060000 	add	x0, x0, #0x180
   84a1c:	52801982 	mov	w2, #0xcc                  	// #204
   84a20:	94005f18 	bl	9c680 <assertion_failed>
   84a24:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84a28:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84a2c:	9112a021 	add	x1, x1, #0x4a8
   84a30:	91130000 	add	x0, x0, #0x4c0
   84a34:	528019a2 	mov	w2, #0xcd                  	// #205
   84a38:	94005f12 	bl	9c680 <assertion_failed>
   84a3c:	d503201f 	nop

0000000000084a40 <CXHCIRootPort::DumpStatus()>:
   84a40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84a44:	910003fd 	mov	x29, sp
   84a48:	a90153f3 	stp	x19, x20, [sp, #16]
   84a4c:	aa0003f3 	mov	x19, x0
   84a50:	a9025bf5 	stp	x21, x22, [sp, #32]
   84a54:	9400689f 	bl	9ecd0 <CLogger::Get()>
   84a58:	b9400a76 	ldr	w22, [x19, #8]
   84a5c:	52800002 	mov	w2, #0x0                   	// #0
   84a60:	aa0003f4 	mov	x20, x0
   84a64:	f9400e60 	ldr	x0, [x19, #24]
   84a68:	2a1603e1 	mov	w1, w22
   84a6c:	97fffc45 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84a70:	b9400a61 	ldr	w1, [x19, #8]
   84a74:	52800102 	mov	w2, #0x8                   	// #8
   84a78:	2a0003f5 	mov	w21, w0
   84a7c:	f9400e60 	ldr	x0, [x19, #24]
   84a80:	97fffc40 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84a84:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84a88:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84a8c:	2a0003e6 	mov	w6, w0
   84a90:	110006c4 	add	w4, w22, #0x1
   84a94:	aa1403e0 	mov	x0, x20
   84a98:	2a1503e5 	mov	w5, w21
   84a9c:	91142063 	add	x3, x3, #0x508
   84aa0:	91180021 	add	x1, x1, #0x600
   84aa4:	52800082 	mov	w2, #0x4                   	// #4
   84aa8:	940067c6 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84aac:	f9401260 	ldr	x0, [x19, #32]
   84ab0:	b40000a0 	cbz	x0, 84ac4 <CXHCIRootPort::DumpStatus()+0x84>
   84ab4:	a94153f3 	ldp	x19, x20, [sp, #16]
   84ab8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84abc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84ac0:	140003e4 	b	85a50 <CXHCIUSBDevice::DumpStatus()>
   84ac4:	a94153f3 	ldp	x19, x20, [sp, #16]
   84ac8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84acc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84ad0:	d65f03c0 	ret
   84ad4:	d503201f 	nop
   84ad8:	d503201f 	nop
   84adc:	d503201f 	nop

0000000000084ae0 <CXHCIRootPort::IsConnected()>:
   84ae0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84ae4:	aa0003e1 	mov	x1, x0
   84ae8:	910003fd 	mov	x29, sp
   84aec:	f9400c00 	ldr	x0, [x0, #24]
   84af0:	b4000120 	cbz	x0, 84b14 <CXHCIRootPort::IsConnected()+0x34>
   84af4:	b9400821 	ldr	w1, [x1, #8]
   84af8:	7100103f 	cmp	w1, #0x4
   84afc:	54000188 	b.hi	84b2c <CXHCIRootPort::IsConnected()+0x4c>  // b.pmore
   84b00:	52800002 	mov	w2, #0x0                   	// #0
   84b04:	97fffc1f 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84b08:	12000000 	and	w0, w0, #0x1
   84b0c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84b10:	d65f03c0 	ret
   84b14:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84b18:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84b1c:	9112a021 	add	x1, x1, #0x4a8
   84b20:	91060000 	add	x0, x0, #0x180
   84b24:	52801de2 	mov	w2, #0xef                  	// #239
   84b28:	94005ed6 	bl	9c680 <assertion_failed>
   84b2c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84b30:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84b34:	9112a021 	add	x1, x1, #0x4a8
   84b38:	91130000 	add	x0, x0, #0x4c0
   84b3c:	52801e02 	mov	w2, #0xf0                  	// #240
   84b40:	94005ed0 	bl	9c680 <assertion_failed>
   84b44:	d503201f 	nop
   84b48:	d503201f 	nop
   84b4c:	d503201f 	nop

0000000000084b50 <CXHCIRootPort::Reset(unsigned int)>:
   84b50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84b54:	910003fd 	mov	x29, sp
   84b58:	a90153f3 	stp	x19, x20, [sp, #16]
   84b5c:	aa0003f3 	mov	x19, x0
   84b60:	f9400c00 	ldr	x0, [x0, #24]
   84b64:	b4000440 	cbz	x0, 84bec <CXHCIRootPort::Reset(unsigned int)+0x9c>
   84b68:	2a0103f4 	mov	w20, w1
   84b6c:	b9400a61 	ldr	w1, [x19, #8]
   84b70:	7100103f 	cmp	w1, #0x4
   84b74:	54000488 	b.hi	84c04 <CXHCIRootPort::Reset(unsigned int)+0xb4>  // b.pmore
   84b78:	b9402a62 	ldr	w2, [x19, #40]
   84b7c:	350002a2 	cbnz	w2, 84bd0 <CXHCIRootPort::Reset(unsigned int)+0x80>
   84b80:	52800002 	mov	w2, #0x0                   	// #0
   84b84:	97fffbff 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84b88:	121e7803 	and	w3, w0, #0xfffffffd
   84b8c:	b9400a61 	ldr	w1, [x19, #8]
   84b90:	52800002 	mov	w2, #0x0                   	// #0
   84b94:	321c0063 	orr	w3, w3, #0x10
   84b98:	f9400e60 	ldr	x0, [x19, #24]
   84b9c:	97fffc3d 	bl	83c90 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   84ba0:	b9402a60 	ldr	w0, [x19, #40]
   84ba4:	35000200 	cbnz	w0, 84be4 <CXHCIRootPort::Reset(unsigned int)+0x94>
   84ba8:	b9400a61 	ldr	w1, [x19, #8]
   84bac:	2a1403e4 	mov	w4, w20
   84bb0:	52800003 	mov	w3, #0x0                   	// #0
   84bb4:	52800202 	mov	w2, #0x10                  	// #16
   84bb8:	f9400e60 	ldr	x0, [x19, #24]
   84bbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   84bc0:	11010021 	add	w1, w1, #0x40
   84bc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84bc8:	531c6c21 	lsl	w1, w1, #4
   84bcc:	17fffc79 	b	83db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   84bd0:	2a0203e0 	mov	w0, w2
   84bd4:	940085bf 	bl	a62d0 <EnterCritical>
   84bd8:	b9400a61 	ldr	w1, [x19, #8]
   84bdc:	f9400e60 	ldr	x0, [x19, #24]
   84be0:	17ffffe8 	b	84b80 <CXHCIRootPort::Reset(unsigned int)+0x30>
   84be4:	940085eb 	bl	a6390 <LeaveCritical>
   84be8:	17fffff0 	b	84ba8 <CXHCIRootPort::Reset(unsigned int)+0x58>
   84bec:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84bf0:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84bf4:	9112a021 	add	x1, x1, #0x4a8
   84bf8:	91060000 	add	x0, x0, #0x180
   84bfc:	52801f02 	mov	w2, #0xf8                  	// #248
   84c00:	94005ea0 	bl	9c680 <assertion_failed>
   84c04:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84c08:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84c0c:	9112a021 	add	x1, x1, #0x4a8
   84c10:	91130000 	add	x0, x0, #0x4c0
   84c14:	52801f22 	mov	w2, #0xf9                  	// #249
   84c18:	94005e9a 	bl	9c680 <assertion_failed>
   84c1c:	d503201f 	nop

0000000000084c20 <CXHCIRootPort::WaitForU0State(unsigned int)>:
   84c20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84c24:	aa0003e2 	mov	x2, x0
   84c28:	910003fd 	mov	x29, sp
   84c2c:	f9400c00 	ldr	x0, [x0, #24]
   84c30:	b4000160 	cbz	x0, 84c5c <CXHCIRootPort::WaitForU0State(unsigned int)+0x3c>
   84c34:	b9400842 	ldr	w2, [x2, #8]
   84c38:	7100105f 	cmp	w2, #0x4
   84c3c:	540001c8 	b.hi	84c74 <CXHCIRootPort::WaitForU0State(unsigned int)+0x54>  // b.pmore
   84c40:	11010042 	add	w2, w2, #0x40
   84c44:	2a0103e4 	mov	w4, w1
   84c48:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84c4c:	531c6c41 	lsl	w1, w2, #4
   84c50:	52800003 	mov	w3, #0x0                   	// #0
   84c54:	52803c02 	mov	w2, #0x1e0                 	// #480
   84c58:	17fffc56 	b	83db0 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   84c5c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84c60:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84c64:	9112a021 	add	x1, x1, #0x4a8
   84c68:	91060000 	add	x0, x0, #0x180
   84c6c:	52802182 	mov	w2, #0x10c                 	// #268
   84c70:	94005e84 	bl	9c680 <assertion_failed>
   84c74:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84c78:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84c7c:	9112a021 	add	x1, x1, #0x4a8
   84c80:	91130000 	add	x0, x0, #0x4c0
   84c84:	528021a2 	mov	w2, #0x10d                 	// #269
   84c88:	94005e7e 	bl	9c680 <assertion_failed>
   84c8c:	d503201f 	nop

0000000000084c90 <CXHCIRootPort::PowerOffOnOverCurrent()>:
   84c90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84c94:	910003fd 	mov	x29, sp
   84c98:	a90153f3 	stp	x19, x20, [sp, #16]
   84c9c:	aa0003f3 	mov	x19, x0
   84ca0:	f9400c00 	ldr	x0, [x0, #24]
   84ca4:	b4000440 	cbz	x0, 84d2c <CXHCIRootPort::PowerOffOnOverCurrent()+0x9c>
   84ca8:	b9400a61 	ldr	w1, [x19, #8]
   84cac:	7100103f 	cmp	w1, #0x4
   84cb0:	540004a8 	b.hi	84d44 <CXHCIRootPort::PowerOffOnOverCurrent()+0xb4>  // b.pmore
   84cb4:	b9402a62 	ldr	w2, [x19, #40]
   84cb8:	35000302 	cbnz	w2, 84d18 <CXHCIRootPort::PowerOffOnOverCurrent()+0x88>
   84cbc:	52800002 	mov	w2, #0x0                   	// #0
   84cc0:	97fffbb0 	bl	83b80 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   84cc4:	37180100 	tbnz	w0, #3, 84ce4 <CXHCIRootPort::PowerOffOnOverCurrent()+0x54>
   84cc8:	b9402a60 	ldr	w0, [x19, #40]
   84ccc:	52800014 	mov	w20, #0x0                   	// #0
   84cd0:	350001a0 	cbnz	w0, 84d04 <CXHCIRootPort::PowerOffOnOverCurrent()+0x74>
   84cd4:	2a1403e0 	mov	w0, w20
   84cd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   84cdc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84ce0:	d65f03c0 	ret
   84ce4:	12167803 	and	w3, w0, #0xfffffdff
   84ce8:	b9400a61 	ldr	w1, [x19, #8]
   84cec:	52800002 	mov	w2, #0x0                   	// #0
   84cf0:	52800034 	mov	w20, #0x1                   	// #1
   84cf4:	f9400e60 	ldr	x0, [x19, #24]
   84cf8:	97fffbe6 	bl	83c90 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   84cfc:	b9402a60 	ldr	w0, [x19, #40]
   84d00:	34fffea0 	cbz	w0, 84cd4 <CXHCIRootPort::PowerOffOnOverCurrent()+0x44>
   84d04:	940085a3 	bl	a6390 <LeaveCritical>
   84d08:	2a1403e0 	mov	w0, w20
   84d0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84d10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84d14:	d65f03c0 	ret
   84d18:	2a0203e0 	mov	w0, w2
   84d1c:	9400856d 	bl	a62d0 <EnterCritical>
   84d20:	b9400a61 	ldr	w1, [x19, #8]
   84d24:	f9400e60 	ldr	x0, [x19, #24]
   84d28:	17ffffe5 	b	84cbc <CXHCIRootPort::PowerOffOnOverCurrent()+0x2c>
   84d2c:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84d30:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84d34:	9112a021 	add	x1, x1, #0x4a8
   84d38:	91060000 	add	x0, x0, #0x180
   84d3c:	52802322 	mov	w2, #0x119                 	// #281
   84d40:	94005e50 	bl	9c680 <assertion_failed>
   84d44:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84d48:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84d4c:	9112a021 	add	x1, x1, #0x4a8
   84d50:	91130000 	add	x0, x0, #0x4c0
   84d54:	52802342 	mov	w2, #0x11a                 	// #282
   84d58:	94005e4a 	bl	9c680 <assertion_failed>
   84d5c:	d503201f 	nop

0000000000084d60 <CXHCIRootPort::Configure()>:
   84d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84d64:	910003fd 	mov	x29, sp
   84d68:	a90153f3 	stp	x19, x20, [sp, #16]
   84d6c:	aa0003f3 	mov	x19, x0
   84d70:	f9401000 	ldr	x0, [x0, #32]
   84d74:	b40006a0 	cbz	x0, 84e48 <CXHCIRootPort::Configure()+0xe8>
   84d78:	f9400001 	ldr	x1, [x0]
   84d7c:	f9400c21 	ldr	x1, [x1, #24]
   84d80:	d63f0020 	blr	x1
   84d84:	72001c14 	ands	w20, w0, #0xff
   84d88:	54000240 	b.eq	84dd0 <CXHCIRootPort::Configure()+0x70>  // b.none
   84d8c:	aa1303e0 	mov	x0, x19
   84d90:	97ffffc0 	bl	84c90 <CXHCIRootPort::PowerOffOnOverCurrent()>
   84d94:	72001c1f 	tst	w0, #0xff
   84d98:	54000401 	b.ne	84e18 <CXHCIRootPort::Configure()+0xb8>  // b.any
   84d9c:	940067cd 	bl	9ecd0 <CLogger::Get()>
   84da0:	b9400a64 	ldr	w4, [x19, #8]
   84da4:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84da8:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84dac:	91158063 	add	x3, x3, #0x560
   84db0:	91180021 	add	x1, x1, #0x600
   84db4:	52800082 	mov	w2, #0x4                   	// #4
   84db8:	11000484 	add	w4, w4, #0x1
   84dbc:	94006701 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84dc0:	2a1403e0 	mov	w0, w20
   84dc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   84dc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84dcc:	d65f03c0 	ret
   84dd0:	940067c0 	bl	9ecd0 <CLogger::Get()>
   84dd4:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84dd8:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84ddc:	9114a063 	add	x3, x3, #0x528
   84de0:	91180021 	add	x1, x1, #0x600
   84de4:	52800042 	mov	w2, #0x2                   	// #2
   84de8:	940066f6 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84dec:	f9401260 	ldr	x0, [x19, #32]
   84df0:	b4000080 	cbz	x0, 84e00 <CXHCIRootPort::Configure()+0xa0>
   84df4:	f9400001 	ldr	x1, [x0]
   84df8:	f9400421 	ldr	x1, [x1, #8]
   84dfc:	d63f0020 	blr	x1
   84e00:	52800014 	mov	w20, #0x0                   	// #0
   84e04:	f900127f 	str	xzr, [x19, #32]
   84e08:	2a1403e0 	mov	w0, w20
   84e0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84e14:	d65f03c0 	ret
   84e18:	940067ae 	bl	9ecd0 <CLogger::Get()>
   84e1c:	b9400a64 	ldr	w4, [x19, #8]
   84e20:	52800022 	mov	w2, #0x1                   	// #1
   84e24:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84e28:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84e2c:	91150063 	add	x3, x3, #0x540
   84e30:	91180021 	add	x1, x1, #0x600
   84e34:	0b020084 	add	w4, w4, w2
   84e38:	940066e2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84e3c:	f9401260 	ldr	x0, [x19, #32]
   84e40:	b5fffda0 	cbnz	x0, 84df4 <CXHCIRootPort::Configure()+0x94>
   84e44:	17ffffef 	b	84e00 <CXHCIRootPort::Configure()+0xa0>
   84e48:	52800014 	mov	w20, #0x0                   	// #0
   84e4c:	2a1403e0 	mov	w0, w20
   84e50:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84e58:	d65f03c0 	ret
   84e5c:	d503201f 	nop

0000000000084e60 <CXHCIRootPort::Initialize()>:
   84e60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84e64:	910003fd 	mov	x29, sp
   84e68:	a90153f3 	stp	x19, x20, [sp, #16]
   84e6c:	aa0003f4 	mov	x20, x0
   84e70:	97ffff1c 	bl	84ae0 <CXHCIRootPort::IsConnected()>
   84e74:	72001c13 	ands	w19, w0, #0xff
   84e78:	54000460 	b.eq	84f04 <CXHCIRootPort::Initialize()+0xa4>  // b.none
   84e7c:	b9400a80 	ldr	w0, [x20, #8]
   84e80:	7100101f 	cmp	w0, #0x4
   84e84:	54000868 	b.hi	84f90 <CXHCIRootPort::Initialize()+0x130>  // b.pmore
   84e88:	34000460 	cbz	w0, 84f14 <CXHCIRootPort::Initialize()+0xb4>
   84e8c:	5290d401 	mov	w1, #0x86a0                	// #34464
   84e90:	72a00021 	movk	w1, #0x1, lsl #16
   84e94:	aa1403e0 	mov	x0, x20
   84e98:	97ffff62 	bl	84c20 <CXHCIRootPort::WaitForU0State(unsigned int)>
   84e9c:	72001c13 	ands	w19, w0, #0xff
   84ea0:	54000840 	b.eq	84fa8 <CXHCIRootPort::Initialize()+0x148>  // b.none
   84ea4:	f9401280 	ldr	x0, [x20, #32]
   84ea8:	b5000940 	cbnz	x0, 84fd0 <CXHCIRootPort::Initialize()+0x170>
   84eac:	aa1403e0 	mov	x0, x20
   84eb0:	97fffe94 	bl	84900 <CXHCIRootPort::GetPortSpeed()>
   84eb4:	2a0003f3 	mov	w19, w0
   84eb8:	d2803c00 	mov	x0, #0x1e0                 	// #480
   84ebc:	940081f1 	bl	a5680 <operator new(unsigned long)>
   84ec0:	f9400a81 	ldr	x1, [x20, #16]
   84ec4:	2a1303e2 	mov	w2, w19
   84ec8:	aa1403e3 	mov	x3, x20
   84ecc:	aa0003f3 	mov	x19, x0
   84ed0:	9400024c 	bl	85800 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)>
   84ed4:	aa1303e0 	mov	x0, x19
   84ed8:	f9001293 	str	x19, [x20, #32]
   84edc:	94000429 	bl	85f80 <CXHCIUSBDevice::Initialize()>
   84ee0:	72001c13 	ands	w19, w0, #0xff
   84ee4:	54000361 	b.ne	84f50 <CXHCIRootPort::Initialize()+0xf0>  // b.any
   84ee8:	f9401280 	ldr	x0, [x20, #32]
   84eec:	b4000080 	cbz	x0, 84efc <CXHCIRootPort::Initialize()+0x9c>
   84ef0:	f9400001 	ldr	x1, [x0]
   84ef4:	f9400421 	ldr	x1, [x1, #8]
   84ef8:	d63f0020 	blr	x1
   84efc:	52800013 	mov	w19, #0x0                   	// #0
   84f00:	f900129f 	str	xzr, [x20, #32]
   84f04:	2a1303e0 	mov	w0, w19
   84f08:	a94153f3 	ldp	x19, x20, [sp, #16]
   84f0c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84f10:	d65f03c0 	ret
   84f14:	52986a01 	mov	w1, #0xc350                	// #50000
   84f18:	aa1403e0 	mov	x0, x20
   84f1c:	97ffff0d 	bl	84b50 <CXHCIRootPort::Reset(unsigned int)>
   84f20:	72001c13 	ands	w19, w0, #0xff
   84f24:	54fffc01 	b.ne	84ea4 <CXHCIRootPort::Initialize()+0x44>  // b.any
   84f28:	9400676a 	bl	9ecd0 <CLogger::Get()>
   84f2c:	b9400a84 	ldr	w4, [x20, #8]
   84f30:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84f34:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84f38:	91160063 	add	x3, x3, #0x580
   84f3c:	91180021 	add	x1, x1, #0x600
   84f40:	52800042 	mov	w2, #0x2                   	// #2
   84f44:	11000484 	add	w4, w4, #0x1
   84f48:	9400669e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84f4c:	17ffffee 	b	84f04 <CXHCIRootPort::Initialize()+0xa4>
   84f50:	aa1403e0 	mov	x0, x20
   84f54:	97ffff4f 	bl	84c90 <CXHCIRootPort::PowerOffOnOverCurrent()>
   84f58:	72001c1f 	tst	w0, #0xff
   84f5c:	54fffd40 	b.eq	84f04 <CXHCIRootPort::Initialize()+0xa4>  // b.none
   84f60:	9400675c 	bl	9ecd0 <CLogger::Get()>
   84f64:	b9400a84 	ldr	w4, [x20, #8]
   84f68:	52800022 	mov	w2, #0x1                   	// #1
   84f6c:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84f70:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84f74:	91150063 	add	x3, x3, #0x540
   84f78:	91180021 	add	x1, x1, #0x600
   84f7c:	0b020084 	add	w4, w4, w2
   84f80:	94006690 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84f84:	f9401280 	ldr	x0, [x20, #32]
   84f88:	b5fffb40 	cbnz	x0, 84ef0 <CXHCIRootPort::Initialize()+0x90>
   84f8c:	17ffffdc 	b	84efc <CXHCIRootPort::Initialize()+0x9c>
   84f90:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84f94:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84f98:	9112a021 	add	x1, x1, #0x4a8
   84f9c:	91130000 	add	x0, x0, #0x4c0
   84fa0:	52800682 	mov	w2, #0x34                  	// #52
   84fa4:	94005db7 	bl	9c680 <assertion_failed>
   84fa8:	9400674a 	bl	9ecd0 <CLogger::Get()>
   84fac:	b9400a84 	ldr	w4, [x20, #8]
   84fb0:	b0000143 	adrp	x3, ad000 <From+0x4c0>
   84fb4:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84fb8:	91166063 	add	x3, x3, #0x598
   84fbc:	91180021 	add	x1, x1, #0x600
   84fc0:	52800042 	mov	w2, #0x2                   	// #2
   84fc4:	11000484 	add	w4, w4, #0x1
   84fc8:	9400667e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84fcc:	17ffffce 	b	84f04 <CXHCIRootPort::Initialize()+0xa4>
   84fd0:	b0000141 	adrp	x1, ad000 <From+0x4c0>
   84fd4:	b0000140 	adrp	x0, ad000 <From+0x4c0>
   84fd8:	9112a021 	add	x1, x1, #0x4a8
   84fdc:	9116c000 	add	x0, x0, #0x5b0
   84fe0:	52800942 	mov	w2, #0x4a                  	// #74
   84fe4:	94005da7 	bl	9c680 <assertion_failed>
   84fe8:	d503201f 	nop
   84fec:	d503201f 	nop

0000000000084ff0 <CXHCIRootPort::ReScanDevices()>:
   84ff0:	f9401001 	ldr	x1, [x0, #32]
   84ff4:	b4000061 	cbz	x1, 85000 <CXHCIRootPort::ReScanDevices()+0x10>
   84ff8:	aa0103e0 	mov	x0, x1
   84ffc:	140004c1 	b	86300 <CUSBDevice::ReScanDevices()>
   85000:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85004:	910003fd 	mov	x29, sp
   85008:	f9000bf3 	str	x19, [sp, #16]
   8500c:	aa0003f3 	mov	x19, x0
   85010:	97ffff94 	bl	84e60 <CXHCIRootPort::Initialize()>
   85014:	72001c1f 	tst	w0, #0xff
   85018:	540000a1 	b.ne	8502c <CXHCIRootPort::ReScanDevices()+0x3c>  // b.any
   8501c:	52800000 	mov	w0, #0x0                   	// #0
   85020:	f9400bf3 	ldr	x19, [sp, #16]
   85024:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85028:	d65f03c0 	ret
   8502c:	aa1303e0 	mov	x0, x19
   85030:	f9400bf3 	ldr	x19, [sp, #16]
   85034:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85038:	17ffff4a 	b	84d60 <CXHCIRootPort::Configure()>
   8503c:	00000000 	.inst	0x00000000 ; undefined

0000000000085040 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)>:
   85040:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85044:	910003fd 	mov	x29, sp
   85048:	a9000801 	stp	x1, x2, [x0]
   8504c:	f900081f 	str	xzr, [x0, #16]
   85050:	b40000a1 	cbz	x1, 85064 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)+0x24>
   85054:	eb02003f 	cmp	x1, x2
   85058:	54000122 	b.cs	8507c <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)+0x3c>  // b.hs, b.nlast
   8505c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   85060:	d65f03c0 	ret
   85064:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85068:	90000140 	adrp	x0, ad000 <From+0x4c0>
   8506c:	91184021 	add	x1, x1, #0x610
   85070:	9118c000 	add	x0, x0, #0x630
   85074:	528003e2 	mov	w2, #0x1f                  	// #31
   85078:	94005d82 	bl	9c680 <assertion_failed>
   8507c:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85080:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85084:	91184021 	add	x1, x1, #0x610
   85088:	91192000 	add	x0, x0, #0x648
   8508c:	52800402 	mov	w2, #0x20                  	// #32
   85090:	94005d7c 	bl	9c680 <assertion_failed>
   85094:	d503201f 	nop
   85098:	d503201f 	nop
   8509c:	d503201f 	nop

00000000000850a0 <CXHCISharedMemAllocator::~CXHCISharedMemAllocator()>:
   850a0:	d65f03c0 	ret
   850a4:	d503201f 	nop
   850a8:	d503201f 	nop
   850ac:	d503201f 	nop

00000000000850b0 <CXHCISharedMemAllocator::GetFreeSpace() const>:
   850b0:	a9400001 	ldp	x1, x0, [x0]
   850b4:	eb010000 	subs	x0, x0, x1
   850b8:	9a9f8000 	csel	x0, x0, xzr, hi  // hi = pmore
   850bc:	d65f03c0 	ret

00000000000850c0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)>:
   850c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   850c4:	910003fd 	mov	x29, sp
   850c8:	b4000901 	cbz	x1, 851e8 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x128>
   850cc:	b40009a2 	cbz	x2, 85200 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x140>
   850d0:	eb03005f 	cmp	x2, x3
   850d4:	54000a68 	b.hi	85220 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x160>  // b.pmore
   850d8:	f9400004 	ldr	x4, [x0]
   850dc:	aa0003e5 	mov	x5, x0
   850e0:	b4000ac4 	cbz	x4, 85238 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x178>
   850e4:	f9400408 	ldr	x8, [x0, #8]
   850e8:	b4000b48 	cbz	x8, 85250 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x190>
   850ec:	f140407f 	cmp	x3, #0x10, lsl #12
   850f0:	d2800806 	mov	x6, #0x40                  	// #64
   850f4:	fa469042 	ccmp	x2, x6, #0x2, ls  // ls = plast
   850f8:	d2808000 	mov	x0, #0x400                 	// #1024
   850fc:	fa409022 	ccmp	x1, x0, #0x2, ls  // ls = plast
   85100:	540003c9 	b.ls	85178 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xb8>  // b.plast
   85104:	cb0303e9 	neg	x9, x3
   85108:	d1000447 	sub	x7, x2, #0x1
   8510c:	91006084 	add	x4, x4, #0x18
   85110:	cb0203e0 	neg	x0, x2
   85114:	8b0400e6 	add	x6, x7, x4
   85118:	ea0400ff 	tst	x7, x4
   8511c:	8a0000c0 	and	x0, x6, x0
   85120:	9a800084 	csel	x4, x4, x0, eq  // eq = none
   85124:	d1000480 	sub	x0, x4, #0x1
   85128:	8b010006 	add	x6, x0, x1
   8512c:	8b030000 	add	x0, x0, x3
   85130:	ca0400c6 	eor	x6, x6, x4
   85134:	8a090000 	and	x0, x0, x9
   85138:	ea0900df 	tst	x6, x9
   8513c:	9a841004 	csel	x4, x0, x4, ne  // ne = any
   85140:	8b010080 	add	x0, x4, x1
   85144:	eb00011f 	cmp	x8, x0
   85148:	f90000a0 	str	x0, [x5]
   8514c:	54000663 	b.cc	85218 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x158>  // b.lo, b.ul, b.last
   85150:	52886925 	mov	w5, #0x4349                	// #17225
   85154:	72ab0905 	movk	w5, #0x5848, lsl #16
   85158:	293e0c82 	stp	w2, w3, [x4, #-16]
   8515c:	ea07009f 	tst	x4, x7
   85160:	f81f809f 	stur	xzr, [x4, #-8]
   85164:	aa0403e0 	mov	x0, x4
   85168:	293d0485 	stp	w5, w1, [x4, #-24]
   8516c:	540008a1 	b.ne	85280 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1c0>  // b.any
   85170:	a8c17bfd 	ldp	x29, x30, [sp], #16
   85174:	d65f03c0 	ret
   85178:	f94008a1 	ldr	x1, [x5, #16]
   8517c:	b4000761 	cbz	x1, 85268 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1a8>
   85180:	b9400022 	ldr	w2, [x1]
   85184:	52886920 	mov	w0, #0x4349                	// #17225
   85188:	72ab0900 	movk	w0, #0x5848, lsl #16
   8518c:	6b00005f 	cmp	w2, w0
   85190:	54000841 	b.ne	85298 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1d8>  // b.any
   85194:	b9400420 	ldr	w0, [x1, #4]
   85198:	7110001f 	cmp	w0, #0x400
   8519c:	540008a1 	b.ne	852b0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1f0>  // b.any
   851a0:	b9400820 	ldr	w0, [x1, #8]
   851a4:	7101001f 	cmp	w0, #0x40
   851a8:	54000901 	b.ne	852c8 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x208>  // b.any
   851ac:	b9400c20 	ldr	w0, [x1, #12]
   851b0:	7140401f 	cmp	w0, #0x10, lsl #12
   851b4:	54000961 	b.ne	852e0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x220>  // b.any
   851b8:	f9400822 	ldr	x2, [x1, #16]
   851bc:	91006020 	add	x0, x1, #0x18
   851c0:	f240141f 	tst	x0, #0x3f
   851c4:	f90008a2 	str	x2, [x5, #16]
   851c8:	f900083f 	str	xzr, [x1, #16]
   851cc:	54fffd20 	b.eq	85170 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xb0>  // b.none
   851d0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   851d4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   851d8:	91184021 	add	x1, x1, #0x610
   851dc:	911d8000 	add	x0, x0, #0x760
   851e0:	52800902 	mov	w2, #0x48                  	// #72
   851e4:	94005d27 	bl	9c680 <assertion_failed>
   851e8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   851ec:	90000140 	adrp	x0, ad000 <From+0x4c0>
   851f0:	91184021 	add	x1, x1, #0x610
   851f4:	91198000 	add	x0, x0, #0x660
   851f8:	52800642 	mov	w2, #0x32                  	// #50
   851fc:	94005d21 	bl	9c680 <assertion_failed>
   85200:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85204:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85208:	91184021 	add	x1, x1, #0x610
   8520c:	9119c000 	add	x0, x0, #0x670
   85210:	52800662 	mov	w2, #0x33                  	// #51
   85214:	94005d1b 	bl	9c680 <assertion_failed>
   85218:	d2800000 	mov	x0, #0x0                   	// #0
   8521c:	17ffffd5 	b	85170 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xb0>
   85220:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85224:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85228:	91184021 	add	x1, x1, #0x610
   8522c:	911a0000 	add	x0, x0, #0x680
   85230:	52800682 	mov	w2, #0x34                  	// #52
   85234:	94005d13 	bl	9c680 <assertion_failed>
   85238:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8523c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85240:	91184021 	add	x1, x1, #0x610
   85244:	9118c000 	add	x0, x0, #0x630
   85248:	528006a2 	mov	w2, #0x35                  	// #53
   8524c:	94005d0d 	bl	9c680 <assertion_failed>
   85250:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85254:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85258:	91184021 	add	x1, x1, #0x610
   8525c:	911a6000 	add	x0, x0, #0x698
   85260:	528006c2 	mov	w2, #0x36                  	// #54
   85264:	94005d07 	bl	9c680 <assertion_failed>
   85268:	aa0603e2 	mov	x2, x6
   8526c:	aa0003e1 	mov	x1, x0
   85270:	d28007e7 	mov	x7, #0x3f                  	// #63
   85274:	929fffe9 	mov	x9, #0xffffffffffff0000    	// #-65536
   85278:	d2a00023 	mov	x3, #0x10000               	// #65536
   8527c:	17ffffa4 	b	8510c <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x4c>
   85280:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85284:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85288:	91184021 	add	x1, x1, #0x610
   8528c:	911e4000 	add	x0, x0, #0x790
   85290:	52800e82 	mov	w2, #0x74                  	// #116
   85294:	94005cfb 	bl	9c680 <assertion_failed>
   85298:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8529c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   852a0:	91184021 	add	x1, x1, #0x610
   852a4:	911aa000 	add	x0, x0, #0x6a8
   852a8:	528007e2 	mov	w2, #0x3f                  	// #63
   852ac:	94005cf5 	bl	9c680 <assertion_failed>
   852b0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   852b4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   852b8:	2a0603e2 	mov	w2, w6
   852bc:	91184021 	add	x1, x1, #0x610
   852c0:	911b6000 	add	x0, x0, #0x6d8
   852c4:	94005cef 	bl	9c680 <assertion_failed>
   852c8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   852cc:	90000140 	adrp	x0, ad000 <From+0x4c0>
   852d0:	91184021 	add	x1, x1, #0x610
   852d4:	911c0000 	add	x0, x0, #0x700
   852d8:	52800822 	mov	w2, #0x41                  	// #65
   852dc:	94005ce9 	bl	9c680 <assertion_failed>
   852e0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   852e4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   852e8:	91184021 	add	x1, x1, #0x610
   852ec:	911cc000 	add	x0, x0, #0x730
   852f0:	52800842 	mov	w2, #0x42                  	// #66
   852f4:	94005ce3 	bl	9c680 <assertion_failed>
   852f8:	d503201f 	nop
   852fc:	d503201f 	nop

0000000000085300 <CXHCISharedMemAllocator::Free(void*)>:
   85300:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85304:	910003fd 	mov	x29, sp
   85308:	f9000bf3 	str	x19, [sp, #16]
   8530c:	b4000421 	cbz	x1, 85390 <CXHCISharedMemAllocator::Free(void*)+0x90>
   85310:	aa0103f3 	mov	x19, x1
   85314:	52886921 	mov	w1, #0x4349                	// #17225
   85318:	72ab0901 	movk	w1, #0x5848, lsl #16
   8531c:	b85e8262 	ldur	w2, [x19, #-24]
   85320:	d1006263 	sub	x3, x19, #0x18
   85324:	6b01005f 	cmp	w2, w1
   85328:	54000401 	b.ne	853a8 <CXHCISharedMemAllocator::Free(void*)+0xa8>  // b.any
   8532c:	b85ec261 	ldur	w1, [x19, #-20]
   85330:	7110003f 	cmp	w1, #0x400
   85334:	540000c1 	b.ne	8534c <CXHCISharedMemAllocator::Free(void*)+0x4c>  // b.any
   85338:	f85f0262 	ldur	x2, [x19, #-16]
   8533c:	d2800801 	mov	x1, #0x40                  	// #64
   85340:	f2e00021 	movk	x1, #0x1, lsl #48
   85344:	eb01005f 	cmp	x2, x1
   85348:	54000180 	b.eq	85378 <CXHCISharedMemAllocator::Free(void*)+0x78>  // b.none
   8534c:	94006661 	bl	9ecd0 <CLogger::Get()>
   85350:	90000143 	adrp	x3, ad000 <From+0x4c0>
   85354:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85358:	297d9a65 	ldp	w5, w6, [x19, #-20]
   8535c:	aa1303e4 	mov	x4, x19
   85360:	911f2063 	add	x3, x3, #0x7c8
   85364:	91202021 	add	x1, x1, #0x808
   85368:	52800042 	mov	w2, #0x2                   	// #2
   8536c:	f9400bf3 	ldr	x19, [sp, #16]
   85370:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85374:	14006593 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85378:	f9400801 	ldr	x1, [x0, #16]
   8537c:	f81f8261 	stur	x1, [x19, #-8]
   85380:	f9400bf3 	ldr	x19, [sp, #16]
   85384:	f9000803 	str	x3, [x0, #16]
   85388:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8538c:	d65f03c0 	ret
   85390:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85394:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85398:	91184021 	add	x1, x1, #0x610
   8539c:	911ee000 	add	x0, x0, #0x7b8
   853a0:	52800f62 	mov	w2, #0x7b                  	// #123
   853a4:	94005cb7 	bl	9c680 <assertion_failed>
   853a8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   853ac:	90000140 	adrp	x0, ad000 <From+0x4c0>
   853b0:	91184021 	add	x1, x1, #0x610
   853b4:	911aa000 	add	x0, x0, #0x6a8
   853b8:	52800fe2 	mov	w2, #0x7f                  	// #127
   853bc:	94005cb1 	bl	9c680 <assertion_failed>

00000000000853c0 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)>:
   853c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   853c4:	910003fd 	mov	x29, sp
   853c8:	a90153f3 	stp	x19, x20, [sp, #16]
   853cc:	aa0003f3 	mov	x19, x0
   853d0:	aa0103e0 	mov	x0, x1
   853d4:	f9000261 	str	x1, [x19]
   853d8:	97fff39e 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   853dc:	91006261 	add	x1, x19, #0x18
   853e0:	aa0003f4 	mov	x20, x0
   853e4:	a900fe60 	stp	x0, xzr, [x19, #8]
   853e8:	91046262 	add	x2, x19, #0x118
   853ec:	d503201f 	nop
   853f0:	f800843f 	str	xzr, [x1], #8
   853f4:	eb02003f 	cmp	x1, x2
   853f8:	54ffffc1 	b.ne	853f0 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)+0x30>  // b.any
   853fc:	52800701 	mov	w1, #0x38                  	// #56
   85400:	aa1403e0 	mov	x0, x20
   85404:	97fff9cf 	bl	83b40 <CXHCIMMIOSpace::op_read32(unsigned int)>
   85408:	12185c02 	and	w2, w0, #0xffffff00
   8540c:	52800701 	mov	w1, #0x38                  	// #56
   85410:	aa1403e0 	mov	x0, x20
   85414:	321b0042 	orr	w2, w2, #0x20
   85418:	97fff9fe 	bl	83c10 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   8541c:	d2800802 	mov	x2, #0x40                  	// #64
   85420:	d2820003 	mov	x3, #0x1000                	// #4096
   85424:	f9400260 	ldr	x0, [x19]
   85428:	d2802101 	mov	x1, #0x108                 	// #264
   8542c:	97fff3b9 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   85430:	f9000a60 	str	x0, [x19, #16]
   85434:	aa0003e2 	mov	x2, x0
   85438:	b40000c0 	cbz	x0, 85450 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)+0x90>
   8543c:	52800601 	mov	w1, #0x30                  	// #48
   85440:	f9400660 	ldr	x0, [x19, #8]
   85444:	a94153f3 	ldp	x19, x20, [sp, #16]
   85448:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8544c:	17fffa35 	b	83d20 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>
   85450:	a94153f3 	ldp	x19, x20, [sp, #16]
   85454:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85458:	d65f03c0 	ret
   8545c:	d503201f 	nop

0000000000085460 <CXHCISlotManager::~CXHCISlotManager()>:
   85460:	91006001 	add	x1, x0, #0x18
   85464:	91046002 	add	x2, x0, #0x118
   85468:	f800843f 	str	xzr, [x1], #8
   8546c:	eb02003f 	cmp	x1, x2
   85470:	54ffffc1 	b.ne	85468 <CXHCISlotManager::~CXHCISlotManager()+0x8>  // b.any
   85474:	f9400801 	ldr	x1, [x0, #16]
   85478:	b4000061 	cbz	x1, 85484 <CXHCISlotManager::~CXHCISlotManager()+0x24>
   8547c:	f9400000 	ldr	x0, [x0]
   85480:	17fff3c0 	b	82380 <CXHCIDevice::FreeSharedMem(void*)>
   85484:	d65f03c0 	ret
   85488:	d503201f 	nop
   8548c:	d503201f 	nop

0000000000085490 <CXHCISlotManager::IsValid()>:
   85490:	f9400800 	ldr	x0, [x0, #16]
   85494:	f100001f 	cmp	x0, #0x0
   85498:	1a9f07e0 	cset	w0, ne  // ne = any
   8549c:	d65f03c0 	ret

00000000000854a0 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)>:
   854a0:	12001c21 	and	w1, w1, #0xff
   854a4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   854a8:	910003fd 	mov	x29, sp
   854ac:	51000423 	sub	w3, w1, #0x1
   854b0:	12001c63 	and	w3, w3, #0xff
   854b4:	71007c7f 	cmp	w3, #0x1f
   854b8:	a90153f3 	stp	x19, x20, [sp, #16]
   854bc:	54000268 	b.hi	85508 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0x68>  // b.pmore
   854c0:	b4000302 	cbz	x2, 85520 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0x80>
   854c4:	aa0003f4 	mov	x20, x0
   854c8:	8b210c03 	add	x3, x0, w1, uxtb #3
   854cc:	f9400860 	ldr	x0, [x3, #16]
   854d0:	2a0103f3 	mov	w19, w1
   854d4:	b5000320 	cbnz	x0, 85538 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0x98>
   854d8:	aa0203e0 	mov	x0, x2
   854dc:	f9000862 	str	x2, [x3, #16]
   854e0:	9400011c 	bl	85950 <CXHCIUSBDevice::GetDeviceContext()>
   854e4:	b4000360 	cbz	x0, 85550 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xb0>
   854e8:	f9400a81 	ldr	x1, [x20, #16]
   854ec:	b40003e1 	cbz	x1, 85568 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xc8>
   854f0:	f8737822 	ldr	x2, [x1, x19, lsl #3]
   854f4:	b5000462 	cbnz	x2, 85580 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xe0>
   854f8:	f8337820 	str	x0, [x1, x19, lsl #3]
   854fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85500:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85504:	d65f03c0 	ret
   85508:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8550c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85510:	91206021 	add	x1, x1, #0x818
   85514:	9120c000 	add	x0, x0, #0x830
   85518:	52800942 	mov	w2, #0x4a                  	// #74
   8551c:	94005c59 	bl	9c680 <assertion_failed>
   85520:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85524:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85528:	91206021 	add	x1, x1, #0x818
   8552c:	91214000 	add	x0, x0, #0x850
   85530:	52800982 	mov	w2, #0x4c                  	// #76
   85534:	94005c53 	bl	9c680 <assertion_failed>
   85538:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8553c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85540:	91206021 	add	x1, x1, #0x818
   85544:	91218000 	add	x0, x0, #0x860
   85548:	528009a2 	mov	w2, #0x4d                  	// #77
   8554c:	94005c4d 	bl	9c680 <assertion_failed>
   85550:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85554:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85558:	91206021 	add	x1, x1, #0x818
   8555c:	91220000 	add	x0, x0, #0x880
   85560:	52800a22 	mov	w2, #0x51                  	// #81
   85564:	94005c47 	bl	9c680 <assertion_failed>
   85568:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8556c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85570:	91206021 	add	x1, x1, #0x818
   85574:	91226000 	add	x0, x0, #0x898
   85578:	52800a42 	mov	w2, #0x52                  	// #82
   8557c:	94005c41 	bl	9c680 <assertion_failed>
   85580:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85584:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85588:	91206021 	add	x1, x1, #0x818
   8558c:	9122a000 	add	x0, x0, #0x8a8
   85590:	52800a62 	mov	w2, #0x53                  	// #83
   85594:	94005c3b 	bl	9c680 <assertion_failed>
   85598:	d503201f 	nop
   8559c:	d503201f 	nop

00000000000855a0 <CXHCISlotManager::FreeSlot(unsigned char)>:
   855a0:	92401c21 	and	x1, x1, #0xff
   855a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   855a8:	910003fd 	mov	x29, sp
   855ac:	51000422 	sub	w2, w1, #0x1
   855b0:	12001c43 	and	w3, w2, #0xff
   855b4:	71007c7f 	cmp	w3, #0x1f
   855b8:	54000108 	b.hi	855d8 <CXHCISlotManager::FreeSlot(unsigned char)+0x38>  // b.pmore
   855bc:	8b22cc02 	add	x2, x0, w2, sxtw #3
   855c0:	f9400800 	ldr	x0, [x0, #16]
   855c4:	f9000c5f 	str	xzr, [x2, #24]
   855c8:	b4000140 	cbz	x0, 855f0 <CXHCISlotManager::FreeSlot(unsigned char)+0x50>
   855cc:	f821781f 	str	xzr, [x0, x1, lsl #3]
   855d0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   855d4:	d65f03c0 	ret
   855d8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   855dc:	90000140 	adrp	x0, ad000 <From+0x4c0>
   855e0:	91206021 	add	x1, x1, #0x818
   855e4:	9120c000 	add	x0, x0, #0x830
   855e8:	52800b22 	mov	w2, #0x59                  	// #89
   855ec:	94005c25 	bl	9c680 <assertion_failed>
   855f0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   855f4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   855f8:	91206021 	add	x1, x1, #0x818
   855fc:	91226000 	add	x0, x0, #0x898
   85600:	52800b82 	mov	w2, #0x5c                  	// #92
   85604:	94005c1f 	bl	9c680 <assertion_failed>
   85608:	d503201f 	nop
   8560c:	d503201f 	nop

0000000000085610 <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)>:
   85610:	b4000081 	cbz	x1, 85620 <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)+0x10>
   85614:	f9400800 	ldr	x0, [x0, #16]
   85618:	f9000001 	str	x1, [x0]
   8561c:	d65f03c0 	ret
   85620:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85624:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85628:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8562c:	91206021 	add	x1, x1, #0x818
   85630:	910003fd 	mov	x29, sp
   85634:	91232000 	add	x0, x0, #0x8c8
   85638:	52800c42 	mov	w2, #0x62                  	// #98
   8563c:	94005c11 	bl	9c680 <assertion_failed>

0000000000085640 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)>:
   85640:	12001c63 	and	w3, w3, #0xff
   85644:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85648:	910003fd 	mov	x29, sp
   8564c:	51000465 	sub	w5, w3, #0x1
   85650:	12001ca3 	and	w3, w5, #0xff
   85654:	71007c7f 	cmp	w3, #0x1f
   85658:	54000108 	b.hi	85678 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)+0x38>  // b.pmore
   8565c:	8b25cc05 	add	x5, x0, w5, sxtw #3
   85660:	f9400ca0 	ldr	x0, [x5, #24]
   85664:	b4000160 	cbz	x0, 85690 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)+0x50>
   85668:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8566c:	12001c21 	and	w1, w1, #0xff
   85670:	12001c83 	and	w3, w4, #0xff
   85674:	140000db 	b	859e0 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)>
   85678:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8567c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85680:	91206021 	add	x1, x1, #0x818
   85684:	9120c000 	add	x0, x0, #0x830
   85688:	52800d22 	mov	w2, #0x69                  	// #105
   8568c:	94005bfd 	bl	9c680 <assertion_failed>
   85690:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85694:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85698:	91206021 	add	x1, x1, #0x818
   8569c:	9123a000 	add	x0, x0, #0x8e8
   856a0:	52800d42 	mov	w2, #0x6a                  	// #106
   856a4:	94005bf7 	bl	9c680 <assertion_failed>
   856a8:	d503201f 	nop
   856ac:	d503201f 	nop

00000000000856b0 <CXHCISlotManager::DumpStatus()>:
   856b0:	90000142 	adrp	x2, ad000 <From+0x4c0>
   856b4:	91242042 	add	x2, x2, #0x908
   856b8:	f9400800 	ldr	x0, [x0, #16]
   856bc:	52802101 	mov	w1, #0x108                 	// #264
   856c0:	14005d44 	b	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
	...

00000000000856d0 <CXHCIUSBDevice::~CXHCIUSBDevice()>:
   856d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   856d4:	910003fd 	mov	x29, sp
   856d8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   856dc:	912ae021 	add	x1, x1, #0xab8
   856e0:	f9000bf3 	str	x19, [sp, #16]
   856e4:	aa0003f3 	mov	x19, x0
   856e8:	f9405c00 	ldr	x0, [x0, #184]
   856ec:	f9000261 	str	x1, [x19]
   856f0:	b40004a0 	cbz	x0, 85784 <CXHCIUSBDevice::~CXHCIUSBDevice()+0xb4>
   856f4:	f940ee61 	ldr	x1, [x19, #472]
   856f8:	b5000521 	cbnz	x1, 8579c <CXHCIUSBDevice::~CXHCIUSBDevice()+0xcc>
   856fc:	39435261 	ldrb	w1, [x19, #212]
   85700:	350002c1 	cbnz	w1, 85758 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x88>
   85704:	f9406e61 	ldr	x1, [x19, #216]
   85708:	b4000081 	cbz	x1, 85718 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x48>
   8570c:	f9405e60 	ldr	x0, [x19, #184]
   85710:	97fff31c 	bl	82380 <CXHCIDevice::FreeSharedMem(void*)>
   85714:	f9006e7f 	str	xzr, [x19, #216]
   85718:	f9406660 	ldr	x0, [x19, #200]
   8571c:	b4000080 	cbz	x0, 8572c <CXHCIUSBDevice::~CXHCIUSBDevice()+0x5c>
   85720:	b940d261 	ldr	w1, [x19, #208]
   85724:	94001ea3 	bl	8d1b0 <CUSBStandardHub::DisablePort(unsigned int)>
   85728:	f900667f 	str	xzr, [x19, #200]
   8572c:	91038261 	add	x1, x19, #0xe0
   85730:	91076262 	add	x2, x19, #0x1d8
   85734:	d503201f 	nop
   85738:	f800843f 	str	xzr, [x1], #8
   8573c:	eb02003f 	cmp	x1, x2
   85740:	54ffffc1 	b.ne	85738 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x68>  // b.any
   85744:	aa1303e0 	mov	x0, x19
   85748:	a90bfe7f 	stp	xzr, xzr, [x19, #184]
   8574c:	f9400bf3 	ldr	x19, [sp, #16]
   85750:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85754:	140002ab 	b	86200 <CUSBDevice::~CUSBDevice()>
   85758:	97fff2d6 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   8575c:	39435261 	ldrb	w1, [x19, #212]
   85760:	94002218 	bl	8dfc0 <CXHCICommandManager::DisableSlot(unsigned char)>
   85764:	7100041f 	cmp	w0, #0x1
   85768:	54000261 	b.ne	857b4 <CXHCIUSBDevice::~CXHCIUSBDevice()+0xe4>  // b.any
   8576c:	f9405e60 	ldr	x0, [x19, #184]
   85770:	97fff2c4 	bl	82280 <CXHCIDevice::GetSlotManager()>
   85774:	39435261 	ldrb	w1, [x19, #212]
   85778:	97ffff8a 	bl	855a0 <CXHCISlotManager::FreeSlot(unsigned char)>
   8577c:	3903527f 	strb	wzr, [x19, #212]
   85780:	17ffffe1 	b	85704 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x34>
   85784:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85788:	90000140 	adrp	x0, ad000 <From+0x4c0>
   8578c:	91246021 	add	x1, x1, #0x918
   85790:	91030000 	add	x0, x0, #0xc0
   85794:	52800942 	mov	w2, #0x4a                  	// #74
   85798:	94005bba 	bl	9c680 <assertion_failed>
   8579c:	90000141 	adrp	x1, ad000 <From+0x4c0>
   857a0:	f0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   857a4:	91246021 	add	x1, x1, #0x918
   857a8:	9139a000 	add	x0, x0, #0xe68
   857ac:	52800982 	mov	w2, #0x4c                  	// #76
   857b0:	94005bb4 	bl	9c680 <assertion_failed>
   857b4:	90000141 	adrp	x1, ad000 <From+0x4c0>
   857b8:	90000140 	adrp	x0, ad000 <From+0x4c0>
   857bc:	91246021 	add	x1, x1, #0x918
   857c0:	9124c000 	add	x0, x0, #0x930
   857c4:	52800a82 	mov	w2, #0x54                  	// #84
   857c8:	94005bae 	bl	9c680 <assertion_failed>
   857cc:	d503201f 	nop

00000000000857d0 <CXHCIUSBDevice::~CXHCIUSBDevice()>:
   857d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   857d4:	910003fd 	mov	x29, sp
   857d8:	f9000bf3 	str	x19, [sp, #16]
   857dc:	aa0003f3 	mov	x19, x0
   857e0:	97ffffbc 	bl	856d0 <CXHCIUSBDevice::~CXHCIUSBDevice()>
   857e4:	aa1303e0 	mov	x0, x19
   857e8:	d2803c01 	mov	x1, #0x1e0                 	// #480
   857ec:	f9400bf3 	ldr	x19, [sp, #16]
   857f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   857f4:	14007fc7 	b	a5710 <operator delete(void*, unsigned long)>
   857f8:	d503201f 	nop
   857fc:	d503201f 	nop

0000000000085800 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)>:
   85800:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85804:	910003fd 	mov	x29, sp
   85808:	a90153f3 	stp	x19, x20, [sp, #16]
   8580c:	aa0003f3 	mov	x19, x0
   85810:	aa0103f4 	mov	x20, x1
   85814:	f90013f5 	str	x21, [sp, #32]
   85818:	aa0303f5 	mov	x21, x3
   8581c:	9400023d 	bl	86110 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
   85820:	90000144 	adrp	x4, ad000 <From+0x4c0>
   85824:	912ae084 	add	x4, x4, #0xab8
   85828:	a90bd674 	stp	x20, x21, [x19, #184]
   8582c:	d2800802 	mov	x2, #0x40                  	// #64
   85830:	d2808001 	mov	x1, #0x400                 	// #1024
   85834:	aa1403e0 	mov	x0, x20
   85838:	d2820003 	mov	x3, #0x1000                	// #4096
   8583c:	f9000264 	str	x4, [x19]
   85840:	f900667f 	str	xzr, [x19, #200]
   85844:	3903527f 	strb	wzr, [x19, #212]
   85848:	f9006e7f 	str	xzr, [x19, #216]
   8584c:	f900ee7f 	str	xzr, [x19, #472]
   85850:	97fff2b0 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   85854:	9103a261 	add	x1, x19, #0xe8
   85858:	91076262 	add	x2, x19, #0x1d8
   8585c:	f9006e60 	str	x0, [x19, #216]
   85860:	f800843f 	str	xzr, [x1], #8
   85864:	eb02003f 	cmp	x1, x2
   85868:	54ffffc1 	b.ne	85860 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)+0x60>  // b.any
   8586c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85870:	f94013f5 	ldr	x21, [sp, #32]
   85874:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85878:	d65f03c0 	ret
   8587c:	d503201f 	nop

0000000000085880 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   85880:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85884:	910003fd 	mov	x29, sp
   85888:	a90153f3 	stp	x19, x20, [sp, #16]
   8588c:	aa0003f3 	mov	x19, x0
   85890:	aa0103f4 	mov	x20, x1
   85894:	a9025bf5 	stp	x21, x22, [sp, #32]
   85898:	aa0303f6 	mov	x22, x3
   8589c:	2a0403f5 	mov	w21, w4
   858a0:	940003dc 	bl	86810 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   858a4:	90000144 	adrp	x4, ad000 <From+0x4c0>
   858a8:	912ae084 	add	x4, x4, #0xab8
   858ac:	a90bfe74 	stp	x20, xzr, [x19, #184]
   858b0:	d2800802 	mov	x2, #0x40                  	// #64
   858b4:	d2808001 	mov	x1, #0x400                 	// #1024
   858b8:	aa1403e0 	mov	x0, x20
   858bc:	d2820003 	mov	x3, #0x1000                	// #4096
   858c0:	f9000264 	str	x4, [x19]
   858c4:	f9006676 	str	x22, [x19, #200]
   858c8:	b900d275 	str	w21, [x19, #208]
   858cc:	3903527f 	strb	wzr, [x19, #212]
   858d0:	f9006e7f 	str	xzr, [x19, #216]
   858d4:	f900ee7f 	str	xzr, [x19, #472]
   858d8:	97fff28e 	bl	82310 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   858dc:	9103a261 	add	x1, x19, #0xe8
   858e0:	91076262 	add	x2, x19, #0x1d8
   858e4:	f9006e60 	str	x0, [x19, #216]
   858e8:	f800843f 	str	xzr, [x1], #8
   858ec:	eb02003f 	cmp	x1, x2
   858f0:	54ffffc1 	b.ne	858e8 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x68>  // b.any
   858f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   858f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   858fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85900:	d65f03c0 	ret
   85904:	d503201f 	nop
   85908:	d503201f 	nop
   8590c:	d503201f 	nop

0000000000085910 <CXHCIUSBDevice::GetSlotID() const>:
   85910:	39435000 	ldrb	w0, [x0, #212]
   85914:	51000401 	sub	w1, w0, #0x1
   85918:	12001c21 	and	w1, w1, #0xff
   8591c:	71007c3f 	cmp	w1, #0x1f
   85920:	54000048 	b.hi	85928 <CXHCIUSBDevice::GetSlotID() const+0x18>  // b.pmore
   85924:	d65f03c0 	ret
   85928:	90000141 	adrp	x1, ad000 <From+0x4c0>
   8592c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85930:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85934:	91246021 	add	x1, x1, #0x918
   85938:	910003fd 	mov	x29, sp
   8593c:	91254000 	add	x0, x0, #0x950
   85940:	52801662 	mov	w2, #0xb3                  	// #179
   85944:	94005b4f 	bl	9c680 <assertion_failed>
   85948:	d503201f 	nop
   8594c:	d503201f 	nop

0000000000085950 <CXHCIUSBDevice::GetDeviceContext()>:
   85950:	f9406c00 	ldr	x0, [x0, #216]
   85954:	b4000040 	cbz	x0, 8595c <CXHCIUSBDevice::GetDeviceContext()+0xc>
   85958:	d65f03c0 	ret
   8595c:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85960:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85964:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85968:	91246021 	add	x1, x1, #0x918
   8596c:	910003fd 	mov	x29, sp
   85970:	9125c000 	add	x0, x0, #0x970
   85974:	52801722 	mov	w2, #0xb9                  	// #185
   85978:	94005b42 	bl	9c680 <assertion_failed>
   8597c:	d503201f 	nop

0000000000085980 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>:
   85980:	12001c21 	and	w1, w1, #0xff
   85984:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85988:	910003fd 	mov	x29, sp
   8598c:	51000421 	sub	w1, w1, #0x1
   85990:	12001c23 	and	w3, w1, #0xff
   85994:	7100787f 	cmp	w3, #0x1e
   85998:	540000c8 	b.hi	859b0 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)+0x30>  // b.pmore
   8599c:	b4000162 	cbz	x2, 859c8 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)+0x48>
   859a0:	8b21cc01 	add	x1, x0, w1, sxtw #3
   859a4:	f9007022 	str	x2, [x1, #224]
   859a8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   859ac:	d65f03c0 	ret
   859b0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   859b4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   859b8:	91246021 	add	x1, x1, #0x918
   859bc:	91262000 	add	x0, x0, #0x988
   859c0:	528017e2 	mov	w2, #0xbf                  	// #191
   859c4:	94005b2f 	bl	9c680 <assertion_failed>
   859c8:	90000141 	adrp	x1, ad000 <From+0x4c0>
   859cc:	90000140 	adrp	x0, ad000 <From+0x4c0>
   859d0:	91246021 	add	x1, x1, #0x918
   859d4:	9126c000 	add	x0, x0, #0x9b0
   859d8:	52801802 	mov	w2, #0xc0                  	// #192
   859dc:	94005b29 	bl	9c680 <assertion_failed>

00000000000859e0 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)>:
   859e0:	12001c63 	and	w3, w3, #0xff
   859e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   859e8:	910003fd 	mov	x29, sp
   859ec:	51000463 	sub	w3, w3, #0x1
   859f0:	12001c64 	and	w4, w3, #0xff
   859f4:	7100789f 	cmp	w4, #0x1e
   859f8:	540000e8 	b.hi	85a14 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)+0x34>  // b.pmore
   859fc:	8b23cc03 	add	x3, x0, w3, sxtw #3
   85a00:	f9407060 	ldr	x0, [x3, #224]
   85a04:	b4000140 	cbz	x0, 85a2c <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)+0x4c>
   85a08:	a8c17bfd 	ldp	x29, x30, [sp], #16
   85a0c:	12001c21 	and	w1, w1, #0xff
   85a10:	17fff370 	b	827d0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)>
   85a14:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85a18:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85a1c:	91246021 	add	x1, x1, #0x918
   85a20:	91262000 	add	x0, x0, #0x988
   85a24:	528018c2 	mov	w2, #0xc6                  	// #198
   85a28:	94005b16 	bl	9c680 <assertion_failed>
   85a2c:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85a30:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85a34:	91246021 	add	x1, x1, #0x918
   85a38:	91270000 	add	x0, x0, #0x9c0
   85a3c:	528018e2 	mov	w2, #0xc7                  	// #199
   85a40:	94005b10 	bl	9c680 <assertion_failed>
   85a44:	d503201f 	nop
   85a48:	d503201f 	nop
   85a4c:	d503201f 	nop

0000000000085a50 <CXHCIUSBDevice::DumpStatus()>:
   85a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85a54:	910003fd 	mov	x29, sp
   85a58:	90000142 	adrp	x2, ad000 <From+0x4c0>
   85a5c:	912b8042 	add	x2, x2, #0xae0
   85a60:	52802001 	mov	w1, #0x100                 	// #256
   85a64:	a90153f3 	stp	x19, x20, [sp, #16]
   85a68:	aa0003f4 	mov	x20, x0
   85a6c:	91038013 	add	x19, x0, #0xe0
   85a70:	91076294 	add	x20, x20, #0x1d8
   85a74:	f9406c00 	ldr	x0, [x0, #216]
   85a78:	94005c56 	bl	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   85a7c:	d503201f 	nop
   85a80:	f9400260 	ldr	x0, [x19]
   85a84:	91002273 	add	x19, x19, #0x8
   85a88:	b4000040 	cbz	x0, 85a90 <CXHCIUSBDevice::DumpStatus()+0x40>
   85a8c:	97fff39d 	bl	82900 <CXHCIEndpoint::DumpStatus()>
   85a90:	eb14027f 	cmp	x19, x20
   85a94:	54ffff61 	b.ne	85a80 <CXHCIUSBDevice::DumpStatus()+0x30>  // b.any
   85a98:	a94153f3 	ldp	x19, x20, [sp, #16]
   85a9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85aa0:	d65f03c0 	ret
   85aa4:	d503201f 	nop
   85aa8:	d503201f 	nop
   85aac:	d503201f 	nop

0000000000085ab0 <CXHCIUSBDevice::GetInputContextAddressDevice()>:
   85ab0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85ab4:	910003fd 	mov	x29, sp
   85ab8:	a90153f3 	stp	x19, x20, [sp, #16]
   85abc:	aa0003f4 	mov	x20, x0
   85ac0:	a9025bf5 	stp	x21, x22, [sp, #32]
   85ac4:	f940ec00 	ldr	x0, [x0, #472]
   85ac8:	b5000f20 	cbnz	x0, 85cac <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1fc>
   85acc:	d28283e0 	mov	x0, #0x141f                	// #5151
   85ad0:	94007ef4 	bl	a56a0 <operator new[](unsigned long)>
   85ad4:	913ffc13 	add	x19, x0, #0xfff
   85ad8:	d2808402 	mov	x2, #0x420                 	// #1056
   85adc:	f900ee80 	str	x0, [x20, #472]
   85ae0:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   85ae4:	52800001 	mov	w1, #0x0                   	// #0
   85ae8:	aa1303e0 	mov	x0, x19
   85aec:	94007a69 	bl	a4490 <memset>
   85af0:	b940b683 	ldr	w3, [x20, #180]
   85af4:	52800062 	mov	w2, #0x3                   	// #3
   85af8:	aa1403e0 	mov	x0, x20
   85afc:	b9402261 	ldr	w1, [x19, #32]
   85b00:	b9000262 	str	w2, [x19]
   85b04:	b940b282 	ldr	w2, [x20, #176]
   85b08:	33004c61 	bfxil	w1, w3, #0, #20
   85b0c:	39009a62 	strb	w2, [x19, #38]
   85b10:	b9002261 	str	w1, [x19, #32]
   85b14:	940002cb 	bl	86640 <CUSBDevice::GetSpeed() const>
   85b18:	7100041f 	cmp	w0, #0x1
   85b1c:	aa1403e0 	mov	x0, x20
   85b20:	540008ad 	b.le	85c34 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x184>
   85b24:	940002c7 	bl	86640 <CUSBDevice::GetSpeed() const>
   85b28:	11000401 	add	w1, w0, #0x1
   85b2c:	12000c21 	and	w1, w1, #0xf
   85b30:	79404662 	ldrh	w2, [x19, #34]
   85b34:	5280e1e3 	mov	w3, #0x70f                 	// #1807
   85b38:	531c2c21 	ubfiz	w1, w1, #4, #12
   85b3c:	32150021 	orr	w1, w1, #0x800
   85b40:	aa1403e0 	mov	x0, x20
   85b44:	0a030042 	and	w2, w2, w3
   85b48:	2a020021 	orr	w1, w1, w2
   85b4c:	79004661 	strh	w1, [x19, #34]
   85b50:	940002c0 	bl	86650 <CUSBDevice::IsSplit() const>
   85b54:	72001c1f 	tst	w0, #0xff
   85b58:	54000781 	b.ne	85c48 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x198>  // b.any
   85b5c:	f9407280 	ldr	x0, [x20, #224]
   85b60:	b4000b20 	cbz	x0, 85cc4 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x214>
   85b64:	97fff30f 	bl	827a0 <CXHCIEndpoint::GetTransferRing()>
   85b68:	b4000ba0 	cbz	x0, 85cdc <CXHCIUSBDevice::GetInputContextAddressDevice()+0x22c>
   85b6c:	97fff935 	bl	84040 <CXHCIRing::GetFirstTRB()>
   85b70:	91010275 	add	x21, x19, #0x40
   85b74:	b2400000 	orr	x0, x0, #0x1
   85b78:	928fe003 	mov	x3, #0xffffffffffff80ff    	// #-32513
   85b7c:	f2bfe003 	movk	x3, #0xff00, lsl #16
   85b80:	f90006a0 	str	x0, [x21, #8]
   85b84:	f2c01823 	movk	x3, #0xc1, lsl #32
   85b88:	d2c004c2 	mov	x2, #0x2600000000          	// #163208757248
   85b8c:	f9402261 	ldr	x1, [x19, #64]
   85b90:	52800116 	mov	w22, #0x8                   	// #8
   85b94:	aa1403e0 	mov	x0, x20
   85b98:	8a030021 	and	x1, x1, x3
   85b9c:	aa020021 	orr	x1, x1, x2
   85ba0:	f9002261 	str	x1, [x19, #64]
   85ba4:	790022b6 	strh	w22, [x21, #16]
   85ba8:	940002a6 	bl	86640 <CUSBDevice::GetSpeed() const>
   85bac:	7100081f 	cmp	w0, #0x2
   85bb0:	540002e0 	b.eq	85c0c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x15c>  // b.none
   85bb4:	540001a9 	b.ls	85be8 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x138>  // b.plast
   85bb8:	71000c1f 	cmp	w0, #0x3
   85bbc:	54000b61 	b.ne	85d28 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x278>  // b.any
   85bc0:	52804000 	mov	w0, #0x200                 	// #512
   85bc4:	d2808401 	mov	x1, #0x420                 	// #1056
   85bc8:	79000ea0 	strh	w0, [x21, #6]
   85bcc:	aa1303e0 	mov	x0, x19
   85bd0:	940082d4 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   85bd4:	aa1303e0 	mov	x0, x19
   85bd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   85bdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85be0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85be4:	d65f03c0 	ret
   85be8:	aa1303e0 	mov	x0, x19
   85bec:	d2808401 	mov	x1, #0x420                 	// #1056
   85bf0:	79000eb6 	strh	w22, [x21, #6]
   85bf4:	940082cb 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   85bf8:	aa1303e0 	mov	x0, x19
   85bfc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85c04:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85c08:	d65f03c0 	ret
   85c0c:	52800800 	mov	w0, #0x40                  	// #64
   85c10:	d2808401 	mov	x1, #0x420                 	// #1056
   85c14:	79000ea0 	strh	w0, [x21, #6]
   85c18:	aa1303e0 	mov	x0, x19
   85c1c:	940082c1 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   85c20:	aa1303e0 	mov	x0, x19
   85c24:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85c2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85c30:	d65f03c0 	ret
   85c34:	94000283 	bl	86640 <CUSBDevice::GetSpeed() const>
   85c38:	52000001 	eor	w1, w0, #0x1
   85c3c:	11000421 	add	w1, w1, #0x1
   85c40:	12000c21 	and	w1, w1, #0xf
   85c44:	17ffffbb 	b	85b30 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x80>
   85c48:	aa1403e0 	mov	x0, x20
   85c4c:	94000285 	bl	86660 <CUSBDevice::GetHubAddress() const>
   85c50:	2a0003e1 	mov	w1, w0
   85c54:	aa1403e0 	mov	x0, x20
   85c58:	3900a261 	strb	w1, [x19, #40]
   85c5c:	94000285 	bl	86670 <CUSBDevice::GetHubPortNumber() const>
   85c60:	2a0003e1 	mov	w1, w0
   85c64:	aa1403e0 	mov	x0, x20
   85c68:	3900a661 	strb	w1, [x19, #41]
   85c6c:	94000285 	bl	86680 <CUSBDevice::GetTTHubDevice() const>
   85c70:	b4000500 	cbz	x0, 85d10 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x260>
   85c74:	f9403000 	ldr	x0, [x0, #96]
   85c78:	b40000e0 	cbz	x0, 85c94 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1e4>
   85c7c:	f9400002 	ldr	x2, [x0]
   85c80:	90ffffe1 	adrp	x1, 81000 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xa0>
   85c84:	912e8021 	add	x1, x1, #0xba0
   85c88:	f9402442 	ldr	x2, [x2, #72]
   85c8c:	eb01005f 	cmp	x2, x1
   85c90:	54000321 	b.ne	85cf4 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x244>  // b.any
   85c94:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85c98:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85c9c:	91246021 	add	x1, x1, #0x918
   85ca0:	91280000 	add	x0, x0, #0xa00
   85ca4:	52801f22 	mov	w2, #0xf9                  	// #249
   85ca8:	94005a76 	bl	9c680 <assertion_failed>
   85cac:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85cb0:	f0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   85cb4:	91246021 	add	x1, x1, #0x918
   85cb8:	9139a000 	add	x0, x0, #0xe68
   85cbc:	52801be2 	mov	w2, #0xdf                  	// #223
   85cc0:	94005a70 	bl	9c680 <assertion_failed>
   85cc4:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85cc8:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85ccc:	91246021 	add	x1, x1, #0x918
   85cd0:	91284000 	add	x0, x0, #0xa10
   85cd4:	52802022 	mov	w2, #0x101                 	// #257
   85cd8:	94005a6a 	bl	9c680 <assertion_failed>
   85cdc:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85ce0:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85ce4:	91246021 	add	x1, x1, #0x918
   85ce8:	9128a000 	add	x0, x0, #0xa28
   85cec:	52802062 	mov	w2, #0x103                 	// #259
   85cf0:	94005a64 	bl	9c680 <assertion_failed>
   85cf4:	d63f0040 	blr	x2
   85cf8:	b4fffce0 	cbz	x0, 85c94 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1e4>
   85cfc:	39401001 	ldrb	w1, [x0, #4]
   85d00:	39408e60 	ldrb	w0, [x19, #35]
   85d04:	331f0020 	bfi	w0, w1, #1, #1
   85d08:	39008e60 	strb	w0, [x19, #35]
   85d0c:	17ffff94 	b	85b5c <CXHCIUSBDevice::GetInputContextAddressDevice()+0xac>
   85d10:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85d14:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85d18:	91246021 	add	x1, x1, #0x918
   85d1c:	9127a000 	add	x0, x0, #0x9e8
   85d20:	52801ee2 	mov	w2, #0xf7                  	// #247
   85d24:	94005a57 	bl	9c680 <assertion_failed>
   85d28:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85d2c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85d30:	91246021 	add	x1, x1, #0x918
   85d34:	912f4000 	add	x0, x0, #0xbd0
   85d38:	528023e2 	mov	w2, #0x11f                 	// #287
   85d3c:	94005a51 	bl	9c680 <assertion_failed>

0000000000085d40 <CXHCIUSBDevice::GetInputContextEnableHubFunction()>:
   85d40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85d44:	910003fd 	mov	x29, sp
   85d48:	a90153f3 	stp	x19, x20, [sp, #16]
   85d4c:	aa0003f4 	mov	x20, x0
   85d50:	f940ec00 	ldr	x0, [x0, #472]
   85d54:	f90013f5 	str	x21, [sp, #32]
   85d58:	b5000800 	cbnz	x0, 85e58 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x118>
   85d5c:	d28283e0 	mov	x0, #0x141f                	// #5151
   85d60:	94007e50 	bl	a56a0 <operator new[](unsigned long)>
   85d64:	913ffc13 	add	x19, x0, #0xfff
   85d68:	f900ee80 	str	x0, [x20, #472]
   85d6c:	f9406e81 	ldr	x1, [x20, #216]
   85d70:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   85d74:	b40007e1 	cbz	x1, 85e70 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x130>
   85d78:	d2800402 	mov	x2, #0x20                  	// #32
   85d7c:	52800001 	mov	w1, #0x0                   	// #0
   85d80:	aa1303e0 	mov	x0, x19
   85d84:	940079c3 	bl	a4490 <memset>
   85d88:	f9406e81 	ldr	x1, [x20, #216]
   85d8c:	d2808002 	mov	x2, #0x400                 	// #1024
   85d90:	91008260 	add	x0, x19, #0x20
   85d94:	94007bd9 	bl	a4cf8 <memcpy>
   85d98:	f9403280 	ldr	x0, [x20, #96]
   85d9c:	b20003e1 	mov	x1, #0x100000001           	// #4294967297
   85da0:	f9000261 	str	x1, [x19]
   85da4:	b40000e0 	cbz	x0, 85dc0 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x80>
   85da8:	f9400002 	ldr	x2, [x0]
   85dac:	90ffffe1 	adrp	x1, 81000 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xa0>
   85db0:	912e8021 	add	x1, x1, #0xba0
   85db4:	f9402442 	ldr	x2, [x2, #72]
   85db8:	eb01005f 	cmp	x2, x1
   85dbc:	540000e1 	b.ne	85dd8 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x98>  // b.any
   85dc0:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85dc4:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85dc8:	91246021 	add	x1, x1, #0x918
   85dcc:	91290000 	add	x0, x0, #0xa40
   85dd0:	52802762 	mov	w2, #0x13b                 	// #315
   85dd4:	94005a2b 	bl	9c680 <assertion_failed>
   85dd8:	d63f0040 	blr	x2
   85ddc:	aa0003f5 	mov	x21, x0
   85de0:	b4ffff00 	cbz	x0, 85dc0 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x80>
   85de4:	39408e61 	ldrb	w1, [x19, #35]
   85de8:	aa1403e0 	mov	x0, x20
   85dec:	321e0021 	orr	w1, w1, #0x4
   85df0:	39008e61 	strb	w1, [x19, #35]
   85df4:	b94002a1 	ldr	w1, [x21]
   85df8:	39009e61 	strb	w1, [x19, #39]
   85dfc:	94000211 	bl	86640 <CUSBDevice::GetSpeed() const>
   85e00:	7100081f 	cmp	w0, #0x2
   85e04:	540001a1 	b.ne	85e38 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0xf8>  // b.any
   85e08:	394016a2 	ldrb	w2, [x21, #5]
   85e0c:	92800043 	mov	x3, #0xfffffffffffffffd    	// #-3
   85e10:	f2ff9fe3 	movk	x3, #0xfcff, lsl #48
   85e14:	394012a0 	ldrb	w0, [x21, #4]
   85e18:	f8423261 	ldur	x1, [x19, #35]
   85e1c:	d3480442 	ubfiz	x2, x2, #56, #2
   85e20:	aa000440 	orr	x0, x2, x0, lsl #1
   85e24:	927fe000 	and	x0, x0, #0x3fffffffffffffe
   85e28:	8a030021 	and	x1, x1, x3
   85e2c:	92482400 	and	x0, x0, #0xff00000000000003
   85e30:	aa010000 	orr	x0, x0, x1
   85e34:	f8023260 	stur	x0, [x19, #35]
   85e38:	aa1303e0 	mov	x0, x19
   85e3c:	d2808401 	mov	x1, #0x420                 	// #1056
   85e40:	94008238 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   85e44:	aa1303e0 	mov	x0, x19
   85e48:	a94153f3 	ldp	x19, x20, [sp, #16]
   85e4c:	f94013f5 	ldr	x21, [sp, #32]
   85e50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85e54:	d65f03c0 	ret
   85e58:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85e5c:	f0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   85e60:	91246021 	add	x1, x1, #0x918
   85e64:	9139a000 	add	x0, x0, #0xe68
   85e68:	52802542 	mov	w2, #0x12a                 	// #298
   85e6c:	94005a05 	bl	9c680 <assertion_failed>
   85e70:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85e74:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85e78:	91246021 	add	x1, x1, #0x918
   85e7c:	9125c000 	add	x0, x0, #0x970
   85e80:	52802622 	mov	w2, #0x131                 	// #305
   85e84:	940059ff 	bl	9c680 <assertion_failed>
   85e88:	d503201f 	nop
   85e8c:	d503201f 	nop

0000000000085e90 <CXHCIUSBDevice::FreeInputContext()>:
   85e90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85e94:	910003fd 	mov	x29, sp
   85e98:	f9000bf3 	str	x19, [sp, #16]
   85e9c:	aa0003f3 	mov	x19, x0
   85ea0:	f940ec00 	ldr	x0, [x0, #472]
   85ea4:	b40000c0 	cbz	x0, 85ebc <CXHCIUSBDevice::FreeInputContext()+0x2c>
   85ea8:	94007e0e 	bl	a56e0 <operator delete[](void*)>
   85eac:	f900ee7f 	str	xzr, [x19, #472]
   85eb0:	f9400bf3 	ldr	x19, [sp, #16]
   85eb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85eb8:	d65f03c0 	ret
   85ebc:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85ec0:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85ec4:	91246021 	add	x1, x1, #0x918
   85ec8:	91010000 	add	x0, x0, #0x40
   85ecc:	528029a2 	mov	w2, #0x14d                 	// #333
   85ed0:	940059ec 	bl	9c680 <assertion_failed>
   85ed4:	d503201f 	nop
   85ed8:	d503201f 	nop
   85edc:	d503201f 	nop

0000000000085ee0 <CXHCIUSBDevice::EnableHubFunction()>:
   85ee0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85ee4:	910003fd 	mov	x29, sp
   85ee8:	a90153f3 	stp	x19, x20, [sp, #16]
   85eec:	aa0003f3 	mov	x19, x0
   85ef0:	97ffff94 	bl	85d40 <CXHCIUSBDevice::GetInputContextEnableHubFunction()>
   85ef4:	b40003a0 	cbz	x0, 85f68 <CXHCIUSBDevice::EnableHubFunction()+0x88>
   85ef8:	aa0003f4 	mov	x20, x0
   85efc:	f9405e60 	ldr	x0, [x19, #184]
   85f00:	97fff0ec 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   85f04:	39435261 	ldrb	w1, [x19, #212]
   85f08:	aa1403e2 	mov	x2, x20
   85f0c:	94002085 	bl	8e120 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>
   85f10:	2a0003e4 	mov	w4, w0
   85f14:	aa1303e0 	mov	x0, x19
   85f18:	2a0403f3 	mov	w19, w4
   85f1c:	97ffffdd 	bl	85e90 <CXHCIUSBDevice::FreeInputContext()>
   85f20:	7100067f 	cmp	w19, #0x1
   85f24:	52800020 	mov	w0, #0x1                   	// #1
   85f28:	54000081 	b.ne	85f38 <CXHCIUSBDevice::EnableHubFunction()+0x58>  // b.any
   85f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f34:	d65f03c0 	ret
   85f38:	94006366 	bl	9ecd0 <CLogger::Get()>
   85f3c:	90000143 	adrp	x3, ad000 <From+0x4c0>
   85f40:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85f44:	2a1303e4 	mov	w4, w19
   85f48:	91294063 	add	x3, x3, #0xa50
   85f4c:	912b8021 	add	x1, x1, #0xae0
   85f50:	52800042 	mov	w2, #0x2                   	// #2
   85f54:	9400629b 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85f58:	52800000 	mov	w0, #0x0                   	// #0
   85f5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f60:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f64:	d65f03c0 	ret
   85f68:	90000141 	adrp	x1, ad000 <From+0x4c0>
   85f6c:	90000140 	adrp	x0, ad000 <From+0x4c0>
   85f70:	91246021 	add	x1, x1, #0x918
   85f74:	9102a000 	add	x0, x0, #0xa8
   85f78:	528013e2 	mov	w2, #0x9f                  	// #159
   85f7c:	940059c1 	bl	9c680 <assertion_failed>

0000000000085f80 <CXHCIUSBDevice::Initialize()>:
   85f80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85f84:	910003fd 	mov	x29, sp
   85f88:	a90153f3 	stp	x19, x20, [sp, #16]
   85f8c:	aa0003f3 	mov	x19, x0
   85f90:	f9406c00 	ldr	x0, [x0, #216]
   85f94:	b4000900 	cbz	x0, 860b4 <CXHCIUSBDevice::Initialize()+0x134>
   85f98:	f9405e60 	ldr	x0, [x19, #184]
   85f9c:	b4000940 	cbz	x0, 860c4 <CXHCIUSBDevice::Initialize()+0x144>
   85fa0:	97fff0c4 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   85fa4:	91035261 	add	x1, x19, #0xd4
   85fa8:	94001fe6 	bl	8df40 <CXHCICommandManager::EnableSlot(unsigned char*)>
   85fac:	7100041f 	cmp	w0, #0x1
   85fb0:	2a0003f4 	mov	w20, w0
   85fb4:	54000501 	b.ne	86054 <CXHCIUSBDevice::Initialize()+0xd4>  // b.any
   85fb8:	f90013f5 	str	x21, [sp, #32]
   85fbc:	39435260 	ldrb	w0, [x19, #212]
   85fc0:	51000400 	sub	w0, w0, #0x1
   85fc4:	12001c00 	and	w0, w0, #0xff
   85fc8:	71007c1f 	cmp	w0, #0x1f
   85fcc:	540008a8 	b.hi	860e0 <CXHCIUSBDevice::Initialize()+0x160>  // b.pmore
   85fd0:	f9405e60 	ldr	x0, [x19, #184]
   85fd4:	97fff0ab 	bl	82280 <CXHCIDevice::GetSlotManager()>
   85fd8:	39435261 	ldrb	w1, [x19, #212]
   85fdc:	aa1303e2 	mov	x2, x19
   85fe0:	97fffd30 	bl	854a0 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)>
   85fe4:	aa1303e0 	mov	x0, x19
   85fe8:	97fffeb2 	bl	85ab0 <CXHCIUSBDevice::GetInputContextAddressDevice()>
   85fec:	aa0003f5 	mov	x21, x0
   85ff0:	b4000840 	cbz	x0, 860f8 <CXHCIUSBDevice::Initialize()+0x178>
   85ff4:	f9405e60 	ldr	x0, [x19, #184]
   85ff8:	97fff0ae 	bl	822b0 <CXHCIDevice::GetCommandManager()>
   85ffc:	39435261 	ldrb	w1, [x19, #212]
   86000:	2a1403e3 	mov	w3, w20
   86004:	aa1503e2 	mov	x2, x21
   86008:	94002002 	bl	8e010 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)>
   8600c:	2a0003f4 	mov	w20, w0
   86010:	aa1303e0 	mov	x0, x19
   86014:	97ffff9f 	bl	85e90 <CXHCIUSBDevice::FreeInputContext()>
   86018:	7100069f 	cmp	w20, #0x1
   8601c:	54000360 	b.eq	86088 <CXHCIUSBDevice::Initialize()+0x108>  // b.none
   86020:	9400632c 	bl	9ecd0 <CLogger::Get()>
   86024:	f0000123 	adrp	x3, ad000 <From+0x4c0>
   86028:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   8602c:	2a1403e4 	mov	w4, w20
   86030:	912a2063 	add	x3, x3, #0xa88
   86034:	912b8021 	add	x1, x1, #0xae0
   86038:	52800042 	mov	w2, #0x2                   	// #2
   8603c:	94006261 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86040:	52800000 	mov	w0, #0x0                   	// #0
   86044:	a94153f3 	ldp	x19, x20, [sp, #16]
   86048:	f94013f5 	ldr	x21, [sp, #32]
   8604c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86050:	d65f03c0 	ret
   86054:	9400631f 	bl	9ecd0 <CLogger::Get()>
   86058:	f0000123 	adrp	x3, ad000 <From+0x4c0>
   8605c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86060:	2a1403e4 	mov	w4, w20
   86064:	9129c063 	add	x3, x3, #0xa70
   86068:	912b8021 	add	x1, x1, #0xae0
   8606c:	52800042 	mov	w2, #0x2                   	// #2
   86070:	94006254 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86074:	52800000 	mov	w0, #0x0                   	// #0
   86078:	3903527f 	strb	wzr, [x19, #212]
   8607c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86080:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86084:	d65f03c0 	ret
   86088:	940078f6 	bl	a4460 <CTimer::Get()>
   8608c:	52800640 	mov	w0, #0x32                  	// #50
   86090:	940078b8 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   86094:	39435261 	ldrb	w1, [x19, #212]
   86098:	aa1303e0 	mov	x0, x19
   8609c:	94000155 	bl	865f0 <CUSBDevice::SetAddress(unsigned char)>
   860a0:	aa1303e0 	mov	x0, x19
   860a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   860a8:	f94013f5 	ldr	x21, [sp, #32]
   860ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   860b0:	14000290 	b	86af0 <CUSBDevice::Initialize()>
   860b4:	52800000 	mov	w0, #0x0                   	// #0
   860b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   860bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   860c0:	d65f03c0 	ret
   860c4:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   860c8:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   860cc:	f90013f5 	str	x21, [sp, #32]
   860d0:	91246021 	add	x1, x1, #0x918
   860d4:	91030000 	add	x0, x0, #0xc0
   860d8:	52800f22 	mov	w2, #0x79                  	// #121
   860dc:	94005969 	bl	9c680 <assertion_failed>
   860e0:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   860e4:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   860e8:	91246021 	add	x1, x1, #0x918
   860ec:	91254000 	add	x0, x0, #0x950
   860f0:	528010a2 	mov	w2, #0x85                  	// #133
   860f4:	94005963 	bl	9c680 <assertion_failed>
   860f8:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   860fc:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86100:	91246021 	add	x1, x1, #0x918
   86104:	9102a000 	add	x0, x0, #0xa8
   86108:	52801122 	mov	w2, #0x89                  	// #137
   8610c:	9400595d 	bl	9c680 <assertion_failed>

0000000000086110 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
   86110:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86114:	910003fd 	mov	x29, sp
   86118:	52800024 	mov	w4, #0x1                   	// #1
   8611c:	a90153f3 	stp	x19, x20, [sp, #16]
   86120:	aa0003f3 	mov	x19, x0
   86124:	aa0303e0 	mov	x0, x3
   86128:	f0000123 	adrp	x3, ad000 <From+0x4c0>
   8612c:	913b4063 	add	x3, x3, #0xed0
   86130:	a9000663 	stp	x3, x1, [x19]
   86134:	a9017e60 	stp	x0, xzr, [x19, #16]
   86138:	3900927f 	strb	wzr, [x19, #36]
   8613c:	b9002a62 	str	w2, [x19, #40]
   86140:	f9001a7f 	str	xzr, [x19, #48]
   86144:	7900727f 	strh	wzr, [x19, #56]
   86148:	3900ea64 	strb	w4, [x19, #58]
   8614c:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   86150:	a9057e7f 	stp	xzr, xzr, [x19, #80]
   86154:	b40002e1 	cbz	x1, 861b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
   86158:	b4000380 	cbz	x0, 861c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
   8615c:	f9400001 	ldr	x1, [x0]
   86160:	f9401021 	ldr	x1, [x1, #32]
   86164:	d63f0020 	blr	x1
   86168:	12001c00 	and	w0, w0, #0xff
   8616c:	f9401a61 	ldr	x1, [x19, #48]
   86170:	29167e60 	stp	w0, wzr, [x19, #176]
   86174:	b5000361 	cbnz	x1, 861e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xd0>
   86178:	d2800400 	mov	x0, #0x20                  	// #32
   8617c:	94007d41 	bl	a5680 <operator new(unsigned long)>
   86180:	aa1303e1 	mov	x1, x19
   86184:	aa0003f4 	mov	x20, x0
   86188:	94000562 	bl	87710 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   8618c:	91018262 	add	x2, x19, #0x60
   86190:	9102c261 	add	x1, x19, #0xb0
   86194:	f9001a74 	str	x20, [x19, #48]
   86198:	f800845f 	str	xzr, [x2], #8
   8619c:	eb01005f 	cmp	x2, x1
   861a0:	54ffffc1 	b.ne	86198 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x88>  // b.any
   861a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   861a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   861ac:	d65f03c0 	ret
   861b0:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   861b4:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   861b8:	912ba021 	add	x1, x1, #0xae8
   861bc:	912be000 	add	x0, x0, #0xaf8
   861c0:	52800702 	mov	w2, #0x38                  	// #56
   861c4:	9400592f 	bl	9c680 <assertion_failed>
   861c8:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   861cc:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   861d0:	912ba021 	add	x1, x1, #0xae8
   861d4:	912c2000 	add	x0, x0, #0xb08
   861d8:	52800722 	mov	w2, #0x39                  	// #57
   861dc:	94005929 	bl	9c680 <assertion_failed>
   861e0:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   861e4:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   861e8:	912ba021 	add	x1, x1, #0xae8
   861ec:	912c8000 	add	x0, x0, #0xb20
   861f0:	52800802 	mov	w2, #0x40                  	// #64
   861f4:	94005923 	bl	9c680 <assertion_failed>
   861f8:	d503201f 	nop
   861fc:	d503201f 	nop

0000000000086200 <CUSBDevice::~CUSBDevice()>:
   86200:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86204:	910003fd 	mov	x29, sp
   86208:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   8620c:	913b4021 	add	x1, x1, #0xed0
   86210:	a90153f3 	stp	x19, x20, [sp, #16]
   86214:	aa0003f3 	mov	x19, x0
   86218:	aa0003f4 	mov	x20, x0
   8621c:	f90013f5 	str	x21, [sp, #32]
   86220:	9102c015 	add	x21, x0, #0xb0
   86224:	f8060661 	str	x1, [x19], #96
   86228:	f9400260 	ldr	x0, [x19]
   8622c:	b4000080 	cbz	x0, 8623c <CUSBDevice::~CUSBDevice()+0x3c>
   86230:	f9400001 	ldr	x1, [x0]
   86234:	f9400421 	ldr	x1, [x1, #8]
   86238:	d63f0020 	blr	x1
   8623c:	f800867f 	str	xzr, [x19], #8
   86240:	eb1302bf 	cmp	x21, x19
   86244:	54ffff21 	b.ne	86228 <CUSBDevice::~CUSBDevice()+0x28>  // b.any
   86248:	f9402e93 	ldr	x19, [x20, #88]
   8624c:	b40000d3 	cbz	x19, 86264 <CUSBDevice::~CUSBDevice()+0x64>
   86250:	aa1303e0 	mov	x0, x19
   86254:	94002a77 	bl	90c30 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   86258:	aa1303e0 	mov	x0, x19
   8625c:	d2800601 	mov	x1, #0x30                  	// #48
   86260:	94007d2c 	bl	a5710 <operator delete(void*, unsigned long)>
   86264:	f9002e9f 	str	xzr, [x20, #88]
   86268:	f9402a80 	ldr	x0, [x20, #80]
   8626c:	b4000060 	cbz	x0, 86278 <CUSBDevice::~CUSBDevice()+0x78>
   86270:	d2800121 	mov	x1, #0x9                   	// #9
   86274:	94007d27 	bl	a5710 <operator delete(void*, unsigned long)>
   86278:	f9002a9f 	str	xzr, [x20, #80]
   8627c:	f9402680 	ldr	x0, [x20, #72]
   86280:	b4000060 	cbz	x0, 8628c <CUSBDevice::~CUSBDevice()+0x8c>
   86284:	d2800241 	mov	x1, #0x12                  	// #18
   86288:	94007d22 	bl	a5710 <operator delete(void*, unsigned long)>
   8628c:	f900269f 	str	xzr, [x20, #72]
   86290:	f9401a93 	ldr	x19, [x20, #48]
   86294:	b4000133 	cbz	x19, 862b8 <CUSBDevice::~CUSBDevice()+0xb8>
   86298:	aa1303e0 	mov	x0, x19
   8629c:	9400058d 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   862a0:	aa1303e0 	mov	x0, x19
   862a4:	d2800401 	mov	x1, #0x20                  	// #32
   862a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   862ac:	f94013f5 	ldr	x21, [sp, #32]
   862b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   862b4:	14007d17 	b	a5710 <operator delete(void*, unsigned long)>
   862b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   862bc:	f94013f5 	ldr	x21, [sp, #32]
   862c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   862c4:	d65f03c0 	ret
   862c8:	d503201f 	nop
   862cc:	d503201f 	nop

00000000000862d0 <CUSBDevice::~CUSBDevice()>:
   862d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   862d4:	910003fd 	mov	x29, sp
   862d8:	f9000bf3 	str	x19, [sp, #16]
   862dc:	aa0003f3 	mov	x19, x0
   862e0:	97ffffc8 	bl	86200 <CUSBDevice::~CUSBDevice()>
   862e4:	aa1303e0 	mov	x0, x19
   862e8:	d2801701 	mov	x1, #0xb8                  	// #184
   862ec:	f9400bf3 	ldr	x19, [sp, #16]
   862f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   862f4:	14007d07 	b	a5710 <operator delete(void*, unsigned long)>
   862f8:	d503201f 	nop
   862fc:	d503201f 	nop

0000000000086300 <CUSBDevice::ReScanDevices()>:
   86300:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86304:	910003fd 	mov	x29, sp
   86308:	a90153f3 	stp	x19, x20, [sp, #16]
   8630c:	52800014 	mov	w20, #0x0                   	// #0
   86310:	91018013 	add	x19, x0, #0x60
   86314:	f90013f5 	str	x21, [sp, #32]
   86318:	9102c015 	add	x21, x0, #0xb0
   8631c:	d503201f 	nop
   86320:	f9400260 	ldr	x0, [x19]
   86324:	91002273 	add	x19, x19, #0x8
   86328:	b40000c0 	cbz	x0, 86340 <CUSBDevice::ReScanDevices()+0x40>
   8632c:	f9400001 	ldr	x1, [x0]
   86330:	f9402021 	ldr	x1, [x1, #64]
   86334:	d63f0020 	blr	x1
   86338:	72001c00 	ands	w0, w0, #0xff
   8633c:	1a800294 	csel	w20, w20, w0, eq  // eq = none
   86340:	eb15027f 	cmp	x19, x21
   86344:	54fffee1 	b.ne	86320 <CUSBDevice::ReScanDevices()+0x20>  // b.any
   86348:	2a1403e0 	mov	w0, w20
   8634c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86350:	f94013f5 	ldr	x21, [sp, #32]
   86354:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86358:	d65f03c0 	ret
   8635c:	d503201f 	nop

0000000000086360 <CUSBDevice::RemoveDevice()>:
   86360:	aa0003e1 	mov	x1, x0
   86364:	f9400800 	ldr	x0, [x0, #16]
   86368:	b40000a0 	cbz	x0, 8637c <CUSBDevice::RemoveDevice()+0x1c>
   8636c:	f9400001 	ldr	x1, [x0]
   86370:	f9400c21 	ldr	x1, [x1, #24]
   86374:	aa0103f0 	mov	x16, x1
   86378:	d61f0200 	br	x16
   8637c:	f9400c20 	ldr	x0, [x1, #24]
   86380:	b4000060 	cbz	x0, 8638c <CUSBDevice::RemoveDevice()+0x2c>
   86384:	b9402021 	ldr	w1, [x1, #32]
   86388:	14001bbe 	b	8d280 <CUSBStandardHub::RemoveDevice(unsigned int)>
   8638c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86390:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86394:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86398:	912ba021 	add	x1, x1, #0xae8
   8639c:	910003fd 	mov	x29, sp
   863a0:	912ce000 	add	x0, x0, #0xb38
   863a4:	52803f02 	mov	w2, #0x1f8                 	// #504
   863a8:	940058b6 	bl	9c680 <assertion_failed>
   863ac:	d503201f 	nop

00000000000863b0 <CUSBDevice::GetName(TDeviceNameSelector) const>:
   863b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   863b4:	910003fd 	mov	x29, sp
   863b8:	f90013f5 	str	x21, [sp, #32]
   863bc:	aa0003f5 	mov	x21, x0
   863c0:	d2800400 	mov	x0, #0x20                  	// #32
   863c4:	a90153f3 	stp	x19, x20, [sp, #16]
   863c8:	2a0103f3 	mov	w19, w1
   863cc:	94007cad 	bl	a5680 <operator new(unsigned long)>
   863d0:	aa0003f4 	mov	x20, x0
   863d4:	94006e97 	bl	a1e30 <CString::CString()>
   863d8:	340002b3 	cbz	w19, 8642c <CUSBDevice::GetName(TDeviceNameSelector) const+0x7c>
   863dc:	7100067f 	cmp	w19, #0x1
   863e0:	540006a1 	b.ne	864b4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>  // b.any
   863e4:	f94026a3 	ldr	x3, [x21, #72]
   863e8:	b40004e3 	cbz	x3, 86484 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd4>
   863ec:	39401062 	ldrb	w2, [x3, #4]
   863f0:	51000440 	sub	w0, w2, #0x1
   863f4:	12001c00 	and	w0, w0, #0xff
   863f8:	7103f41f 	cmp	w0, #0xfd
   863fc:	54000328 	b.hi	86460 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>  // b.pmore
   86400:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86404:	39401864 	ldrb	w4, [x3, #6]
   86408:	aa1403e0 	mov	x0, x20
   8640c:	912de021 	add	x1, x1, #0xb78
   86410:	39401463 	ldrb	w3, [x3, #5]
   86414:	940073f7 	bl	a33f0 <CString::Format(char const*, ...)>
   86418:	aa1403e0 	mov	x0, x20
   8641c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86420:	f94013f5 	ldr	x21, [sp, #32]
   86424:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86428:	d65f03c0 	ret
   8642c:	f94026a2 	ldr	x2, [x21, #72]
   86430:	b4000362 	cbz	x2, 8649c <CUSBDevice::GetName(TDeviceNameSelector) const+0xec>
   86434:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86438:	79401443 	ldrh	w3, [x2, #10]
   8643c:	aa1403e0 	mov	x0, x20
   86440:	912d8021 	add	x1, x1, #0xb60
   86444:	79401042 	ldrh	w2, [x2, #8]
   86448:	940073ea 	bl	a33f0 <CString::Format(char const*, ...)>
   8644c:	aa1403e0 	mov	x0, x20
   86450:	a94153f3 	ldp	x19, x20, [sp, #16]
   86454:	f94013f5 	ldr	x21, [sp, #32]
   86458:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8645c:	d65f03c0 	ret
   86460:	aa1403e0 	mov	x0, x20
   86464:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86468:	912dc021 	add	x1, x1, #0xb70
   8646c:	94006e95 	bl	a1ec0 <CString::operator=(char const*)>
   86470:	aa1403e0 	mov	x0, x20
   86474:	a94153f3 	ldp	x19, x20, [sp, #16]
   86478:	f94013f5 	ldr	x21, [sp, #32]
   8647c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86480:	d65f03c0 	ret
   86484:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86488:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   8648c:	912ba021 	add	x1, x1, #0xae8
   86490:	912d2000 	add	x0, x0, #0xb48
   86494:	52804162 	mov	w2, #0x20b                 	// #523
   86498:	9400587a 	bl	9c680 <assertion_failed>
   8649c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   864a0:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   864a4:	912ba021 	add	x1, x1, #0xae8
   864a8:	912d2000 	add	x0, x0, #0xb48
   864ac:	52804082 	mov	w2, #0x204                 	// #516
   864b0:	94005874 	bl	9c680 <assertion_failed>
   864b4:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   864b8:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   864bc:	912ba021 	add	x1, x1, #0xae8
   864c0:	912f4000 	add	x0, x0, #0xbd0
   864c4:	52804302 	mov	w2, #0x218                 	// #536
   864c8:	9400586e 	bl	9c680 <assertion_failed>
   864cc:	d503201f 	nop

00000000000864d0 <CUSBDevice::GetNames() const>:
   864d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   864d4:	910003fd 	mov	x29, sp
   864d8:	a90363f7 	stp	x23, x24, [sp, #48]
   864dc:	aa0003f7 	mov	x23, x0
   864e0:	d2800400 	mov	x0, #0x20                  	// #32
   864e4:	a90153f3 	stp	x19, x20, [sp, #16]
   864e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   864ec:	52800015 	mov	w21, #0x0                   	// #0
   864f0:	f0000136 	adrp	x22, ad000 <From+0x4c0>
   864f4:	912dc2d6 	add	x22, x22, #0xb70
   864f8:	94007c62 	bl	a5680 <operator new(unsigned long)>
   864fc:	aa0003f4 	mov	x20, x0
   86500:	94006e4c 	bl	a1e30 <CString::CString()>
   86504:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86508:	912e6038 	add	x24, x1, #0xb98
   8650c:	aa1703e0 	mov	x0, x23
   86510:	2a1503e1 	mov	w1, w21
   86514:	97ffffa7 	bl	863b0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   86518:	aa0003f3 	mov	x19, x0
   8651c:	b4000300 	cbz	x0, 8657c <CUSBDevice::GetNames() const+0xac>
   86520:	aa1603e1 	mov	x1, x22
   86524:	94006ecb 	bl	a2050 <CString::Compare(char const*) const>
   86528:	35000360 	cbnz	w0, 86594 <CUSBDevice::GetNames() const+0xc4>
   8652c:	f9400261 	ldr	x1, [x19]
   86530:	aa1303e0 	mov	x0, x19
   86534:	f9400421 	ldr	x1, [x1, #8]
   86538:	d63f0020 	blr	x1
   8653c:	34000155 	cbz	w21, 86564 <CUSBDevice::GetNames() const+0x94>
   86540:	aa1403e0 	mov	x0, x20
   86544:	94006e8f 	bl	a1f80 <CString::GetLength() const>
   86548:	b4000380 	cbz	x0, 865b8 <CUSBDevice::GetNames() const+0xe8>
   8654c:	aa1403e0 	mov	x0, x20
   86550:	a94153f3 	ldp	x19, x20, [sp, #16]
   86554:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86558:	a94363f7 	ldp	x23, x24, [sp, #48]
   8655c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86560:	d65f03c0 	ret
   86564:	52800035 	mov	w21, #0x1                   	// #1
   86568:	aa1703e0 	mov	x0, x23
   8656c:	2a1503e1 	mov	w1, w21
   86570:	97ffff90 	bl	863b0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   86574:	aa0003f3 	mov	x19, x0
   86578:	b5fffd40 	cbnz	x0, 86520 <CUSBDevice::GetNames() const+0x50>
   8657c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86580:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86584:	912ba021 	add	x1, x1, #0xae8
   86588:	912e2000 	add	x0, x0, #0xb88
   8658c:	52804522 	mov	w2, #0x229                 	// #553
   86590:	9400583c 	bl	9c680 <assertion_failed>
   86594:	aa1403e0 	mov	x0, x20
   86598:	94006e7a 	bl	a1f80 <CString::GetLength() const>
   8659c:	b5000200 	cbnz	x0, 865dc <CUSBDevice::GetNames() const+0x10c>
   865a0:	aa1303e0 	mov	x0, x19
   865a4:	94006e3f 	bl	a1ea0 <CString::operator char const*() const>
   865a8:	aa0003e1 	mov	x1, x0
   865ac:	aa1403e0 	mov	x0, x20
   865b0:	94006e7c 	bl	a1fa0 <CString::Append(char const*)>
   865b4:	17ffffde 	b	8652c <CUSBDevice::GetNames() const+0x5c>
   865b8:	aa1603e1 	mov	x1, x22
   865bc:	aa1403e0 	mov	x0, x20
   865c0:	94006e40 	bl	a1ec0 <CString::operator=(char const*)>
   865c4:	aa1403e0 	mov	x0, x20
   865c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   865cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   865d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   865d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   865d8:	d65f03c0 	ret
   865dc:	aa1803e1 	mov	x1, x24
   865e0:	aa1403e0 	mov	x0, x20
   865e4:	94006e6f 	bl	a1fa0 <CString::Append(char const*)>
   865e8:	17ffffee 	b	865a0 <CUSBDevice::GetNames() const+0xd0>
   865ec:	d503201f 	nop

00000000000865f0 <CUSBDevice::SetAddress(unsigned char)>:
   865f0:	12001c21 	and	w1, w1, #0xff
   865f4:	51000422 	sub	w2, w1, #0x1
   865f8:	12001c42 	and	w2, w2, #0xff
   865fc:	71007c5f 	cmp	w2, #0x1f
   86600:	54000068 	b.hi	8660c <CUSBDevice::SetAddress(unsigned char)+0x1c>  // b.pmore
   86604:	39009001 	strb	w1, [x0, #36]
   86608:	d65f03c0 	ret
   8660c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86610:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86614:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86618:	912ba021 	add	x1, x1, #0xae8
   8661c:	910003fd 	mov	x29, sp
   86620:	912e8000 	add	x0, x0, #0xba0
   86624:	528048a2 	mov	w2, #0x245                 	// #581
   86628:	94005816 	bl	9c680 <assertion_failed>
   8662c:	d503201f 	nop

0000000000086630 <CUSBDevice::GetAddress() const>:
   86630:	39409000 	ldrb	w0, [x0, #36]
   86634:	d65f03c0 	ret
   86638:	d503201f 	nop
   8663c:	d503201f 	nop

0000000000086640 <CUSBDevice::GetSpeed() const>:
   86640:	b9402800 	ldr	w0, [x0, #40]
   86644:	d65f03c0 	ret
   86648:	d503201f 	nop
   8664c:	d503201f 	nop

0000000000086650 <CUSBDevice::IsSplit() const>:
   86650:	3940e000 	ldrb	w0, [x0, #56]
   86654:	d65f03c0 	ret
   86658:	d503201f 	nop
   8665c:	d503201f 	nop

0000000000086660 <CUSBDevice::GetHubAddress() const>:
   86660:	3940e400 	ldrb	w0, [x0, #57]
   86664:	d65f03c0 	ret
   86668:	d503201f 	nop
   8666c:	d503201f 	nop

0000000000086670 <CUSBDevice::GetHubPortNumber() const>:
   86670:	3940e800 	ldrb	w0, [x0, #58]
   86674:	d65f03c0 	ret
   86678:	d503201f 	nop
   8667c:	d503201f 	nop

0000000000086680 <CUSBDevice::GetTTHubDevice() const>:
   86680:	f9402000 	ldr	x0, [x0, #64]
   86684:	d65f03c0 	ret
   86688:	d503201f 	nop
   8668c:	d503201f 	nop

0000000000086690 <CUSBDevice::GetEndpoint0() const>:
   86690:	f9401800 	ldr	x0, [x0, #48]
   86694:	b4000040 	cbz	x0, 8669c <CUSBDevice::GetEndpoint0() const+0xc>
   86698:	d65f03c0 	ret
   8669c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   866a0:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   866a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   866a8:	912ba021 	add	x1, x1, #0xae8
   866ac:	910003fd 	mov	x29, sp
   866b0:	912f0000 	add	x0, x0, #0xbc0
   866b4:	52804d82 	mov	w2, #0x26c                 	// #620
   866b8:	940057f2 	bl	9c680 <assertion_failed>
   866bc:	d503201f 	nop

00000000000866c0 <CUSBDevice::GetHost() const>:
   866c0:	f9400400 	ldr	x0, [x0, #8]
   866c4:	b4000040 	cbz	x0, 866cc <CUSBDevice::GetHost() const+0xc>
   866c8:	d65f03c0 	ret
   866cc:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   866d0:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   866d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   866d8:	912ba021 	add	x1, x1, #0xae8
   866dc:	910003fd 	mov	x29, sp
   866e0:	912be000 	add	x0, x0, #0xaf8
   866e4:	52804e42 	mov	w2, #0x272                 	// #626
   866e8:	940057e6 	bl	9c680 <assertion_failed>
   866ec:	d503201f 	nop

00000000000866f0 <CUSBDevice::GetDeviceDescriptor() const>:
   866f0:	f9402400 	ldr	x0, [x0, #72]
   866f4:	b4000040 	cbz	x0, 866fc <CUSBDevice::GetDeviceDescriptor() const+0xc>
   866f8:	d65f03c0 	ret
   866fc:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86700:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86704:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86708:	912ba021 	add	x1, x1, #0xae8
   8670c:	910003fd 	mov	x29, sp
   86710:	912d2000 	add	x0, x0, #0xb48
   86714:	52804f02 	mov	w2, #0x278                 	// #632
   86718:	940057da 	bl	9c680 <assertion_failed>
   8671c:	d503201f 	nop

0000000000086720 <CUSBDevice::GetConfigurationDescriptor() const>:
   86720:	f9402800 	ldr	x0, [x0, #80]
   86724:	b4000040 	cbz	x0, 8672c <CUSBDevice::GetConfigurationDescriptor() const+0xc>
   86728:	d65f03c0 	ret
   8672c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86730:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86734:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86738:	912ba021 	add	x1, x1, #0xae8
   8673c:	910003fd 	mov	x29, sp
   86740:	912f6000 	add	x0, x0, #0xbd8
   86744:	52804fc2 	mov	w2, #0x27e                 	// #638
   86748:	940057ce 	bl	9c680 <assertion_failed>
   8674c:	d503201f 	nop

0000000000086750 <CUSBDevice::GetDescriptor(unsigned char)>:
   86750:	f9402c00 	ldr	x0, [x0, #88]
   86754:	b4000060 	cbz	x0, 86760 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
   86758:	12001c21 	and	w1, w1, #0xff
   8675c:	1400293d 	b	90c50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   86760:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86764:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86768:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8676c:	912ba021 	add	x1, x1, #0xae8
   86770:	910003fd 	mov	x29, sp
   86774:	912fc000 	add	x0, x0, #0xbf0
   86778:	52805082 	mov	w2, #0x284                 	// #644
   8677c:	940057c1 	bl	9c680 <assertion_failed>

0000000000086780 <CUSBDevice::ConfigurationError(char const*) const>:
   86780:	f9402c00 	ldr	x0, [x0, #88]
   86784:	b4000040 	cbz	x0, 8678c <CUSBDevice::ConfigurationError(char const*) const+0xc>
   86788:	14002976 	b	90d60 <CUSBConfigurationParser::Error(char const*) const>
   8678c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86790:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86794:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86798:	912ba021 	add	x1, x1, #0xae8
   8679c:	910003fd 	mov	x29, sp
   867a0:	912fc000 	add	x0, x0, #0xbf0
   867a4:	52805142 	mov	w2, #0x28a                 	// #650
   867a8:	940057b6 	bl	9c680 <assertion_failed>
   867ac:	d503201f 	nop

00000000000867b0 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)>:
   867b0:	52800002 	mov	w2, #0x0                   	// #0
   867b4:	528001e4 	mov	w4, #0xf                   	// #15
   867b8:	1ac22083 	lsl	w3, w4, w2
   867bc:	6a00007f 	tst	w3, w0
   867c0:	540000a0 	b.eq	867d4 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x24>  // b.none
   867c4:	11001042 	add	w2, w2, #0x4
   867c8:	7100505f 	cmp	w2, #0x14
   867cc:	54ffff61 	b.ne	867b8 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x8>  // b.any
   867d0:	d65f03c0 	ret
   867d4:	1ac22022 	lsl	w2, w1, w2
   867d8:	71003c3f 	cmp	w1, #0xf
   867dc:	2a020000 	orr	w0, w0, w2
   867e0:	54000048 	b.hi	867e8 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x38>  // b.pmore
   867e4:	d65f03c0 	ret
   867e8:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   867ec:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   867f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   867f4:	912ba021 	add	x1, x1, #0xae8
   867f8:	910003fd 	mov	x29, sp
   867fc:	91302000 	add	x0, x0, #0xc08
   86800:	528057c2 	mov	w2, #0x2be                 	// #702
   86804:	9400579f 	bl	9c680 <assertion_failed>
   86808:	d503201f 	nop
   8680c:	d503201f 	nop

0000000000086810 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   86810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86814:	910003fd 	mov	x29, sp
   86818:	a90153f3 	stp	x19, x20, [sp, #16]
   8681c:	aa0003f3 	mov	x19, x0
   86820:	aa0303e0 	mov	x0, x3
   86824:	f0000123 	adrp	x3, ad000 <From+0x4c0>
   86828:	913b4063 	add	x3, x3, #0xed0
   8682c:	f90013f5 	str	x21, [sp, #32]
   86830:	a9000663 	stp	x3, x1, [x19]
   86834:	a901027f 	stp	xzr, x0, [x19, #16]
   86838:	b9002264 	str	w4, [x19, #32]
   8683c:	3900927f 	strb	wzr, [x19, #36]
   86840:	b9002a62 	str	w2, [x19, #40]
   86844:	f9001a7f 	str	xzr, [x19, #48]
   86848:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   8684c:	f9002e7f 	str	xzr, [x19, #88]
   86850:	b40006c1 	cbz	x1, 86928 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
   86854:	b4000760 	cbz	x0, 86940 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x130>
   86858:	2a0403f5 	mov	w21, w4
   8685c:	9400056d 	bl	87e10 <CUSBFunction::GetDevice() const>
   86860:	aa0003f4 	mov	x20, x0
   86864:	b40007a0 	cbz	x0, 86958 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
   86868:	b940b000 	ldr	w0, [x0, #176]
   8686c:	110006a1 	add	w1, w21, #0x1
   86870:	b900b260 	str	w0, [x19, #176]
   86874:	b940b680 	ldr	w0, [x20, #180]
   86878:	97ffffce 	bl	867b0 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)>
   8687c:	3940e281 	ldrb	w1, [x20, #56]
   86880:	b900b660 	str	w0, [x19, #180]
   86884:	3900e261 	strb	w1, [x19, #56]
   86888:	3940e680 	ldrb	w0, [x20, #57]
   8688c:	3900e660 	strb	w0, [x19, #57]
   86890:	3940ea80 	ldrb	w0, [x20, #58]
   86894:	3900ea60 	strb	w0, [x19, #58]
   86898:	f9402280 	ldr	x0, [x20, #64]
   8689c:	f9002260 	str	x0, [x19, #64]
   868a0:	34000261 	cbz	w1, 868ec <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xdc>
   868a4:	f9401a60 	ldr	x0, [x19, #48]
   868a8:	b5000640 	cbnz	x0, 86970 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x160>
   868ac:	d2800400 	mov	x0, #0x20                  	// #32
   868b0:	94007b74 	bl	a5680 <operator new(unsigned long)>
   868b4:	aa1303e1 	mov	x1, x19
   868b8:	aa0003f4 	mov	x20, x0
   868bc:	94000395 	bl	87710 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   868c0:	91018261 	add	x1, x19, #0x60
   868c4:	9102c262 	add	x2, x19, #0xb0
   868c8:	f9001a74 	str	x20, [x19, #48]
   868cc:	d503201f 	nop
   868d0:	f800843f 	str	xzr, [x1], #8
   868d4:	eb02003f 	cmp	x1, x2
   868d8:	54ffffc1 	b.ne	868d0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xc0>  // b.any
   868dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   868e0:	f94013f5 	ldr	x21, [sp, #32]
   868e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   868e8:	d65f03c0 	ret
   868ec:	b9402a80 	ldr	w0, [x20, #40]
   868f0:	7100081f 	cmp	w0, #0x2
   868f4:	54fffd81 	b.ne	868a4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x94>  // b.any
   868f8:	b9402a60 	ldr	w0, [x19, #40]
   868fc:	7100041f 	cmp	w0, #0x1
   86900:	54fffd2c 	b.gt	868a4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x94>
   86904:	52800021 	mov	w1, #0x1                   	// #1
   86908:	b9402260 	ldr	w0, [x19, #32]
   8690c:	3900e261 	strb	w1, [x19, #56]
   86910:	39409281 	ldrb	w1, [x20, #36]
   86914:	f9002274 	str	x20, [x19, #64]
   86918:	11000400 	add	w0, w0, #0x1
   8691c:	3900ea60 	strb	w0, [x19, #58]
   86920:	3900e661 	strb	w1, [x19, #57]
   86924:	17ffffe0 	b	868a4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x94>
   86928:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   8692c:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86930:	912ba021 	add	x1, x1, #0xae8
   86934:	912be000 	add	x0, x0, #0xaf8
   86938:	52800ae2 	mov	w2, #0x57                  	// #87
   8693c:	94005751 	bl	9c680 <assertion_failed>
   86940:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86944:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86948:	912ba021 	add	x1, x1, #0xae8
   8694c:	912ce000 	add	x0, x0, #0xb38
   86950:	52800b02 	mov	w2, #0x58                  	// #88
   86954:	9400574b 	bl	9c680 <assertion_failed>
   86958:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   8695c:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86960:	912ba021 	add	x1, x1, #0xae8
   86964:	91306000 	add	x0, x0, #0xc18
   86968:	52800b62 	mov	w2, #0x5b                  	// #91
   8696c:	94005745 	bl	9c680 <assertion_failed>
   86970:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86974:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86978:	912ba021 	add	x1, x1, #0xae8
   8697c:	912c8000 	add	x0, x0, #0xb20
   86980:	52800e62 	mov	w2, #0x73                  	// #115
   86984:	9400573f 	bl	9c680 <assertion_failed>
   86988:	d503201f 	nop
   8698c:	d503201f 	nop

0000000000086990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
   86990:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
   86994:	910003fd 	mov	x29, sp
   86998:	a90153f3 	stp	x19, x20, [sp, #16]
   8699c:	a9025bf5 	stp	x21, x22, [sp, #32]
   869a0:	a90363f7 	stp	x23, x24, [sp, #48]
   869a4:	3d802be0 	str	q0, [sp, #160]
   869a8:	3d802fe1 	str	q1, [sp, #176]
   869ac:	3d8033e2 	str	q2, [sp, #192]
   869b0:	3d8037e3 	str	q3, [sp, #208]
   869b4:	3d803be4 	str	q4, [sp, #224]
   869b8:	3d803fe5 	str	q5, [sp, #240]
   869bc:	3d8043e6 	str	q6, [sp, #256]
   869c0:	3d8047e7 	str	q7, [sp, #272]
   869c4:	a91293e3 	stp	x3, x4, [sp, #296]
   869c8:	a9139be5 	stp	x5, x6, [sp, #312]
   869cc:	f900a7e7 	str	x7, [sp, #328]
   869d0:	b4000842 	cbz	x2, 86ad8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x148>
   869d4:	aa0003f5 	mov	x21, x0
   869d8:	910183e0 	add	x0, sp, #0x60
   869dc:	aa0203f7 	mov	x23, x2
   869e0:	2a0103f8 	mov	w24, w1
   869e4:	94006d13 	bl	a1e30 <CString::CString()>
   869e8:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   869ec:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   869f0:	b940b2a3 	ldr	w3, [x21, #176]
   869f4:	910183e0 	add	x0, sp, #0x60
   869f8:	913be042 	add	x2, x2, #0xef8
   869fc:	9130e021 	add	x1, x1, #0xc38
   86a00:	f0000136 	adrp	x22, ad000 <From+0x4c0>
   86a04:	913102d6 	add	x22, x22, #0xc40
   86a08:	52800014 	mov	w20, #0x0                   	// #0
   86a0c:	94007279 	bl	a33f0 <CString::Format(char const*, ...)>
   86a10:	b940b6a3 	ldr	w3, [x21, #180]
   86a14:	1ad42463 	lsr	w3, w3, w20
   86a18:	72000c73 	ands	w19, w3, #0xf
   86a1c:	54000220 	b.eq	86a60 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xd0>  // b.none
   86a20:	910203e0 	add	x0, sp, #0x80
   86a24:	11001294 	add	w20, w20, #0x4
   86a28:	94006d02 	bl	a1e30 <CString::CString()>
   86a2c:	2a1303e2 	mov	w2, w19
   86a30:	aa1603e1 	mov	x1, x22
   86a34:	910203e0 	add	x0, sp, #0x80
   86a38:	9400726e 	bl	a33f0 <CString::Format(char const*, ...)>
   86a3c:	910203e0 	add	x0, sp, #0x80
   86a40:	94006d18 	bl	a1ea0 <CString::operator char const*() const>
   86a44:	aa0003e1 	mov	x1, x0
   86a48:	910183e0 	add	x0, sp, #0x60
   86a4c:	94006d55 	bl	a1fa0 <CString::Append(char const*)>
   86a50:	910203e0 	add	x0, sp, #0x80
   86a54:	94006cbb 	bl	a1d40 <CString::~CString()>
   86a58:	7100529f 	cmp	w20, #0x14
   86a5c:	54fffda1 	b.ne	86a10 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x80>  // b.any
   86a60:	910543e3 	add	x3, sp, #0x150
   86a64:	910543e0 	add	x0, sp, #0x150
   86a68:	910483e2 	add	x2, sp, #0x120
   86a6c:	128004e1 	mov	w1, #0xffffffd8            	// #-40
   86a70:	a9080fe0 	stp	x0, x3, [sp, #128]
   86a74:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   86a78:	f9004be2 	str	x2, [sp, #144]
   86a7c:	b9009be1 	str	w1, [sp, #152]
   86a80:	b9009fe0 	str	w0, [sp, #156]
   86a84:	94006093 	bl	9ecd0 <CLogger::Get()>
   86a88:	aa0003f3 	mov	x19, x0
   86a8c:	910183e0 	add	x0, sp, #0x60
   86a90:	94006d04 	bl	a1ea0 <CString::operator char const*() const>
   86a94:	a94827e8 	ldp	x8, x9, [sp, #128]
   86a98:	aa0003e1 	mov	x1, x0
   86a9c:	aa1703e3 	mov	x3, x23
   86aa0:	2a1803e2 	mov	w2, w24
   86aa4:	910103e4 	add	x4, sp, #0x40
   86aa8:	aa1303e0 	mov	x0, x19
   86aac:	a9491fe6 	ldp	x6, x7, [sp, #144]
   86ab0:	a90427e8 	stp	x8, x9, [sp, #64]
   86ab4:	a9051fe6 	stp	x6, x7, [sp, #80]
   86ab8:	94005fe2 	bl	9ea40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   86abc:	910183e0 	add	x0, sp, #0x60
   86ac0:	94006ca0 	bl	a1d40 <CString::~CString()>
   86ac4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ac8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86acc:	a94363f7 	ldp	x23, x24, [sp, #48]
   86ad0:	a8d57bfd 	ldp	x29, x30, [sp], #336
   86ad4:	d65f03c0 	ret
   86ad8:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86adc:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86ae0:	912ba021 	add	x1, x1, #0xae8
   86ae4:	9130a000 	add	x0, x0, #0xc28
   86ae8:	52805202 	mov	w2, #0x290                 	// #656
   86aec:	940056e5 	bl	9c680 <assertion_failed>

0000000000086af0 <CUSBDevice::Initialize()>:
   86af0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   86af4:	910003fd 	mov	x29, sp
   86af8:	a90153f3 	stp	x19, x20, [sp, #16]
   86afc:	aa0003f3 	mov	x19, x0
   86b00:	f9402400 	ldr	x0, [x0, #72]
   86b04:	b50010a0 	cbnz	x0, 86d18 <CUSBDevice::Initialize()+0x228>
   86b08:	d2800240 	mov	x0, #0x12                  	// #18
   86b0c:	94007add 	bl	a5680 <operator new(unsigned long)>
   86b10:	aa0003e4 	mov	x4, x0
   86b14:	f9400660 	ldr	x0, [x19, #8]
   86b18:	f9002664 	str	x4, [x19, #72]
   86b1c:	b4001100 	cbz	x0, 86d3c <CUSBDevice::Initialize()+0x24c>
   86b20:	f9401a61 	ldr	x1, [x19, #48]
   86b24:	b40011e1 	cbz	x1, 86d60 <CUSBDevice::Initialize()+0x270>
   86b28:	52800022 	mov	w2, #0x1                   	// #1
   86b2c:	52800007 	mov	w7, #0x0                   	// #0
   86b30:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   86b34:	52800105 	mov	w5, #0x8                   	// #8
   86b38:	52800003 	mov	w3, #0x0                   	// #0
   86b3c:	94001151 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   86b40:	7100201f 	cmp	w0, #0x8
   86b44:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86b48:	91318042 	add	x2, x2, #0xc60
   86b4c:	54000181 	b.ne	86b7c <CUSBDevice::Initialize()+0x8c>  // b.any
   86b50:	f9402660 	ldr	x0, [x19, #72]
   86b54:	39400014 	ldrb	w20, [x0]
   86b58:	71004a9f 	cmp	w20, #0x12
   86b5c:	540000c1 	b.ne	86b74 <CUSBDevice::Initialize()+0x84>  // b.any
   86b60:	a9025bf5 	stp	x21, x22, [sp, #32]
   86b64:	39400415 	ldrb	w21, [x0, #1]
   86b68:	710006bf 	cmp	w21, #0x1
   86b6c:	54000220 	b.eq	86bb0 <CUSBDevice::Initialize()+0xc0>  // b.none
   86b70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86b74:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86b78:	91322042 	add	x2, x2, #0xc88
   86b7c:	aa1303e0 	mov	x0, x19
   86b80:	52800021 	mov	w1, #0x1                   	// #1
   86b84:	97ffff83 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86b88:	f9402660 	ldr	x0, [x19, #72]
   86b8c:	b4000060 	cbz	x0, 86b98 <CUSBDevice::Initialize()+0xa8>
   86b90:	d2800241 	mov	x1, #0x12                  	// #18
   86b94:	94007adf 	bl	a5710 <operator delete(void*, unsigned long)>
   86b98:	52800014 	mov	w20, #0x0                   	// #0
   86b9c:	f900267f 	str	xzr, [x19, #72]
   86ba0:	2a1403e0 	mov	w0, w20
   86ba4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ba8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   86bac:	d65f03c0 	ret
   86bb0:	39401c01 	ldrb	w1, [x0, #7]
   86bb4:	f9401a60 	ldr	x0, [x19, #48]
   86bb8:	9400036e 	bl	87970 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
   86bbc:	72001c1f 	tst	w0, #0xff
   86bc0:	54001120 	b.eq	86de4 <CUSBDevice::Initialize()+0x2f4>  // b.none
   86bc4:	2a1403e5 	mov	w5, w20
   86bc8:	52800007 	mov	w7, #0x0                   	// #0
   86bcc:	f9400660 	ldr	x0, [x19, #8]
   86bd0:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   86bd4:	52800003 	mov	w3, #0x0                   	// #0
   86bd8:	2a1503e2 	mov	w2, w21
   86bdc:	f9401a61 	ldr	x1, [x19, #48]
   86be0:	f9402664 	ldr	x4, [x19, #72]
   86be4:	94001127 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   86be8:	7100481f 	cmp	w0, #0x12
   86bec:	54000cc1 	b.ne	86d84 <CUSBDevice::Initialize()+0x294>  // b.any
   86bf0:	f9402a60 	ldr	x0, [x19, #80]
   86bf4:	b5001100 	cbnz	x0, 86e14 <CUSBDevice::Initialize()+0x324>
   86bf8:	d2800120 	mov	x0, #0x9                   	// #9
   86bfc:	52800014 	mov	w20, #0x0                   	// #0
   86c00:	94007aa0 	bl	a5680 <operator new(unsigned long)>
   86c04:	f9402661 	ldr	x1, [x19, #72]
   86c08:	aa0003e4 	mov	x4, x0
   86c0c:	79401020 	ldrh	w0, [x1, #8]
   86c10:	f9002a64 	str	x4, [x19, #80]
   86c14:	7114941f 	cmp	w0, #0x525
   86c18:	540000a1 	b.ne	86c2c <CUSBDevice::Initialize()+0x13c>  // b.any
   86c1c:	79401421 	ldrh	w1, [x1, #10]
   86c20:	52949440 	mov	w0, #0xa4a2                	// #42146
   86c24:	6b00003f 	cmp	w1, w0
   86c28:	1a9f17f4 	cset	w20, eq  // eq = none
   86c2c:	52800007 	mov	w7, #0x0                   	// #0
   86c30:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   86c34:	f9400660 	ldr	x0, [x19, #8]
   86c38:	52800125 	mov	w5, #0x9                   	// #9
   86c3c:	2a1403e3 	mov	w3, w20
   86c40:	52800042 	mov	w2, #0x2                   	// #2
   86c44:	f9401a61 	ldr	x1, [x19, #48]
   86c48:	9400110e 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   86c4c:	7100241f 	cmp	w0, #0x9
   86c50:	54000b01 	b.ne	86db0 <CUSBDevice::Initialize()+0x2c0>  // b.any
   86c54:	f9402a60 	ldr	x0, [x19, #80]
   86c58:	39400001 	ldrb	w1, [x0]
   86c5c:	7100243f 	cmp	w1, #0x9
   86c60:	54000d41 	b.ne	86e08 <CUSBDevice::Initialize()+0x318>  // b.any
   86c64:	39400415 	ldrb	w21, [x0, #1]
   86c68:	71000abf 	cmp	w21, #0x2
   86c6c:	54000ce1 	b.ne	86e08 <CUSBDevice::Initialize()+0x318>  // b.any
   86c70:	79400416 	ldrh	w22, [x0, #2]
   86c74:	710802df 	cmp	w22, #0x200
   86c78:	54000c88 	b.hi	86e08 <CUSBDevice::Initialize()+0x318>  // b.pmore
   86c7c:	d2800121 	mov	x1, #0x9                   	// #9
   86c80:	94007aa4 	bl	a5710 <operator delete(void*, unsigned long)>
   86c84:	92403ec0 	and	x0, x22, #0xffff
   86c88:	94007a86 	bl	a56a0 <operator new[](unsigned long)>
   86c8c:	aa0003e4 	mov	x4, x0
   86c90:	2a1403e3 	mov	w3, w20
   86c94:	f9400660 	ldr	x0, [x19, #8]
   86c98:	2a1503e2 	mov	w2, w21
   86c9c:	52800007 	mov	w7, #0x0                   	// #0
   86ca0:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   86ca4:	2a1603e5 	mov	w5, w22
   86ca8:	f9002a64 	str	x4, [x19, #80]
   86cac:	f9401a61 	ldr	x1, [x19, #48]
   86cb0:	940010f4 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   86cb4:	6b16001f 	cmp	w0, w22
   86cb8:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86cbc:	91358042 	add	x2, x2, #0xd60
   86cc0:	2a0003f4 	mov	w20, w0
   86cc4:	540007a1 	b.ne	86db8 <CUSBDevice::Initialize()+0x2c8>  // b.any
   86cc8:	f9402e60 	ldr	x0, [x19, #88]
   86ccc:	b5001fa0 	cbnz	x0, 870c0 <CUSBDevice::Initialize()+0x5d0>
   86cd0:	d2800600 	mov	x0, #0x30                  	// #48
   86cd4:	94007a6b 	bl	a5680 <operator new(unsigned long)>
   86cd8:	f9402a61 	ldr	x1, [x19, #80]
   86cdc:	2a1403e2 	mov	w2, w20
   86ce0:	aa0003f4 	mov	x20, x0
   86ce4:	9400276b 	bl	90a90 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
   86ce8:	aa1403e0 	mov	x0, x20
   86cec:	f9002e74 	str	x20, [x19, #88]
   86cf0:	940027d4 	bl	90c40 <CUSBConfigurationParser::IsValid() const>
   86cf4:	72001c14 	ands	w20, w0, #0xff
   86cf8:	540009e1 	b.ne	86e34 <CUSBDevice::Initialize()+0x344>  // b.any
   86cfc:	f9402e60 	ldr	x0, [x19, #88]
   86d00:	b4001fc0 	cbz	x0, 870f8 <CUSBDevice::Initialize()+0x608>
   86d04:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86d08:	913be021 	add	x1, x1, #0xef8
   86d0c:	94002815 	bl	90d60 <CUSBConfigurationParser::Error(char const*) const>
   86d10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86d14:	17ffffa3 	b	86ba0 <CUSBDevice::Initialize()+0xb0>
   86d18:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86d1c:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86d20:	a9025bf5 	stp	x21, x22, [sp, #32]
   86d24:	912ba021 	add	x1, x1, #0xae8
   86d28:	91312000 	add	x0, x0, #0xc48
   86d2c:	528014e2 	mov	w2, #0xa7                  	// #167
   86d30:	a90363f7 	stp	x23, x24, [sp, #48]
   86d34:	a9046bf9 	stp	x25, x26, [sp, #64]
   86d38:	94005652 	bl	9c680 <assertion_failed>
   86d3c:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86d40:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86d44:	a9025bf5 	stp	x21, x22, [sp, #32]
   86d48:	912ba021 	add	x1, x1, #0xae8
   86d4c:	912be000 	add	x0, x0, #0xaf8
   86d50:	52801562 	mov	w2, #0xab                  	// #171
   86d54:	a90363f7 	stp	x23, x24, [sp, #48]
   86d58:	a9046bf9 	stp	x25, x26, [sp, #64]
   86d5c:	94005649 	bl	9c680 <assertion_failed>
   86d60:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86d64:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86d68:	a9025bf5 	stp	x21, x22, [sp, #32]
   86d6c:	912ba021 	add	x1, x1, #0xae8
   86d70:	912f0000 	add	x0, x0, #0xbc0
   86d74:	52801582 	mov	w2, #0xac                  	// #172
   86d78:	a90363f7 	stp	x23, x24, [sp, #48]
   86d7c:	a9046bf9 	stp	x25, x26, [sp, #64]
   86d80:	94005640 	bl	9c680 <assertion_failed>
   86d84:	aa1303e0 	mov	x0, x19
   86d88:	2a1503e1 	mov	w1, w21
   86d8c:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86d90:	91334042 	add	x2, x2, #0xcd0
   86d94:	97fffeff 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86d98:	f9402660 	ldr	x0, [x19, #72]
   86d9c:	b4000320 	cbz	x0, 86e00 <CUSBDevice::Initialize()+0x310>
   86da0:	d2800241 	mov	x1, #0x12                  	// #18
   86da4:	94007a5b 	bl	a5710 <operator delete(void*, unsigned long)>
   86da8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86dac:	17ffff7b 	b	86b98 <CUSBDevice::Initialize()+0xa8>
   86db0:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86db4:	91342042 	add	x2, x2, #0xd08
   86db8:	aa1303e0 	mov	x0, x19
   86dbc:	52800021 	mov	w1, #0x1                   	// #1
   86dc0:	97fffef4 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86dc4:	f9402a60 	ldr	x0, [x19, #80]
   86dc8:	b4000060 	cbz	x0, 86dd4 <CUSBDevice::Initialize()+0x2e4>
   86dcc:	d2800121 	mov	x1, #0x9                   	// #9
   86dd0:	94007a50 	bl	a5710 <operator delete(void*, unsigned long)>
   86dd4:	52800014 	mov	w20, #0x0                   	// #0
   86dd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86ddc:	f9002a7f 	str	xzr, [x19, #80]
   86de0:	17ffff70 	b	86ba0 <CUSBDevice::Initialize()+0xb0>
   86de4:	aa1303e0 	mov	x0, x19
   86de8:	2a1503e1 	mov	w1, w21
   86dec:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86df0:	9132a042 	add	x2, x2, #0xca8
   86df4:	97fffee7 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86df8:	f9402660 	ldr	x0, [x19, #72]
   86dfc:	b5fffd20 	cbnz	x0, 86da0 <CUSBDevice::Initialize()+0x2b0>
   86e00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86e04:	17ffff65 	b	86b98 <CUSBDevice::Initialize()+0xa8>
   86e08:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86e0c:	9134e042 	add	x2, x2, #0xd38
   86e10:	17ffffea 	b	86db8 <CUSBDevice::Initialize()+0x2c8>
   86e14:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86e18:	f0000120 	adrp	x0, ad000 <From+0x4c0>
   86e1c:	a90363f7 	stp	x23, x24, [sp, #48]
   86e20:	912ba021 	add	x1, x1, #0xae8
   86e24:	9133c000 	add	x0, x0, #0xcf0
   86e28:	52802002 	mov	w2, #0x100                 	// #256
   86e2c:	a9046bf9 	stp	x25, x26, [sp, #64]
   86e30:	94005614 	bl	9c680 <assertion_failed>
   86e34:	aa1303e0 	mov	x0, x19
   86e38:	a90363f7 	stp	x23, x24, [sp, #48]
   86e3c:	a9046bf9 	stp	x25, x26, [sp, #64]
   86e40:	97fffda4 	bl	864d0 <CUSBDevice::GetNames() const>
   86e44:	aa0003f5 	mov	x21, x0
   86e48:	b4001720 	cbz	x0, 8712c <CUSBDevice::Initialize()+0x63c>
   86e4c:	94006c15 	bl	a1ea0 <CString::operator char const*() const>
   86e50:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86e54:	aa0003e3 	mov	x3, x0
   86e58:	52800061 	mov	w1, #0x3                   	// #3
   86e5c:	aa1303e0 	mov	x0, x19
   86e60:	9136c042 	add	x2, x2, #0xdb0
   86e64:	f0000138 	adrp	x24, ad000 <From+0x4c0>
   86e68:	9138e318 	add	x24, x24, #0xe38
   86e6c:	f0000137 	adrp	x23, ad000 <From+0x4c0>
   86e70:	913862f7 	add	x23, x23, #0xe18
   86e74:	52800016 	mov	w22, #0x0                   	// #0
   86e78:	97fffec6 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86e7c:	f94002a1 	ldr	x1, [x21]
   86e80:	aa1503e0 	mov	x0, x21
   86e84:	52800015 	mov	w21, #0x0                   	// #0
   86e88:	f9400421 	ldr	x1, [x1, #8]
   86e8c:	d63f0020 	blr	x1
   86e90:	52800081 	mov	w1, #0x4                   	// #4
   86e94:	f9402e60 	ldr	x0, [x19, #88]
   86e98:	9400276e 	bl	90c50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   86e9c:	b40013e0 	cbz	x0, 87118 <CUSBDevice::Initialize()+0x628>
   86ea0:	39400801 	ldrb	w1, [x0, #2]
   86ea4:	6b0102bf 	cmp	w21, w1
   86ea8:	1a8182b9 	csel	w25, w21, w1, hi  // hi = pmore
   86eac:	12001f39 	and	w25, w25, #0xff
   86eb0:	6b15003f 	cmp	w1, w21
   86eb4:	54000963 	b.cc	86fe0 <CUSBDevice::Initialize()+0x4f0>  // b.lo, b.ul, b.last
   86eb8:	f9402e60 	ldr	x0, [x19, #88]
   86ebc:	b4000d80 	cbz	x0, 8706c <CUSBDevice::Initialize()+0x57c>
   86ec0:	8b364e7a 	add	x26, x19, w22, uxtw #3
   86ec4:	f9403340 	ldr	x0, [x26, #96]
   86ec8:	b5000f00 	cbnz	x0, 870a8 <CUSBDevice::Initialize()+0x5b8>
   86ecc:	d2800400 	mov	x0, #0x20                  	// #32
   86ed0:	940079ec 	bl	a5680 <operator new(unsigned long)>
   86ed4:	aa0003f5 	mov	x21, x0
   86ed8:	aa1303e1 	mov	x1, x19
   86edc:	f9402e62 	ldr	x2, [x19, #88]
   86ee0:	94000338 	bl	87bc0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
   86ee4:	f9003355 	str	x21, [x26, #96]
   86ee8:	350004d6 	cbnz	w22, 86f80 <CUSBDevice::Initialize()+0x490>
   86eec:	52800001 	mov	w1, #0x0                   	// #0
   86ef0:	aa1303e0 	mov	x0, x19
   86ef4:	97fffd2f 	bl	863b0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   86ef8:	aa0003e1 	mov	x1, x0
   86efc:	aa1503e0 	mov	x0, x21
   86f00:	940000ec 	bl	872b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   86f04:	aa0003f5 	mov	x21, x0
   86f08:	b4000280 	cbz	x0, 86f58 <CUSBDevice::Initialize()+0x468>
   86f0c:	f9403260 	ldr	x0, [x19, #96]
   86f10:	b4000ba0 	cbz	x0, 87084 <CUSBDevice::Initialize()+0x594>
   86f14:	f9400001 	ldr	x1, [x0]
   86f18:	f9400421 	ldr	x1, [x1, #8]
   86f1c:	d63f0020 	blr	x1
   86f20:	b4001275 	cbz	x21, 8716c <CUSBDevice::Initialize()+0x67c>
   86f24:	f94002a1 	ldr	x1, [x21]
   86f28:	aa1503e0 	mov	x0, x21
   86f2c:	f9401821 	ldr	x1, [x1, #48]
   86f30:	f9003355 	str	x21, [x26, #96]
   86f34:	d63f0020 	blr	x1
   86f38:	72001c03 	ands	w3, w0, #0xff
   86f3c:	54000800 	b.eq	8703c <CUSBDevice::Initialize()+0x54c>  // b.none
   86f40:	110006d6 	add	w22, w22, #0x1
   86f44:	71002adf 	cmp	w22, #0xa
   86f48:	54001160 	b.eq	87174 <CUSBDevice::Initialize()+0x684>  // b.none
   86f4c:	11000735 	add	w21, w25, #0x1
   86f50:	12001eb5 	and	w21, w21, #0xff
   86f54:	17ffffcf 	b	86e90 <CUSBDevice::Initialize()+0x3a0>
   86f58:	f9403275 	ldr	x21, [x19, #96]
   86f5c:	52800021 	mov	w1, #0x1                   	// #1
   86f60:	aa1303e0 	mov	x0, x19
   86f64:	97fffd13 	bl	863b0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   86f68:	aa0003e1 	mov	x1, x0
   86f6c:	aa1503e0 	mov	x0, x21
   86f70:	940000d0 	bl	872b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   86f74:	aa0003f5 	mov	x21, x0
   86f78:	b5fffca0 	cbnz	x0, 86f0c <CUSBDevice::Initialize()+0x41c>
   86f7c:	f9403275 	ldr	x21, [x19, #96]
   86f80:	aa1503e0 	mov	x0, x21
   86f84:	94000377 	bl	87d60 <CUSBFunction::GetInterfaceName() const>
   86f88:	aa0003f5 	mov	x21, x0
   86f8c:	b4000aa0 	cbz	x0, 870e0 <CUSBDevice::Initialize()+0x5f0>
   86f90:	f0000121 	adrp	x1, ad000 <From+0x4c0>
   86f94:	912dc021 	add	x1, x1, #0xb70
   86f98:	94006c2e 	bl	a2050 <CString::Compare(char const*) const>
   86f9c:	35000320 	cbnz	w0, 87000 <CUSBDevice::Initialize()+0x510>
   86fa0:	f94002a1 	ldr	x1, [x21]
   86fa4:	aa1503e0 	mov	x0, x21
   86fa8:	f9400421 	ldr	x1, [x1, #8]
   86fac:	d63f0020 	blr	x1
   86fb0:	f9403340 	ldr	x0, [x26, #96]
   86fb4:	b40000a0 	cbz	x0, 86fc8 <CUSBDevice::Initialize()+0x4d8>
   86fb8:	f9400001 	ldr	x1, [x0]
   86fbc:	f9400421 	ldr	x1, [x1, #8]
   86fc0:	d63f0020 	blr	x1
   86fc4:	f900335f 	str	xzr, [x26, #96]
   86fc8:	aa1703e2 	mov	x2, x23
   86fcc:	52800041 	mov	w1, #0x2                   	// #2
   86fd0:	aa1303e0 	mov	x0, x19
   86fd4:	2a1903f5 	mov	w21, w25
   86fd8:	97fffe6e 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86fdc:	17ffffad 	b	86e90 <CUSBDevice::Initialize()+0x3a0>
   86fe0:	f0000122 	adrp	x2, ad000 <From+0x4c0>
   86fe4:	39400c03 	ldrb	w3, [x0, #3]
   86fe8:	52800081 	mov	w1, #0x4                   	// #4
   86fec:	91370042 	add	x2, x2, #0xdc0
   86ff0:	aa1303e0 	mov	x0, x19
   86ff4:	2a1903f5 	mov	w21, w25
   86ff8:	97fffe66 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   86ffc:	17ffffa5 	b	86e90 <CUSBDevice::Initialize()+0x3a0>
   87000:	aa1503e0 	mov	x0, x21
   87004:	94006ba7 	bl	a1ea0 <CString::operator char const*() const>
   87008:	d0000122 	adrp	x2, ad000 <From+0x4c0>
   8700c:	aa0003e3 	mov	x3, x0
   87010:	91380042 	add	x2, x2, #0xe00
   87014:	52800061 	mov	w1, #0x3                   	// #3
   87018:	aa1303e0 	mov	x0, x19
   8701c:	97fffe5d 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   87020:	aa1503e1 	mov	x1, x21
   87024:	f9403340 	ldr	x0, [x26, #96]
   87028:	940000a2 	bl	872b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   8702c:	aa0003f5 	mov	x21, x0
   87030:	f9403340 	ldr	x0, [x26, #96]
   87034:	b5fff700 	cbnz	x0, 86f14 <CUSBDevice::Initialize()+0x424>
   87038:	17ffffba 	b	86f20 <CUSBDevice::Initialize()+0x430>
   8703c:	aa1303e0 	mov	x0, x19
   87040:	aa1803e2 	mov	x2, x24
   87044:	52800021 	mov	w1, #0x1                   	// #1
   87048:	97fffe52 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8704c:	f9403340 	ldr	x0, [x26, #96]
   87050:	b4000080 	cbz	x0, 87060 <CUSBDevice::Initialize()+0x570>
   87054:	f9400001 	ldr	x1, [x0]
   87058:	f9400421 	ldr	x1, [x1, #8]
   8705c:	d63f0020 	blr	x1
   87060:	2a1903f5 	mov	w21, w25
   87064:	f900335f 	str	xzr, [x26, #96]
   87068:	17ffff8a 	b	86e90 <CUSBDevice::Initialize()+0x3a0>
   8706c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87070:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87074:	912ba021 	add	x1, x1, #0xae8
   87078:	912fc000 	add	x0, x0, #0xbf0
   8707c:	52802da2 	mov	w2, #0x16d                 	// #365
   87080:	94005580 	bl	9c680 <assertion_failed>
   87084:	f94002a1 	ldr	x1, [x21]
   87088:	aa1503e0 	mov	x0, x21
   8708c:	f9401821 	ldr	x1, [x1, #48]
   87090:	f9003275 	str	x21, [x19, #96]
   87094:	d63f0020 	blr	x1
   87098:	72001c1f 	tst	w0, #0xff
   8709c:	54fffd00 	b.eq	8703c <CUSBDevice::Initialize()+0x54c>  // b.none
   870a0:	52800036 	mov	w22, #0x1                   	// #1
   870a4:	17ffffaa 	b	86f4c <CUSBDevice::Initialize()+0x45c>
   870a8:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   870ac:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   870b0:	912ba021 	add	x1, x1, #0xae8
   870b4:	91378000 	add	x0, x0, #0xde0
   870b8:	52802dc2 	mov	w2, #0x16e                 	// #366
   870bc:	94005571 	bl	9c680 <assertion_failed>
   870c0:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   870c4:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   870c8:	a90363f7 	stp	x23, x24, [sp, #48]
   870cc:	912ba021 	add	x1, x1, #0xae8
   870d0:	91362000 	add	x0, x0, #0xd88
   870d4:	528027c2 	mov	w2, #0x13e                 	// #318
   870d8:	a9046bf9 	stp	x25, x26, [sp, #64]
   870dc:	94005569 	bl	9c680 <assertion_failed>
   870e0:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   870e4:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   870e8:	912ba021 	add	x1, x1, #0xae8
   870ec:	912e2000 	add	x0, x0, #0xb88
   870f0:	52803002 	mov	w2, #0x180                 	// #384
   870f4:	94005563 	bl	9c680 <assertion_failed>
   870f8:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   870fc:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87100:	a90363f7 	stp	x23, x24, [sp, #48]
   87104:	912ba021 	add	x1, x1, #0xae8
   87108:	912fc000 	add	x0, x0, #0xbf0
   8710c:	52805142 	mov	w2, #0x28a                 	// #650
   87110:	a9046bf9 	stp	x25, x26, [sp, #64]
   87114:	9400555b 	bl	9c680 <assertion_failed>
   87118:	34000176 	cbz	w22, 87144 <CUSBDevice::Initialize()+0x654>
   8711c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87120:	a94363f7 	ldp	x23, x24, [sp, #48]
   87124:	a9446bf9 	ldp	x25, x26, [sp, #64]
   87128:	17fffe9e 	b	86ba0 <CUSBDevice::Initialize()+0xb0>
   8712c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87130:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87134:	912ba021 	add	x1, x1, #0xae8
   87138:	91368000 	add	x0, x0, #0xda0
   8713c:	52802942 	mov	w2, #0x14a                 	// #330
   87140:	94005550 	bl	9c680 <assertion_failed>
   87144:	aa1303e0 	mov	x0, x19
   87148:	d0000122 	adrp	x2, ad000 <From+0x4c0>
   8714c:	9139e042 	add	x2, x2, #0xe78
   87150:	52800041 	mov	w1, #0x2                   	// #2
   87154:	97fffe0f 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   87158:	52800014 	mov	w20, #0x0                   	// #0
   8715c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87160:	a94363f7 	ldp	x23, x24, [sp, #48]
   87164:	a9446bf9 	ldp	x25, x26, [sp, #64]
   87168:	17fffe8e 	b	86ba0 <CUSBDevice::Initialize()+0xb0>
   8716c:	f900335f 	str	xzr, [x26, #96]
   87170:	17ffff96 	b	86fc8 <CUSBDevice::Initialize()+0x4d8>
   87174:	aa1303e0 	mov	x0, x19
   87178:	d0000122 	adrp	x2, ad000 <From+0x4c0>
   8717c:	91396042 	add	x2, x2, #0xe58
   87180:	52800041 	mov	w1, #0x2                   	// #2
   87184:	2a0303f4 	mov	w20, w3
   87188:	97fffe02 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8718c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87190:	a94363f7 	ldp	x23, x24, [sp, #48]
   87194:	a9446bf9 	ldp	x25, x26, [sp, #64]
   87198:	17fffe82 	b	86ba0 <CUSBDevice::Initialize()+0xb0>
   8719c:	d503201f 	nop

00000000000871a0 <CUSBDevice::Configure()>:
   871a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   871a4:	910003fd 	mov	x29, sp
   871a8:	a90153f3 	stp	x19, x20, [sp, #16]
   871ac:	aa0003f4 	mov	x20, x0
   871b0:	f9400400 	ldr	x0, [x0, #8]
   871b4:	f90013f5 	str	x21, [sp, #32]
   871b8:	b4000620 	cbz	x0, 8727c <CUSBDevice::Configure()+0xdc>
   871bc:	f9401a81 	ldr	x1, [x20, #48]
   871c0:	b40006a1 	cbz	x1, 87294 <CUSBDevice::Configure()+0xf4>
   871c4:	f9402a82 	ldr	x2, [x20, #80]
   871c8:	52800015 	mov	w21, #0x0                   	// #0
   871cc:	b4000322 	cbz	x2, 87230 <CUSBDevice::Configure()+0x90>
   871d0:	39401442 	ldrb	w2, [x2, #5]
   871d4:	94000fcb 	bl	8b100 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   871d8:	72001c15 	ands	w21, w0, #0xff
   871dc:	54000380 	b.eq	8724c <CUSBDevice::Configure()+0xac>  // b.none
   871e0:	91018293 	add	x19, x20, #0x60
   871e4:	52800015 	mov	w21, #0x0                   	// #0
   871e8:	9102c294 	add	x20, x20, #0xb0
   871ec:	d503201f 	nop
   871f0:	f9400260 	ldr	x0, [x19]
   871f4:	b4000180 	cbz	x0, 87224 <CUSBDevice::Configure()+0x84>
   871f8:	f9400001 	ldr	x1, [x0]
   871fc:	f9401c21 	ldr	x1, [x1, #56]
   87200:	d63f0020 	blr	x1
   87204:	72001c00 	ands	w0, w0, #0xff
   87208:	540001e1 	b.ne	87244 <CUSBDevice::Configure()+0xa4>  // b.any
   8720c:	f9400260 	ldr	x0, [x19]
   87210:	b4000080 	cbz	x0, 87220 <CUSBDevice::Configure()+0x80>
   87214:	f9400001 	ldr	x1, [x0]
   87218:	f9400421 	ldr	x1, [x1, #8]
   8721c:	d63f0020 	blr	x1
   87220:	f900027f 	str	xzr, [x19]
   87224:	91002273 	add	x19, x19, #0x8
   87228:	eb14027f 	cmp	x19, x20
   8722c:	54fffe21 	b.ne	871f0 <CUSBDevice::Configure()+0x50>  // b.any
   87230:	2a1503e0 	mov	w0, w21
   87234:	a94153f3 	ldp	x19, x20, [sp, #16]
   87238:	f94013f5 	ldr	x21, [sp, #32]
   8723c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87240:	d65f03c0 	ret
   87244:	2a0003f5 	mov	w21, w0
   87248:	17fffff7 	b	87224 <CUSBDevice::Configure()+0x84>
   8724c:	f9402a83 	ldr	x3, [x20, #80]
   87250:	d0000122 	adrp	x2, ad000 <From+0x4c0>
   87254:	aa1403e0 	mov	x0, x20
   87258:	913a8042 	add	x2, x2, #0xea0
   8725c:	52800021 	mov	w1, #0x1                   	// #1
   87260:	39401463 	ldrb	w3, [x3, #5]
   87264:	97fffdcb 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   87268:	2a1503e0 	mov	w0, w21
   8726c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87270:	f94013f5 	ldr	x21, [sp, #32]
   87274:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87278:	d65f03c0 	ret
   8727c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87280:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87284:	912ba021 	add	x1, x1, #0xae8
   87288:	912be000 	add	x0, x0, #0xaf8
   8728c:	52803722 	mov	w2, #0x1b9                 	// #441
   87290:	940054fc 	bl	9c680 <assertion_failed>
   87294:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87298:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   8729c:	912ba021 	add	x1, x1, #0xae8
   872a0:	912f0000 	add	x0, x0, #0xbc0
   872a4:	52803742 	mov	w2, #0x1ba                 	// #442
   872a8:	940054f6 	bl	9c680 <assertion_failed>
   872ac:	00000000 	.inst	0x00000000 ; undefined

00000000000872b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
   872b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   872b4:	910003fd 	mov	x29, sp
   872b8:	a90153f3 	stp	x19, x20, [sp, #16]
   872bc:	b4000680 	cbz	x0, 8738c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xdc>
   872c0:	aa0103f3 	mov	x19, x1
   872c4:	b4000721 	cbz	x1, 873a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xf8>
   872c8:	aa0003f4 	mov	x20, x0
   872cc:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   872d0:	913ca021 	add	x1, x1, #0xf28
   872d4:	aa1303e0 	mov	x0, x19
   872d8:	94006b5e 	bl	a2050 <CString::Compare(char const*) const>
   872dc:	35000360 	cbnz	w0, 87348 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x98>
   872e0:	d2801900 	mov	x0, #0xc8                  	// #200
   872e4:	f90013f5 	str	x21, [sp, #32]
   872e8:	940078e6 	bl	a5680 <operator new(unsigned long)>
   872ec:	aa1403e1 	mov	x1, x20
   872f0:	aa0003f4 	mov	x20, x0
   872f4:	94001793 	bl	8d140 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
   872f8:	aa1403e0 	mov	x0, x20
   872fc:	940002c5 	bl	87e10 <CUSBFunction::GetDevice() const>
   87300:	aa0003f5 	mov	x21, x0
   87304:	aa1303e0 	mov	x0, x19
   87308:	94006ae6 	bl	a1ea0 <CString::operator char const*() const>
   8730c:	f0000122 	adrp	x2, ae000 <FromDevice+0x108>
   87310:	aa0003e3 	mov	x3, x0
   87314:	9102e042 	add	x2, x2, #0xb8
   87318:	aa1503e0 	mov	x0, x21
   8731c:	52800061 	mov	w1, #0x3                   	// #3
   87320:	97fffd9c 	bl	86990 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   87324:	f94013f5 	ldr	x21, [sp, #32]
   87328:	aa1303e0 	mov	x0, x19
   8732c:	f9400261 	ldr	x1, [x19]
   87330:	f9400421 	ldr	x1, [x1, #8]
   87334:	d63f0020 	blr	x1
   87338:	aa1403e0 	mov	x0, x20
   8733c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87340:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87344:	d65f03c0 	ret
   87348:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   8734c:	913ce021 	add	x1, x1, #0xf38
   87350:	aa1303e0 	mov	x0, x19
   87354:	94006b3f 	bl	a2050 <CString::Compare(char const*) const>
   87358:	34fffc40 	cbz	w0, 872e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30>
   8735c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87360:	913d2021 	add	x1, x1, #0xf48
   87364:	aa1303e0 	mov	x0, x19
   87368:	94006b3a 	bl	a2050 <CString::Compare(char const*) const>
   8736c:	350002c0 	cbnz	w0, 873c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x114>
   87370:	d2800a00 	mov	x0, #0x50                  	// #80
   87374:	f90013f5 	str	x21, [sp, #32]
   87378:	940078c2 	bl	a5680 <operator new(unsigned long)>
   8737c:	aa1403e1 	mov	x1, x20
   87380:	aa0003f4 	mov	x20, x0
   87384:	94000fdb 	bl	8b2f0 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
   87388:	17ffffdc 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   8738c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87390:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87394:	f90013f5 	str	x21, [sp, #32]
   87398:	913c0021 	add	x1, x1, #0xf00
   8739c:	913c6000 	add	x0, x0, #0xf18
   873a0:	52800562 	mov	w2, #0x2b                  	// #43
   873a4:	940054b7 	bl	9c680 <assertion_failed>
   873a8:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   873ac:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   873b0:	f90013f5 	str	x21, [sp, #32]
   873b4:	913c0021 	add	x1, x1, #0xf00
   873b8:	912e2000 	add	x0, x0, #0xb88
   873bc:	52800582 	mov	w2, #0x2c                  	// #44
   873c0:	940054b0 	bl	9c680 <assertion_failed>
   873c4:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   873c8:	913d6021 	add	x1, x1, #0xf58
   873cc:	aa1303e0 	mov	x0, x19
   873d0:	94006b20 	bl	a2050 <CString::Compare(char const*) const>
   873d4:	340001a0 	cbz	w0, 87408 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x158>
   873d8:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   873dc:	913da021 	add	x1, x1, #0xf68
   873e0:	aa1303e0 	mov	x0, x19
   873e4:	94006b1b 	bl	a2050 <CString::Compare(char const*) const>
   873e8:	350001e0 	cbnz	w0, 87424 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x174>
   873ec:	d2800c00 	mov	x0, #0x60                  	// #96
   873f0:	f90013f5 	str	x21, [sp, #32]
   873f4:	940078a3 	bl	a5680 <operator new(unsigned long)>
   873f8:	aa1403e1 	mov	x1, x20
   873fc:	aa0003f4 	mov	x20, x0
   87400:	94001514 	bl	8c850 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
   87404:	17ffffbd 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87408:	d2809200 	mov	x0, #0x490                 	// #1168
   8740c:	f90013f5 	str	x21, [sp, #32]
   87410:	9400789c 	bl	a5680 <operator new(unsigned long)>
   87414:	aa1403e1 	mov	x1, x20
   87418:	aa0003f4 	mov	x20, x0
   8741c:	97ffe93d 	bl	81910 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
   87420:	17ffffb6 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87424:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87428:	913de021 	add	x1, x1, #0xf78
   8742c:	aa1303e0 	mov	x0, x19
   87430:	94006b08 	bl	a2050 <CString::Compare(char const*) const>
   87434:	35000120 	cbnz	w0, 87458 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
   87438:	d2802e00 	mov	x0, #0x170                 	// #368
   8743c:	f90013f5 	str	x21, [sp, #32]
   87440:	94007890 	bl	a5680 <operator new(unsigned long)>
   87444:	aa1403e1 	mov	x1, x20
   87448:	52800022 	mov	w2, #0x1                   	// #1
   8744c:	aa0003f4 	mov	x20, x0
   87450:	9400068c 	bl	88e80 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   87454:	17ffffa9 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87458:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   8745c:	913e2021 	add	x1, x1, #0xf88
   87460:	aa1303e0 	mov	x0, x19
   87464:	94006afb 	bl	a2050 <CString::Compare(char const*) const>
   87468:	35000100 	cbnz	w0, 87488 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d8>
   8746c:	d2803400 	mov	x0, #0x1a0                 	// #416
   87470:	f90013f5 	str	x21, [sp, #32]
   87474:	94007883 	bl	a5680 <operator new(unsigned long)>
   87478:	aa1403e1 	mov	x1, x20
   8747c:	aa0003f4 	mov	x20, x0
   87480:	94000380 	bl	88280 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
   87484:	17ffff9d 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87488:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   8748c:	913e6021 	add	x1, x1, #0xf98
   87490:	aa1303e0 	mov	x0, x19
   87494:	94006aef 	bl	a2050 <CString::Compare(char const*) const>
   87498:	340000c0 	cbz	w0, 874b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
   8749c:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   874a0:	913ea021 	add	x1, x1, #0xfa8
   874a4:	aa1303e0 	mov	x0, x19
   874a8:	94006aea 	bl	a2050 <CString::Compare(char const*) const>
   874ac:	35000100 	cbnz	w0, 874cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x21c>
   874b0:	d2803000 	mov	x0, #0x180                 	// #384
   874b4:	f90013f5 	str	x21, [sp, #32]
   874b8:	94007872 	bl	a5680 <operator new(unsigned long)>
   874bc:	aa1403e1 	mov	x1, x20
   874c0:	aa0003f4 	mov	x20, x0
   874c4:	940004d7 	bl	88820 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
   874c8:	17ffff8c 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   874cc:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   874d0:	913ee021 	add	x1, x1, #0xfb8
   874d4:	aa1303e0 	mov	x0, x19
   874d8:	94006ade 	bl	a2050 <CString::Compare(char const*) const>
   874dc:	340000c0 	cbz	w0, 874f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x244>
   874e0:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   874e4:	913f2021 	add	x1, x1, #0xfc8
   874e8:	aa1303e0 	mov	x0, x19
   874ec:	94006ad9 	bl	a2050 <CString::Compare(char const*) const>
   874f0:	35000100 	cbnz	w0, 87510 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x260>
   874f4:	d2802b00 	mov	x0, #0x158                 	// #344
   874f8:	f90013f5 	str	x21, [sp, #32]
   874fc:	94007861 	bl	a5680 <operator new(unsigned long)>
   87500:	aa1403e1 	mov	x1, x20
   87504:	aa0003f4 	mov	x20, x0
   87508:	94000b06 	bl	8a120 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
   8750c:	17ffff7b 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87510:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87514:	913f6021 	add	x1, x1, #0xfd8
   87518:	aa1303e0 	mov	x0, x19
   8751c:	94006acd 	bl	a2050 <CString::Compare(char const*) const>
   87520:	340000c0 	cbz	w0, 87538 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x288>
   87524:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87528:	913fa021 	add	x1, x1, #0xfe8
   8752c:	aa1303e0 	mov	x0, x19
   87530:	94006ac8 	bl	a2050 <CString::Compare(char const*) const>
   87534:	35000100 	cbnz	w0, 87554 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a4>
   87538:	d2802c00 	mov	x0, #0x160                 	// #352
   8753c:	f90013f5 	str	x21, [sp, #32]
   87540:	94007850 	bl	a5680 <operator new(unsigned long)>
   87544:	aa1403e1 	mov	x1, x20
   87548:	aa0003f4 	mov	x20, x0
   8754c:	94000c05 	bl	8a560 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
   87550:	17ffff6a 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87554:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87558:	913fe021 	add	x1, x1, #0xff8
   8755c:	aa1303e0 	mov	x0, x19
   87560:	94006abc 	bl	a2050 <CString::Compare(char const*) const>
   87564:	34fffea0 	cbz	w0, 87538 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x288>
   87568:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8756c:	91002021 	add	x1, x1, #0x8
   87570:	aa1303e0 	mov	x0, x19
   87574:	94006ab7 	bl	a2050 <CString::Compare(char const*) const>
   87578:	34fffe00 	cbz	w0, 87538 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x288>
   8757c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87580:	91006021 	add	x1, x1, #0x18
   87584:	aa1303e0 	mov	x0, x19
   87588:	94006ab2 	bl	a2050 <CString::Compare(char const*) const>
   8758c:	35000100 	cbnz	w0, 875ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2fc>
   87590:	d2802c00 	mov	x0, #0x160                 	// #352
   87594:	f90013f5 	str	x21, [sp, #32]
   87598:	9400783a 	bl	a5680 <operator new(unsigned long)>
   8759c:	aa1403e1 	mov	x1, x20
   875a0:	aa0003f4 	mov	x20, x0
   875a4:	94000933 	bl	89a70 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
   875a8:	17ffff54 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   875ac:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   875b0:	9100a021 	add	x1, x1, #0x28
   875b4:	aa1303e0 	mov	x0, x19
   875b8:	94006aa6 	bl	a2050 <CString::Compare(char const*) const>
   875bc:	340000c0 	cbz	w0, 875d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x324>
   875c0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   875c4:	9100e021 	add	x1, x1, #0x38
   875c8:	aa1303e0 	mov	x0, x19
   875cc:	94006aa1 	bl	a2050 <CString::Compare(char const*) const>
   875d0:	35000100 	cbnz	w0, 875f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
   875d4:	d2800700 	mov	x0, #0x38                  	// #56
   875d8:	f90013f5 	str	x21, [sp, #32]
   875dc:	94007829 	bl	a5680 <operator new(unsigned long)>
   875e0:	aa1403e1 	mov	x1, x20
   875e4:	aa0003f4 	mov	x20, x0
   875e8:	940014fa 	bl	8c9d0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
   875ec:	17ffff43 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   875f0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   875f4:	91012021 	add	x1, x1, #0x48
   875f8:	aa1303e0 	mov	x0, x19
   875fc:	94006a95 	bl	a2050 <CString::Compare(char const*) const>
   87600:	35000100 	cbnz	w0, 87620 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x370>
   87604:	d2800800 	mov	x0, #0x40                  	// #64
   87608:	f90013f5 	str	x21, [sp, #32]
   8760c:	9400781d 	bl	a5680 <operator new(unsigned long)>
   87610:	aa1403e1 	mov	x1, x20
   87614:	aa0003f4 	mov	x20, x0
   87618:	94001f9a 	bl	8f480 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
   8761c:	17ffff37 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87620:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87624:	91016021 	add	x1, x1, #0x58
   87628:	aa1303e0 	mov	x0, x19
   8762c:	94006a89 	bl	a2050 <CString::Compare(char const*) const>
   87630:	35000100 	cbnz	w0, 87650 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a0>
   87634:	d2800800 	mov	x0, #0x40                  	// #64
   87638:	f90013f5 	str	x21, [sp, #32]
   8763c:	94007811 	bl	a5680 <operator new(unsigned long)>
   87640:	aa1403e1 	mov	x1, x20
   87644:	aa0003f4 	mov	x20, x0
   87648:	94001bc2 	bl	8e550 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
   8764c:	17ffff2b 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87650:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87654:	9101a021 	add	x1, x1, #0x68
   87658:	aa1303e0 	mov	x0, x19
   8765c:	94006a7d 	bl	a2050 <CString::Compare(char const*) const>
   87660:	340000c0 	cbz	w0, 87678 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c8>
   87664:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87668:	9101e021 	add	x1, x1, #0x78
   8766c:	aa1303e0 	mov	x0, x19
   87670:	94006a78 	bl	a2050 <CString::Compare(char const*) const>
   87674:	35000100 	cbnz	w0, 87694 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3e4>
   87678:	d2800a00 	mov	x0, #0x50                  	// #80
   8767c:	f90013f5 	str	x21, [sp, #32]
   87680:	94007800 	bl	a5680 <operator new(unsigned long)>
   87684:	aa1403e1 	mov	x1, x20
   87688:	aa0003f4 	mov	x20, x0
   8768c:	940021fd 	bl	8fe80 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
   87690:	17ffff1a 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87694:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87698:	91022021 	add	x1, x1, #0x88
   8769c:	aa1303e0 	mov	x0, x19
   876a0:	94006a6c 	bl	a2050 <CString::Compare(char const*) const>
   876a4:	340000c0 	cbz	w0, 876bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
   876a8:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   876ac:	91026021 	add	x1, x1, #0x98
   876b0:	aa1303e0 	mov	x0, x19
   876b4:	94006a67 	bl	a2050 <CString::Compare(char const*) const>
   876b8:	35000100 	cbnz	w0, 876d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
   876bc:	d2800a00 	mov	x0, #0x50                  	// #80
   876c0:	f90013f5 	str	x21, [sp, #32]
   876c4:	940077ef 	bl	a5680 <operator new(unsigned long)>
   876c8:	aa1403e1 	mov	x1, x20
   876cc:	aa0003f4 	mov	x20, x0
   876d0:	94001228 	bl	8bf70 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
   876d4:	17ffff09 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   876d8:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   876dc:	9102a021 	add	x1, x1, #0xa8
   876e0:	aa1303e0 	mov	x0, x19
   876e4:	94006a5b 	bl	a2050 <CString::Compare(char const*) const>
   876e8:	35000100 	cbnz	w0, 87708 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
   876ec:	d2800800 	mov	x0, #0x40                  	// #64
   876f0:	f90013f5 	str	x21, [sp, #32]
   876f4:	940077e3 	bl	a5680 <operator new(unsigned long)>
   876f8:	aa1403e1 	mov	x1, x20
   876fc:	aa0003f4 	mov	x20, x0
   87700:	940023f4 	bl	906d0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
   87704:	17fffefd 	b	872f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
   87708:	d2800014 	mov	x20, #0x0                   	// #0
   8770c:	17ffff07 	b	87328 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x78>

0000000000087710 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
   87710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87714:	910003fd 	mov	x29, sp
   87718:	a90153f3 	stp	x19, x20, [sp, #16]
   8771c:	aa0003f3 	mov	x19, x0
   87720:	aa0103e0 	mov	x0, x1
   87724:	52800101 	mov	w1, #0x8                   	// #8
   87728:	f9000260 	str	x0, [x19]
   8772c:	3900227f 	strb	wzr, [x19, #8]
   87730:	b9000e7f 	str	wzr, [x19, #12]
   87734:	3900427f 	strb	wzr, [x19, #16]
   87738:	b9001661 	str	w1, [x19, #20]
   8773c:	b40001a0 	cbz	x0, 87770 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x60>
   87740:	97fffbe0 	bl	866c0 <CUSBDevice::GetHost() const>
   87744:	aa0003f4 	mov	x20, x0
   87748:	d2800900 	mov	x0, #0x48                  	// #72
   8774c:	940077cd 	bl	a5680 <operator new(unsigned long)>
   87750:	aa1403e2 	mov	x2, x20
   87754:	aa0003f4 	mov	x20, x0
   87758:	f9400261 	ldr	x1, [x19]
   8775c:	97ffebc1 	bl	82660 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)>
   87760:	f9000e74 	str	x20, [x19, #24]
   87764:	a94153f3 	ldp	x19, x20, [sp, #16]
   87768:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8776c:	d65f03c0 	ret
   87770:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87774:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87778:	91036021 	add	x1, x1, #0xd8
   8777c:	913fc000 	add	x0, x0, #0xff0
   87780:	52800462 	mov	w2, #0x23                  	// #35
   87784:	940053bf 	bl	9c680 <assertion_failed>
   87788:	d503201f 	nop
   8778c:	d503201f 	nop

0000000000087790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
   87790:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87794:	910003fd 	mov	x29, sp
   87798:	a90153f3 	stp	x19, x20, [sp, #16]
   8779c:	aa0003f4 	mov	x20, x0
   877a0:	f90013f5 	str	x21, [sp, #32]
   877a4:	f9000001 	str	x1, [x0]
   877a8:	b4000581 	cbz	x1, 87858 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
   877ac:	aa0203f3 	mov	x19, x2
   877b0:	b4000602 	cbz	x2, 87870 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe0>
   877b4:	aa0103e0 	mov	x0, x1
   877b8:	39400041 	ldrb	w1, [x2]
   877bc:	7100183f 	cmp	w1, #0x6
   877c0:	54000649 	b.ls	87888 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf8>  // b.plast
   877c4:	39400441 	ldrb	w1, [x2, #1]
   877c8:	7100143f 	cmp	w1, #0x5
   877cc:	540006a1 	b.ne	878a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x110>  // b.any
   877d0:	39400c41 	ldrb	w1, [x2, #3]
   877d4:	12000421 	and	w1, w1, #0x3
   877d8:	7100083f 	cmp	w1, #0x2
   877dc:	54000380 	b.eq	8784c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xbc>  // b.none
   877e0:	71000c3f 	cmp	w1, #0x3
   877e4:	540006a1 	b.ne	878b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x128>  // b.any
   877e8:	52800041 	mov	w1, #0x2                   	// #2
   877ec:	b9000e81 	str	w1, [x20, #12]
   877f0:	39400a61 	ldrb	w1, [x19, #2]
   877f4:	79400a62 	ldrh	w2, [x19, #4]
   877f8:	93471c23 	sbfx	x3, x1, #7, #1
   877fc:	12000c21 	and	w1, w1, #0xf
   87800:	12000063 	and	w3, w3, #0x1
   87804:	12002842 	and	w2, w2, #0x7ff
   87808:	39002281 	strb	w1, [x20, #8]
   8780c:	39004283 	strb	w3, [x20, #16]
   87810:	b9001682 	str	w2, [x20, #20]
   87814:	97fffbab 	bl	866c0 <CUSBDevice::GetHost() const>
   87818:	aa0003f5 	mov	x21, x0
   8781c:	d2800900 	mov	x0, #0x48                  	// #72
   87820:	94007798 	bl	a5680 <operator new(unsigned long)>
   87824:	aa1503e3 	mov	x3, x21
   87828:	aa1303e2 	mov	x2, x19
   8782c:	f9400281 	ldr	x1, [x20]
   87830:	aa0003f5 	mov	x21, x0
   87834:	97ffeeb7 	bl	83310 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)>
   87838:	f9000e95 	str	x21, [x20, #24]
   8783c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87840:	f94013f5 	ldr	x21, [sp, #32]
   87844:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87848:	d65f03c0 	ret
   8784c:	52800021 	mov	w1, #0x1                   	// #1
   87850:	b9000e81 	str	w1, [x20, #12]
   87854:	17ffffe7 	b	877f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x60>
   87858:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8785c:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87860:	91036021 	add	x1, x1, #0xd8
   87864:	913fc000 	add	x0, x0, #0xff0
   87868:	52800642 	mov	w2, #0x32                  	// #50
   8786c:	94005385 	bl	9c680 <assertion_failed>
   87870:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87874:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87878:	91036021 	add	x1, x1, #0xd8
   8787c:	91036000 	add	x0, x0, #0xd8
   87880:	52800682 	mov	w2, #0x34                  	// #52
   87884:	9400537f 	bl	9c680 <assertion_failed>
   87888:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8788c:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87890:	91036021 	add	x1, x1, #0xd8
   87894:	9103a000 	add	x0, x0, #0xe8
   87898:	528006a2 	mov	w2, #0x35                  	// #53
   8789c:	94005379 	bl	9c680 <assertion_failed>
   878a0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   878a4:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   878a8:	91036021 	add	x1, x1, #0xd8
   878ac:	91042000 	add	x0, x0, #0x108
   878b0:	528006c2 	mov	w2, #0x36                  	// #54
   878b4:	94005373 	bl	9c680 <assertion_failed>
   878b8:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   878bc:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   878c0:	91036021 	add	x1, x1, #0xd8
   878c4:	912f4000 	add	x0, x0, #0xbd0
   878c8:	52800862 	mov	w2, #0x43                  	// #67
   878cc:	9400536d 	bl	9c680 <assertion_failed>

00000000000878d0 <CUSBEndpoint::~CUSBEndpoint()>:
   878d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   878d4:	910003fd 	mov	x29, sp
   878d8:	f9000bf3 	str	x19, [sp, #16]
   878dc:	f9400c13 	ldr	x19, [x0, #24]
   878e0:	b4000113 	cbz	x19, 87900 <CUSBEndpoint::~CUSBEndpoint()+0x30>
   878e4:	aa1303e0 	mov	x0, x19
   878e8:	97ffeb86 	bl	82700 <CXHCIEndpoint::~CXHCIEndpoint()>
   878ec:	aa1303e0 	mov	x0, x19
   878f0:	d2800901 	mov	x1, #0x48                  	// #72
   878f4:	f9400bf3 	ldr	x19, [sp, #16]
   878f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   878fc:	14007785 	b	a5710 <operator delete(void*, unsigned long)>
   87900:	f9400bf3 	ldr	x19, [sp, #16]
   87904:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87908:	d65f03c0 	ret
   8790c:	d503201f 	nop

0000000000087910 <CUSBEndpoint::GetDevice() const>:
   87910:	f9400000 	ldr	x0, [x0]
   87914:	b4000040 	cbz	x0, 8791c <CUSBEndpoint::GetDevice() const+0xc>
   87918:	d65f03c0 	ret
   8791c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87920:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87924:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87928:	91036021 	add	x1, x1, #0xd8
   8792c:	910003fd 	mov	x29, sp
   87930:	913fc000 	add	x0, x0, #0xff0
   87934:	528010c2 	mov	w2, #0x86                  	// #134
   87938:	94005352 	bl	9c680 <assertion_failed>
   8793c:	d503201f 	nop

0000000000087940 <CUSBEndpoint::GetNumber() const>:
   87940:	39402000 	ldrb	w0, [x0, #8]
   87944:	d65f03c0 	ret
   87948:	d503201f 	nop
   8794c:	d503201f 	nop

0000000000087950 <CUSBEndpoint::GetType() const>:
   87950:	b9400c00 	ldr	w0, [x0, #12]
   87954:	d65f03c0 	ret
   87958:	d503201f 	nop
   8795c:	d503201f 	nop

0000000000087960 <CUSBEndpoint::IsDirectionIn() const>:
   87960:	39404000 	ldrb	w0, [x0, #16]
   87964:	d65f03c0 	ret
   87968:	d503201f 	nop
   8796c:	d503201f 	nop

0000000000087970 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   87970:	aa0003e2 	mov	x2, x0
   87974:	f9400c00 	ldr	x0, [x0, #24]
   87978:	b9001441 	str	w1, [x2, #20]
   8797c:	b4000040 	cbz	x0, 87984 <CUSBEndpoint::SetMaxPacketSize(unsigned int)+0x14>
   87980:	17ffee14 	b	831d0 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)>
   87984:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87988:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   8798c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87990:	91036021 	add	x1, x1, #0xd8
   87994:	910003fd 	mov	x29, sp
   87998:	9103a000 	add	x0, x0, #0xe8
   8799c:	528013c2 	mov	w2, #0x9e                  	// #158
   879a0:	94005338 	bl	9c680 <assertion_failed>
   879a4:	d503201f 	nop
   879a8:	d503201f 	nop
   879ac:	d503201f 	nop

00000000000879b0 <CUSBEndpoint::GetMaxPacketSize() const>:
   879b0:	b9401400 	ldr	w0, [x0, #20]
   879b4:	d65f03c0 	ret
   879b8:	d503201f 	nop
   879bc:	d503201f 	nop

00000000000879c0 <CUSBEndpoint::ResetPID()>:
   879c0:	d65f03c0 	ret
   879c4:	d503201f 	nop
   879c8:	d503201f 	nop
   879cc:	d503201f 	nop

00000000000879d0 <CUSBEndpoint::GetXHCIEndpoint()>:
   879d0:	f9400c00 	ldr	x0, [x0, #24]
   879d4:	b4000040 	cbz	x0, 879dc <CUSBEndpoint::GetXHCIEndpoint()+0xc>
   879d8:	d65f03c0 	ret
   879dc:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   879e0:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   879e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   879e8:	91036021 	add	x1, x1, #0xd8
   879ec:	910003fd 	mov	x29, sp
   879f0:	9103a000 	add	x0, x0, #0xe8
   879f4:	52801ee2 	mov	w2, #0xf7                  	// #247
   879f8:	94005322 	bl	9c680 <assertion_failed>
   879fc:	00000000 	.inst	0x00000000 ; undefined

0000000000087a00 <CUSBFunction::Initialize()>:
   87a00:	52800020 	mov	w0, #0x1                   	// #1
   87a04:	d65f03c0 	ret
   87a08:	d503201f 	nop
   87a0c:	d503201f 	nop

0000000000087a10 <CUSBFunction::ReScanDevices()>:
   87a10:	52800000 	mov	w0, #0x0                   	// #0
   87a14:	d65f03c0 	ret
   87a18:	d503201f 	nop
   87a1c:	d503201f 	nop

0000000000087a20 <CUSBFunction::~CUSBFunction()>:
   87a20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87a24:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87a28:	9106e021 	add	x1, x1, #0x1b8
   87a2c:	910003fd 	mov	x29, sp
   87a30:	a90153f3 	stp	x19, x20, [sp, #16]
   87a34:	aa0003f3 	mov	x19, x0
   87a38:	f9000001 	str	x1, [x0]
   87a3c:	f9000c1f 	str	xzr, [x0, #24]
   87a40:	f9400814 	ldr	x20, [x0, #16]
   87a44:	b40000d4 	cbz	x20, 87a5c <CUSBFunction::~CUSBFunction()+0x3c>
   87a48:	aa1403e0 	mov	x0, x20
   87a4c:	94002479 	bl	90c30 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   87a50:	aa1403e0 	mov	x0, x20
   87a54:	d2800601 	mov	x1, #0x30                  	// #48
   87a58:	9400772e 	bl	a5710 <operator delete(void*, unsigned long)>
   87a5c:	aa1303e0 	mov	x0, x19
   87a60:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   87a64:	a94153f3 	ldp	x19, x20, [sp, #16]
   87a68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87a6c:	140054d1 	b	9cdb0 <CDevice::~CDevice()>

0000000000087a70 <CUSBFunction::~CUSBFunction()>:
   87a70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87a74:	910003fd 	mov	x29, sp
   87a78:	f9000bf3 	str	x19, [sp, #16]
   87a7c:	aa0003f3 	mov	x19, x0
   87a80:	97ffffe8 	bl	87a20 <CUSBFunction::~CUSBFunction()>
   87a84:	aa1303e0 	mov	x0, x19
   87a88:	d2800401 	mov	x1, #0x20                  	// #32
   87a8c:	f9400bf3 	ldr	x19, [sp, #16]
   87a90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87a94:	1400771f 	b	a5710 <operator delete(void*, unsigned long)>
   87a98:	d503201f 	nop
   87a9c:	d503201f 	nop

0000000000087aa0 <CUSBFunction::RemoveDevice()>:
   87aa0:	f9400400 	ldr	x0, [x0, #8]
   87aa4:	b4000040 	cbz	x0, 87aac <CUSBFunction::RemoveDevice()+0xc>
   87aa8:	17fffa2e 	b	86360 <CUSBDevice::RemoveDevice()>
   87aac:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87ab0:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87ab4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87ab8:	91040021 	add	x1, x1, #0x100
   87abc:	910003fd 	mov	x29, sp
   87ac0:	913fc000 	add	x0, x0, #0xff0
   87ac4:	52800cc2 	mov	w2, #0x66                  	// #102
   87ac8:	940052ee 	bl	9c680 <assertion_failed>
   87acc:	d503201f 	nop

0000000000087ad0 <CUSBFunction::Configure()>:
   87ad0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87ad4:	910003fd 	mov	x29, sp
   87ad8:	a90153f3 	stp	x19, x20, [sp, #16]
   87adc:	aa0003f3 	mov	x19, x0
   87ae0:	f9400c00 	ldr	x0, [x0, #24]
   87ae4:	b4000460 	cbz	x0, 87b70 <CUSBFunction::Configure()+0xa0>
   87ae8:	39400c00 	ldrb	w0, [x0, #3]
   87aec:	34000280 	cbz	w0, 87b3c <CUSBFunction::Configure()+0x6c>
   87af0:	f9400660 	ldr	x0, [x19, #8]
   87af4:	b40004a0 	cbz	x0, 87b88 <CUSBFunction::Configure()+0xb8>
   87af8:	97fffaf2 	bl	866c0 <CUSBDevice::GetHost() const>
   87afc:	f9400661 	ldr	x1, [x19, #8]
   87b00:	aa0003f4 	mov	x20, x0
   87b04:	b40004e1 	cbz	x1, 87ba0 <CUSBFunction::Configure()+0xd0>
   87b08:	aa0103e0 	mov	x0, x1
   87b0c:	97fffae1 	bl	86690 <CUSBDevice::GetEndpoint0() const>
   87b10:	f9400e64 	ldr	x4, [x19, #24]
   87b14:	aa0003e1 	mov	x1, x0
   87b18:	52800007 	mov	w7, #0x0                   	// #0
   87b1c:	aa1403e0 	mov	x0, x20
   87b20:	d2800006 	mov	x6, #0x0                   	// #0
   87b24:	52800163 	mov	w3, #0xb                   	// #11
   87b28:	52800022 	mov	w2, #0x1                   	// #1
   87b2c:	39400885 	ldrb	w5, [x4, #2]
   87b30:	39400c84 	ldrb	w4, [x4, #3]
   87b34:	94000d1b 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   87b38:	37f800a0 	tbnz	w0, #31, 87b4c <CUSBFunction::Configure()+0x7c>
   87b3c:	52800020 	mov	w0, #0x1                   	// #1
   87b40:	a94153f3 	ldp	x19, x20, [sp, #16]
   87b44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87b48:	d65f03c0 	ret
   87b4c:	94005c61 	bl	9ecd0 <CLogger::Get()>
   87b50:	f0000123 	adrp	x3, ae000 <FromDevice+0x108>
   87b54:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87b58:	9104a063 	add	x3, x3, #0x128
   87b5c:	91082021 	add	x1, x1, #0x208
   87b60:	52800022 	mov	w2, #0x1                   	// #1
   87b64:	94005b97 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   87b68:	52800000 	mov	w0, #0x0                   	// #0
   87b6c:	17fffff5 	b	87b40 <CUSBFunction::Configure()+0x70>
   87b70:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87b74:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87b78:	91040021 	add	x1, x1, #0x100
   87b7c:	91044000 	add	x0, x0, #0x110
   87b80:	528009c2 	mov	w2, #0x4e                  	// #78
   87b84:	940052bf 	bl	9c680 <assertion_failed>
   87b88:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87b8c:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87b90:	91040021 	add	x1, x1, #0x100
   87b94:	913fc000 	add	x0, x0, #0xff0
   87b98:	52801202 	mov	w2, #0x90                  	// #144
   87b9c:	940052b9 	bl	9c680 <assertion_failed>
   87ba0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87ba4:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87ba8:	91040021 	add	x1, x1, #0x100
   87bac:	913fc000 	add	x0, x0, #0xff0
   87bb0:	52801142 	mov	w2, #0x8a                  	// #138
   87bb4:	940052b3 	bl	9c680 <assertion_failed>
   87bb8:	d503201f 	nop
   87bbc:	d503201f 	nop

0000000000087bc0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   87bc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87bc4:	910003fd 	mov	x29, sp
   87bc8:	a90153f3 	stp	x19, x20, [sp, #16]
   87bcc:	aa0003f3 	mov	x19, x0
   87bd0:	aa0103f4 	mov	x20, x1
   87bd4:	f90013f5 	str	x21, [sp, #32]
   87bd8:	aa0203f5 	mov	x21, x2
   87bdc:	94005489 	bl	9ce00 <CDevice::CDevice()>
   87be0:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87be4:	9106e000 	add	x0, x0, #0x1b8
   87be8:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   87bec:	a9005260 	stp	x0, x20, [x19]
   87bf0:	b4000214 	cbz	x20, 87c30 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   87bf4:	b40002b5 	cbz	x21, 87c48 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x88>
   87bf8:	d2800600 	mov	x0, #0x30                  	// #48
   87bfc:	940076a1 	bl	a5680 <operator new(unsigned long)>
   87c00:	aa0003f4 	mov	x20, x0
   87c04:	aa1503e1 	mov	x1, x21
   87c08:	940023f2 	bl	90bd0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   87c0c:	aa1403e0 	mov	x0, x20
   87c10:	f9000a74 	str	x20, [x19, #16]
   87c14:	9400243f 	bl	90d10 <CUSBConfigurationParser::GetCurrentDescriptor()>
   87c18:	f9000e60 	str	x0, [x19, #24]
   87c1c:	b4000220 	cbz	x0, 87c60 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
   87c20:	a94153f3 	ldp	x19, x20, [sp, #16]
   87c24:	f94013f5 	ldr	x21, [sp, #32]
   87c28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87c2c:	d65f03c0 	ret
   87c30:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87c34:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87c38:	91040021 	add	x1, x1, #0x100
   87c3c:	913fc000 	add	x0, x0, #0xff0
   87c40:	52800442 	mov	w2, #0x22                  	// #34
   87c44:	9400528f 	bl	9c680 <assertion_failed>
   87c48:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87c4c:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87c50:	91040021 	add	x1, x1, #0x100
   87c54:	91050000 	add	x0, x0, #0x140
   87c58:	52800482 	mov	w2, #0x24                  	// #36
   87c5c:	94005289 	bl	9c680 <assertion_failed>
   87c60:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87c64:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87c68:	91040021 	add	x1, x1, #0x100
   87c6c:	91044000 	add	x0, x0, #0x110
   87c70:	52800522 	mov	w2, #0x29                  	// #41
   87c74:	94005283 	bl	9c680 <assertion_failed>
   87c78:	d503201f 	nop
   87c7c:	d503201f 	nop

0000000000087c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   87c80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87c84:	910003fd 	mov	x29, sp
   87c88:	a90153f3 	stp	x19, x20, [sp, #16]
   87c8c:	aa0003f3 	mov	x19, x0
   87c90:	aa0103f4 	mov	x20, x1
   87c94:	9400545b 	bl	9ce00 <CDevice::CDevice()>
   87c98:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87c9c:	9106e000 	add	x0, x0, #0x1b8
   87ca0:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   87ca4:	a9007e60 	stp	x0, xzr, [x19]
   87ca8:	b4000274 	cbz	x20, 87cf4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x74>
   87cac:	f9400680 	ldr	x0, [x20, #8]
   87cb0:	f9000660 	str	x0, [x19, #8]
   87cb4:	b40002c0 	cbz	x0, 87d0c <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
   87cb8:	f9400a80 	ldr	x0, [x20, #16]
   87cbc:	b4000340 	cbz	x0, 87d24 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa4>
   87cc0:	d2800600 	mov	x0, #0x30                  	// #48
   87cc4:	9400766f 	bl	a5680 <operator new(unsigned long)>
   87cc8:	f9400a81 	ldr	x1, [x20, #16]
   87ccc:	aa0003f4 	mov	x20, x0
   87cd0:	940023c0 	bl	90bd0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   87cd4:	aa1403e0 	mov	x0, x20
   87cd8:	f9000a74 	str	x20, [x19, #16]
   87cdc:	9400240d 	bl	90d10 <CUSBConfigurationParser::GetCurrentDescriptor()>
   87ce0:	f9000e60 	str	x0, [x19, #24]
   87ce4:	b40002c0 	cbz	x0, 87d3c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
   87ce8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87cec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87cf0:	d65f03c0 	ret
   87cf4:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87cf8:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87cfc:	91040021 	add	x1, x1, #0x100
   87d00:	91056000 	add	x0, x0, #0x158
   87d04:	52800622 	mov	w2, #0x31                  	// #49
   87d08:	9400525e 	bl	9c680 <assertion_failed>
   87d0c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87d10:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87d14:	91040021 	add	x1, x1, #0x100
   87d18:	913fc000 	add	x0, x0, #0xff0
   87d1c:	52800662 	mov	w2, #0x33                  	// #51
   87d20:	94005258 	bl	9c680 <assertion_failed>
   87d24:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87d28:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87d2c:	91040021 	add	x1, x1, #0x100
   87d30:	9105a000 	add	x0, x0, #0x168
   87d34:	528006a2 	mov	w2, #0x35                  	// #53
   87d38:	94005252 	bl	9c680 <assertion_failed>
   87d3c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87d40:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87d44:	91040021 	add	x1, x1, #0x100
   87d48:	91044000 	add	x0, x0, #0x110
   87d4c:	52800742 	mov	w2, #0x3a                  	// #58
   87d50:	9400524c 	bl	9c680 <assertion_failed>
   87d54:	d503201f 	nop
   87d58:	d503201f 	nop
   87d5c:	d503201f 	nop

0000000000087d60 <CUSBFunction::GetInterfaceName() const>:
   87d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87d64:	910003fd 	mov	x29, sp
   87d68:	a90153f3 	stp	x19, x20, [sp, #16]
   87d6c:	aa0003f4 	mov	x20, x0
   87d70:	d2800400 	mov	x0, #0x20                  	// #32
   87d74:	94007643 	bl	a5680 <operator new(unsigned long)>
   87d78:	d0000121 	adrp	x1, ad000 <From+0x4c0>
   87d7c:	912dc021 	add	x1, x1, #0xb70
   87d80:	aa0003f3 	mov	x19, x0
   87d84:	94006833 	bl	a1e50 <CString::CString(char const*)>
   87d88:	f9400e83 	ldr	x3, [x20, #24]
   87d8c:	b40000c3 	cbz	x3, 87da4 <CUSBFunction::GetInterfaceName() const+0x44>
   87d90:	39401462 	ldrb	w2, [x3, #5]
   87d94:	51000440 	sub	w0, w2, #0x1
   87d98:	12001c00 	and	w0, w0, #0xff
   87d9c:	7103f41f 	cmp	w0, #0xfd
   87da0:	540000a9 	b.ls	87db4 <CUSBFunction::GetInterfaceName() const+0x54>  // b.plast
   87da4:	aa1303e0 	mov	x0, x19
   87da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87dac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87db0:	d65f03c0 	ret
   87db4:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87db8:	39401c64 	ldrb	w4, [x3, #7]
   87dbc:	aa1303e0 	mov	x0, x19
   87dc0:	91062021 	add	x1, x1, #0x188
   87dc4:	39401863 	ldrb	w3, [x3, #6]
   87dc8:	94006d8a 	bl	a33f0 <CString::Format(char const*, ...)>
   87dcc:	aa1303e0 	mov	x0, x19
   87dd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   87dd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87dd8:	d65f03c0 	ret
   87ddc:	d503201f 	nop

0000000000087de0 <CUSBFunction::GetNumEndpoints() const>:
   87de0:	f9400c00 	ldr	x0, [x0, #24]
   87de4:	b4000060 	cbz	x0, 87df0 <CUSBFunction::GetNumEndpoints() const+0x10>
   87de8:	39401000 	ldrb	w0, [x0, #4]
   87dec:	d65f03c0 	ret
   87df0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87df4:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87df8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87dfc:	91040021 	add	x1, x1, #0x100
   87e00:	910003fd 	mov	x29, sp
   87e04:	91044000 	add	x0, x0, #0x110
   87e08:	52800fc2 	mov	w2, #0x7e                  	// #126
   87e0c:	9400521d 	bl	9c680 <assertion_failed>

0000000000087e10 <CUSBFunction::GetDevice() const>:
   87e10:	f9400400 	ldr	x0, [x0, #8]
   87e14:	b4000040 	cbz	x0, 87e1c <CUSBFunction::GetDevice() const+0xc>
   87e18:	d65f03c0 	ret
   87e1c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87e20:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87e24:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87e28:	91040021 	add	x1, x1, #0x100
   87e2c:	910003fd 	mov	x29, sp
   87e30:	913fc000 	add	x0, x0, #0xff0
   87e34:	52801082 	mov	w2, #0x84                  	// #132
   87e38:	94005212 	bl	9c680 <assertion_failed>
   87e3c:	d503201f 	nop

0000000000087e40 <CUSBFunction::GetEndpoint0() const>:
   87e40:	f9400400 	ldr	x0, [x0, #8]
   87e44:	b4000040 	cbz	x0, 87e4c <CUSBFunction::GetEndpoint0() const+0xc>
   87e48:	17fffa12 	b	86690 <CUSBDevice::GetEndpoint0() const>
   87e4c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87e50:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87e54:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87e58:	91040021 	add	x1, x1, #0x100
   87e5c:	910003fd 	mov	x29, sp
   87e60:	913fc000 	add	x0, x0, #0xff0
   87e64:	52801142 	mov	w2, #0x8a                  	// #138
   87e68:	94005206 	bl	9c680 <assertion_failed>
   87e6c:	d503201f 	nop

0000000000087e70 <CUSBFunction::GetHost() const>:
   87e70:	f9400400 	ldr	x0, [x0, #8]
   87e74:	b4000040 	cbz	x0, 87e7c <CUSBFunction::GetHost() const+0xc>
   87e78:	17fffa12 	b	866c0 <CUSBDevice::GetHost() const>
   87e7c:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87e80:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87e84:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87e88:	91040021 	add	x1, x1, #0x100
   87e8c:	910003fd 	mov	x29, sp
   87e90:	913fc000 	add	x0, x0, #0xff0
   87e94:	52801202 	mov	w2, #0x90                  	// #144
   87e98:	940051fa 	bl	9c680 <assertion_failed>
   87e9c:	d503201f 	nop

0000000000087ea0 <CUSBFunction::GetDescriptor(unsigned char)>:
   87ea0:	f9400800 	ldr	x0, [x0, #16]
   87ea4:	b4000060 	cbz	x0, 87eb0 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   87ea8:	12001c21 	and	w1, w1, #0xff
   87eac:	14002369 	b	90c50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   87eb0:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87eb4:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87eb8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87ebc:	91040021 	add	x1, x1, #0x100
   87ec0:	910003fd 	mov	x29, sp
   87ec4:	912fc000 	add	x0, x0, #0xbf0
   87ec8:	528012c2 	mov	w2, #0x96                  	// #150
   87ecc:	940051ed 	bl	9c680 <assertion_failed>

0000000000087ed0 <CUSBFunction::ConfigurationError(char const*) const>:
   87ed0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87ed4:	910003fd 	mov	x29, sp
   87ed8:	f9400800 	ldr	x0, [x0, #16]
   87edc:	b4000080 	cbz	x0, 87eec <CUSBFunction::ConfigurationError(char const*) const+0x1c>
   87ee0:	b4000121 	cbz	x1, 87f04 <CUSBFunction::ConfigurationError(char const*) const+0x34>
   87ee4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87ee8:	1400239e 	b	90d60 <CUSBConfigurationParser::Error(char const*) const>
   87eec:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87ef0:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87ef4:	91040021 	add	x1, x1, #0x100
   87ef8:	912fc000 	add	x0, x0, #0xbf0
   87efc:	52801382 	mov	w2, #0x9c                  	// #156
   87f00:	940051e0 	bl	9c680 <assertion_failed>
   87f04:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87f08:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87f0c:	91040021 	add	x1, x1, #0x100
   87f10:	91066000 	add	x0, x0, #0x198
   87f14:	528013a2 	mov	w2, #0x9d                  	// #157
   87f18:	940051da 	bl	9c680 <assertion_failed>
   87f1c:	d503201f 	nop

0000000000087f20 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   87f20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87f24:	910003fd 	mov	x29, sp
   87f28:	a90153f3 	stp	x19, x20, [sp, #16]
   87f2c:	aa0003f3 	mov	x19, x0
   87f30:	a9025bf5 	stp	x21, x22, [sp, #32]
   87f34:	f9400c00 	ldr	x0, [x0, #24]
   87f38:	b40003e0 	cbz	x0, 87fb4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
   87f3c:	12001c34 	and	w20, w1, #0xff
   87f40:	f9400a61 	ldr	x1, [x19, #16]
   87f44:	b4000441 	cbz	x1, 87fcc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   87f48:	f9400661 	ldr	x1, [x19, #8]
   87f4c:	12001c55 	and	w21, w2, #0xff
   87f50:	12001c76 	and	w22, w3, #0xff
   87f54:	b5000141 	cbnz	x1, 87f7c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x5c>
   87f58:	14000023 	b	87fe4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
   87f5c:	52800081 	mov	w1, #0x4                   	// #4
   87f60:	f9400660 	ldr	x0, [x19, #8]
   87f64:	97fff9fb 	bl	86750 <CUSBDevice::GetDescriptor(unsigned char)>
   87f68:	52800081 	mov	w1, #0x4                   	// #4
   87f6c:	f9400a60 	ldr	x0, [x19, #16]
   87f70:	94002338 	bl	90c50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   87f74:	f9000e60 	str	x0, [x19, #24]
   87f78:	b4000160 	cbz	x0, 87fa4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x84>
   87f7c:	39401401 	ldrb	w1, [x0, #5]
   87f80:	6b14003f 	cmp	w1, w20
   87f84:	54fffec1 	b.ne	87f5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   87f88:	39401801 	ldrb	w1, [x0, #6]
   87f8c:	6b15003f 	cmp	w1, w21
   87f90:	54fffe61 	b.ne	87f5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   87f94:	39401c00 	ldrb	w0, [x0, #7]
   87f98:	6b16001f 	cmp	w0, w22
   87f9c:	54fffe01 	b.ne	87f5c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   87fa0:	52800020 	mov	w0, #0x1                   	// #1
   87fa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   87fa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87fac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87fb0:	d65f03c0 	ret
   87fb4:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87fb8:	f0000120 	adrp	x0, ae000 <FromDevice+0x108>
   87fbc:	91040021 	add	x1, x1, #0x100
   87fc0:	91044000 	add	x0, x0, #0x110
   87fc4:	52801462 	mov	w2, #0xa3                  	// #163
   87fc8:	940051ae 	bl	9c680 <assertion_failed>
   87fcc:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87fd0:	d0000120 	adrp	x0, ad000 <From+0x4c0>
   87fd4:	91040021 	add	x1, x1, #0x100
   87fd8:	912fc000 	add	x0, x0, #0xbf0
   87fdc:	52801482 	mov	w2, #0xa4                  	// #164
   87fe0:	940051a8 	bl	9c680 <assertion_failed>
   87fe4:	f0000121 	adrp	x1, ae000 <FromDevice+0x108>
   87fe8:	b0000120 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   87fec:	91040021 	add	x1, x1, #0x100
   87ff0:	913fc000 	add	x0, x0, #0xff0
   87ff4:	528014a2 	mov	w2, #0xa5                  	// #165
   87ff8:	940051a2 	bl	9c680 <assertion_failed>
   87ffc:	d503201f 	nop

0000000000088000 <CUSBFunction::GetInterfaceNumber() const>:
   88000:	f9400c00 	ldr	x0, [x0, #24]
   88004:	b4000060 	cbz	x0, 88010 <CUSBFunction::GetInterfaceNumber() const+0x10>
   88008:	39400800 	ldrb	w0, [x0, #2]
   8800c:	d65f03c0 	ret
   88010:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88014:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   88018:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8801c:	91040021 	add	x1, x1, #0x100
   88020:	910003fd 	mov	x29, sp
   88024:	91044000 	add	x0, x0, #0x110
   88028:	52801762 	mov	w2, #0xbb                  	// #187
   8802c:	94005195 	bl	9c680 <assertion_failed>

0000000000088030 <CUSBFunction::GetInterfaceClass() const>:
   88030:	f9400c00 	ldr	x0, [x0, #24]
   88034:	b4000060 	cbz	x0, 88040 <CUSBFunction::GetInterfaceClass() const+0x10>
   88038:	39401400 	ldrb	w0, [x0, #5]
   8803c:	d65f03c0 	ret
   88040:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88044:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   88048:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8804c:	91040021 	add	x1, x1, #0x100
   88050:	910003fd 	mov	x29, sp
   88054:	91044000 	add	x0, x0, #0x110
   88058:	52801822 	mov	w2, #0xc1                  	// #193
   8805c:	94005189 	bl	9c680 <assertion_failed>

0000000000088060 <CUSBFunction::GetInterfaceSubClass() const>:
   88060:	f9400c00 	ldr	x0, [x0, #24]
   88064:	b4000060 	cbz	x0, 88070 <CUSBFunction::GetInterfaceSubClass() const+0x10>
   88068:	39401800 	ldrb	w0, [x0, #6]
   8806c:	d65f03c0 	ret
   88070:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88074:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   88078:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8807c:	91040021 	add	x1, x1, #0x100
   88080:	910003fd 	mov	x29, sp
   88084:	91044000 	add	x0, x0, #0x110
   88088:	528018e2 	mov	w2, #0xc7                  	// #199
   8808c:	9400517d 	bl	9c680 <assertion_failed>

0000000000088090 <CUSBFunction::GetInterfaceProtocol() const>:
   88090:	f9400c00 	ldr	x0, [x0, #24]
   88094:	b4000060 	cbz	x0, 880a0 <CUSBFunction::GetInterfaceProtocol() const+0x10>
   88098:	39401c00 	ldrb	w0, [x0, #7]
   8809c:	d65f03c0 	ret
   880a0:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   880a4:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   880a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   880ac:	91040021 	add	x1, x1, #0x100
   880b0:	910003fd 	mov	x29, sp
   880b4:	91044000 	add	x0, x0, #0x110
   880b8:	528019a2 	mov	w2, #0xcd                  	// #205
   880bc:	94005171 	bl	9c680 <assertion_failed>

00000000000880c0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   880c0:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   880c4:	910aa021 	add	x1, x1, #0x2a8
   880c8:	f9000001 	str	x1, [x0]
   880cc:	14000351 	b	88e10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>

00000000000880d0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   880d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   880d4:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   880d8:	910aa021 	add	x1, x1, #0x2a8
   880dc:	910003fd 	mov	x29, sp
   880e0:	f9000bf3 	str	x19, [sp, #16]
   880e4:	aa0003f3 	mov	x19, x0
   880e8:	f9000001 	str	x1, [x0]
   880ec:	94000349 	bl	88e10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   880f0:	aa1303e0 	mov	x0, x19
   880f4:	d2803401 	mov	x1, #0x1a0                 	// #416
   880f8:	f9400bf3 	ldr	x19, [sp, #16]
   880fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88100:	14007584 	b	a5710 <operator delete(void*, unsigned long)>
   88104:	d503201f 	nop
   88108:	d503201f 	nop
   8810c:	d503201f 	nop

0000000000088110 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   88110:	93407c22 	sxtw	x2, w1
   88114:	f100285f 	cmp	x2, #0xa
   88118:	54000069 	b.ls	88124 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x14>  // b.plast
   8811c:	52800000 	mov	w0, #0x0                   	// #0
   88120:	d65f03c0 	ret
   88124:	d0000122 	adrp	x2, ae000 <FromDevice+0x108>
   88128:	910ce042 	add	x2, x2, #0x338
   8812c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88130:	910003fd 	mov	x29, sp
   88134:	3861c841 	ldrb	w1, [x2, w1, sxtw]
   88138:	a90153f3 	stp	x19, x20, [sp, #16]
   8813c:	aa0003f3 	mov	x19, x0
   88140:	f90013f5 	str	x21, [sp, #32]
   88144:	531f1821 	ubfiz	w1, w1, #1, #7
   88148:	3905d401 	strb	w1, [x0, #373]
   8814c:	97ffff49 	bl	87e70 <CUSBFunction::GetHost() const>
   88150:	aa0003f4 	mov	x20, x0
   88154:	aa1303e0 	mov	x0, x19
   88158:	97ffff3a 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8815c:	aa0003f5 	mov	x21, x0
   88160:	aa1303e0 	mov	x0, x19
   88164:	97ffffa7 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   88168:	12001c05 	and	w5, w0, #0xff
   8816c:	aa1503e1 	mov	x1, x21
   88170:	9105b266 	add	x6, x19, #0x16c
   88174:	aa1403e0 	mov	x0, x20
   88178:	52800607 	mov	w7, #0x30                  	// #48
   8817c:	52804024 	mov	w4, #0x201                 	// #513
   88180:	52800123 	mov	w3, #0x9                   	// #9
   88184:	52800422 	mov	w2, #0x21                  	// #33
   88188:	94000b86 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8818c:	2a2003e0 	mvn	w0, w0
   88190:	a94153f3 	ldp	x19, x20, [sp, #16]
   88194:	531f7c00 	lsr	w0, w0, #31
   88198:	f94013f5 	ldr	x21, [sp, #32]
   8819c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   881a0:	d65f03c0 	ret
   881a4:	d503201f 	nop
   881a8:	d503201f 	nop
   881ac:	d503201f 	nop

00000000000881b0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   881b0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   881b4:	910003fd 	mov	x29, sp
   881b8:	d2800602 	mov	x2, #0x30                  	// #48
   881bc:	a90153f3 	stp	x19, x20, [sp, #16]
   881c0:	aa0003f3 	mov	x19, x0
   881c4:	2a0103f4 	mov	w20, w1
   881c8:	910083e0 	add	x0, sp, #0x20
   881cc:	9105b261 	add	x1, x19, #0x16c
   881d0:	940072ca 	bl	a4cf8 <memcpy>
   881d4:	7100069f 	cmp	w20, #0x1
   881d8:	54000140 	b.eq	88200 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>  // b.none
   881dc:	71000a9f 	cmp	w20, #0x2
   881e0:	54000480 	b.eq	88270 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc0>  // b.none
   881e4:	34000434 	cbz	w20, 88268 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb8>
   881e8:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   881ec:	b0000120 	adrp	x0, ad000 <From+0x4c0>
   881f0:	91084021 	add	x1, x1, #0x210
   881f4:	912f4000 	add	x0, x0, #0xbd0
   881f8:	528021c2 	mov	w2, #0x10e                 	// #270
   881fc:	94005121 	bl	9c680 <assertion_failed>
   88200:	529fffc0 	mov	w0, #0xfffe                	// #65534
   88204:	72a01fc0 	movk	w0, #0xfe, lsl #16
   88208:	b80213e0 	stur	w0, [sp, #33]
   8820c:	aa1303e0 	mov	x0, x19
   88210:	97ffff18 	bl	87e70 <CUSBFunction::GetHost() const>
   88214:	aa0003f4 	mov	x20, x0
   88218:	aa1303e0 	mov	x0, x19
   8821c:	97ffff09 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   88220:	aa0003e1 	mov	x1, x0
   88224:	aa1303e0 	mov	x0, x19
   88228:	aa0103f3 	mov	x19, x1
   8822c:	97ffff75 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   88230:	12001c05 	and	w5, w0, #0xff
   88234:	aa1303e1 	mov	x1, x19
   88238:	910083e6 	add	x6, sp, #0x20
   8823c:	aa1403e0 	mov	x0, x20
   88240:	52800607 	mov	w7, #0x30                  	// #48
   88244:	52804024 	mov	w4, #0x201                 	// #513
   88248:	52800123 	mov	w3, #0x9                   	// #9
   8824c:	52800422 	mov	w2, #0x21                  	// #33
   88250:	94000b54 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   88254:	2a2003e0 	mvn	w0, w0
   88258:	a94153f3 	ldp	x19, x20, [sp, #16]
   8825c:	531f7c00 	lsr	w0, w0, #31
   88260:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88264:	d65f03c0 	ret
   88268:	b80213ff 	stur	wzr, [sp, #33]
   8826c:	17ffffe8 	b	8820c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x5c>
   88270:	52801fc0 	mov	w0, #0xfe                  	// #254
   88274:	72bfffc0 	movk	w0, #0xfffe, lsl #16
   88278:	b80213e0 	stur	w0, [sp, #33]
   8827c:	17ffffe4 	b	8820c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x5c>

0000000000088280 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   88280:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88284:	52800002 	mov	w2, #0x0                   	// #0
   88288:	910003fd 	mov	x29, sp
   8828c:	f9000bf3 	str	x19, [sp, #16]
   88290:	aa0003f3 	mov	x19, x0
   88294:	940002fb 	bl	88e80 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   88298:	d0000124 	adrp	x4, ae000 <FromDevice+0x108>
   8829c:	910aa084 	add	x4, x4, #0x2a8
   882a0:	aa1303e0 	mov	x0, x19
   882a4:	52800003 	mov	w3, #0x0                   	// #0
   882a8:	52800002 	mov	w2, #0x0                   	// #0
   882ac:	52800061 	mov	w1, #0x3                   	// #3
   882b0:	f9000264 	str	x4, [x19]
   882b4:	97ffff1b 	bl	87f20 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   882b8:	2a0003e3 	mov	w3, w0
   882bc:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   882c0:	910ce021 	add	x1, x1, #0x338
   882c4:	9105b260 	add	x0, x19, #0x16c
   882c8:	91004021 	add	x1, x1, #0x10
   882cc:	d2800602 	mov	x2, #0x30                  	// #48
   882d0:	3905aa63 	strb	w3, [x19, #362]
   882d4:	f9400bf3 	ldr	x19, [sp, #16]
   882d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   882dc:	14007287 	b	a4cf8 <memcpy>

00000000000882e0 <CUSBGamePadPS3Device::PS3Enable()>:
   882e0:	52818841 	mov	w1, #0xc42                 	// #3138
   882e4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   882e8:	910003fd 	mov	x29, sp
   882ec:	a90153f3 	stp	x19, x20, [sp, #16]
   882f0:	aa0003f3 	mov	x19, x0
   882f4:	f90013f5 	str	x21, [sp, #32]
   882f8:	b9003be1 	str	w1, [sp, #56]
   882fc:	97fffedd 	bl	87e70 <CUSBFunction::GetHost() const>
   88300:	aa0003f4 	mov	x20, x0
   88304:	aa1303e0 	mov	x0, x19
   88308:	97fffece 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8830c:	aa0003f5 	mov	x21, x0
   88310:	aa1303e0 	mov	x0, x19
   88314:	97ffff3b 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   88318:	12001c05 	and	w5, w0, #0xff
   8831c:	aa1503e1 	mov	x1, x21
   88320:	aa1403e0 	mov	x0, x20
   88324:	52800087 	mov	w7, #0x4                   	// #4
   88328:	9100e3e6 	add	x6, sp, #0x38
   8832c:	52807e84 	mov	w4, #0x3f4                 	// #1012
   88330:	52800123 	mov	w3, #0x9                   	// #9
   88334:	52800422 	mov	w2, #0x21                  	// #33
   88338:	94000b1a 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8833c:	37f80160 	tbnz	w0, #31, 88368 <CUSBGamePadPS3Device::PS3Enable()+0x88>
   88340:	f9400262 	ldr	x2, [x19]
   88344:	aa1303e0 	mov	x0, x19
   88348:	b9415661 	ldr	w1, [x19, #340]
   8834c:	f9403842 	ldr	x2, [x2, #112]
   88350:	d63f0040 	blr	x2
   88354:	12001c00 	and	w0, w0, #0xff
   88358:	a94153f3 	ldp	x19, x20, [sp, #16]
   8835c:	f94013f5 	ldr	x21, [sp, #32]
   88360:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88364:	d65f03c0 	ret
   88368:	52800000 	mov	w0, #0x0                   	// #0
   8836c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88370:	f94013f5 	ldr	x21, [sp, #32]
   88374:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88378:	d65f03c0 	ret
   8837c:	d503201f 	nop

0000000000088380 <CUSBGamePadPS3Device::Configure()>:
   88380:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88384:	910003fd 	mov	x29, sp
   88388:	a90153f3 	stp	x19, x20, [sp, #16]
   8838c:	3945a814 	ldrb	w20, [x0, #362]
   88390:	340003f4 	cbz	w20, 8840c <CUSBGamePadPS3Device::Configure()+0x8c>
   88394:	aa0003f3 	mov	x19, x0
   88398:	94000442 	bl	894a0 <CUSBGamePadStandardDevice::Configure()>
   8839c:	72001c14 	ands	w20, w0, #0xff
   883a0:	54000620 	b.eq	88464 <CUSBGamePadPS3Device::Configure()+0xe4>  // b.none
   883a4:	7942a260 	ldrh	w0, [x19, #336]
   883a8:	5100c400 	sub	w0, w0, #0x31
   883ac:	12003c00 	and	w0, w0, #0xffff
   883b0:	7100041f 	cmp	w0, #0x1
   883b4:	540003c8 	b.hi	8842c <CUSBGamePadPS3Device::Configure()+0xac>  // b.pmore
   883b8:	52800263 	mov	w3, #0x13                  	// #19
   883bc:	52800204 	mov	w4, #0x10                  	// #16
   883c0:	91014261 	add	x1, x19, #0x50
   883c4:	91044262 	add	x2, x19, #0x110
   883c8:	52801fe0 	mov	w0, #0xff                  	// #255
   883cc:	b9004a64 	str	w4, [x19, #72]
   883d0:	b9012a63 	str	w3, [x19, #296]
   883d4:	d503201f 	nop
   883d8:	2900003f 	stp	wzr, w0, [x1]
   883dc:	91003021 	add	x1, x1, #0xc
   883e0:	eb02003f 	cmp	x1, x2
   883e4:	54ffffa1 	b.ne	883d8 <CUSBGamePadPS3Device::Configure()+0x58>  // b.any
   883e8:	aa1303e0 	mov	x0, x19
   883ec:	b9010e7f 	str	wzr, [x19, #268]
   883f0:	97ffffbc 	bl	882e0 <CUSBGamePadPS3Device::PS3Enable()>
   883f4:	72001c14 	ands	w20, w0, #0xff
   883f8:	540004e0 	b.eq	88494 <CUSBGamePadPS3Device::Configure()+0x114>  // b.none
   883fc:	aa1303e0 	mov	x0, x19
   88400:	a94153f3 	ldp	x19, x20, [sp, #16]
   88404:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88408:	14000a4a 	b	8ad30 <CUSBHIDDevice::StartRequest()>
   8840c:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88410:	910ce021 	add	x1, x1, #0x338
   88414:	91010021 	add	x1, x1, #0x40
   88418:	97fffeae 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8841c:	2a1403e0 	mov	w0, w20
   88420:	a94153f3 	ldp	x19, x20, [sp, #16]
   88424:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88428:	d65f03c0 	ret
   8842c:	94005a29 	bl	9ecd0 <CLogger::Get()>
   88430:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88434:	910ce021 	add	x1, x1, #0x338
   88438:	7942a264 	ldrh	w4, [x19, #336]
   8843c:	d0000123 	adrp	x3, ae000 <FromDevice+0x108>
   88440:	91010021 	add	x1, x1, #0x40
   88444:	91092063 	add	x3, x3, #0x248
   88448:	52800022 	mov	w2, #0x1                   	// #1
   8844c:	9400595d 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88450:	52800014 	mov	w20, #0x0                   	// #0
   88454:	2a1403e0 	mov	w0, w20
   88458:	a94153f3 	ldp	x19, x20, [sp, #16]
   8845c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88460:	d65f03c0 	ret
   88464:	94005a1b 	bl	9ecd0 <CLogger::Get()>
   88468:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8846c:	910ce021 	add	x1, x1, #0x338
   88470:	d0000123 	adrp	x3, ae000 <FromDevice+0x108>
   88474:	91010021 	add	x1, x1, #0x40
   88478:	9108a063 	add	x3, x3, #0x228
   8847c:	52800022 	mov	w2, #0x1                   	// #1
   88480:	94005950 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88484:	2a1403e0 	mov	w0, w20
   88488:	a94153f3 	ldp	x19, x20, [sp, #16]
   8848c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88490:	d65f03c0 	ret
   88494:	94005a0f 	bl	9ecd0 <CLogger::Get()>
   88498:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8849c:	910ce021 	add	x1, x1, #0x338
   884a0:	d0000123 	adrp	x3, ae000 <FromDevice+0x108>
   884a4:	91010021 	add	x1, x1, #0x40
   884a8:	9109a063 	add	x3, x3, #0x268
   884ac:	52800022 	mov	w2, #0x1                   	// #1
   884b0:	94005944 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   884b4:	2a1403e0 	mov	w0, w20
   884b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   884bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   884c0:	d65f03c0 	ret
   884c4:	d503201f 	nop
   884c8:	d503201f 	nop
   884cc:	d503201f 	nop

00000000000884d0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   884d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   884d4:	910003fd 	mov	x29, sp
   884d8:	aa0003e4 	mov	x4, x0
   884dc:	aa0103e6 	mov	x6, x1
   884e0:	7942a002 	ldrh	w2, [x0, #336]
   884e4:	7100c45f 	cmp	w2, #0x31
   884e8:	54000140 	b.eq	88510 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>  // b.none
   884ec:	7100c85f 	cmp	w2, #0x32
   884f0:	540007e0 	b.eq	885ec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x11c>  // b.none
   884f4:	34000782 	cbz	w2, 885e4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x114>
   884f8:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   884fc:	b0000120 	adrp	x0, ad000 <From+0x4c0>
   88500:	91084021 	add	x1, x1, #0x210
   88504:	912f4000 	add	x0, x0, #0xbd0
   88508:	52801242 	mov	w2, #0x92                  	// #146
   8850c:	9400505d 	bl	9c680 <assertion_failed>
   88510:	b4000721 	cbz	x1, 885f4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x124>
   88514:	b84020c5 	ldur	w5, [x6, #2]
   88518:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   8851c:	910ce021 	add	x1, x1, #0x338
   88520:	91014021 	add	x1, x1, #0x50
   88524:	d2800003 	mov	x3, #0x0                   	// #0
   88528:	528000c2 	mov	w2, #0x6                   	// #6
   8852c:	910038c7 	add	x7, x6, #0xe
   88530:	53057ca8 	lsr	w8, w5, #5
   88534:	d35048a0 	ubfx	x0, x5, #16, #3
   88538:	121d1d08 	and	w8, w8, #0x7f8
   8853c:	53151ca5 	ubfiz	w5, w5, #11, #8
   88540:	2a080000 	orr	w0, w0, w8
   88544:	2a050000 	orr	w0, w0, w5
   88548:	b9012c80 	str	w0, [x4, #300]
   8854c:	394018c0 	ldrb	w0, [x6, #6]
   88550:	b9004c80 	str	w0, [x4, #76]
   88554:	39401cc0 	ldrb	w0, [x6, #7]
   88558:	b9005880 	str	w0, [x4, #88]
   8855c:	394020c0 	ldrb	w0, [x6, #8]
   88560:	b9006480 	str	w0, [x4, #100]
   88564:	394024c0 	ldrb	w0, [x6, #9]
   88568:	b9007080 	str	w0, [x4, #112]
   8856c:	14000002 	b	88574 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xa4>
   88570:	b8637822 	ldr	w2, [x1, x3, lsl #2]
   88574:	d37f7c45 	ubfiz	x5, x2, #1, #32
   88578:	8b2240a2 	add	x2, x5, w2, uxtw
   8857c:	8b020882 	add	x2, x4, x2, lsl #2
   88580:	386368e0 	ldrb	w0, [x7, x3]
   88584:	91000463 	add	x3, x3, #0x1
   88588:	f100307f 	cmp	x3, #0xc
   8858c:	b9004c40 	str	w0, [x2, #76]
   88590:	54ffff01 	b.ne	88570 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xa0>  // b.any
   88594:	7842f0c0 	ldurh	w0, [x6, #47]
   88598:	52803fe1 	mov	w1, #0x1ff                 	// #511
   8859c:	784290c3 	ldurh	w3, [x6, #41]
   885a0:	7842b0c2 	ldurh	w2, [x6, #43]
   885a4:	5ac00400 	rev16	w0, w0
   885a8:	7842d0c5 	ldurh	w5, [x6, #45]
   885ac:	12003c00 	and	w0, w0, #0xffff
   885b0:	51001800 	sub	w0, w0, #0x6
   885b4:	5ac00463 	rev16	w3, w3
   885b8:	4b232023 	sub	w3, w1, w3, uxth
   885bc:	b9013083 	str	w3, [x4, #304]
   885c0:	5ac00442 	rev16	w2, w2
   885c4:	4b222022 	sub	w2, w1, w2, uxth
   885c8:	b9013482 	str	w2, [x4, #308]
   885cc:	b9014480 	str	w0, [x4, #324]
   885d0:	5ac004a0 	rev16	w0, w5
   885d4:	4b202021 	sub	w1, w1, w0, uxth
   885d8:	b9013881 	str	w1, [x4, #312]
   885dc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   885e0:	d65f03c0 	ret
   885e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   885e8:	14000286 	b	89000 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   885ec:	91000426 	add	x6, x1, #0x1
   885f0:	17ffffc9 	b	88514 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   885f4:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   885f8:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   885fc:	91084021 	add	x1, x1, #0x210
   88600:	910a2000 	add	x0, x0, #0x288
   88604:	528012e2 	mov	w2, #0x97                  	// #151
   88608:	9400501e 	bl	9c680 <assertion_failed>
   8860c:	00000000 	.inst	0x00000000 ; undefined

0000000000088610 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   88610:	52800000 	mov	w0, #0x0                   	// #0
   88614:	d65f03c0 	ret
	...

0000000000088620 <CUSBGamePadPS3Device::GetProperties()>:
   88620:	52800360 	mov	w0, #0x1b                  	// #27
   88624:	d65f03c0 	ret
	...

0000000000088630 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   88630:	39400423 	ldrb	w3, [x1, #1]
   88634:	d0000122 	adrp	x2, ae000 <FromDevice+0x108>
   88638:	9112a042 	add	x2, x2, #0x4a8
   8863c:	b9004c03 	str	w3, [x0, #76]
   88640:	39400823 	ldrb	w3, [x1, #2]
   88644:	b9005803 	str	w3, [x0, #88]
   88648:	39400c23 	ldrb	w3, [x1, #3]
   8864c:	b9006403 	str	w3, [x0, #100]
   88650:	39401023 	ldrb	w3, [x1, #4]
   88654:	b9007003 	str	w3, [x0, #112]
   88658:	39402023 	ldrb	w3, [x1, #8]
   8865c:	b9007c03 	str	w3, [x0, #124]
   88660:	39402423 	ldrb	w3, [x1, #9]
   88664:	b9008803 	str	w3, [x0, #136]
   88668:	39401423 	ldrb	w3, [x1, #5]
   8866c:	12000c63 	and	w3, w3, #0xf
   88670:	b863d844 	ldr	w4, [x2, w3, sxtw #2]
   88674:	b9011003 	str	w3, [x0, #272]
   88678:	b9012c04 	str	w4, [x0, #300]
   8867c:	32190082 	orr	w2, w4, #0x80
   88680:	39401423 	ldrb	w3, [x1, #5]
   88684:	f279007f 	tst	x3, #0x80
   88688:	1a841042 	csel	w2, w2, w4, ne  // ne = any
   8868c:	b9012c02 	str	w2, [x0, #300]
   88690:	36300063 	tbz	w3, #6, 8869c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x6c>
   88694:	32180042 	orr	w2, w2, #0x100
   88698:	b9012c02 	str	w2, [x0, #300]
   8869c:	36280083 	tbz	w3, #5, 886ac <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x7c>
   886a0:	b9412c02 	ldr	w2, [x0, #300]
   886a4:	32170042 	orr	w2, w2, #0x200
   886a8:	b9012c02 	str	w2, [x0, #300]
   886ac:	36200083 	tbz	w3, #4, 886bc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x8c>
   886b0:	b9412c02 	ldr	w2, [x0, #300]
   886b4:	32160042 	orr	w2, w2, #0x400
   886b8:	b9012c02 	str	w2, [x0, #300]
   886bc:	39401822 	ldrb	w2, [x1, #6]
   886c0:	37380642 	tbnz	w2, #7, 88788 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x158>
   886c4:	36300082 	tbz	w2, #6, 886d4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xa4>
   886c8:	b9412c03 	ldr	w3, [x0, #300]
   886cc:	32140063 	orr	w3, w3, #0x1000
   886d0:	b9012c03 	str	w3, [x0, #300]
   886d4:	36280082 	tbz	w2, #5, 886e4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xb4>
   886d8:	b9412c03 	ldr	w3, [x0, #300]
   886dc:	32120063 	orr	w3, w3, #0x4000
   886e0:	b9012c03 	str	w3, [x0, #300]
   886e4:	36200082 	tbz	w2, #4, 886f4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xc4>
   886e8:	b9412c03 	ldr	w3, [x0, #300]
   886ec:	32150063 	orr	w3, w3, #0x800
   886f0:	b9012c03 	str	w3, [x0, #300]
   886f4:	36180082 	tbz	w2, #3, 88704 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xd4>
   886f8:	b9412c03 	ldr	w3, [x0, #300]
   886fc:	321c0063 	orr	w3, w3, #0x10
   88700:	b9012c03 	str	w3, [x0, #300]
   88704:	36100082 	tbz	w2, #2, 88714 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xe4>
   88708:	b9412c03 	ldr	w3, [x0, #300]
   8870c:	321d0063 	orr	w3, w3, #0x8
   88710:	b9012c03 	str	w3, [x0, #300]
   88714:	36080082 	tbz	w2, #1, 88724 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xf4>
   88718:	b9412c03 	ldr	w3, [x0, #300]
   8871c:	321a0063 	orr	w3, w3, #0x40
   88720:	b9012c03 	str	w3, [x0, #300]
   88724:	36000082 	tbz	w2, #0, 88734 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x104>
   88728:	b9412c02 	ldr	w2, [x0, #300]
   8872c:	321b0042 	orr	w2, w2, #0x20
   88730:	b9012c02 	str	w2, [x0, #300]
   88734:	39401c22 	ldrb	w2, [x1, #7]
   88738:	36080082 	tbz	w2, #1, 88748 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x118>
   8873c:	b9412c03 	ldr	w3, [x0, #300]
   88740:	320b0063 	orr	w3, w3, #0x200000
   88744:	b9012c03 	str	w3, [x0, #300]
   88748:	36000082 	tbz	w2, #0, 88758 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x128>
   8874c:	b9412c02 	ldr	w2, [x0, #300]
   88750:	32000042 	orr	w2, w2, #0x1
   88754:	b9012c02 	str	w2, [x0, #300]
   88758:	78c13023 	ldursh	w3, [x1, #19]
   8875c:	91050005 	add	x5, x0, #0x140
   88760:	78c17022 	ldursh	w2, [x1, #23]
   88764:	78c15024 	ldursh	w4, [x1, #21]
   88768:	b9013003 	str	w3, [x0, #304]
   8876c:	78c11023 	ldursh	w3, [x1, #17]
   88770:	b9013402 	str	w2, [x0, #308]
   88774:	78c0d022 	ldursh	w2, [x1, #13]
   88778:	78c0f021 	ldursh	w1, [x1, #15]
   8877c:	293f0ca4 	stp	w4, w3, [x5, #-8]
   88780:	290004a2 	stp	w2, w1, [x5]
   88784:	d65f03c0 	ret
   88788:	b9412c03 	ldr	w3, [x0, #300]
   8878c:	32130063 	orr	w3, w3, #0x2000
   88790:	b9012c03 	str	w3, [x0, #300]
   88794:	17ffffcc 	b	886c4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x94>
   88798:	d503201f 	nop
   8879c:	d503201f 	nop

00000000000887a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   887a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   887a4:	910003fd 	mov	x29, sp
   887a8:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   887ac:	91106021 	add	x1, x1, #0x418
   887b0:	f9000bf3 	str	x19, [sp, #16]
   887b4:	aa0003f3 	mov	x19, x0
   887b8:	f940b800 	ldr	x0, [x0, #368]
   887bc:	f9000261 	str	x1, [x19]
   887c0:	b4000080 	cbz	x0, 887d0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x30>
   887c4:	f9400001 	ldr	x1, [x0]
   887c8:	f9400421 	ldr	x1, [x1, #8]
   887cc:	d63f0020 	blr	x1
   887d0:	f940b660 	ldr	x0, [x19, #360]
   887d4:	b4000040 	cbz	x0, 887dc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x3c>
   887d8:	940073c2 	bl	a56e0 <operator delete[](void*)>
   887dc:	aa1303e0 	mov	x0, x19
   887e0:	f9400bf3 	ldr	x19, [sp, #16]
   887e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   887e8:	140021ee 	b	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   887ec:	d503201f 	nop

00000000000887f0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   887f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   887f4:	910003fd 	mov	x29, sp
   887f8:	f9000bf3 	str	x19, [sp, #16]
   887fc:	aa0003f3 	mov	x19, x0
   88800:	97ffffe8 	bl	887a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   88804:	aa1303e0 	mov	x0, x19
   88808:	d2803001 	mov	x1, #0x180                 	// #384
   8880c:	f9400bf3 	ldr	x19, [sp, #16]
   88810:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88814:	140073bf 	b	a5710 <operator delete(void*, unsigned long)>
   88818:	d503201f 	nop
   8881c:	d503201f 	nop

0000000000088820 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   88820:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88824:	910003fd 	mov	x29, sp
   88828:	f9000bf3 	str	x19, [sp, #16]
   8882c:	aa0003f3 	mov	x19, x0
   88830:	940021c8 	bl	90f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   88834:	d0000124 	adrp	x4, ae000 <FromDevice+0x108>
   88838:	91106084 	add	x4, x4, #0x418
   8883c:	aa1303e0 	mov	x0, x19
   88840:	52800003 	mov	w3, #0x0                   	// #0
   88844:	52800002 	mov	w2, #0x0                   	// #0
   88848:	52800061 	mov	w1, #0x3                   	// #3
   8884c:	f9000264 	str	x4, [x19]
   88850:	97fffdb4 	bl	87f20 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   88854:	39056260 	strb	w0, [x19, #344]
   88858:	a916fe7f 	stp	xzr, xzr, [x19, #360]
   8885c:	7902f27f 	strh	wzr, [x19, #376]
   88860:	f9400bf3 	ldr	x19, [sp, #16]
   88864:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88868:	d65f03c0 	ret
   8886c:	d503201f 	nop

0000000000088870 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   88870:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88874:	910003fd 	mov	x29, sp
   88878:	a90153f3 	stp	x19, x20, [sp, #16]
   8887c:	a9025bf5 	stp	x21, x22, [sp, #32]
   88880:	aa0003f6 	mov	x22, x0
   88884:	3945e000 	ldrb	w0, [x0, #376]
   88888:	a90363f7 	stp	x23, x24, [sp, #48]
   8888c:	aa0103f8 	mov	x24, x1
   88890:	f90023f9 	str	x25, [sp, #64]
   88894:	39401c21 	ldrb	w1, [x1, #7]
   88898:	370808c1 	tbnz	w1, #1, 889b0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x140>
   8889c:	350008c0 	cbnz	w0, 889b4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x144>
   888a0:	39408719 	ldrb	w25, [x24, #33]
   888a4:	52800021 	mov	w1, #0x1                   	// #1
   888a8:	52800017 	mov	w23, #0x0                   	// #0
   888ac:	2a0103f5 	mov	w21, w1
   888b0:	52800ff4 	mov	w20, #0x7f                  	// #127
   888b4:	12800fd3 	mov	w19, #0xffffff81            	// #-127
   888b8:	51000722 	sub	w2, w25, #0x1
   888bc:	71000c5f 	cmp	w2, #0x3
   888c0:	1a813339 	csel	w25, w25, w1, cc  // cc = lo, ul, last
   888c4:	14000026 	b	8895c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xec>
   888c8:	39401443 	ldrb	w3, [x2, #5]
   888cc:	39401844 	ldrb	w4, [x2, #6]
   888d0:	79400842 	ldrh	w2, [x2, #4]
   888d4:	d3441c63 	ubfx	x3, x3, #4, #4
   888d8:	3945e6c5 	ldrb	w5, [x22, #377]
   888dc:	2a041064 	orr	w4, w3, w4, lsl #4
   888e0:	d3402c41 	ubfx	x1, x2, #0, #12
   888e4:	12002c42 	and	w2, w2, #0xfff
   888e8:	340005e5 	cbz	w5, 889a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x134>
   888ec:	7942f6c5 	ldrh	w5, [x22, #378]
   888f0:	7942fac3 	ldrh	w3, [x22, #380]
   888f4:	4b050042 	sub	w2, w2, w5
   888f8:	7101fc5f 	cmp	w2, #0x7f
   888fc:	1a94d042 	csel	w2, w2, w20, le
   88900:	4b030083 	sub	w3, w4, w3
   88904:	3101fc5f 	cmn	w2, #0x7f
   88908:	1a93a042 	csel	w2, w2, w19, ge  // ge = tcont
   8890c:	7101fc7f 	cmp	w3, #0x7f
   88910:	1a94d063 	csel	w3, w3, w20, le
   88914:	3101fc7f 	cmn	w3, #0x7f
   88918:	1a93a063 	csel	w3, w3, w19, ge  // ge = tcont
   8891c:	2a030045 	orr	w5, w2, w3
   88920:	710000bf 	cmp	w5, #0x0
   88924:	1a9f07e5 	cset	w5, ne  // ne = any
   88928:	2a050000 	orr	w0, w0, w5
   8892c:	3905e6d5 	strb	w21, [x22, #377]
   88930:	7902f6c1 	strh	w1, [x22, #378]
   88934:	7902fac4 	strh	w4, [x22, #380]
   88938:	340000a0 	cbz	w0, 8894c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xdc>
   8893c:	f940bac0 	ldr	x0, [x22, #368]
   88940:	b4000260 	cbz	x0, 8898c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x11c>
   88944:	3945e2c1 	ldrb	w1, [x22, #376]
   88948:	9400255a 	bl	91eb0 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   8894c:	110006f7 	add	w23, w23, #0x1
   88950:	52800000 	mov	w0, #0x0                   	// #0
   88954:	6b17033f 	cmp	w25, w23
   88958:	540003a0 	b.eq	889cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x15c>  // b.none
   8895c:	d37d7ee2 	ubfiz	x2, x23, #3, #32
   88960:	8b374042 	add	x2, x2, w23, uxtw
   88964:	8b020302 	add	x2, x24, x2
   88968:	39408c43 	ldrb	w3, [x2, #35]
   8896c:	91008042 	add	x2, x2, #0x20
   88970:	363ffac3 	tbz	w3, #7, 888c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x58>
   88974:	3905e6df 	strb	wzr, [x22, #377]
   88978:	34fffea0 	cbz	w0, 8894c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xdc>
   8897c:	f940bac0 	ldr	x0, [x22, #368]
   88980:	52800003 	mov	w3, #0x0                   	// #0
   88984:	52800002 	mov	w2, #0x0                   	// #0
   88988:	b5fffde0 	cbnz	x0, 88944 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd4>
   8898c:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88990:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   88994:	910ee021 	add	x1, x1, #0x3b8
   88998:	910f4000 	add	x0, x0, #0x3d0
   8899c:	52802b42 	mov	w2, #0x15a                 	// #346
   889a0:	94004f38 	bl	9c680 <assertion_failed>
   889a4:	52800003 	mov	w3, #0x0                   	// #0
   889a8:	52800002 	mov	w2, #0x0                   	// #0
   889ac:	17ffffe0 	b	8892c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   889b0:	350000a0 	cbnz	w0, 889c4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x154>
   889b4:	d3410421 	ubfx	x1, x1, #1, #1
   889b8:	52800020 	mov	w0, #0x1                   	// #1
   889bc:	3905e2c1 	strb	w1, [x22, #376]
   889c0:	17ffffb8 	b	888a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x30>
   889c4:	52800000 	mov	w0, #0x0                   	// #0
   889c8:	17ffffb6 	b	888a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x30>
   889cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   889d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   889d4:	a94363f7 	ldp	x23, x24, [sp, #48]
   889d8:	f94023f9 	ldr	x25, [sp, #64]
   889dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   889e0:	d65f03c0 	ret
   889e4:	d503201f 	nop
   889e8:	d503201f 	nop
   889ec:	d503201f 	nop

00000000000889f0 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   889f0:	7101005f 	cmp	w2, #0x40
   889f4:	fa400824 	ccmp	x1, #0x0, #0x4, eq  // eq = none
   889f8:	54000041 	b.ne	88a00 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x10>  // b.any
   889fc:	d65f03c0 	ret
   88a00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88a04:	910003fd 	mov	x29, sp
   88a08:	f9400002 	ldr	x2, [x0]
   88a0c:	a90153f3 	stp	x19, x20, [sp, #16]
   88a10:	aa0003f3 	mov	x19, x0
   88a14:	aa0103f4 	mov	x20, x1
   88a18:	f9404442 	ldr	x2, [x2, #136]
   88a1c:	d63f0040 	blr	x2
   88a20:	f940a662 	ldr	x2, [x19, #328]
   88a24:	b40000a2 	cbz	x2, 88a38 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x48>
   88a28:	b9415660 	ldr	w0, [x19, #340]
   88a2c:	91012261 	add	x1, x19, #0x48
   88a30:	51000400 	sub	w0, w0, #0x1
   88a34:	d63f0040 	blr	x2
   88a38:	f940ba60 	ldr	x0, [x19, #368]
   88a3c:	b40000c0 	cbz	x0, 88a54 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x64>
   88a40:	aa1403e1 	mov	x1, x20
   88a44:	aa1303e0 	mov	x0, x19
   88a48:	a94153f3 	ldp	x19, x20, [sp, #16]
   88a4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88a50:	17ffff88 	b	88870 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>
   88a54:	a94153f3 	ldp	x19, x20, [sp, #16]
   88a58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88a5c:	d65f03c0 	ret

0000000000088a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   88a60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88a64:	910003fd 	mov	x29, sp
   88a68:	52800003 	mov	w3, #0x0                   	// #0
   88a6c:	52800402 	mov	w2, #0x20                  	// #32
   88a70:	f940b404 	ldr	x4, [x0, #360]
   88a74:	f9000bf3 	str	x19, [sp, #16]
   88a78:	39456405 	ldrb	w5, [x0, #345]
   88a7c:	39000c85 	strb	w5, [x4, #3]
   88a80:	39456c05 	ldrb	w5, [x0, #347]
   88a84:	f940b404 	ldr	x4, [x0, #360]
   88a88:	39001085 	strb	w5, [x4, #4]
   88a8c:	39456805 	ldrb	w5, [x0, #346]
   88a90:	f940b404 	ldr	x4, [x0, #360]
   88a94:	39001485 	strb	w5, [x4, #5]
   88a98:	39457005 	ldrb	w5, [x0, #348]
   88a9c:	f940b404 	ldr	x4, [x0, #360]
   88aa0:	39001885 	strb	w5, [x4, #6]
   88aa4:	39457405 	ldrb	w5, [x0, #349]
   88aa8:	f940b404 	ldr	x4, [x0, #360]
   88aac:	39001c85 	strb	w5, [x4, #7]
   88ab0:	39457805 	ldrb	w5, [x0, #350]
   88ab4:	f940b404 	ldr	x4, [x0, #360]
   88ab8:	39002085 	strb	w5, [x4, #8]
   88abc:	39457c05 	ldrb	w5, [x0, #351]
   88ac0:	f940b404 	ldr	x4, [x0, #360]
   88ac4:	39002485 	strb	w5, [x4, #9]
   88ac8:	39458005 	ldrb	w5, [x0, #352]
   88acc:	f940b404 	ldr	x4, [x0, #360]
   88ad0:	39002885 	strb	w5, [x4, #10]
   88ad4:	f940b401 	ldr	x1, [x0, #360]
   88ad8:	940007fe 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   88adc:	72001c1f 	tst	w0, #0xff
   88ae0:	2a0003f3 	mov	w19, w0
   88ae4:	540000a0 	b.eq	88af8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>  // b.none
   88ae8:	2a1303e0 	mov	w0, w19
   88aec:	f9400bf3 	ldr	x19, [sp, #16]
   88af0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88af4:	d65f03c0 	ret
   88af8:	94005876 	bl	9ecd0 <CLogger::Get()>
   88afc:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88b00:	9112a021 	add	x1, x1, #0x4a8
   88b04:	d0000123 	adrp	x3, ae000 <FromDevice+0x108>
   88b08:	9100a021 	add	x1, x1, #0x28
   88b0c:	910fa063 	add	x3, x3, #0x3e8
   88b10:	52800022 	mov	w2, #0x1                   	// #1
   88b14:	940057ab 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88b18:	2a1303e0 	mov	w0, w19
   88b1c:	f9400bf3 	ldr	x19, [sp, #16]
   88b20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88b24:	d65f03c0 	ret
   88b28:	d503201f 	nop
   88b2c:	d503201f 	nop

0000000000088b30 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   88b30:	7100103f 	cmp	w1, #0x4
   88b34:	54000460 	b.eq	88bc0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x90>  // b.none
   88b38:	54000248 	b.hi	88b80 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x50>  // b.pmore
   88b3c:	7100083f 	cmp	w1, #0x2
   88b40:	540004c0 	b.eq	88bd8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xa8>  // b.none
   88b44:	71000c3f 	cmp	w1, #0x3
   88b48:	540000e1 	b.ne	88b64 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x34>  // b.any
   88b4c:	12800001 	mov	w1, #0xffffffff            	// #-1
   88b50:	52801fe2 	mov	w2, #0xff                  	// #255
   88b54:	72afffe2 	movk	w2, #0x7fff, lsl #16
   88b58:	39058001 	strb	w1, [x0, #352]
   88b5c:	b9015c02 	str	w2, [x0, #348]
   88b60:	17ffffc0 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88b64:	7100043f 	cmp	w1, #0x1
   88b68:	54000441 	b.ne	88bf0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc0>  // b.any
   88b6c:	52afffe2 	mov	w2, #0x7fff0000            	// #2147418112
   88b70:	12800001 	mov	w1, #0xffffffff            	// #-1
   88b74:	b9015c02 	str	w2, [x0, #348]
   88b78:	39058001 	strb	w1, [x0, #352]
   88b7c:	17ffffb9 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88b80:	7100183f 	cmp	w1, #0x6
   88b84:	540003c0 	b.eq	88bfc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xcc>  // b.none
   88b88:	71001c3f 	cmp	w1, #0x7
   88b8c:	540000c1 	b.ne	88ba4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x74>  // b.any
   88b90:	12b00002 	mov	w2, #0x7fffffff            	// #2147483647
   88b94:	12800001 	mov	w1, #0xffffffff            	// #-1
   88b98:	b9015c02 	str	w2, [x0, #348]
   88b9c:	39058001 	strb	w1, [x0, #352]
   88ba0:	17ffffb0 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88ba4:	7100143f 	cmp	w1, #0x5
   88ba8:	54000241 	b.ne	88bf0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc0>  // b.any
   88bac:	32185be2 	mov	w2, #0x7fffff00            	// #2147483392
   88bb0:	12800001 	mov	w1, #0xffffffff            	// #-1
   88bb4:	b9015c02 	str	w2, [x0, #348]
   88bb8:	39058001 	strb	w1, [x0, #352]
   88bbc:	17ffffa9 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88bc0:	12800001 	mov	w1, #0xffffffff            	// #-1
   88bc4:	529fe002 	mov	w2, #0xff00                	// #65280
   88bc8:	72afe002 	movk	w2, #0x7f00, lsl #16
   88bcc:	39058001 	strb	w1, [x0, #352]
   88bd0:	b9015c02 	str	w2, [x0, #348]
   88bd4:	17ffffa3 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88bd8:	12800001 	mov	w1, #0xffffffff            	// #-1
   88bdc:	52801fe2 	mov	w2, #0xff                  	// #255
   88be0:	72afe002 	movk	w2, #0x7f00, lsl #16
   88be4:	39058001 	strb	w1, [x0, #352]
   88be8:	b9015c02 	str	w2, [x0, #348]
   88bec:	17ffff9d 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88bf0:	b9015c1f 	str	wzr, [x0, #348]
   88bf4:	3905801f 	strb	wzr, [x0, #352]
   88bf8:	17ffff9a 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88bfc:	12b01fe2 	mov	w2, #0x7f00ffff            	// #2130771967
   88c00:	12800001 	mov	w1, #0xffffffff            	// #-1
   88c04:	b9015c02 	str	w2, [x0, #348]
   88c08:	39058001 	strb	w1, [x0, #352]
   88c0c:	17ffff95 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000000000088c10 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   88c10:	53107c26 	lsr	w6, w1, #16
   88c14:	91080005 	add	x5, x0, #0x200
   88c18:	5ac00421 	rev16	w1, w1
   88c1c:	39057006 	strb	w6, [x0, #348]
   88c20:	7815d0a1 	sturh	w1, [x5, #-163]
   88c24:	39057c02 	strb	w2, [x0, #351]
   88c28:	39058003 	strb	w3, [x0, #352]
   88c2c:	17ffff8d 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000000000088c30 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   88c30:	7100043f 	cmp	w1, #0x1
   88c34:	540000c0 	b.eq	88c4c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x1c>  // b.none
   88c38:	7100083f 	cmp	w1, #0x2
   88c3c:	540001a0 	b.eq	88c70 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x40>  // b.none
   88c40:	34000101 	cbz	w1, 88c60 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   88c44:	52800020 	mov	w0, #0x1                   	// #1
   88c48:	d65f03c0 	ret
   88c4c:	12800182 	mov	w2, #0xfffffff3            	// #-13
   88c50:	12801fe1 	mov	w1, #0xffffff00            	// #-256
   88c54:	39056402 	strb	w2, [x0, #345]
   88c58:	7902b401 	strh	w1, [x0, #346]
   88c5c:	17ffff81 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88c60:	128001e1 	mov	w1, #0xfffffff0            	// #-16
   88c64:	7902b41f 	strh	wzr, [x0, #346]
   88c68:	39056401 	strb	w1, [x0, #345]
   88c6c:	17ffff7d 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88c70:	12800182 	mov	w2, #0xfffffff3            	// #-13
   88c74:	52801fe1 	mov	w1, #0xff                  	// #255
   88c78:	39056402 	strb	w2, [x0, #345]
   88c7c:	7902b401 	strh	w1, [x0, #346]
   88c80:	17ffff78 	b	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88c84:	d503201f 	nop
   88c88:	d503201f 	nop
   88c8c:	d503201f 	nop

0000000000088c90 <CUSBGamePadPS4Device::DisableTouchpad()>:
   88c90:	b0000160 	adrp	x0, b5000 <font_data+0x1340>
   88c94:	3936901f 	strb	wzr, [x0, #3492]
   88c98:	d65f03c0 	ret
   88c9c:	d503201f 	nop

0000000000088ca0 <CUSBGamePadPS4Device::Configure()>:
   88ca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88ca4:	910003fd 	mov	x29, sp
   88ca8:	a90153f3 	stp	x19, x20, [sp, #16]
   88cac:	39456014 	ldrb	w20, [x0, #344]
   88cb0:	34000714 	cbz	w20, 88d90 <CUSBGamePadPS4Device::Configure()+0xf0>
   88cb4:	52800801 	mov	w1, #0x40                  	// #64
   88cb8:	aa0003f3 	mov	x19, x0
   88cbc:	7902a001 	strh	w1, [x0, #336]
   88cc0:	94002078 	bl	90ea0 <CUSBGamePadDevice::Configure()>
   88cc4:	72001c14 	ands	w20, w0, #0xff
   88cc8:	54000800 	b.eq	88dc8 <CUSBGamePadPS4Device::Configure()+0x128>  // b.none
   88ccc:	b0000160 	adrp	x0, b5000 <font_data+0x1340>
   88cd0:	39769000 	ldrb	w0, [x0, #3492]
   88cd4:	350006e0 	cbnz	w0, 88db0 <CUSBGamePadPS4Device::Configure()+0x110>
   88cd8:	528001c3 	mov	w3, #0xe                   	// #14
   88cdc:	52800025 	mov	w5, #0x1                   	// #1
   88ce0:	528000c4 	mov	w4, #0x6                   	// #6
   88ce4:	91014261 	add	x1, x19, #0x50
   88ce8:	91026262 	add	x2, x19, #0x98
   88cec:	52801fe0 	mov	w0, #0xff                  	// #255
   88cf0:	b9010e65 	str	w5, [x19, #268]
   88cf4:	b9004a64 	str	w4, [x19, #72]
   88cf8:	b9012a63 	str	w3, [x19, #296]
   88cfc:	d503201f 	nop
   88d00:	2900003f 	stp	wzr, w0, [x1]
   88d04:	91003021 	add	x1, x1, #0xc
   88d08:	eb01005f 	cmp	x2, x1
   88d0c:	54ffffa1 	b.ne	88d00 <CUSBGamePadPS4Device::Configure()+0x60>  // b.any
   88d10:	d2800400 	mov	x0, #0x20                  	// #32
   88d14:	94007263 	bl	a56a0 <operator new[](unsigned long)>
   88d18:	d2800402 	mov	x2, #0x20                  	// #32
   88d1c:	52800001 	mov	w1, #0x0                   	// #0
   88d20:	f900b660 	str	x0, [x19, #360]
   88d24:	94006ddb 	bl	a4490 <memset>
   88d28:	f940b663 	ldr	x3, [x19, #360]
   88d2c:	528000a6 	mov	w6, #0x5                   	// #5
   88d30:	528000e5 	mov	w5, #0x7                   	// #7
   88d34:	52800084 	mov	w4, #0x4                   	// #4
   88d38:	929fe1e2 	mov	x2, #0xffffffffffff00f0    	// #-65296
   88d3c:	f2bfe002 	movk	x2, #0xff00, lsl #16
   88d40:	91080261 	add	x1, x19, #0x200
   88d44:	f2ffefe2 	movk	x2, #0xff7f, lsl #48
   88d48:	aa1303e0 	mov	x0, x19
   88d4c:	39000066 	strb	w6, [x3]
   88d50:	f940b663 	ldr	x3, [x19, #360]
   88d54:	39000465 	strb	w5, [x3, #1]
   88d58:	f940b663 	ldr	x3, [x19, #360]
   88d5c:	39000864 	strb	w4, [x3, #2]
   88d60:	f8159022 	stur	x2, [x1, #-167]
   88d64:	97ffff3f 	bl	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88d68:	52801f40 	mov	w0, #0xfa                  	// #250
   88d6c:	7902ba7f 	strh	wzr, [x19, #348]
   88d70:	39057a7f 	strb	wzr, [x19, #350]
   88d74:	94006d7f 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   88d78:	aa1303e0 	mov	x0, x19
   88d7c:	97ffff39 	bl	88a60 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   88d80:	aa1303e0 	mov	x0, x19
   88d84:	a94153f3 	ldp	x19, x20, [sp, #16]
   88d88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88d8c:	140007e9 	b	8ad30 <CUSBHIDDevice::StartRequest()>
   88d90:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88d94:	9112a021 	add	x1, x1, #0x4a8
   88d98:	9100a021 	add	x1, x1, #0x28
   88d9c:	97fffc4d 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   88da0:	2a1403e0 	mov	w0, w20
   88da4:	a94153f3 	ldp	x19, x20, [sp, #16]
   88da8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88dac:	d65f03c0 	ret
   88db0:	d2800700 	mov	x0, #0x38                  	// #56
   88db4:	94007233 	bl	a5680 <operator new(unsigned long)>
   88db8:	aa0003f4 	mov	x20, x0
   88dbc:	940023f5 	bl	91d90 <CMouseDevice::CMouseDevice()>
   88dc0:	f900ba74 	str	x20, [x19, #368]
   88dc4:	17ffffc5 	b	88cd8 <CUSBGamePadPS4Device::Configure()+0x38>
   88dc8:	940057c2 	bl	9ecd0 <CLogger::Get()>
   88dcc:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88dd0:	9112a021 	add	x1, x1, #0x4a8
   88dd4:	d0000123 	adrp	x3, ae000 <FromDevice+0x108>
   88dd8:	9100a021 	add	x1, x1, #0x28
   88ddc:	9108a063 	add	x3, x3, #0x228
   88de0:	52800022 	mov	w2, #0x1                   	// #1
   88de4:	940056f7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88de8:	2a1403e0 	mov	w0, w20
   88dec:	a94153f3 	ldp	x19, x20, [sp, #16]
   88df0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88df4:	d65f03c0 	ret
	...

0000000000088e00 <CUSBGamePadPS4Device::GetProperties()>:
   88e00:	528007e0 	mov	w0, #0x3f                  	// #63
   88e04:	d65f03c0 	ret
	...

0000000000088e10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   88e10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88e14:	910003fd 	mov	x29, sp
   88e18:	d0000121 	adrp	x1, ae000 <FromDevice+0x108>
   88e1c:	9115a021 	add	x1, x1, #0x568
   88e20:	f9000bf3 	str	x19, [sp, #16]
   88e24:	aa0003f3 	mov	x19, x0
   88e28:	f940b000 	ldr	x0, [x0, #352]
   88e2c:	f9000261 	str	x1, [x19]
   88e30:	b4000040 	cbz	x0, 88e38 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x28>
   88e34:	9400722b 	bl	a56e0 <operator delete[](void*)>
   88e38:	aa1303e0 	mov	x0, x19
   88e3c:	f900b27f 	str	xzr, [x19, #352]
   88e40:	f9400bf3 	ldr	x19, [sp, #16]
   88e44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88e48:	14002056 	b	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   88e4c:	d503201f 	nop

0000000000088e50 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   88e50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88e54:	910003fd 	mov	x29, sp
   88e58:	f9000bf3 	str	x19, [sp, #16]
   88e5c:	aa0003f3 	mov	x19, x0
   88e60:	97ffffec 	bl	88e10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   88e64:	aa1303e0 	mov	x0, x19
   88e68:	d2802e01 	mov	x1, #0x170                 	// #368
   88e6c:	f9400bf3 	ldr	x19, [sp, #16]
   88e70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88e74:	14007227 	b	a5710 <operator delete(void*, unsigned long)>
   88e78:	d503201f 	nop
   88e7c:	d503201f 	nop

0000000000088e80 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   88e80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88e84:	910003fd 	mov	x29, sp
   88e88:	a90153f3 	stp	x19, x20, [sp, #16]
   88e8c:	aa0003f3 	mov	x19, x0
   88e90:	12001c54 	and	w20, w2, #0xff
   88e94:	9400202f 	bl	90f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   88e98:	d0000120 	adrp	x0, ae000 <FromDevice+0x108>
   88e9c:	9115a000 	add	x0, x0, #0x568
   88ea0:	39056274 	strb	w20, [x19, #344]
   88ea4:	f900b27f 	str	xzr, [x19, #352]
   88ea8:	f9000260 	str	x0, [x19]
   88eac:	7902d27f 	strh	wzr, [x19, #360]
   88eb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   88eb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88eb8:	d65f03c0 	ret
   88ebc:	d503201f 	nop

0000000000088ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   88ec0:	0b020024 	add	w4, w1, w2
   88ec4:	aa0003eb 	mov	x11, x0
   88ec8:	11001c8a 	add	w10, w4, #0x7
   88ecc:	53037c25 	lsr	w5, w1, #3
   88ed0:	53037d4a 	lsr	w10, w10, #3
   88ed4:	6b410d5f 	cmp	w10, w1, lsr #3
   88ed8:	540006a9 	b.ls	88fac <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xec>  // b.plast
   88edc:	12000826 	and	w6, w1, #0x7
   88ee0:	52800028 	mov	w8, #0x1                   	// #1
   88ee4:	0b0200c0 	add	w0, w6, w2
   88ee8:	1ac62109 	lsl	w9, w8, w6
   88eec:	1ac02108 	lsl	w8, w8, w0
   88ef0:	12001d29 	and	w9, w9, #0xff
   88ef4:	12001d08 	and	w8, w8, #0xff
   88ef8:	51000484 	sub	w4, w4, #0x1
   88efc:	5100050e 	sub	w14, w8, #0x1
   88f00:	5280010d 	mov	w13, #0x8                   	// #8
   88f04:	4b090108 	sub	w8, w8, w9
   88f08:	4b0903e9 	neg	w9, w9
   88f0c:	53037c84 	lsr	w4, w4, #3
   88f10:	12001dce 	and	w14, w14, #0xff
   88f14:	12001d08 	and	w8, w8, #0xff
   88f18:	12001d29 	and	w9, w9, #0xff
   88f1c:	4b0601ad 	sub	w13, w13, w6
   88f20:	2a0503e1 	mov	w1, w5
   88f24:	52800007 	mov	w7, #0x0                   	// #0
   88f28:	52800000 	mov	w0, #0x0                   	// #0
   88f2c:	1400000d 	b	88f60 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa0>
   88f30:	6b05003f 	cmp	w1, w5
   88f34:	54000280 	b.eq	88f84 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xc4>  // b.none
   88f38:	6b01009f 	cmp	w4, w1
   88f3c:	38616963 	ldrb	w3, [x11, x1]
   88f40:	54000300 	b.eq	88fa0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe0>  // b.none
   88f44:	110020e7 	add	w7, w7, #0x8
   88f48:	4b07004c 	sub	w12, w2, w7
   88f4c:	1acc2063 	lsl	w3, w3, w12
   88f50:	2a030000 	orr	w0, w0, w3
   88f54:	91000421 	add	x1, x1, #0x1
   88f58:	6b01015f 	cmp	w10, w1
   88f5c:	54000129 	b.ls	88f80 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xc0>  // b.plast
   88f60:	6b05009f 	cmp	w4, w5
   88f64:	54fffe61 	b.ne	88f30 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x70>  // b.any
   88f68:	38616960 	ldrb	w0, [x11, x1]
   88f6c:	91000421 	add	x1, x1, #0x1
   88f70:	6b01015f 	cmp	w10, w1
   88f74:	0a000100 	and	w0, w8, w0
   88f78:	1ac62800 	asr	w0, w0, w6
   88f7c:	54ffff28 	b.hi	88f60 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa0>  // b.pmore
   88f80:	d65f03c0 	ret
   88f84:	38616963 	ldrb	w3, [x11, x1]
   88f88:	0b0d00e7 	add	w7, w7, w13
   88f8c:	4b070040 	sub	w0, w2, w7
   88f90:	0a030123 	and	w3, w9, w3
   88f94:	1ac62863 	asr	w3, w3, w6
   88f98:	1ac02060 	lsl	w0, w3, w0
   88f9c:	17ffffee 	b	88f54 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x94>
   88fa0:	0a0e0063 	and	w3, w3, w14
   88fa4:	2a030000 	orr	w0, w0, w3
   88fa8:	17ffffeb 	b	88f54 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x94>
   88fac:	52800000 	mov	w0, #0x0                   	// #0
   88fb0:	d65f03c0 	ret
   88fb4:	d503201f 	nop
   88fb8:	d503201f 	nop
   88fbc:	d503201f 	nop

0000000000088fc0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   88fc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88fc4:	2a0203ef 	mov	w15, w2
   88fc8:	910003fd 	mov	x29, sp
   88fcc:	97ffffbd 	bl	88ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   88fd0:	52800021 	mov	w1, #0x1                   	// #1
   88fd4:	51000442 	sub	w2, w2, #0x1
   88fd8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   88fdc:	1acf202f 	lsl	w15, w1, w15
   88fe0:	1ac22021 	lsl	w1, w1, w2
   88fe4:	4b0f03ef 	neg	w15, w15
   88fe8:	6a00003f 	tst	w1, w0
   88fec:	2a0f000f 	orr	w15, w0, w15
   88ff0:	1a8011e0 	csel	w0, w15, w0, ne  // ne = any
   88ff4:	d65f03c0 	ret
   88ff8:	d503201f 	nop
   88ffc:	d503201f 	nop

0000000000089000 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   89000:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   89004:	910003fd 	mov	x29, sp
   89008:	a90363f7 	stp	x23, x24, [sp, #48]
   8900c:	f940b017 	ldr	x23, [x0, #352]
   89010:	a90153f3 	stp	x19, x20, [sp, #16]
   89014:	b4001757 	cbz	x23, 892fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2fc>
   89018:	aa0003f4 	mov	x20, x0
   8901c:	a90573fb 	stp	x27, x28, [sp, #80]
   89020:	7942d01b 	ldrh	w27, [x0, #360]
   89024:	3400235b 	cbz	w27, 8948c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x48c>
   89028:	52865d72 	mov	w18, #0x32eb                	// #13035
   8902c:	72bf1492 	movk	w18, #0xf8a4, lsl #16
   89030:	a9025bf5 	stp	x21, x22, [sp, #32]
   89034:	52800008 	mov	w8, #0x0                   	// #0
   89038:	52800016 	mov	w22, #0x0                   	// #0
   8903c:	91043000 	add	x0, x0, #0x10c
   89040:	aa1703f8 	mov	x24, x23
   89044:	aa0103f3 	mov	x19, x1
   89048:	5280001c 	mov	w28, #0x0                   	// #0
   8904c:	a9046bf9 	stp	x25, x26, [sp, #64]
   89050:	2a1203f5 	mov	w21, w18
   89054:	5280001a 	mov	w26, #0x0                   	// #0
   89058:	52800019 	mov	w25, #0x0                   	// #0
   8905c:	2a1603e4 	mov	w4, w22
   89060:	2a0803f7 	mov	w23, w8
   89064:	f9003bf4 	str	x20, [sp, #112]
   89068:	2a1203f4 	mov	w20, w18
   8906c:	b9006ff2 	str	w18, [sp, #108]
   89070:	290f7fff 	stp	wzr, wzr, [sp, #120]
   89074:	f90043e0 	str	x0, [sp, #128]
   89078:	39c00300 	ldrsb	w0, [x24]
   8907c:	12000401 	and	w1, w0, #0x3
   89080:	7100043f 	cmp	w1, #0x1
   89084:	54000ca0 	b.eq	89218 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x218>  // b.none
   89088:	7100083f 	cmp	w1, #0x2
   8908c:	54000b80 	b.eq	891fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1fc>  // b.none
   89090:	34000ac1 	cbz	w1, 891e8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   89094:	39c00f02 	ldrsb	w2, [x24, #3]
   89098:	5100177b 	sub	w27, w27, #0x5
   8909c:	91001718 	add	x24, x24, #0x5
   890a0:	12003f7b 	and	w27, w27, #0xffff
   890a4:	38dfd30f 	ldursb	w15, [x24, #-3]
   890a8:	38dff301 	ldursb	w1, [x24, #-1]
   890ac:	53103c42 	lsl	w2, w2, #16
   890b0:	38dfc305 	ldursb	w5, [x24, #-4]
   890b4:	2a0f204f 	orr	w15, w2, w15, lsl #8
   890b8:	2a0160a1 	orr	w1, w5, w1, lsl #24
   890bc:	2a0101ef 	orr	w15, w15, w1
   890c0:	121e1400 	and	w0, w0, #0xfc
   890c4:	7102101f 	cmp	w0, #0x84
   890c8:	54000780 	b.eq	891b8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b8>  // b.none
   890cc:	7100d01f 	cmp	w0, #0x34
   890d0:	54000b40 	b.eq	89238 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>  // b.none
   890d4:	540003cc 	b.gt	8914c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x14c>
   890d8:	7100501f 	cmp	w0, #0x14
   890dc:	54000a80 	b.eq	8922c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x22c>  // b.none
   890e0:	5400026d 	b.le	8912c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x12c>
   890e4:	7100901f 	cmp	w0, #0x24
   890e8:	1a8f1294 	csel	w20, w20, w15, ne  // ne = any
   890ec:	35fffc7b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   890f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   890f4:	11001c83 	add	w3, w4, #0x7
   890f8:	d343487b 	ubfx	x27, x3, #3, #16
   890fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89100:	f9403bf4 	ldr	x20, [sp, #112]
   89104:	7902a29b 	strh	w27, [x20, #336]
   89108:	b9407be0 	ldr	w0, [sp, #120]
   8910c:	a94363f7 	ldp	x23, x24, [sp, #48]
   89110:	a94573fb 	ldp	x27, x28, [sp, #80]
   89114:	b9004a80 	str	w0, [x20, #72]
   89118:	b9407fe0 	ldr	w0, [sp, #124]
   8911c:	b9010e80 	str	w0, [x20, #268]
   89120:	a94153f3 	ldp	x19, x20, [sp, #16]
   89124:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   89128:	d65f03c0 	ret
   8912c:	7100101f 	cmp	w0, #0x4
   89130:	540001c1 	b.ne	89168 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x168>  // b.any
   89134:	7100079f 	cmp	w28, #0x1
   89138:	52800040 	mov	w0, #0x2                   	// #2
   8913c:	7a4909e0 	ccmp	w15, #0x9, #0x0, eq  // eq = none
   89140:	1a80139c 	csel	w28, w28, w0, ne  // ne = any
   89144:	35fff9bb 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89148:	17ffffea 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   8914c:	7102001f 	cmp	w0, #0x80
   89150:	540007a0 	b.eq	89244 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x244>  // b.none
   89154:	5400020d 	b.le	89194 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x194>
   89158:	7102501f 	cmp	w0, #0x94
   8915c:	1a8f135a 	csel	w26, w26, w15, ne  // ne = any
   89160:	35fff8db 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89164:	17ffffe3 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   89168:	7100201f 	cmp	w0, #0x8
   8916c:	54fffc01 	b.ne	890ec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>  // b.any
   89170:	7100d9ff 	cmp	w15, #0x36
   89174:	5400076c 	b.gt	89260 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x260>
   89178:	7100bdff 	cmp	w15, #0x2f
   8917c:	54000a8c 	b.gt	892cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2cc>
   89180:	510011ef 	sub	w15, w15, #0x4
   89184:	710005ff 	cmp	w15, #0x1
   89188:	1a9f879c 	csinc	w28, w28, wzr, hi  // hi = pmore
   8918c:	35fff77b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89190:	17ffffd8 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   89194:	7101101f 	cmp	w0, #0x44
   89198:	54000081 	b.ne	891a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1a8>  // b.any
   8919c:	2a0f03f2 	mov	w18, w15
   891a0:	35fff6db 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   891a4:	17ffffd3 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   891a8:	7101d01f 	cmp	w0, #0x74
   891ac:	1a8f1339 	csel	w25, w25, w15, ne  // ne = any
   891b0:	35fff65b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   891b4:	17ffffcf 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   891b8:	35fff9d7 	cbnz	w23, 890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   891bc:	52800102 	mov	w2, #0x8                   	// #8
   891c0:	52800001 	mov	w1, #0x0                   	// #0
   891c4:	aa1303e0 	mov	x0, x19
   891c8:	97ffff3e 	bl	88ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   891cc:	7100001f 	cmp	w0, #0x0
   891d0:	7a4f1004 	ccmp	w0, w15, #0x4, ne  // ne = any
   891d4:	54000861 	b.ne	892e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2e0>  // b.any
   891d8:	2a0f03f7 	mov	w23, w15
   891dc:	52800104 	mov	w4, #0x8                   	// #8
   891e0:	35fff4db 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   891e4:	17ffffc3 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   891e8:	5100077b 	sub	w27, w27, #0x1
   891ec:	91000718 	add	x24, x24, #0x1
   891f0:	12003f7b 	and	w27, w27, #0xffff
   891f4:	5280000f 	mov	w15, #0x0                   	// #0
   891f8:	17ffffb2 	b	890c0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xc0>
   891fc:	39400701 	ldrb	w1, [x24, #1]
   89200:	51000f7b 	sub	w27, w27, #0x3
   89204:	91000f18 	add	x24, x24, #0x3
   89208:	12003f7b 	and	w27, w27, #0xffff
   8920c:	38dff30f 	ldursb	w15, [x24, #-1]
   89210:	2a0f202f 	orr	w15, w1, w15, lsl #8
   89214:	17ffffab 	b	890c0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xc0>
   89218:	51000b7b 	sub	w27, w27, #0x2
   8921c:	39c0070f 	ldrsb	w15, [x24, #1]
   89220:	91000b18 	add	x24, x24, #0x2
   89224:	12003f7b 	and	w27, w27, #0xffff
   89228:	17ffffa6 	b	890c0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xc0>
   8922c:	2a0f03f5 	mov	w21, w15
   89230:	35fff25b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89234:	17ffffaf 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   89238:	b9006fef 	str	w15, [sp, #108]
   8923c:	35fff1fb 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89240:	17ffffac 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   89244:	120005ef 	and	w15, w15, #0x3
   89248:	1b197f46 	mul	w6, w26, w25
   8924c:	710009ff 	cmp	w15, #0x2
   89250:	54000160 	b.eq	8927c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x27c>  // b.none
   89254:	0b060084 	add	w4, w4, w6
   89258:	35fff11b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   8925c:	17ffffa5 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   89260:	7100e5ff 	cmp	w15, #0x39
   89264:	54fff441 	b.ne	890ec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>  // b.any
   89268:	7100079f 	cmp	w28, #0x1
   8926c:	52800080 	mov	w0, #0x4                   	// #4
   89270:	1a80139c 	csel	w28, w28, w0, ne  // ne = any
   89274:	35fff03b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   89278:	17ffff9e 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   8927c:	71000f9f 	cmp	w28, #0x3
   89280:	54000500 	b.eq	89320 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>  // b.none
   89284:	7100139f 	cmp	w28, #0x4
   89288:	54000a80 	b.eq	893d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3d8>  // b.none
   8928c:	71000b9f 	cmp	w28, #0x2
   89290:	54fffe21 	b.ne	89254 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x254>  // b.any
   89294:	f9403bef 	ldr	x15, [sp, #112]
   89298:	2a0603e2 	mov	w2, w6
   8929c:	2a0403e1 	mov	w1, w4
   892a0:	aa1303e0 	mov	x0, x19
   892a4:	b9008be4 	str	w4, [sp, #136]
   892a8:	5280003c 	mov	w28, #0x1                   	// #1
   892ac:	b90093e6 	str	w6, [sp, #144]
   892b0:	b90129fa 	str	w26, [x15, #296]
   892b4:	97ffff03 	bl	88ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   892b8:	b9408be4 	ldr	w4, [sp, #136]
   892bc:	b9012de0 	str	w0, [x15, #300]
   892c0:	b94093e6 	ldr	w6, [sp, #144]
   892c4:	0b060084 	add	w4, w4, w6
   892c8:	17ffffe4 	b	89258 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x258>
   892cc:	7100079f 	cmp	w28, #0x1
   892d0:	52800060 	mov	w0, #0x3                   	// #3
   892d4:	1a80139c 	csel	w28, w28, w0, ne  // ne = any
   892d8:	35ffed1b 	cbnz	w27, 89078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   892dc:	17ffff85 	b	890f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   892e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   892e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   892e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   892ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
   892f0:	a94573fb 	ldp	x27, x28, [sp, #80]
   892f4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   892f8:	d65f03c0 	ret
   892fc:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89300:	b0000120 	adrp	x0, ae000 <FromDevice+0x108>
   89304:	a9025bf5 	stp	x21, x22, [sp, #32]
   89308:	91138021 	add	x1, x1, #0x4e0
   8930c:	9113e000 	add	x0, x0, #0x4f8
   89310:	52801442 	mov	w2, #0xa2                  	// #162
   89314:	a9046bf9 	stp	x25, x26, [sp, #64]
   89318:	a90573fb 	stp	x27, x28, [sp, #80]
   8931c:	94004cd9 	bl	9c680 <assertion_failed>
   89320:	340009ba 	cbz	w26, 89454 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x454>
   89324:	b9407be0 	ldr	w0, [sp, #120]
   89328:	d2800982 	mov	x2, #0x4c                  	// #76
   8932c:	52800181 	mov	w1, #0xc                   	// #12
   89330:	52800005 	mov	w5, #0x0                   	// #0
   89334:	b9007bf7 	str	w23, [sp, #120]
   89338:	f9403be3 	ldr	x3, [sp, #112]
   8933c:	f90047f8 	str	x24, [sp, #136]
   89340:	2a0503f8 	mov	w24, w5
   89344:	291253f5 	stp	w21, w20, [sp, #144]
   89348:	9b210807 	smaddl	x7, w0, w1, x2
   8934c:	52865d62 	mov	w2, #0x32eb                	// #13035
   89350:	72bf1482 	movk	w2, #0xf8a4, lsl #16
   89354:	6b0202bf 	cmp	w21, w2
   89358:	b9406fe2 	ldr	w2, [sp, #108]
   8935c:	1a95005c 	csel	w28, w2, w21, eq  // eq = none
   89360:	11000400 	add	w0, w0, #0x1
   89364:	2a1903f5 	mov	w21, w25
   89368:	29134be4 	stp	w4, w18, [sp, #152]
   8936c:	8b070076 	add	x22, x3, x7
   89370:	2a0603f9 	mov	w25, w6
   89374:	52865d62 	mov	w2, #0x32eb                	// #13035
   89378:	72bf1482 	movk	w2, #0xf8a4, lsl #16
   8937c:	6b02029f 	cmp	w20, w2
   89380:	aa1603f7 	mov	x23, x22
   89384:	1a940242 	csel	w2, w18, w20, eq  // eq = none
   89388:	2a1c03f4 	mov	w20, w28
   8938c:	2a0203f6 	mov	w22, w2
   89390:	2a0403f2 	mov	w18, w4
   89394:	2a0003fc 	mov	w28, w0
   89398:	14000009 	b	893bc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3bc>
   8939c:	97fffec9 	bl	88ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   893a0:	0b180386 	add	w6, w28, w24
   893a4:	11000718 	add	w24, w24, #0x1
   893a8:	b800c6e0 	str	w0, [x23], #12
   893ac:	6b1a031f 	cmp	w24, w26
   893b0:	0b150252 	add	w18, w18, w21
   893b4:	7a4f3b02 	ccmp	w24, #0xf, #0x2, cc  // cc = lo, ul, last
   893b8:	54000548 	b.hi	89460 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x460>  // b.pmore
   893bc:	2900daf4 	stp	w20, w22, [x23, #4]
   893c0:	2a1503e2 	mov	w2, w21
   893c4:	2a1203e1 	mov	w1, w18
   893c8:	aa1303e0 	mov	x0, x19
   893cc:	36fffe94 	tbz	w20, #31, 8939c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x39c>
   893d0:	97fffefc 	bl	88fc0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   893d4:	17fffff3 	b	893a0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   893d8:	340003fa 	cbz	w26, 89454 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x454>
   893dc:	b9407fe0 	ldr	w0, [sp, #124]
   893e0:	2a1903e2 	mov	w2, w25
   893e4:	2a0403fc 	mov	w28, w4
   893e8:	b9007ff4 	str	w20, [sp, #124]
   893ec:	52800016 	mov	w22, #0x0                   	// #0
   893f0:	2a0603f9 	mov	w25, w6
   893f4:	b9008bf2 	str	w18, [sp, #136]
   893f8:	2a0403f2 	mov	w18, w4
   893fc:	1100040f 	add	w15, w0, #0x1
   89400:	93407def 	sxtw	x15, w15
   89404:	aa0f03f4 	mov	x20, x15
   89408:	f94043ef 	ldr	x15, [sp, #128]
   8940c:	d503201f 	nop
   89410:	2a1203e1 	mov	w1, w18
   89414:	aa1303e0 	mov	x0, x19
   89418:	97fffeaa 	bl	88ec0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   8941c:	110006d6 	add	w22, w22, #0x1
   89420:	b83479e0 	str	w0, [x15, x20, lsl #2]
   89424:	0b020252 	add	w18, w18, w2
   89428:	6b1a02df 	cmp	w22, w26
   8942c:	2a1403e0 	mov	w0, w20
   89430:	7a453ac2 	ccmp	w22, #0x5, #0x2, cc  // cc = lo, ul, last
   89434:	91000694 	add	x20, x20, #0x1
   89438:	54fffec9 	b.ls	89410 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x410>  // b.plast
   8943c:	b9408bf2 	ldr	w18, [sp, #136]
   89440:	2a1903e6 	mov	w6, w25
   89444:	2a1c03e4 	mov	w4, w28
   89448:	2a0203f9 	mov	w25, w2
   8944c:	b9407ff4 	ldr	w20, [sp, #124]
   89450:	b9007fe0 	str	w0, [sp, #124]
   89454:	5280003c 	mov	w28, #0x1                   	// #1
   89458:	0b060084 	add	w4, w4, w6
   8945c:	17ffff7f 	b	89258 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x258>
   89460:	29534be4 	ldp	w4, w18, [sp, #152]
   89464:	2a0603e2 	mov	w2, w6
   89468:	2a1903e6 	mov	w6, w25
   8946c:	5280003c 	mov	w28, #0x1                   	// #1
   89470:	2a1503f9 	mov	w25, w21
   89474:	b9407bf7 	ldr	w23, [sp, #120]
   89478:	b9007be2 	str	w2, [sp, #120]
   8947c:	295253f5 	ldp	w21, w20, [sp, #144]
   89480:	0b060084 	add	w4, w4, w6
   89484:	f94047f8 	ldr	x24, [sp, #136]
   89488:	17ffff74 	b	89258 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x258>
   8948c:	290f7fff 	stp	wzr, wzr, [sp, #120]
   89490:	17ffff1d 	b	89104 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x104>
   89494:	d503201f 	nop
   89498:	d503201f 	nop
   8949c:	d503201f 	nop

00000000000894a0 <CUSBGamePadStandardDevice::Configure()>:
   894a0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   894a4:	52800421 	mov	w1, #0x21                  	// #33
   894a8:	910003fd 	mov	x29, sp
   894ac:	a90153f3 	stp	x19, x20, [sp, #16]
   894b0:	aa0003f3 	mov	x19, x0
   894b4:	97fffa7b 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   894b8:	b4000080 	cbz	x0, 894c8 <CUSBGamePadStandardDevice::Configure()+0x28>
   894bc:	78407001 	ldurh	w1, [x0, #7]
   894c0:	aa0003f4 	mov	x20, x0
   894c4:	35000141 	cbnz	w1, 894ec <CUSBGamePadStandardDevice::Configure()+0x4c>
   894c8:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   894cc:	9117e021 	add	x1, x1, #0x5f8
   894d0:	aa1303e0 	mov	x0, x19
   894d4:	52800014 	mov	w20, #0x0                   	// #0
   894d8:	97fffa7e 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   894dc:	2a1403e0 	mov	w0, w20
   894e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   894e4:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   894e8:	d65f03c0 	ret
   894ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   894f0:	92403c20 	and	x0, x1, #0xffff
   894f4:	a90363f7 	stp	x23, x24, [sp, #48]
   894f8:	7902d261 	strh	w1, [x19, #360]
   894fc:	94007069 	bl	a56a0 <operator new[](unsigned long)>
   89500:	aa0003e1 	mov	x1, x0
   89504:	aa1303e0 	mov	x0, x19
   89508:	f900b261 	str	x1, [x19, #352]
   8950c:	97fffa59 	bl	87e70 <CUSBFunction::GetHost() const>
   89510:	aa0003f5 	mov	x21, x0
   89514:	aa1303e0 	mov	x0, x19
   89518:	97fffa4a 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8951c:	39401a97 	ldrb	w23, [x20, #6]
   89520:	aa0003e1 	mov	x1, x0
   89524:	aa1303e0 	mov	x0, x19
   89528:	aa0103f4 	mov	x20, x1
   8952c:	7942d278 	ldrh	w24, [x19, #360]
   89530:	f940b276 	ldr	x22, [x19, #352]
   89534:	97fffab3 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   89538:	12001c07 	and	w7, w0, #0xff
   8953c:	aa1403e1 	mov	x1, x20
   89540:	2a1803e5 	mov	w5, w24
   89544:	2a1703e2 	mov	w2, w23
   89548:	aa1503e0 	mov	x0, x21
   8954c:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   89550:	aa1603e4 	mov	x4, x22
   89554:	52800003 	mov	w3, #0x0                   	// #0
   89558:	940006ca 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8955c:	7942d261 	ldrh	w1, [x19, #360]
   89560:	6b01001f 	cmp	w0, w1
   89564:	54000421 	b.ne	895e8 <CUSBGamePadStandardDevice::Configure()+0x148>  // b.any
   89568:	f9400262 	ldr	x2, [x19]
   8956c:	aa1303e0 	mov	x0, x19
   89570:	910123e1 	add	x1, sp, #0x48
   89574:	a904ffff 	stp	xzr, xzr, [sp, #72]
   89578:	a905ffff 	stp	xzr, xzr, [sp, #88]
   8957c:	a906ffff 	stp	xzr, xzr, [sp, #104]
   89580:	a907ffff 	stp	xzr, xzr, [sp, #120]
   89584:	a908ffff 	stp	xzr, xzr, [sp, #136]
   89588:	a909ffff 	stp	xzr, xzr, [sp, #152]
   8958c:	b900abff 	str	wzr, [sp, #168]
   89590:	f9404442 	ldr	x2, [x2, #136]
   89594:	d63f0040 	blr	x2
   89598:	b9404a60 	ldr	w0, [x19, #72]
   8959c:	350000a0 	cbnz	w0, 895b0 <CUSBGamePadStandardDevice::Configure()+0x110>
   895a0:	b9410e60 	ldr	w0, [x19, #268]
   895a4:	35000060 	cbnz	w0, 895b0 <CUSBGamePadStandardDevice::Configure()+0x110>
   895a8:	b9412a60 	ldr	w0, [x19, #296]
   895ac:	340005a0 	cbz	w0, 89660 <CUSBGamePadStandardDevice::Configure()+0x1c0>
   895b0:	7942a260 	ldrh	w0, [x19, #336]
   895b4:	340005e0 	cbz	w0, 89670 <CUSBGamePadStandardDevice::Configure()+0x1d0>
   895b8:	aa1303e0 	mov	x0, x19
   895bc:	94001e39 	bl	90ea0 <CUSBGamePadDevice::Configure()>
   895c0:	72001c14 	ands	w20, w0, #0xff
   895c4:	540003a0 	b.eq	89638 <CUSBGamePadStandardDevice::Configure()+0x198>  // b.none
   895c8:	39456260 	ldrb	w0, [x19, #344]
   895cc:	350002a0 	cbnz	w0, 89620 <CUSBGamePadStandardDevice::Configure()+0x180>
   895d0:	2a1403e0 	mov	w0, w20
   895d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   895d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   895dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   895e0:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   895e4:	d65f03c0 	ret
   895e8:	940055ba 	bl	9ecd0 <CLogger::Get()>
   895ec:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   895f0:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   895f4:	91146063 	add	x3, x3, #0x518
   895f8:	9117e021 	add	x1, x1, #0x5f8
   895fc:	52800022 	mov	w2, #0x1                   	// #1
   89600:	52800014 	mov	w20, #0x0                   	// #0
   89604:	940054ef 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89608:	2a1403e0 	mov	w0, w20
   8960c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89610:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89614:	a94363f7 	ldp	x23, x24, [sp, #48]
   89618:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8961c:	d65f03c0 	ret
   89620:	aa1303e0 	mov	x0, x19
   89624:	940005c3 	bl	8ad30 <CUSBHIDDevice::StartRequest()>
   89628:	12001c14 	and	w20, w0, #0xff
   8962c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89630:	a94363f7 	ldp	x23, x24, [sp, #48]
   89634:	17ffffaa 	b	894dc <CUSBGamePadStandardDevice::Configure()+0x3c>
   89638:	940055a6 	bl	9ecd0 <CLogger::Get()>
   8963c:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89640:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89644:	9108a063 	add	x3, x3, #0x228
   89648:	9117e021 	add	x1, x1, #0x5f8
   8964c:	52800022 	mov	w2, #0x1                   	// #1
   89650:	940054dc 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89654:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89658:	a94363f7 	ldp	x23, x24, [sp, #48]
   8965c:	17ffffa0 	b	894dc <CUSBGamePadStandardDevice::Configure()+0x3c>
   89660:	52800014 	mov	w20, #0x0                   	// #0
   89664:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89668:	a94363f7 	ldp	x23, x24, [sp, #48]
   8966c:	17ffff9c 	b	894dc <CUSBGamePadStandardDevice::Configure()+0x3c>
   89670:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89674:	b0000120 	adrp	x0, ae000 <FromDevice+0x108>
   89678:	91138021 	add	x1, x1, #0x4e0
   8967c:	91150000 	add	x0, x0, #0x540
   89680:	528010a2 	mov	w2, #0x85                  	// #133
   89684:	94004bff 	bl	9c680 <assertion_failed>
	...

0000000000089690 <CUSBGamePadDevice::GetProperties()>:
   89690:	52800000 	mov	w0, #0x0                   	// #0
   89694:	d65f03c0 	ret
	...

00000000000896a0 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   896a0:	52800000 	mov	w0, #0x0                   	// #0
   896a4:	d65f03c0 	ret
	...

00000000000896b0 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   896b0:	52800000 	mov	w0, #0x0                   	// #0
   896b4:	d65f03c0 	ret
	...

00000000000896c0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   896c0:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   896c4:	911ca021 	add	x1, x1, #0x728
   896c8:	f9000001 	str	x1, [x0]
   896cc:	14001e35 	b	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

00000000000896d0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   896d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   896d4:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   896d8:	911ca021 	add	x1, x1, #0x728
   896dc:	910003fd 	mov	x29, sp
   896e0:	f9000bf3 	str	x19, [sp, #16]
   896e4:	aa0003f3 	mov	x19, x0
   896e8:	f9000001 	str	x1, [x0]
   896ec:	94001e2d 	bl	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   896f0:	aa1303e0 	mov	x0, x19
   896f4:	d2802c01 	mov	x1, #0x160                 	// #352
   896f8:	f9400bf3 	ldr	x19, [sp, #16]
   896fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89700:	14007004 	b	a5710 <operator delete(void*, unsigned long)>
   89704:	d503201f 	nop
   89708:	d503201f 	nop
   8970c:	d503201f 	nop

0000000000089710 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   89710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89714:	910003fd 	mov	x29, sp
   89718:	f9000bf3 	str	x19, [sp, #16]
   8971c:	aa0103f3 	mov	x19, x1
   89720:	39400022 	ldrb	w2, [x1]
   89724:	7100c05f 	cmp	w2, #0x30
   89728:	54000de1 	b.ne	898e4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1d4>  // b.any
   8972c:	b9012c1f 	str	wzr, [x0, #300]
   89730:	39400c22 	ldrb	w2, [x1, #3]
   89734:	36000082 	tbz	w2, #0, 89744 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x34>
   89738:	52801001 	mov	w1, #0x80                  	// #128
   8973c:	b9012c01 	str	w1, [x0, #300]
   89740:	39400e62 	ldrb	w2, [x19, #3]
   89744:	360800a2 	tbz	w2, #1, 89758 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x48>
   89748:	b9412c01 	ldr	w1, [x0, #300]
   8974c:	32160021 	orr	w1, w1, #0x400
   89750:	b9012c01 	str	w1, [x0, #300]
   89754:	39400e62 	ldrb	w2, [x19, #3]
   89758:	361000a2 	tbz	w2, #2, 8976c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x5c>
   8975c:	b9412c01 	ldr	w1, [x0, #300]
   89760:	32180021 	orr	w1, w1, #0x100
   89764:	b9012c01 	str	w1, [x0, #300]
   89768:	39400e62 	ldrb	w2, [x19, #3]
   8976c:	361800a2 	tbz	w2, #3, 89780 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x70>
   89770:	b9412c01 	ldr	w1, [x0, #300]
   89774:	32170021 	orr	w1, w1, #0x200
   89778:	b9012c01 	str	w1, [x0, #300]
   8977c:	39400e62 	ldrb	w2, [x19, #3]
   89780:	363000a2 	tbz	w2, #6, 89794 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x84>
   89784:	b9412c01 	ldr	w1, [x0, #300]
   89788:	321a0021 	orr	w1, w1, #0x40
   8978c:	b9012c01 	str	w1, [x0, #300]
   89790:	39400e62 	ldrb	w2, [x19, #3]
   89794:	37380942 	tbnz	w2, #7, 898bc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1ac>
   89798:	39401262 	ldrb	w2, [x19, #4]
   8979c:	360000a2 	tbz	w2, #0, 897b0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xa0>
   897a0:	b9412c01 	ldr	w1, [x0, #300]
   897a4:	320d0021 	orr	w1, w1, #0x80000
   897a8:	b9012c01 	str	w1, [x0, #300]
   897ac:	39401262 	ldrb	w2, [x19, #4]
   897b0:	360800a2 	tbz	w2, #1, 897c4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xb4>
   897b4:	b9412c01 	ldr	w1, [x0, #300]
   897b8:	320c0021 	orr	w1, w1, #0x100000
   897bc:	b9012c01 	str	w1, [x0, #300]
   897c0:	39401262 	ldrb	w2, [x19, #4]
   897c4:	361000a2 	tbz	w2, #2, 897d8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xc8>
   897c8:	b9412c01 	ldr	w1, [x0, #300]
   897cc:	32130021 	orr	w1, w1, #0x2000
   897d0:	b9012c01 	str	w1, [x0, #300]
   897d4:	39401262 	ldrb	w2, [x19, #4]
   897d8:	361800a2 	tbz	w2, #3, 897ec <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xdc>
   897dc:	b9412c01 	ldr	w1, [x0, #300]
   897e0:	32140021 	orr	w1, w1, #0x1000
   897e4:	b9012c01 	str	w1, [x0, #300]
   897e8:	39401262 	ldrb	w2, [x19, #4]
   897ec:	362000a2 	tbz	w2, #4, 89800 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xf0>
   897f0:	b9412c01 	ldr	w1, [x0, #300]
   897f4:	32000021 	orr	w1, w1, #0x1
   897f8:	b9012c01 	str	w1, [x0, #300]
   897fc:	39401262 	ldrb	w2, [x19, #4]
   89800:	36280082 	tbz	w2, #5, 89810 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x100>
   89804:	b9412c01 	ldr	w1, [x0, #300]
   89808:	32150021 	orr	w1, w1, #0x800
   8980c:	b9012c01 	str	w1, [x0, #300]
   89810:	39401662 	ldrb	w2, [x19, #5]
   89814:	360000a2 	tbz	w2, #0, 89828 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x118>
   89818:	b9412c01 	ldr	w1, [x0, #300]
   8981c:	320f0021 	orr	w1, w1, #0x20000
   89820:	b9012c01 	str	w1, [x0, #300]
   89824:	39401662 	ldrb	w2, [x19, #5]
   89828:	360800a2 	tbz	w2, #1, 8983c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x12c>
   8982c:	b9412c01 	ldr	w1, [x0, #300]
   89830:	32110021 	orr	w1, w1, #0x8000
   89834:	b9012c01 	str	w1, [x0, #300]
   89838:	39401662 	ldrb	w2, [x19, #5]
   8983c:	361000a2 	tbz	w2, #2, 89850 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x140>
   89840:	b9412c01 	ldr	w1, [x0, #300]
   89844:	32100021 	orr	w1, w1, #0x10000
   89848:	b9012c01 	str	w1, [x0, #300]
   8984c:	39401662 	ldrb	w2, [x19, #5]
   89850:	361800a2 	tbz	w2, #3, 89864 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x154>
   89854:	b9412c01 	ldr	w1, [x0, #300]
   89858:	320e0021 	orr	w1, w1, #0x40000
   8985c:	b9012c01 	str	w1, [x0, #300]
   89860:	39401662 	ldrb	w2, [x19, #5]
   89864:	363000a2 	tbz	w2, #6, 89878 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x168>
   89868:	b9412c01 	ldr	w1, [x0, #300]
   8986c:	321b0021 	orr	w1, w1, #0x20
   89870:	b9012c01 	str	w1, [x0, #300]
   89874:	39401662 	ldrb	w2, [x19, #5]
   89878:	373802e2 	tbnz	w2, #7, 898d4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1c4>
   8987c:	79400e63 	ldrh	w3, [x19, #6]
   89880:	52801fe2 	mov	w2, #0xff                  	// #255
   89884:	78409264 	ldurh	w4, [x19, #9]
   89888:	d3442c63 	ubfx	x3, x3, #4, #8
   8988c:	b9004c03 	str	w3, [x0, #76]
   89890:	d3442c84 	ubfx	x4, x4, #4, #8
   89894:	39402263 	ldrb	w3, [x19, #8]
   89898:	b9006404 	str	w4, [x0, #100]
   8989c:	4b030043 	sub	w3, w2, w3
   898a0:	b9005803 	str	w3, [x0, #88]
   898a4:	39402e61 	ldrb	w1, [x19, #11]
   898a8:	f9400bf3 	ldr	x19, [sp, #16]
   898ac:	4b010042 	sub	w2, w2, w1
   898b0:	b9007002 	str	w2, [x0, #112]
   898b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   898b8:	d65f03c0 	ret
   898bc:	b9412c01 	ldr	w1, [x0, #300]
   898c0:	321c0021 	orr	w1, w1, #0x10
   898c4:	b9012c01 	str	w1, [x0, #300]
   898c8:	39401262 	ldrb	w2, [x19, #4]
   898cc:	3607f722 	tbz	w2, #0, 897b0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xa0>
   898d0:	17ffffb4 	b	897a0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x90>
   898d4:	b9412c01 	ldr	w1, [x0, #300]
   898d8:	321d0021 	orr	w1, w1, #0x8
   898dc:	b9012c01 	str	w1, [x0, #300]
   898e0:	17ffffe7 	b	8987c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x16c>
   898e4:	940054fb 	bl	9ecd0 <CLogger::Get()>
   898e8:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   898ec:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   898f0:	39400264 	ldrb	w4, [x19]
   898f4:	91182063 	add	x3, x3, #0x608
   898f8:	911ee021 	add	x1, x1, #0x7b8
   898fc:	52800062 	mov	w2, #0x3                   	// #3
   89900:	f9400bf3 	ldr	x19, [sp, #16]
   89904:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89908:	1400542e 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8990c:	d503201f 	nop

0000000000089910 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   89910:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   89914:	910003fd 	mov	x29, sp
   89918:	2a0103e6 	mov	w6, w1
   8991c:	52800003 	mov	w3, #0x0                   	// #0
   89920:	52800182 	mov	w2, #0xc                   	// #12
   89924:	910083e1 	add	x1, sp, #0x20
   89928:	a90153f3 	stp	x19, x20, [sp, #16]
   8992c:	b0000133 	adrp	x19, ae000 <FromDevice+0x108>
   89930:	911ee273 	add	x19, x19, #0x7b8
   89934:	39456404 	ldrb	w4, [x0, #345]
   89938:	b9401a67 	ldr	w7, [x19, #24]
   8993c:	f9400a69 	ldr	x9, [x19, #16]
   89940:	11000488 	add	w8, w4, #0x1
   89944:	12000c84 	and	w4, w4, #0xf
   89948:	b9002be7 	str	w7, [sp, #40]
   8994c:	39056408 	strb	w8, [x0, #345]
   89950:	f90013e9 	str	x9, [sp, #32]
   89954:	390087e4 	strb	w4, [sp, #33]
   89958:	3900afe6 	strb	w6, [sp, #43]
   8995c:	9400045d 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89960:	72001c1f 	tst	w0, #0xff
   89964:	2a0003f4 	mov	w20, w0
   89968:	540000a0 	b.eq	8997c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x6c>  // b.none
   8996c:	2a1403e0 	mov	w0, w20
   89970:	a94153f3 	ldp	x19, x20, [sp, #16]
   89974:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89978:	d65f03c0 	ret
   8997c:	940054d5 	bl	9ecd0 <CLogger::Get()>
   89980:	aa1303e1 	mov	x1, x19
   89984:	52800022 	mov	w2, #0x1                   	// #1
   89988:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   8998c:	9118a063 	add	x3, x3, #0x628
   89990:	9400540c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89994:	2a1403e0 	mov	w0, w20
   89998:	a94153f3 	ldp	x19, x20, [sp, #16]
   8999c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   899a0:	d65f03c0 	ret
   899a4:	d503201f 	nop
   899a8:	d503201f 	nop
   899ac:	d503201f 	nop

00000000000899b0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   899b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   899b4:	910003fd 	mov	x29, sp
   899b8:	7100043f 	cmp	w1, #0x1
   899bc:	a90153f3 	stp	x19, x20, [sp, #16]
   899c0:	b0000133 	adrp	x19, ae000 <FromDevice+0x108>
   899c4:	911ee273 	add	x19, x19, #0x7b8
   899c8:	79405262 	ldrh	w2, [x19, #40]
   899cc:	f9401263 	ldr	x3, [x19, #32]
   899d0:	790053e2 	strh	w2, [sp, #40]
   899d4:	f90013e3 	str	x3, [sp, #32]
   899d8:	54000420 	b.eq	89a5c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>  // b.none
   899dc:	7100083f 	cmp	w1, #0x2
   899e0:	540000e0 	b.eq	899fc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x4c>  // b.none
   899e4:	52800034 	mov	w20, #0x1                   	// #1
   899e8:	34000101 	cbz	w1, 89a08 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   899ec:	2a1403e0 	mov	w0, w20
   899f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   899f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   899f8:	d65f03c0 	ret
   899fc:	52841001 	mov	w1, #0x2080                	// #8320
   89a00:	72bfec41 	movk	w1, #0xff62, lsl #16
   89a04:	b80223e1 	stur	w1, [sp, #34]
   89a08:	39456404 	ldrb	w4, [x0, #345]
   89a0c:	52800003 	mov	w3, #0x0                   	// #0
   89a10:	52800142 	mov	w2, #0xa                   	// #10
   89a14:	910083e1 	add	x1, sp, #0x20
   89a18:	11000485 	add	w5, w4, #0x1
   89a1c:	12000c84 	and	w4, w4, #0xf
   89a20:	39056405 	strb	w5, [x0, #345]
   89a24:	390087e4 	strb	w4, [sp, #33]
   89a28:	9400042a 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89a2c:	72001c14 	ands	w20, w0, #0xff
   89a30:	54fffde1 	b.ne	899ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x3c>  // b.any
   89a34:	940054a7 	bl	9ecd0 <CLogger::Get()>
   89a38:	aa1303e1 	mov	x1, x19
   89a3c:	52800022 	mov	w2, #0x1                   	// #1
   89a40:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89a44:	91190063 	add	x3, x3, #0x640
   89a48:	940053de 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89a4c:	2a1403e0 	mov	w0, w20
   89a50:	a94153f3 	ldp	x19, x20, [sp, #16]
   89a54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89a58:	d65f03c0 	ret
   89a5c:	52841301 	mov	w1, #0x2098                	// #8344
   89a60:	72bfec41 	movk	w1, #0xff62, lsl #16
   89a64:	b80263e1 	stur	w1, [sp, #38]
   89a68:	17ffffe8 	b	89a08 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>
   89a6c:	d503201f 	nop

0000000000089a70 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   89a70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89a74:	910003fd 	mov	x29, sp
   89a78:	f9000bf3 	str	x19, [sp, #16]
   89a7c:	aa0003f3 	mov	x19, x0
   89a80:	94001d34 	bl	90f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   89a84:	b0000124 	adrp	x4, ae000 <FromDevice+0x108>
   89a88:	911ca084 	add	x4, x4, #0x728
   89a8c:	aa1303e0 	mov	x0, x19
   89a90:	52800003 	mov	w3, #0x0                   	// #0
   89a94:	52800002 	mov	w2, #0x0                   	// #0
   89a98:	52800061 	mov	w1, #0x3                   	// #3
   89a9c:	f9000264 	str	x4, [x19]
   89aa0:	97fff920 	bl	87f20 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   89aa4:	39056260 	strb	w0, [x19, #344]
   89aa8:	3905667f 	strb	wzr, [x19, #345]
   89aac:	f9400bf3 	ldr	x19, [sp, #16]
   89ab0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89ab4:	d65f03c0 	ret
   89ab8:	d503201f 	nop
   89abc:	d503201f 	nop

0000000000089ac0 <CUSBGamePadSwitchProDevice::Configure()>:
   89ac0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89ac4:	910003fd 	mov	x29, sp
   89ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   89acc:	39456014 	ldrb	w20, [x0, #344]
   89ad0:	f90013f5 	str	x21, [sp, #32]
   89ad4:	34000bb4 	cbz	w20, 89c48 <CUSBGamePadSwitchProDevice::Configure()+0x188>
   89ad8:	52800801 	mov	w1, #0x40                  	// #64
   89adc:	aa0003f3 	mov	x19, x0
   89ae0:	7902a001 	strh	w1, [x0, #336]
   89ae4:	94001cef 	bl	90ea0 <CUSBGamePadDevice::Configure()>
   89ae8:	72001c14 	ands	w20, w0, #0xff
   89aec:	54000da0 	b.eq	89ca0 <CUSBGamePadSwitchProDevice::Configure()+0x1e0>  // b.none
   89af0:	7942a262 	ldrh	w2, [x19, #336]
   89af4:	52800084 	mov	w4, #0x4                   	// #4
   89af8:	d2c01fe1 	mov	x1, #0xff00000000          	// #1095216660480
   89afc:	52800245 	mov	w5, #0x12                  	// #18
   89b00:	52800003 	mov	w3, #0x0                   	// #0
   89b04:	b9010e7f 	str	wzr, [x19, #268]
   89b08:	b9004a64 	str	w4, [x19, #72]
   89b0c:	aa1303e0 	mov	x0, x19
   89b10:	f9002a61 	str	x1, [x19, #80]
   89b14:	f805c261 	stur	x1, [x19, #92]
   89b18:	91003c44 	add	x4, x2, #0xf
   89b1c:	f9003661 	str	x1, [x19, #104]
   89b20:	927c3084 	and	x4, x4, #0x1fff0
   89b24:	f8074261 	stur	x1, [x19, #116]
   89b28:	cb2463ff 	sub	sp, sp, x4
   89b2c:	b9012a65 	str	w5, [x19, #296]
   89b30:	910003e1 	mov	x1, sp
   89b34:	910003f5 	mov	x21, sp
   89b38:	9400044e 	bl	8ac70 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   89b3c:	52807004 	mov	w4, #0x380                 	// #896
   89b40:	52800003 	mov	w3, #0x0                   	// #0
   89b44:	52800042 	mov	w2, #0x2                   	// #2
   89b48:	9100e3a1 	add	x1, x29, #0x38
   89b4c:	aa1303e0 	mov	x0, x19
   89b50:	790073a4 	strh	w4, [x29, #56]
   89b54:	940003df 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89b58:	72001c14 	ands	w20, w0, #0xff
   89b5c:	54000880 	b.eq	89c6c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>  // b.none
   89b60:	7942a262 	ldrh	w2, [x19, #336]
   89b64:	52800003 	mov	w3, #0x0                   	// #0
   89b68:	910003e1 	mov	x1, sp
   89b6c:	aa1303e0 	mov	x0, x19
   89b70:	94000440 	bl	8ac70 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   89b74:	7100001f 	cmp	w0, #0x0
   89b78:	54000aed 	b.le	89cd4 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   89b7c:	394003e0 	ldrb	w0, [sp]
   89b80:	7102041f 	cmp	w0, #0x81
   89b84:	54000461 	b.ne	89c10 <CUSBGamePadSwitchProDevice::Configure()+0x150>  // b.any
   89b88:	394007e0 	ldrb	w0, [sp, #1]
   89b8c:	71000c1f 	cmp	w0, #0x3
   89b90:	54000401 	b.ne	89c10 <CUSBGamePadSwitchProDevice::Configure()+0x150>  // b.any
   89b94:	52805004 	mov	w4, #0x280                 	// #640
   89b98:	52800003 	mov	w3, #0x0                   	// #0
   89b9c:	52800042 	mov	w2, #0x2                   	// #2
   89ba0:	910103a1 	add	x1, x29, #0x40
   89ba4:	aa1303e0 	mov	x0, x19
   89ba8:	790083a4 	strh	w4, [x29, #64]
   89bac:	940003c9 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89bb0:	72001c14 	ands	w20, w0, #0xff
   89bb4:	54000a20 	b.eq	89cf8 <CUSBGamePadSwitchProDevice::Configure()+0x238>  // b.none
   89bb8:	7942a262 	ldrh	w2, [x19, #336]
   89bbc:	52800003 	mov	w3, #0x0                   	// #0
   89bc0:	910003e1 	mov	x1, sp
   89bc4:	aa1303e0 	mov	x0, x19
   89bc8:	9400042a 	bl	8ac70 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   89bcc:	7100001f 	cmp	w0, #0x0
   89bd0:	54000d6d 	b.le	89d7c <CUSBGamePadSwitchProDevice::Configure()+0x2bc>
   89bd4:	394003e0 	ldrb	w0, [sp]
   89bd8:	7102041f 	cmp	w0, #0x81
   89bdc:	54000081 	b.ne	89bec <CUSBGamePadSwitchProDevice::Configure()+0x12c>  // b.any
   89be0:	394007e0 	ldrb	w0, [sp, #1]
   89be4:	7100081f 	cmp	w0, #0x2
   89be8:	54000980 	b.eq	89d18 <CUSBGamePadSwitchProDevice::Configure()+0x258>  // b.none
   89bec:	94005439 	bl	9ecd0 <CLogger::Get()>
   89bf0:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89bf4:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89bf8:	911a6063 	add	x3, x3, #0x698
   89bfc:	911ee021 	add	x1, x1, #0x7b8
   89c00:	52800022 	mov	w2, #0x1                   	// #1
   89c04:	52800014 	mov	w20, #0x0                   	// #0
   89c08:	9400536e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89c0c:	14000009 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>
   89c10:	94005430 	bl	9ecd0 <CLogger::Get()>
   89c14:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89c18:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89c1c:	91196063 	add	x3, x3, #0x658
   89c20:	911ee021 	add	x1, x1, #0x7b8
   89c24:	52800022 	mov	w2, #0x1                   	// #1
   89c28:	52800014 	mov	w20, #0x0                   	// #0
   89c2c:	94005365 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89c30:	910003bf 	mov	sp, x29
   89c34:	2a1403e0 	mov	w0, w20
   89c38:	a94153f3 	ldp	x19, x20, [sp, #16]
   89c3c:	f94013f5 	ldr	x21, [sp, #32]
   89c40:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89c44:	d65f03c0 	ret
   89c48:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89c4c:	911ee021 	add	x1, x1, #0x7b8
   89c50:	97fff8a0 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   89c54:	910003bf 	mov	sp, x29
   89c58:	2a1403e0 	mov	w0, w20
   89c5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89c60:	f94013f5 	ldr	x21, [sp, #32]
   89c64:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89c68:	d65f03c0 	ret
   89c6c:	94005419 	bl	9ecd0 <CLogger::Get()>
   89c70:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89c74:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89c78:	91196063 	add	x3, x3, #0x658
   89c7c:	911ee021 	add	x1, x1, #0x7b8
   89c80:	52800022 	mov	w2, #0x1                   	// #1
   89c84:	9400534f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89c88:	910003bf 	mov	sp, x29
   89c8c:	2a1403e0 	mov	w0, w20
   89c90:	a94153f3 	ldp	x19, x20, [sp, #16]
   89c94:	f94013f5 	ldr	x21, [sp, #32]
   89c98:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89c9c:	d65f03c0 	ret
   89ca0:	9400540c 	bl	9ecd0 <CLogger::Get()>
   89ca4:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89ca8:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89cac:	9108a063 	add	x3, x3, #0x228
   89cb0:	911ee021 	add	x1, x1, #0x7b8
   89cb4:	52800022 	mov	w2, #0x1                   	// #1
   89cb8:	94005342 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89cbc:	910003bf 	mov	sp, x29
   89cc0:	2a1403e0 	mov	w0, w20
   89cc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   89cc8:	f94013f5 	ldr	x21, [sp, #32]
   89ccc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89cd0:	d65f03c0 	ret
   89cd4:	940053ff 	bl	9ecd0 <CLogger::Get()>
   89cd8:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89cdc:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89ce0:	9119e063 	add	x3, x3, #0x678
   89ce4:	911ee021 	add	x1, x1, #0x7b8
   89ce8:	52800022 	mov	w2, #0x1                   	// #1
   89cec:	52800014 	mov	w20, #0x0                   	// #0
   89cf0:	94005334 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89cf4:	17ffffcf 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>
   89cf8:	940053f6 	bl	9ecd0 <CLogger::Get()>
   89cfc:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89d00:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89d04:	911a6063 	add	x3, x3, #0x698
   89d08:	911ee021 	add	x1, x1, #0x7b8
   89d0c:	52800022 	mov	w2, #0x1                   	// #1
   89d10:	9400532c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89d14:	17ffffc7 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>
   89d18:	52809004 	mov	w4, #0x480                 	// #1152
   89d1c:	52800003 	mov	w3, #0x0                   	// #0
   89d20:	52800042 	mov	w2, #0x2                   	// #2
   89d24:	910123a1 	add	x1, x29, #0x48
   89d28:	aa1303e0 	mov	x0, x19
   89d2c:	790093a4 	strh	w4, [x29, #72]
   89d30:	94000368 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89d34:	72001c14 	ands	w20, w0, #0xff
   89d38:	54000440 	b.eq	89dc0 <CUSBGamePadSwitchProDevice::Configure()+0x300>  // b.none
   89d3c:	f9400262 	ldr	x2, [x19]
   89d40:	aa1303e0 	mov	x0, x19
   89d44:	b9415661 	ldr	w1, [x19, #340]
   89d48:	f9403842 	ldr	x2, [x2, #112]
   89d4c:	d63f0040 	blr	x2
   89d50:	7942a262 	ldrh	w2, [x19, #336]
   89d54:	aa1503e1 	mov	x1, x21
   89d58:	52800003 	mov	w3, #0x0                   	// #0
   89d5c:	aa1303e0 	mov	x0, x19
   89d60:	940003c4 	bl	8ac70 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   89d64:	7100001f 	cmp	w0, #0x0
   89d68:	540001cd 	b.le	89da0 <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   89d6c:	aa1303e0 	mov	x0, x19
   89d70:	940003f0 	bl	8ad30 <CUSBHIDDevice::StartRequest()>
   89d74:	12001c14 	and	w20, w0, #0xff
   89d78:	17ffffae 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>
   89d7c:	940053d5 	bl	9ecd0 <CLogger::Get()>
   89d80:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89d84:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89d88:	911ae063 	add	x3, x3, #0x6b8
   89d8c:	911ee021 	add	x1, x1, #0x7b8
   89d90:	52800022 	mov	w2, #0x1                   	// #1
   89d94:	52800014 	mov	w20, #0x0                   	// #0
   89d98:	9400530a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89d9c:	17ffffa5 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>
   89da0:	940053cc 	bl	9ecd0 <CLogger::Get()>
   89da4:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89da8:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89dac:	911be063 	add	x3, x3, #0x6f8
   89db0:	911ee021 	add	x1, x1, #0x7b8
   89db4:	52800022 	mov	w2, #0x1                   	// #1
   89db8:	94005302 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89dbc:	17ffffec 	b	89d6c <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   89dc0:	940053c4 	bl	9ecd0 <CLogger::Get()>
   89dc4:	b0000123 	adrp	x3, ae000 <FromDevice+0x108>
   89dc8:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89dcc:	911b6063 	add	x3, x3, #0x6d8
   89dd0:	911ee021 	add	x1, x1, #0x7b8
   89dd4:	52800022 	mov	w2, #0x1                   	// #1
   89dd8:	940052fa 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89ddc:	17ffff95 	b	89c30 <CUSBGamePadSwitchProDevice::Configure()+0x170>

0000000000089de0 <CUSBGamePadSwitchProDevice::GetProperties()>:
   89de0:	52800960 	mov	w0, #0x4b                  	// #75
   89de4:	d65f03c0 	ret
	...

0000000000089df0 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   89df0:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89df4:	9120e021 	add	x1, x1, #0x838
   89df8:	f9000001 	str	x1, [x0]
   89dfc:	14001c69 	b	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

0000000000089e00 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   89e00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89e04:	b0000121 	adrp	x1, ae000 <FromDevice+0x108>
   89e08:	9120e021 	add	x1, x1, #0x838
   89e0c:	910003fd 	mov	x29, sp
   89e10:	f9000bf3 	str	x19, [sp, #16]
   89e14:	aa0003f3 	mov	x19, x0
   89e18:	f9000001 	str	x1, [x0]
   89e1c:	94001c61 	bl	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   89e20:	aa1303e0 	mov	x0, x19
   89e24:	d2802b01 	mov	x1, #0x158                 	// #344
   89e28:	f9400bf3 	ldr	x19, [sp, #16]
   89e2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89e30:	14006e38 	b	a5710 <operator delete(void*, unsigned long)>
   89e34:	d503201f 	nop
   89e38:	d503201f 	nop
   89e3c:	d503201f 	nop

0000000000089e40 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   89e40:	93407c22 	sxtw	x2, w1
   89e44:	f100105f 	cmp	x2, #0x4
   89e48:	54000069 	b.ls	89e54 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x14>  // b.plast
   89e4c:	52800000 	mov	w0, #0x0                   	// #0
   89e50:	d65f03c0 	ret
   89e54:	b0000122 	adrp	x2, ae000 <FromDevice+0x108>
   89e58:	91232042 	add	x2, x2, #0x8c8
   89e5c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89e60:	910003fd 	mov	x29, sp
   89e64:	52806025 	mov	w5, #0x301                 	// #769
   89e68:	52800003 	mov	w3, #0x0                   	// #0
   89e6c:	3861c844 	ldrb	w4, [x2, w1, sxtw]
   89e70:	910063e1 	add	x1, sp, #0x18
   89e74:	52800062 	mov	w2, #0x3                   	// #3
   89e78:	790033e5 	strh	w5, [sp, #24]
   89e7c:	39006be4 	strb	w4, [sp, #26]
   89e80:	94000314 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   89e84:	12001c00 	and	w0, w0, #0xff
   89e88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89e8c:	d65f03c0 	ret

0000000000089e90 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   89e90:	f100003f 	cmp	x1, #0x0
   89e94:	7a4e1840 	ccmp	w2, #0xe, #0x0, ne  // ne = any
   89e98:	540000c1 	b.ne	89eb0 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>  // b.any
   89e9c:	39400022 	ldrb	w2, [x1]
   89ea0:	35000082 	cbnz	w2, 89eb0 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>
   89ea4:	39400422 	ldrb	w2, [x1, #1]
   89ea8:	7100505f 	cmp	w2, #0x14
   89eac:	54000040 	b.eq	89eb4 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x24>  // b.none
   89eb0:	d65f03c0 	ret
   89eb4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89eb8:	910003fd 	mov	x29, sp
   89ebc:	a90153f3 	stp	x19, x20, [sp, #16]
   89ec0:	aa0003f3 	mov	x19, x0
   89ec4:	f940a402 	ldr	x2, [x0, #328]
   89ec8:	b40001a2 	cbz	x2, 89efc <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   89ecc:	aa0003f4 	mov	x20, x0
   89ed0:	f8448682 	ldr	x2, [x20], #72
   89ed4:	f9404442 	ldr	x2, [x2, #136]
   89ed8:	d63f0040 	blr	x2
   89edc:	b9415660 	ldr	w0, [x19, #340]
   89ee0:	aa1403e1 	mov	x1, x20
   89ee4:	f940a662 	ldr	x2, [x19, #328]
   89ee8:	a94153f3 	ldp	x19, x20, [sp, #16]
   89eec:	51000400 	sub	w0, w0, #0x1
   89ef0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89ef4:	aa0203f0 	mov	x16, x2
   89ef8:	d61f0200 	br	x16
   89efc:	a94153f3 	ldp	x19, x20, [sp, #16]
   89f00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89f04:	d65f03c0 	ret
   89f08:	d503201f 	nop
   89f0c:	d503201f 	nop

0000000000089f10 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   89f10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   89f14:	910003fd 	mov	x29, sp
   89f18:	b4000921 	cbz	x1, 8a03c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   89f1c:	52828002 	mov	w2, #0x1400                	// #5120
   89f20:	79400023 	ldrh	w3, [x1]
   89f24:	6b02007f 	cmp	w3, w2
   89f28:	54000961 	b.ne	8a054 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x144>  // b.any
   89f2c:	b0000125 	adrp	x5, ae000 <FromDevice+0x108>
   89f30:	912320a7 	add	x7, x5, #0x8c8
   89f34:	79400423 	ldrh	w3, [x1, #2]
   89f38:	910020e2 	add	x2, x7, #0x8
   89f3c:	910120e5 	add	x5, x7, #0x48
   89f40:	b9012c1f 	str	wzr, [x0, #300]
   89f44:	d503201f 	nop
   89f48:	360000a3 	tbz	w3, #0, 89f5c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x4c>
   89f4c:	b9412c04 	ldr	w4, [x0, #300]
   89f50:	b9400046 	ldr	w6, [x2]
   89f54:	2a060084 	orr	w4, w4, w6
   89f58:	b9012c04 	str	w4, [x0, #300]
   89f5c:	91001042 	add	x2, x2, #0x4
   89f60:	53017c63 	lsr	w3, w3, #1
   89f64:	eb05005f 	cmp	x2, x5
   89f68:	54ffff01 	b.ne	89f48 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x38>  // b.any
   89f6c:	aa0103e8 	mov	x8, x1
   89f70:	52800003 	mov	w3, #0x0                   	// #0
   89f74:	78c06d02 	ldrsh	w2, [x8, #6]!
   89f78:	d37f7c66 	ubfiz	x6, x3, #1, #32
   89f7c:	8b2340c3 	add	x3, x6, w3, uxtw
   89f80:	8b030803 	add	x3, x0, x3, lsl #2
   89f84:	d2800024 	mov	x4, #0x1                   	// #1
   89f88:	910120e5 	add	x5, x7, #0x48
   89f8c:	f100109f 	cmp	x4, #0x4
   89f90:	52801fe9 	mov	w9, #0xff                  	// #255
   89f94:	11402042 	add	w2, w2, #0x8, lsl #12
   89f98:	53087c42 	lsr	w2, w2, #8
   89f9c:	b9004c62 	str	w2, [x3, #76]
   89fa0:	54000200 	b.eq	89fe0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xd0>  // b.none
   89fa4:	78e47902 	ldrsh	w2, [x8, x4, lsl #1]
   89fa8:	b86478a3 	ldr	w3, [x5, x4, lsl #2]
   89fac:	91000484 	add	x4, x4, #0x1
   89fb0:	11402042 	add	w2, w2, #0x8, lsl #12
   89fb4:	53087c42 	lsr	w2, w2, #8
   89fb8:	121e7867 	and	w7, w3, #0xfffffffd
   89fbc:	4b020126 	sub	w6, w9, w2
   89fc0:	710004ff 	cmp	w7, #0x1
   89fc4:	1a8200c2 	csel	w2, w6, w2, eq  // eq = none
   89fc8:	d37f7c66 	ubfiz	x6, x3, #1, #32
   89fcc:	8b2340c3 	add	x3, x6, w3, uxtw
   89fd0:	8b030803 	add	x3, x0, x3, lsl #2
   89fd4:	f100109f 	cmp	x4, #0x4
   89fd8:	b9004c62 	str	w2, [x3, #76]
   89fdc:	54fffe41 	b.ne	89fa4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x94>  // b.any
   89fe0:	39401022 	ldrb	w2, [x1, #4]
   89fe4:	b9007c02 	str	w2, [x0, #124]
   89fe8:	39c01022 	ldrsb	w2, [x1, #4]
   89fec:	37f80182 	tbnz	w2, #31, 8a01c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   89ff0:	39401422 	ldrb	w2, [x1, #5]
   89ff4:	b9008802 	str	w2, [x0, #136]
   89ff8:	39c01421 	ldrsb	w1, [x1, #5]
   89ffc:	37f80061 	tbnz	w1, #31, 8a008 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf8>
   8a000:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8a004:	d65f03c0 	ret
   8a008:	b9412c01 	ldr	w1, [x0, #300]
   8a00c:	321c0021 	orr	w1, w1, #0x10
   8a010:	b9012c01 	str	w1, [x0, #300]
   8a014:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8a018:	d65f03c0 	ret
   8a01c:	b9412c02 	ldr	w2, [x0, #300]
   8a020:	321d0042 	orr	w2, w2, #0x8
   8a024:	b9012c02 	str	w2, [x0, #300]
   8a028:	39401422 	ldrb	w2, [x1, #5]
   8a02c:	b9008802 	str	w2, [x0, #136]
   8a030:	39c01421 	ldrsb	w1, [x1, #5]
   8a034:	36fffe61 	tbz	w1, #31, 8a000 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf0>
   8a038:	17fffff4 	b	8a008 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf8>
   8a03c:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a040:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a044:	911fa021 	add	x1, x1, #0x7e8
   8a048:	910a2000 	add	x0, x0, #0x288
   8a04c:	52800ee2 	mov	w2, #0x77                  	// #119
   8a050:	9400498c 	bl	9c680 <assertion_failed>
   8a054:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a058:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a05c:	911fa021 	add	x1, x1, #0x7e8
   8a060:	91200000 	add	x0, x0, #0x800
   8a064:	52800f02 	mov	w2, #0x78                  	// #120
   8a068:	94004986 	bl	9c680 <assertion_failed>
   8a06c:	d503201f 	nop

000000000008a070 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   8a070:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a074:	910003fd 	mov	x29, sp
   8a078:	d2800102 	mov	x2, #0x8                   	// #8
   8a07c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a080:	2a0103f3 	mov	w19, w1
   8a084:	aa0003f4 	mov	x20, x0
   8a088:	52800001 	mov	w1, #0x0                   	// #0
   8a08c:	9100a3e0 	add	x0, sp, #0x28
   8a090:	94006900 	bl	a4490 <memset>
   8a094:	52800100 	mov	w0, #0x8                   	// #8
   8a098:	7100067f 	cmp	w19, #0x1
   8a09c:	3900a7e0 	strb	w0, [sp, #41]
   8a0a0:	54000140 	b.eq	8a0c8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>  // b.none
   8a0a4:	71000a7f 	cmp	w19, #0x2
   8a0a8:	54000240 	b.eq	8a0f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>  // b.none
   8a0ac:	34000133 	cbz	w19, 8a0d0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   8a0b0:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a0b4:	f0000100 	adrp	x0, ad000 <From+0x4c0>
   8a0b8:	911fa021 	add	x1, x1, #0x7e8
   8a0bc:	912f4000 	add	x0, x0, #0xbd0
   8a0c0:	52801ca2 	mov	w2, #0xe5                  	// #229
   8a0c4:	9400496f 	bl	9c680 <assertion_failed>
   8a0c8:	12800000 	mov	w0, #0xffffffff            	// #-1
   8a0cc:	3900b3e0 	strb	w0, [sp, #44]
   8a0d0:	9100a3e1 	add	x1, sp, #0x28
   8a0d4:	aa1403e0 	mov	x0, x20
   8a0d8:	52800003 	mov	w3, #0x0                   	// #0
   8a0dc:	52800102 	mov	w2, #0x8                   	// #8
   8a0e0:	9400027c 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8a0e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a0e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a0ec:	d65f03c0 	ret
   8a0f0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8a0f4:	9100a3e1 	add	x1, sp, #0x28
   8a0f8:	52800003 	mov	w3, #0x0                   	// #0
   8a0fc:	52800102 	mov	w2, #0x8                   	// #8
   8a100:	3900afe0 	strb	w0, [sp, #43]
   8a104:	aa1403e0 	mov	x0, x20
   8a108:	94000272 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8a10c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a110:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a114:	d65f03c0 	ret
   8a118:	d503201f 	nop
   8a11c:	d503201f 	nop

000000000008a120 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   8a120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a124:	910003fd 	mov	x29, sp
   8a128:	f9000bf3 	str	x19, [sp, #16]
   8a12c:	aa0003f3 	mov	x19, x0
   8a130:	94001b88 	bl	90f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8a134:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a138:	9120e000 	add	x0, x0, #0x838
   8a13c:	f9000260 	str	x0, [x19]
   8a140:	f9400bf3 	ldr	x19, [sp, #16]
   8a144:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a148:	d65f03c0 	ret
   8a14c:	d503201f 	nop

000000000008a150 <CUSBGamePadXbox360Device::Configure()>:
   8a150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a154:	528001c1 	mov	w1, #0xe                   	// #14
   8a158:	910003fd 	mov	x29, sp
   8a15c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a160:	aa0003f3 	mov	x19, x0
   8a164:	7902a001 	strh	w1, [x0, #336]
   8a168:	94001b4e 	bl	90ea0 <CUSBGamePadDevice::Configure()>
   8a16c:	72001c14 	ands	w20, w0, #0xff
   8a170:	54000380 	b.eq	8a1e0 <CUSBGamePadXbox360Device::Configure()+0x90>  // b.none
   8a174:	f9400262 	ldr	x2, [x19]
   8a178:	d2c01fe1 	mov	x1, #0xff00000000          	// #1095216660480
   8a17c:	52800243 	mov	w3, #0x12                  	// #18
   8a180:	528000c4 	mov	w4, #0x6                   	// #6
   8a184:	aa1303e0 	mov	x0, x19
   8a188:	f9403842 	ldr	x2, [x2, #112]
   8a18c:	b9004a64 	str	w4, [x19, #72]
   8a190:	f9002a61 	str	x1, [x19, #80]
   8a194:	f805c261 	stur	x1, [x19, #92]
   8a198:	f9003661 	str	x1, [x19, #104]
   8a19c:	f8074261 	stur	x1, [x19, #116]
   8a1a0:	f9004261 	str	x1, [x19, #128]
   8a1a4:	f808c261 	stur	x1, [x19, #140]
   8a1a8:	b9415661 	ldr	w1, [x19, #340]
   8a1ac:	b9010e7f 	str	wzr, [x19, #268]
   8a1b0:	b9012a63 	str	w3, [x19, #296]
   8a1b4:	d63f0040 	blr	x2
   8a1b8:	72001c14 	ands	w20, w0, #0xff
   8a1bc:	540000a1 	b.ne	8a1d0 <CUSBGamePadXbox360Device::Configure()+0x80>  // b.any
   8a1c0:	2a1403e0 	mov	w0, w20
   8a1c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a1c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a1cc:	d65f03c0 	ret
   8a1d0:	aa1303e0 	mov	x0, x19
   8a1d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a1d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a1dc:	140002d5 	b	8ad30 <CUSBHIDDevice::StartRequest()>
   8a1e0:	940052bc 	bl	9ecd0 <CLogger::Get()>
   8a1e4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a1e8:	91232021 	add	x1, x1, #0x8c8
   8a1ec:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a1f0:	91018021 	add	x1, x1, #0x60
   8a1f4:	9108a063 	add	x3, x3, #0x228
   8a1f8:	52800022 	mov	w2, #0x1                   	// #1
   8a1fc:	940051f1 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a200:	2a1403e0 	mov	w0, w20
   8a204:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a208:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a20c:	d65f03c0 	ret

000000000008a210 <CUSBGamePadXbox360Device::GetProperties()>:
   8a210:	52800160 	mov	w0, #0xb                   	// #11
   8a214:	d65f03c0 	ret
	...

000000000008a220 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   8a220:	39401022 	ldrb	w2, [x1, #4]
   8a224:	52880003 	mov	w3, #0x4000                	// #16384
   8a228:	f27e005f 	tst	x2, #0x4
   8a22c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
   8a230:	b9012c03 	str	w3, [x0, #300]
   8a234:	36180062 	tbz	w2, #3, 8a240 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x20>
   8a238:	32150063 	orr	w3, w3, #0x800
   8a23c:	b9012c03 	str	w3, [x0, #300]
   8a240:	36200082 	tbz	w2, #4, 8a250 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x30>
   8a244:	b9412c03 	ldr	w3, [x0, #300]
   8a248:	32170063 	orr	w3, w3, #0x200
   8a24c:	b9012c03 	str	w3, [x0, #300]
   8a250:	36280082 	tbz	w2, #5, 8a260 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x40>
   8a254:	b9412c03 	ldr	w3, [x0, #300]
   8a258:	32180063 	orr	w3, w3, #0x100
   8a25c:	b9012c03 	str	w3, [x0, #300]
   8a260:	36300082 	tbz	w2, #6, 8a270 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x50>
   8a264:	b9412c03 	ldr	w3, [x0, #300]
   8a268:	32160063 	orr	w3, w3, #0x400
   8a26c:	b9012c03 	str	w3, [x0, #300]
   8a270:	36380082 	tbz	w2, #7, 8a280 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x60>
   8a274:	b9412c02 	ldr	w2, [x0, #300]
   8a278:	32190042 	orr	w2, w2, #0x80
   8a27c:	b9012c02 	str	w2, [x0, #300]
   8a280:	39401422 	ldrb	w2, [x1, #5]
   8a284:	36000082 	tbz	w2, #0, 8a294 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x74>
   8a288:	b9412c03 	ldr	w3, [x0, #300]
   8a28c:	32110063 	orr	w3, w3, #0x8000
   8a290:	b9012c03 	str	w3, [x0, #300]
   8a294:	36080082 	tbz	w2, #1, 8a2a4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x84>
   8a298:	b9412c03 	ldr	w3, [x0, #300]
   8a29c:	320f0063 	orr	w3, w3, #0x20000
   8a2a0:	b9012c03 	str	w3, [x0, #300]
   8a2a4:	36100082 	tbz	w2, #2, 8a2b4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x94>
   8a2a8:	b9412c03 	ldr	w3, [x0, #300]
   8a2ac:	320e0063 	orr	w3, w3, #0x40000
   8a2b0:	b9012c03 	str	w3, [x0, #300]
   8a2b4:	36180082 	tbz	w2, #3, 8a2c4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xa4>
   8a2b8:	b9412c03 	ldr	w3, [x0, #300]
   8a2bc:	32100063 	orr	w3, w3, #0x10000
   8a2c0:	b9012c03 	str	w3, [x0, #300]
   8a2c4:	36200082 	tbz	w2, #4, 8a2d4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xb4>
   8a2c8:	b9412c03 	ldr	w3, [x0, #300]
   8a2cc:	321b0063 	orr	w3, w3, #0x20
   8a2d0:	b9012c03 	str	w3, [x0, #300]
   8a2d4:	36280082 	tbz	w2, #5, 8a2e4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xc4>
   8a2d8:	b9412c03 	ldr	w3, [x0, #300]
   8a2dc:	321a0063 	orr	w3, w3, #0x40
   8a2e0:	b9012c03 	str	w3, [x0, #300]
   8a2e4:	36300082 	tbz	w2, #6, 8a2f4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xd4>
   8a2e8:	b9412c03 	ldr	w3, [x0, #300]
   8a2ec:	32140063 	orr	w3, w3, #0x1000
   8a2f0:	b9012c03 	str	w3, [x0, #300]
   8a2f4:	36380082 	tbz	w2, #7, 8a304 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xe4>
   8a2f8:	b9412c02 	ldr	w2, [x0, #300]
   8a2fc:	32130042 	orr	w2, w2, #0x2000
   8a300:	b9012c02 	str	w2, [x0, #300]
   8a304:	79400c22 	ldrh	w2, [x1, #6]
   8a308:	13027c42 	asr	w2, w2, #2
   8a30c:	7101fc5f 	cmp	w2, #0x7f
   8a310:	b9007c02 	str	w2, [x0, #124]
   8a314:	5400008d 	b.le	8a324 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x104>
   8a318:	b9412c02 	ldr	w2, [x0, #300]
   8a31c:	321d0042 	orr	w2, w2, #0x8
   8a320:	b9012c02 	str	w2, [x0, #300]
   8a324:	79401022 	ldrh	w2, [x1, #8]
   8a328:	13027c42 	asr	w2, w2, #2
   8a32c:	7101fc5f 	cmp	w2, #0x7f
   8a330:	b9008802 	str	w2, [x0, #136]
   8a334:	5400008d 	b.le	8a344 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x124>
   8a338:	b9412c02 	ldr	w2, [x0, #300]
   8a33c:	321c0042 	orr	w2, w2, #0x10
   8a340:	b9012c02 	str	w2, [x0, #300]
   8a344:	79c01823 	ldrsh	w3, [x1, #12]
   8a348:	79c02022 	ldrsh	w2, [x1, #16]
   8a34c:	79c01425 	ldrsh	w5, [x1, #10]
   8a350:	11402063 	add	w3, w3, #0x8, lsl #12
   8a354:	79c01c24 	ldrsh	w4, [x1, #14]
   8a358:	53087c63 	lsr	w3, w3, #8
   8a35c:	11402041 	add	w1, w2, #0x8, lsl #12
   8a360:	52001c62 	eor	w2, w3, #0xff
   8a364:	53087c21 	lsr	w1, w1, #8
   8a368:	52001c21 	eor	w1, w1, #0xff
   8a36c:	114020a3 	add	w3, w5, #0x8, lsl #12
   8a370:	b9005802 	str	w2, [x0, #88]
   8a374:	53087c63 	lsr	w3, w3, #8
   8a378:	11402082 	add	w2, w4, #0x8, lsl #12
   8a37c:	b9007001 	str	w1, [x0, #112]
   8a380:	53087c41 	lsr	w1, w2, #8
   8a384:	b9004c03 	str	w3, [x0, #76]
   8a388:	b9006401 	str	w1, [x0, #100]
   8a38c:	d65f03c0 	ret

000000000008a390 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   8a390:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a394:	91264021 	add	x1, x1, #0x990
   8a398:	f9000001 	str	x1, [x0]
   8a39c:	14001b01 	b	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

000000000008a3a0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   8a3a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a3a4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a3a8:	91264021 	add	x1, x1, #0x990
   8a3ac:	910003fd 	mov	x29, sp
   8a3b0:	f9000bf3 	str	x19, [sp, #16]
   8a3b4:	aa0003f3 	mov	x19, x0
   8a3b8:	f9000001 	str	x1, [x0]
   8a3bc:	94001af9 	bl	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8a3c0:	aa1303e0 	mov	x0, x19
   8a3c4:	d2802c01 	mov	x1, #0x160                 	// #352
   8a3c8:	f9400bf3 	ldr	x19, [sp, #16]
   8a3cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a3d0:	14006cd0 	b	a5710 <operator delete(void*, unsigned long)>
   8a3d4:	d503201f 	nop
   8a3d8:	d503201f 	nop
   8a3dc:	d503201f 	nop

000000000008a3e0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   8a3e0:	b4000741 	cbz	x1, 8a4c8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe8>
   8a3e4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a3e8:	7100185f 	cmp	w2, #0x6
   8a3ec:	910003fd 	mov	x29, sp
   8a3f0:	aa0103e3 	mov	x3, x1
   8a3f4:	54000140 	b.eq	8a41c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>  // b.none
   8a3f8:	f940a404 	ldr	x4, [x0, #328]
   8a3fc:	a90153f3 	stp	x19, x20, [sp, #16]
   8a400:	aa0003f3 	mov	x19, x0
   8a404:	f100009f 	cmp	x4, #0x0
   8a408:	7a521840 	ccmp	w2, #0x12, #0x0, ne  // ne = any
   8a40c:	54000420 	b.eq	8a490 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb0>  // b.none
   8a410:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a414:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a418:	d65f03c0 	ret
   8a41c:	39400021 	ldrb	w1, [x1]
   8a420:	71001c3f 	cmp	w1, #0x7
   8a424:	54ffff81 	b.ne	8a414 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>  // b.any
   8a428:	39400461 	ldrb	w1, [x3, #1]
   8a42c:	7100c03f 	cmp	w1, #0x30
   8a430:	54ffff21 	b.ne	8a414 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>  // b.any
   8a434:	a90153f3 	stp	x19, x20, [sp, #16]
   8a438:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a43c:	91288033 	add	x19, x1, #0xa20
   8a440:	528001a2 	mov	w2, #0xd                   	// #13
   8a444:	f9451026 	ldr	x6, [x1, #2592]
   8a448:	910083e1 	add	x1, sp, #0x20
   8a44c:	39400865 	ldrb	w5, [x3, #2]
   8a450:	52800003 	mov	w3, #0x0                   	// #0
   8a454:	f8405264 	ldur	x4, [x19, #5]
   8a458:	f90013e6 	str	x6, [sp, #32]
   8a45c:	39008be5 	strb	w5, [sp, #34]
   8a460:	f80253e4 	stur	x4, [sp, #37]
   8a464:	940001c3 	bl	8ab70 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   8a468:	72001c1f 	tst	w0, #0xff
   8a46c:	54fffd21 	b.ne	8a410 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x30>  // b.any
   8a470:	94005218 	bl	9ecd0 <CLogger::Get()>
   8a474:	91004261 	add	x1, x19, #0x10
   8a478:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a47c:	9124e063 	add	x3, x3, #0x938
   8a480:	52800022 	mov	w2, #0x1                   	// #1
   8a484:	9400514f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a488:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a48c:	17ffffe2 	b	8a414 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>
   8a490:	39400022 	ldrb	w2, [x1]
   8a494:	7100805f 	cmp	w2, #0x20
   8a498:	54fffbc1 	b.ne	8a410 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x30>  // b.any
   8a49c:	aa0003f4 	mov	x20, x0
   8a4a0:	f8448682 	ldr	x2, [x20], #72
   8a4a4:	f9404442 	ldr	x2, [x2, #136]
   8a4a8:	d63f0040 	blr	x2
   8a4ac:	b9415660 	ldr	w0, [x19, #340]
   8a4b0:	aa1403e1 	mov	x1, x20
   8a4b4:	f940a662 	ldr	x2, [x19, #328]
   8a4b8:	51000400 	sub	w0, w0, #0x1
   8a4bc:	d63f0040 	blr	x2
   8a4c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a4c4:	17ffffd4 	b	8a414 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>
   8a4c8:	d65f03c0 	ret
   8a4cc:	d503201f 	nop

000000000008a4d0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   8a4d0:	90000122 	adrp	x2, ae000 <FromDevice+0x108>
   8a4d4:	91288042 	add	x2, x2, #0xa20
   8a4d8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a4dc:	910003fd 	mov	x29, sp
   8a4e0:	7100043f 	cmp	w1, #0x1
   8a4e4:	f9401043 	ldr	x3, [x2, #32]
   8a4e8:	f8425042 	ldur	x2, [x2, #37]
   8a4ec:	f9000be3 	str	x3, [sp, #16]
   8a4f0:	f80153e2 	stur	x2, [sp, #21]
   8a4f4:	54000140 	b.eq	8a51c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x4c>  // b.none
   8a4f8:	7100083f 	cmp	w1, #0x2
   8a4fc:	54000280 	b.eq	8a54c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>  // b.none
   8a500:	34000121 	cbz	w1, 8a524 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x54>
   8a504:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a508:	f0000100 	adrp	x0, ad000 <From+0x4c0>
   8a50c:	91254021 	add	x1, x1, #0x950
   8a510:	912f4000 	add	x0, x0, #0xbd0
   8a514:	52801dc2 	mov	w2, #0xee                  	// #238
   8a518:	9400485a 	bl	9c680 <assertion_failed>
   8a51c:	12800001 	mov	w1, #0xffffffff            	// #-1
   8a520:	390067e1 	strb	w1, [sp, #25]
   8a524:	39456004 	ldrb	w4, [x0, #344]
   8a528:	910043e1 	add	x1, sp, #0x10
   8a52c:	52800003 	mov	w3, #0x0                   	// #0
   8a530:	528001a2 	mov	w2, #0xd                   	// #13
   8a534:	11000485 	add	w5, w4, #0x1
   8a538:	39004be4 	strb	w4, [sp, #18]
   8a53c:	39056005 	strb	w5, [x0, #344]
   8a540:	94000164 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8a544:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a548:	d65f03c0 	ret
   8a54c:	12800001 	mov	w1, #0xffffffff            	// #-1
   8a550:	390063e1 	strb	w1, [sp, #24]
   8a554:	17fffff4 	b	8a524 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x54>
   8a558:	d503201f 	nop
   8a55c:	d503201f 	nop

000000000008a560 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   8a560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a564:	910003fd 	mov	x29, sp
   8a568:	f9000bf3 	str	x19, [sp, #16]
   8a56c:	aa0003f3 	mov	x19, x0
   8a570:	94001a78 	bl	90f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8a574:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a578:	91264000 	add	x0, x0, #0x990
   8a57c:	3905627f 	strb	wzr, [x19, #344]
   8a580:	f9000260 	str	x0, [x19]
   8a584:	f9400bf3 	ldr	x19, [sp, #16]
   8a588:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a58c:	d65f03c0 	ret

000000000008a590 <CUSBGamePadXboxOneDevice::Configure()>:
   8a590:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a594:	52800801 	mov	w1, #0x40                  	// #64
   8a598:	910003fd 	mov	x29, sp
   8a59c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a5a0:	aa0003f3 	mov	x19, x0
   8a5a4:	7902a001 	strh	w1, [x0, #336]
   8a5a8:	94001a3e 	bl	90ea0 <CUSBGamePadDevice::Configure()>
   8a5ac:	72001c14 	ands	w20, w0, #0xff
   8a5b0:	540005c0 	b.eq	8a668 <CUSBGamePadXboxOneDevice::Configure()+0xd8>  // b.none
   8a5b4:	f90013f5 	str	x21, [sp, #32]
   8a5b8:	90000135 	adrp	x21, ae000 <FromDevice+0x108>
   8a5bc:	912882b5 	add	x21, x21, #0xa20
   8a5c0:	3940d2a5 	ldrb	w5, [x21, #52]
   8a5c4:	d2c01fe4 	mov	x4, #0xff00000000          	// #1095216660480
   8a5c8:	52800207 	mov	w7, #0x10                  	// #16
   8a5cc:	528000c8 	mov	w8, #0x6                   	// #6
   8a5d0:	52800003 	mov	w3, #0x0                   	// #0
   8a5d4:	b9010e7f 	str	wzr, [x19, #268]
   8a5d8:	b94032a6 	ldr	w6, [x21, #48]
   8a5dc:	528000a2 	mov	w2, #0x5                   	// #5
   8a5e0:	9100e3e1 	add	x1, sp, #0x38
   8a5e4:	aa1303e0 	mov	x0, x19
   8a5e8:	b9004a68 	str	w8, [x19, #72]
   8a5ec:	f9002a64 	str	x4, [x19, #80]
   8a5f0:	f805c264 	stur	x4, [x19, #92]
   8a5f4:	f9003664 	str	x4, [x19, #104]
   8a5f8:	f8074264 	stur	x4, [x19, #116]
   8a5fc:	f9004264 	str	x4, [x19, #128]
   8a600:	f808c264 	stur	x4, [x19, #140]
   8a604:	b9012a67 	str	w7, [x19, #296]
   8a608:	b9003be6 	str	w6, [sp, #56]
   8a60c:	3900f3e5 	strb	w5, [sp, #60]
   8a610:	94000130 	bl	8aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8a614:	72001c14 	ands	w20, w0, #0xff
   8a618:	54000120 	b.eq	8a63c <CUSBGamePadXboxOneDevice::Configure()+0xac>  // b.none
   8a61c:	aa1303e0 	mov	x0, x19
   8a620:	940001c4 	bl	8ad30 <CUSBHIDDevice::StartRequest()>
   8a624:	12001c14 	and	w20, w0, #0xff
   8a628:	f94013f5 	ldr	x21, [sp, #32]
   8a62c:	2a1403e0 	mov	w0, w20
   8a630:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a634:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a638:	d65f03c0 	ret
   8a63c:	940051a5 	bl	9ecd0 <CLogger::Get()>
   8a640:	910042a1 	add	x1, x21, #0x10
   8a644:	52800022 	mov	w2, #0x1                   	// #1
   8a648:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a64c:	9125a063 	add	x3, x3, #0x968
   8a650:	940050dc 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a654:	2a1403e0 	mov	w0, w20
   8a658:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a65c:	f94013f5 	ldr	x21, [sp, #32]
   8a660:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a664:	d65f03c0 	ret
   8a668:	9400519a 	bl	9ecd0 <CLogger::Get()>
   8a66c:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a670:	91288021 	add	x1, x1, #0xa20
   8a674:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a678:	91004021 	add	x1, x1, #0x10
   8a67c:	9108a063 	add	x3, x3, #0x228
   8a680:	52800022 	mov	w2, #0x1                   	// #1
   8a684:	940050cf 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a688:	2a1403e0 	mov	w0, w20
   8a68c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a690:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a694:	d65f03c0 	ret
	...

000000000008a6a0 <CUSBGamePadXboxOneDevice::GetProperties()>:
   8a6a0:	52800120 	mov	w0, #0x9                   	// #9
   8a6a4:	d65f03c0 	ret
	...

000000000008a6b0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   8a6b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a6b4:	910003fd 	mov	x29, sp
   8a6b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a6bc:	b40003a0 	cbz	x0, 8a730 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   8a6c0:	aa0003f3 	mov	x19, x0
   8a6c4:	aa0103f4 	mov	x20, x1
   8a6c8:	9400098a 	bl	8ccf0 <CUSBRequest::GetStatus() const>
   8a6cc:	34000220 	cbz	w0, 8a710 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x60>
   8a6d0:	aa1303e0 	mov	x0, x19
   8a6d4:	9400096f 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8a6d8:	aa1303e0 	mov	x0, x19
   8a6dc:	d2800901 	mov	x1, #0x48                  	// #72
   8a6e0:	940009fc 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   8a6e4:	b50000f4 	cbnz	x20, 8a700 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x50>
   8a6e8:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a6ec:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a6f0:	91296021 	add	x1, x1, #0xa58
   8a6f4:	912a4000 	add	x0, x0, #0xa90
   8a6f8:	52801702 	mov	w2, #0xb8                  	// #184
   8a6fc:	940047e1 	bl	9c680 <assertion_failed>
   8a700:	aa1403e0 	mov	x0, x20
   8a704:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a708:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a70c:	14006bf5 	b	a56e0 <operator delete[](void*)>
   8a710:	94005170 	bl	9ecd0 <CLogger::Get()>
   8a714:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a718:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a71c:	9129c063 	add	x3, x3, #0xa70
   8a720:	912f2021 	add	x1, x1, #0xbc8
   8a724:	52800042 	mov	w2, #0x2                   	// #2
   8a728:	940050a6 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a72c:	17ffffe9 	b	8a6d0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x20>
   8a730:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a734:	d0000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8a738:	91296021 	add	x1, x1, #0xa58
   8a73c:	913d8000 	add	x0, x0, #0xf60
   8a740:	528015e2 	mov	w2, #0xaf                  	// #175
   8a744:	940047cf 	bl	9c680 <assertion_failed>
   8a748:	d503201f 	nop
   8a74c:	d503201f 	nop

000000000008a750 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   8a750:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a754:	910003fd 	mov	x29, sp
   8a758:	a90153f3 	stp	x19, x20, [sp, #16]
   8a75c:	aa0003f3 	mov	x19, x0
   8a760:	2a0203f4 	mov	w20, w2
   8a764:	97fff547 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8a768:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a76c:	912dc000 	add	x0, x0, #0xb70
   8a770:	b9002274 	str	w20, [x19, #32]
   8a774:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   8a778:	f9000260 	str	x0, [x19]
   8a77c:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   8a780:	35000094 	cbnz	w20, 8a790 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   8a784:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a788:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a78c:	d65f03c0 	ret
   8a790:	2a1403e0 	mov	w0, w20
   8a794:	94006bc3 	bl	a56a0 <operator new[](unsigned long)>
   8a798:	f9002260 	str	x0, [x19, #64]
   8a79c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a7a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a7a4:	d65f03c0 	ret
   8a7a8:	d503201f 	nop
   8a7ac:	d503201f 	nop

000000000008a7b0 <CUSBHIDDevice::~CUSBHIDDevice()>:
   8a7b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a7b4:	910003fd 	mov	x29, sp
   8a7b8:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a7bc:	912dc021 	add	x1, x1, #0xb70
   8a7c0:	a90153f3 	stp	x19, x20, [sp, #16]
   8a7c4:	aa0003f3 	mov	x19, x0
   8a7c8:	f9402000 	ldr	x0, [x0, #64]
   8a7cc:	f9000261 	str	x1, [x19]
   8a7d0:	b4000040 	cbz	x0, 8a7d8 <CUSBHIDDevice::~CUSBHIDDevice()+0x28>
   8a7d4:	94006bc3 	bl	a56e0 <operator delete[](void*)>
   8a7d8:	f900227f 	str	xzr, [x19, #64]
   8a7dc:	f9401a74 	ldr	x20, [x19, #48]
   8a7e0:	b40000d4 	cbz	x20, 8a7f8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   8a7e4:	aa1403e0 	mov	x0, x20
   8a7e8:	97fff43a 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8a7ec:	aa1403e0 	mov	x0, x20
   8a7f0:	d2800401 	mov	x1, #0x20                  	// #32
   8a7f4:	94006bc7 	bl	a5710 <operator delete(void*, unsigned long)>
   8a7f8:	f9001a7f 	str	xzr, [x19, #48]
   8a7fc:	f9401674 	ldr	x20, [x19, #40]
   8a800:	b40000d4 	cbz	x20, 8a818 <CUSBHIDDevice::~CUSBHIDDevice()+0x68>
   8a804:	aa1403e0 	mov	x0, x20
   8a808:	97fff432 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8a80c:	aa1403e0 	mov	x0, x20
   8a810:	d2800401 	mov	x1, #0x20                  	// #32
   8a814:	94006bbf 	bl	a5710 <operator delete(void*, unsigned long)>
   8a818:	aa1303e0 	mov	x0, x19
   8a81c:	f900167f 	str	xzr, [x19, #40]
   8a820:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a824:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a828:	17fff47e 	b	87a20 <CUSBFunction::~CUSBFunction()>
   8a82c:	d503201f 	nop

000000000008a830 <CUSBHIDDevice::~CUSBHIDDevice()>:
   8a830:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a834:	910003fd 	mov	x29, sp
   8a838:	f9000bf3 	str	x19, [sp, #16]
   8a83c:	aa0003f3 	mov	x19, x0
   8a840:	97ffffdc 	bl	8a7b0 <CUSBHIDDevice::~CUSBHIDDevice()>
   8a844:	aa1303e0 	mov	x0, x19
   8a848:	d2800901 	mov	x1, #0x48                  	// #72
   8a84c:	f9400bf3 	ldr	x19, [sp, #16]
   8a850:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a854:	14006baf 	b	a5710 <operator delete(void*, unsigned long)>
   8a858:	d503201f 	nop
   8a85c:	d503201f 	nop

000000000008a860 <CUSBHIDDevice::Configure(unsigned int)>:
   8a860:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a864:	910003fd 	mov	x29, sp
   8a868:	a90153f3 	stp	x19, x20, [sp, #16]
   8a86c:	aa0003f4 	mov	x20, x0
   8a870:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a874:	2a0103f5 	mov	w21, w1
   8a878:	97fff55a 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8a87c:	72001c1f 	tst	w0, #0xff
   8a880:	540000c1 	b.ne	8a898 <CUSBHIDDevice::Configure(unsigned int)+0x38>  // b.any
   8a884:	1400004b 	b	8a9b0 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   8a888:	39400c02 	ldrb	w2, [x0, #3]
   8a88c:	12001442 	and	w2, w2, #0x3f
   8a890:	71000c5f 	cmp	w2, #0x3
   8a894:	540003e0 	b.eq	8a910 <CUSBHIDDevice::Configure(unsigned int)+0xb0>  // b.none
   8a898:	528000a1 	mov	w1, #0x5                   	// #5
   8a89c:	aa1403e0 	mov	x0, x20
   8a8a0:	97fff580 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8a8a4:	aa0003f3 	mov	x19, x0
   8a8a8:	b5ffff00 	cbnz	x0, 8a888 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   8a8ac:	f9401680 	ldr	x0, [x20, #40]
   8a8b0:	b4000800 	cbz	x0, 8a9b0 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   8a8b4:	aa1403e0 	mov	x0, x20
   8a8b8:	97fff486 	bl	87ad0 <CUSBFunction::Configure()>
   8a8bc:	72001c13 	ands	w19, w0, #0xff
   8a8c0:	54000600 	b.eq	8a980 <CUSBHIDDevice::Configure(unsigned int)+0x120>  // b.none
   8a8c4:	aa1403e0 	mov	x0, x20
   8a8c8:	97fff5da 	bl	88030 <CUSBFunction::GetInterfaceClass() const>
   8a8cc:	12001c00 	and	w0, w0, #0xff
   8a8d0:	71000c1f 	cmp	w0, #0x3
   8a8d4:	54000940 	b.eq	8a9fc <CUSBHIDDevice::Configure(unsigned int)+0x19c>  // b.none
   8a8d8:	b9402280 	ldr	w0, [x20, #32]
   8a8dc:	350007e0 	cbnz	w0, 8a9d8 <CUSBHIDDevice::Configure(unsigned int)+0x178>
   8a8e0:	b9002295 	str	w21, [x20, #32]
   8a8e4:	34000c15 	cbz	w21, 8aa64 <CUSBHIDDevice::Configure(unsigned int)+0x204>
   8a8e8:	f9402280 	ldr	x0, [x20, #64]
   8a8ec:	b5000ca0 	cbnz	x0, 8aa80 <CUSBHIDDevice::Configure(unsigned int)+0x220>
   8a8f0:	2a1503e0 	mov	w0, w21
   8a8f4:	94006b6b 	bl	a56a0 <operator new[](unsigned long)>
   8a8f8:	f9002280 	str	x0, [x20, #64]
   8a8fc:	2a1303e0 	mov	w0, w19
   8a900:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a904:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a908:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a90c:	d65f03c0 	ret
   8a910:	39c00800 	ldrsb	w0, [x0, #2]
   8a914:	37f801c0 	tbnz	w0, #31, 8a94c <CUSBHIDDevice::Configure(unsigned int)+0xec>
   8a918:	f9401a80 	ldr	x0, [x20, #48]
   8a91c:	b50004a0 	cbnz	x0, 8a9b0 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   8a920:	aa1403e0 	mov	x0, x20
   8a924:	97fff53b 	bl	87e10 <CUSBFunction::GetDevice() const>
   8a928:	aa0003f6 	mov	x22, x0
   8a92c:	d2800400 	mov	x0, #0x20                  	// #32
   8a930:	94006b54 	bl	a5680 <operator new(unsigned long)>
   8a934:	aa1603e1 	mov	x1, x22
   8a938:	aa0003f6 	mov	x22, x0
   8a93c:	aa1303e2 	mov	x2, x19
   8a940:	97fff394 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8a944:	f9001a96 	str	x22, [x20, #48]
   8a948:	17ffffd4 	b	8a898 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   8a94c:	f9401680 	ldr	x0, [x20, #40]
   8a950:	b5000300 	cbnz	x0, 8a9b0 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   8a954:	aa1403e0 	mov	x0, x20
   8a958:	97fff52e 	bl	87e10 <CUSBFunction::GetDevice() const>
   8a95c:	aa0003f6 	mov	x22, x0
   8a960:	d2800400 	mov	x0, #0x20                  	// #32
   8a964:	94006b47 	bl	a5680 <operator new(unsigned long)>
   8a968:	aa1603e1 	mov	x1, x22
   8a96c:	aa0003f6 	mov	x22, x0
   8a970:	aa1303e2 	mov	x2, x19
   8a974:	97fff387 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8a978:	f9001696 	str	x22, [x20, #40]
   8a97c:	17ffffc7 	b	8a898 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   8a980:	940050d4 	bl	9ecd0 <CLogger::Get()>
   8a984:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8a988:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a98c:	9104a063 	add	x3, x3, #0x128
   8a990:	912f2021 	add	x1, x1, #0xbc8
   8a994:	52800022 	mov	w2, #0x1                   	// #1
   8a998:	9400500a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a99c:	2a1303e0 	mov	w0, w19
   8a9a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a9a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a9a8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a9ac:	d65f03c0 	ret
   8a9b0:	aa1403e0 	mov	x0, x20
   8a9b4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a9b8:	912f2021 	add	x1, x1, #0xbc8
   8a9bc:	52800013 	mov	w19, #0x0                   	// #0
   8a9c0:	97fff544 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8a9c4:	2a1303e0 	mov	w0, w19
   8a9c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a9cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a9d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a9d4:	d65f03c0 	ret
   8a9d8:	f9402280 	ldr	x0, [x20, #64]
   8a9dc:	b5fffe00 	cbnz	x0, 8a99c <CUSBHIDDevice::Configure(unsigned int)+0x13c>
   8a9e0:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8a9e4:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8a9e8:	a90363f7 	stp	x23, x24, [sp, #48]
   8a9ec:	91296021 	add	x1, x1, #0xa58
   8a9f0:	912be000 	add	x0, x0, #0xaf8
   8a9f4:	52801042 	mov	w2, #0x82                  	// #130
   8a9f8:	94004722 	bl	9c680 <assertion_failed>
   8a9fc:	aa1403e0 	mov	x0, x20
   8aa00:	97fff598 	bl	88060 <CUSBFunction::GetInterfaceSubClass() const>
   8aa04:	12001c16 	and	w22, w0, #0xff
   8aa08:	710006df 	cmp	w22, #0x1
   8aa0c:	54fff661 	b.ne	8a8d8 <CUSBHIDDevice::Configure(unsigned int)+0x78>  // b.any
   8aa10:	aa1403e0 	mov	x0, x20
   8aa14:	a90363f7 	stp	x23, x24, [sp, #48]
   8aa18:	97fff516 	bl	87e70 <CUSBFunction::GetHost() const>
   8aa1c:	aa0003f7 	mov	x23, x0
   8aa20:	aa1403e0 	mov	x0, x20
   8aa24:	97fff507 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8aa28:	aa0003f8 	mov	x24, x0
   8aa2c:	aa1403e0 	mov	x0, x20
   8aa30:	97fff574 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   8aa34:	12001c05 	and	w5, w0, #0xff
   8aa38:	aa1803e1 	mov	x1, x24
   8aa3c:	aa1703e0 	mov	x0, x23
   8aa40:	52800007 	mov	w7, #0x0                   	// #0
   8aa44:	d2800006 	mov	x6, #0x0                   	// #0
   8aa48:	52800004 	mov	w4, #0x0                   	// #0
   8aa4c:	52800163 	mov	w3, #0xb                   	// #11
   8aa50:	52800422 	mov	w2, #0x21                  	// #33
   8aa54:	94000153 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8aa58:	37f80220 	tbnz	w0, #31, 8aa9c <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   8aa5c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8aa60:	17ffff9e 	b	8a8d8 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   8aa64:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8aa68:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8aa6c:	a90363f7 	stp	x23, x24, [sp, #48]
   8aa70:	91296021 	add	x1, x1, #0xa58
   8aa74:	912b2000 	add	x0, x0, #0xac8
   8aa78:	52800fa2 	mov	w2, #0x7d                  	// #125
   8aa7c:	94004701 	bl	9c680 <assertion_failed>
   8aa80:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8aa84:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8aa88:	a90363f7 	stp	x23, x24, [sp, #48]
   8aa8c:	91296021 	add	x1, x1, #0xa58
   8aa90:	912b8000 	add	x0, x0, #0xae0
   8aa94:	52800fe2 	mov	w2, #0x7f                  	// #127
   8aa98:	940046fa 	bl	9c680 <assertion_failed>
   8aa9c:	9400508d 	bl	9ecd0 <CLogger::Get()>
   8aaa0:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8aaa4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8aaa8:	2a1603e2 	mov	w2, w22
   8aaac:	912aa063 	add	x3, x3, #0xaa8
   8aab0:	912f2021 	add	x1, x1, #0xbc8
   8aab4:	52800013 	mov	w19, #0x0                   	// #0
   8aab8:	94004fc2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8aabc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8aac0:	17ffffb7 	b	8a99c <CUSBHIDDevice::Configure(unsigned int)+0x13c>
   8aac4:	d503201f 	nop
   8aac8:	d503201f 	nop
   8aacc:	d503201f 	nop

000000000008aad0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   8aad0:	f9401804 	ldr	x4, [x0, #48]
   8aad4:	b40002e4 	cbz	x4, 8ab30 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   8aad8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8aadc:	910003fd 	mov	x29, sp
   8aae0:	a90153f3 	stp	x19, x20, [sp, #16]
   8aae4:	aa0103f4 	mov	x20, x1
   8aae8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8aaec:	b4000261 	cbz	x1, 8ab38 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   8aaf0:	2a0203f5 	mov	w21, w2
   8aaf4:	340002e2 	cbz	w2, 8ab50 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x80>
   8aaf8:	2a0303f6 	mov	w22, w3
   8aafc:	aa0003f3 	mov	x19, x0
   8ab00:	97fff4dc 	bl	87e70 <CUSBFunction::GetHost() const>
   8ab04:	2a1603e4 	mov	w4, w22
   8ab08:	2a1503e3 	mov	w3, w21
   8ab0c:	f9401a61 	ldr	x1, [x19, #48]
   8ab10:	aa1403e2 	mov	x2, x20
   8ab14:	9400018f 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8ab18:	2a2003e0 	mvn	w0, w0
   8ab1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ab20:	531f7c00 	lsr	w0, w0, #31
   8ab24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ab28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ab2c:	d65f03c0 	ret
   8ab30:	52800000 	mov	w0, #0x0                   	// #0
   8ab34:	d65f03c0 	ret
   8ab38:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ab3c:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ab40:	91296021 	add	x1, x1, #0xa58
   8ab44:	91326000 	add	x0, x0, #0xc98
   8ab48:	528011c2 	mov	w2, #0x8e                  	// #142
   8ab4c:	940046cd 	bl	9c680 <assertion_failed>
   8ab50:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ab54:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ab58:	91296021 	add	x1, x1, #0xa58
   8ab5c:	912c4000 	add	x0, x0, #0xb10
   8ab60:	528011e2 	mov	w2, #0x8f                  	// #143
   8ab64:	940046c7 	bl	9c680 <assertion_failed>
   8ab68:	d503201f 	nop
   8ab6c:	d503201f 	nop

000000000008ab70 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   8ab70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8ab74:	910003fd 	mov	x29, sp
   8ab78:	a90153f3 	stp	x19, x20, [sp, #16]
   8ab7c:	aa0003f3 	mov	x19, x0
   8ab80:	f9401800 	ldr	x0, [x0, #48]
   8ab84:	b4000520 	cbz	x0, 8ac28 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   8ab88:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ab8c:	aa0103f5 	mov	x21, x1
   8ab90:	f9001bf7 	str	x23, [sp, #48]
   8ab94:	b4000521 	cbz	x1, 8ac38 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   8ab98:	2a0203f4 	mov	w20, w2
   8ab9c:	340005a2 	cbz	w2, 8ac50 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   8aba0:	2a0203f7 	mov	w23, w2
   8aba4:	2a0303f6 	mov	w22, w3
   8aba8:	aa1703e0 	mov	x0, x23
   8abac:	94006abd 	bl	a56a0 <operator new[](unsigned long)>
   8abb0:	aa1703e2 	mov	x2, x23
   8abb4:	aa1503e1 	mov	x1, x21
   8abb8:	aa0003f5 	mov	x21, x0
   8abbc:	9400684f 	bl	a4cf8 <memcpy>
   8abc0:	d2800900 	mov	x0, #0x48                  	// #72
   8abc4:	940008ab 	bl	8ce70 <CUSBRequest::operator new(unsigned long)>
   8abc8:	f9401a61 	ldr	x1, [x19, #48]
   8abcc:	d2800004 	mov	x4, #0x0                   	// #0
   8abd0:	2a1403e3 	mov	w3, w20
   8abd4:	aa1503e2 	mov	x2, x21
   8abd8:	aa0003f4 	mov	x20, x0
   8abdc:	94000811 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8abe0:	90000001 	adrp	x1, 8a000 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf0>
   8abe4:	aa1503e2 	mov	x2, x21
   8abe8:	aa1303e3 	mov	x3, x19
   8abec:	aa1403e0 	mov	x0, x20
   8abf0:	911ac021 	add	x1, x1, #0x6b0
   8abf4:	9400087b 	bl	8cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8abf8:	aa1303e0 	mov	x0, x19
   8abfc:	97fff49d 	bl	87e70 <CUSBFunction::GetHost() const>
   8ac00:	f9400003 	ldr	x3, [x0]
   8ac04:	aa1403e1 	mov	x1, x20
   8ac08:	2a1603e2 	mov	w2, w22
   8ac0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ac14:	f9400c63 	ldr	x3, [x3, #24]
   8ac18:	f9401bf7 	ldr	x23, [sp, #48]
   8ac1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ac20:	aa0303f0 	mov	x16, x3
   8ac24:	d61f0200 	br	x16
   8ac28:	52800000 	mov	w0, #0x0                   	// #0
   8ac2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac30:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ac34:	d65f03c0 	ret
   8ac38:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ac3c:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ac40:	91296021 	add	x1, x1, #0xa58
   8ac44:	91326000 	add	x0, x0, #0xc98
   8ac48:	52801402 	mov	w2, #0xa0                  	// #160
   8ac4c:	9400468d 	bl	9c680 <assertion_failed>
   8ac50:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ac54:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ac58:	91296021 	add	x1, x1, #0xa58
   8ac5c:	912c4000 	add	x0, x0, #0xb10
   8ac60:	52801422 	mov	w2, #0xa1                  	// #161
   8ac64:	94004687 	bl	9c680 <assertion_failed>
   8ac68:	d503201f 	nop
   8ac6c:	d503201f 	nop

000000000008ac70 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   8ac70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ac74:	910003fd 	mov	x29, sp
   8ac78:	a90153f3 	stp	x19, x20, [sp, #16]
   8ac7c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ac80:	f9401c04 	ldr	x4, [x0, #56]
   8ac84:	b5000244 	cbnz	x4, 8accc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x5c>
   8ac88:	aa0103f4 	mov	x20, x1
   8ac8c:	f9401401 	ldr	x1, [x0, #40]
   8ac90:	aa0003f3 	mov	x19, x0
   8ac94:	b4000281 	cbz	x1, 8ace4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x74>
   8ac98:	b4000334 	cbz	x20, 8acfc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x8c>
   8ac9c:	2a0203f5 	mov	w21, w2
   8aca0:	340003a2 	cbz	w2, 8ad14 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   8aca4:	2a0303f6 	mov	w22, w3
   8aca8:	97fff472 	bl	87e70 <CUSBFunction::GetHost() const>
   8acac:	2a1603e4 	mov	w4, w22
   8acb0:	2a1503e3 	mov	w3, w21
   8acb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8acb8:	aa1403e2 	mov	x2, x20
   8acbc:	f9401661 	ldr	x1, [x19, #40]
   8acc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8acc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8acc8:	14000122 	b	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8accc:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8acd0:	d0000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8acd4:	91296021 	add	x1, x1, #0xa58
   8acd8:	913f8000 	add	x0, x0, #0xfe0
   8acdc:	528017c2 	mov	w2, #0xbe                  	// #190
   8ace0:	94004668 	bl	9c680 <assertion_failed>
   8ace4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ace8:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8acec:	91296021 	add	x1, x1, #0xa58
   8acf0:	912c8000 	add	x0, x0, #0xb20
   8acf4:	52801802 	mov	w2, #0xc0                  	// #192
   8acf8:	94004662 	bl	9c680 <assertion_failed>
   8acfc:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ad00:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ad04:	91296021 	add	x1, x1, #0xa58
   8ad08:	91326000 	add	x0, x0, #0xc98
   8ad0c:	52801822 	mov	w2, #0xc1                  	// #193
   8ad10:	9400465c 	bl	9c680 <assertion_failed>
   8ad14:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ad18:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ad1c:	91296021 	add	x1, x1, #0xa58
   8ad20:	912c4000 	add	x0, x0, #0xb10
   8ad24:	52801842 	mov	w2, #0xc2                  	// #194
   8ad28:	94004656 	bl	9c680 <assertion_failed>
   8ad2c:	d503201f 	nop

000000000008ad30 <CUSBHIDDevice::StartRequest()>:
   8ad30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ad34:	910003fd 	mov	x29, sp
   8ad38:	a90153f3 	stp	x19, x20, [sp, #16]
   8ad3c:	aa0003f3 	mov	x19, x0
   8ad40:	f9401400 	ldr	x0, [x0, #40]
   8ad44:	b4000400 	cbz	x0, 8adc4 <CUSBHIDDevice::StartRequest()+0x94>
   8ad48:	f9402260 	ldr	x0, [x19, #64]
   8ad4c:	b4000480 	cbz	x0, 8addc <CUSBHIDDevice::StartRequest()+0xac>
   8ad50:	f9401e60 	ldr	x0, [x19, #56]
   8ad54:	b5000500 	cbnz	x0, 8adf4 <CUSBHIDDevice::StartRequest()+0xc4>
   8ad58:	b9402260 	ldr	w0, [x19, #32]
   8ad5c:	34000580 	cbz	w0, 8ae0c <CUSBHIDDevice::StartRequest()+0xdc>
   8ad60:	d2800900 	mov	x0, #0x48                  	// #72
   8ad64:	94000843 	bl	8ce70 <CUSBRequest::operator new(unsigned long)>
   8ad68:	f9401661 	ldr	x1, [x19, #40]
   8ad6c:	d2800004 	mov	x4, #0x0                   	// #0
   8ad70:	aa0003f4 	mov	x20, x0
   8ad74:	b9402263 	ldr	w3, [x19, #32]
   8ad78:	f9402262 	ldr	x2, [x19, #64]
   8ad7c:	940007a9 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8ad80:	90000001 	adrp	x1, 8a000 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf0>
   8ad84:	aa1303e3 	mov	x3, x19
   8ad88:	f9001e74 	str	x20, [x19, #56]
   8ad8c:	aa1403e0 	mov	x0, x20
   8ad90:	913d0021 	add	x1, x1, #0xf40
   8ad94:	d2800002 	mov	x2, #0x0                   	// #0
   8ad98:	94000812 	bl	8cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8ad9c:	aa1303e0 	mov	x0, x19
   8ada0:	97fff434 	bl	87e70 <CUSBFunction::GetHost() const>
   8ada4:	f9400003 	ldr	x3, [x0]
   8ada8:	52800002 	mov	w2, #0x0                   	// #0
   8adac:	f9401e61 	ldr	x1, [x19, #56]
   8adb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8adb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8adb8:	f9400c63 	ldr	x3, [x3, #24]
   8adbc:	aa0303f0 	mov	x16, x3
   8adc0:	d61f0200 	br	x16
   8adc4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8adc8:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8adcc:	91296021 	add	x1, x1, #0xa58
   8add0:	912c8000 	add	x0, x0, #0xb20
   8add4:	52801902 	mov	w2, #0xc8                  	// #200
   8add8:	9400462a 	bl	9c680 <assertion_failed>
   8addc:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ade0:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ade4:	91296021 	add	x1, x1, #0xa58
   8ade8:	912be000 	add	x0, x0, #0xaf8
   8adec:	52801922 	mov	w2, #0xc9                  	// #201
   8adf0:	94004624 	bl	9c680 <assertion_failed>
   8adf4:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8adf8:	d0000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8adfc:	91296021 	add	x1, x1, #0xa58
   8ae00:	913f8000 	add	x0, x0, #0xfe0
   8ae04:	52801962 	mov	w2, #0xcb                  	// #203
   8ae08:	9400461e 	bl	9c680 <assertion_failed>
   8ae0c:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8ae10:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8ae14:	91296021 	add	x1, x1, #0xa58
   8ae18:	912b2000 	add	x0, x0, #0xac8
   8ae1c:	52801982 	mov	w2, #0xcc                  	// #204
   8ae20:	94004618 	bl	9c680 <assertion_failed>
   8ae24:	d503201f 	nop
   8ae28:	d503201f 	nop
   8ae2c:	d503201f 	nop

000000000008ae30 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   8ae30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ae34:	910003fd 	mov	x29, sp
   8ae38:	a90153f3 	stp	x19, x20, [sp, #16]
   8ae3c:	b4000641 	cbz	x1, 8af04 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   8ae40:	aa0003f3 	mov	x19, x0
   8ae44:	f9401c14 	ldr	x20, [x0, #56]
   8ae48:	eb01029f 	cmp	x20, x1
   8ae4c:	540006a1 	b.ne	8af20 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf0>  // b.any
   8ae50:	aa1403e0 	mov	x0, x20
   8ae54:	940007a7 	bl	8ccf0 <CUSBRequest::GetStatus() const>
   8ae58:	350002c0 	cbnz	w0, 8aeb0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x80>
   8ae5c:	f9400263 	ldr	x3, [x19]
   8ae60:	52800002 	mov	w2, #0x0                   	// #0
   8ae64:	d2800001 	mov	x1, #0x0                   	// #0
   8ae68:	aa1303e0 	mov	x0, x19
   8ae6c:	f9402863 	ldr	x3, [x3, #80]
   8ae70:	d63f0060 	blr	x3
   8ae74:	f9401e74 	ldr	x20, [x19, #56]
   8ae78:	b40000d4 	cbz	x20, 8ae90 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   8ae7c:	aa1403e0 	mov	x0, x20
   8ae80:	94000784 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8ae84:	aa1403e0 	mov	x0, x20
   8ae88:	d2800901 	mov	x1, #0x48                  	// #72
   8ae8c:	94000811 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   8ae90:	aa1303e0 	mov	x0, x19
   8ae94:	f9001e7f 	str	xzr, [x19, #56]
   8ae98:	97ffffa6 	bl	8ad30 <CUSBHIDDevice::StartRequest()>
   8ae9c:	72001c1f 	tst	w0, #0xff
   8aea0:	54000200 	b.eq	8aee0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb0>  // b.none
   8aea4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8aea8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8aeac:	d65f03c0 	ret
   8aeb0:	f9400261 	ldr	x1, [x19]
   8aeb4:	aa1403e0 	mov	x0, x20
   8aeb8:	f9402834 	ldr	x20, [x1, #80]
   8aebc:	f90013f5 	str	x21, [sp, #32]
   8aec0:	f9402275 	ldr	x21, [x19, #64]
   8aec4:	9400078f 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8aec8:	2a0003e2 	mov	w2, w0
   8aecc:	aa1303e0 	mov	x0, x19
   8aed0:	aa1503e1 	mov	x1, x21
   8aed4:	d63f0280 	blr	x20
   8aed8:	f94013f5 	ldr	x21, [sp, #32]
   8aedc:	17ffffe6 	b	8ae74 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   8aee0:	94004f7c 	bl	9ecd0 <CLogger::Get()>
   8aee4:	90000123 	adrp	x3, ae000 <FromDevice+0x108>
   8aee8:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8aeec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8aef0:	912d2063 	add	x3, x3, #0xb48
   8aef4:	912f2021 	add	x1, x1, #0xbc8
   8aef8:	52800022 	mov	w2, #0x1                   	// #1
   8aefc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8af00:	14004eb0 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8af04:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8af08:	d0000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8af0c:	f90013f5 	str	x21, [sp, #32]
   8af10:	91296021 	add	x1, x1, #0xa58
   8af14:	913d8000 	add	x0, x0, #0xf60
   8af18:	52801ac2 	mov	w2, #0xd6                  	// #214
   8af1c:	940045d9 	bl	9c680 <assertion_failed>
   8af20:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8af24:	90000120 	adrp	x0, ae000 <FromDevice+0x108>
   8af28:	f90013f5 	str	x21, [sp, #32]
   8af2c:	91296021 	add	x1, x1, #0xa58
   8af30:	912ce000 	add	x0, x0, #0xb38
   8af34:	52801ae2 	mov	w2, #0xd7                  	// #215
   8af38:	940045d2 	bl	9c680 <assertion_failed>
   8af3c:	d503201f 	nop

000000000008af40 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   8af40:	b4000082 	cbz	x2, 8af50 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   8af44:	aa0003e1 	mov	x1, x0
   8af48:	aa0203e0 	mov	x0, x2
   8af4c:	17ffffb9 	b	8ae30 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   8af50:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8af54:	d0000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8af58:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8af5c:	91296021 	add	x1, x1, #0xa58
   8af60:	910003fd 	mov	x29, sp
   8af64:	9138e000 	add	x0, x0, #0xe38
   8af68:	52801dc2 	mov	w2, #0xee                  	// #238
   8af6c:	940045c5 	bl	9c680 <assertion_failed>

000000000008af70 <CUSBHostController::CUSBHostController()>:
   8af70:	90000121 	adrp	x1, ae000 <FromDevice+0x108>
   8af74:	912f8021 	add	x1, x1, #0xbe0
   8af78:	f9000001 	str	x1, [x0]
   8af7c:	d65f03c0 	ret

000000000008af80 <CUSBHostController::~CUSBHostController()>:
   8af80:	d65f03c0 	ret
   8af84:	d503201f 	nop
   8af88:	d503201f 	nop
   8af8c:	d503201f 	nop

000000000008af90 <CUSBHostController::~CUSBHostController()>:
   8af90:	d2800101 	mov	x1, #0x8                   	// #8
   8af94:	140069df 	b	a5710 <operator delete(void*, unsigned long)>
   8af98:	d503201f 	nop
   8af9c:	d503201f 	nop

000000000008afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   8afa0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   8afa4:	910003fd 	mov	x29, sp
   8afa8:	a90153f3 	stp	x19, x20, [sp, #16]
   8afac:	aa0003f4 	mov	x20, x0
   8afb0:	d2800100 	mov	x0, #0x8                   	// #8
   8afb4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8afb8:	aa0603f6 	mov	x22, x6
   8afbc:	aa0103f5 	mov	x21, x1
   8afc0:	a90363f7 	stp	x23, x24, [sp, #48]
   8afc4:	12003cf7 	and	w23, w7, #0xffff
   8afc8:	12003cb8 	and	w24, w5, #0xffff
   8afcc:	a9046bf9 	stp	x25, x26, [sp, #64]
   8afd0:	12001c7a 	and	w26, w3, #0xff
   8afd4:	12003c99 	and	w25, w4, #0xffff
   8afd8:	f9002bfb 	str	x27, [sp, #80]
   8afdc:	12001c5b 	and	w27, w2, #0xff
   8afe0:	940069a8 	bl	a5680 <operator new(unsigned long)>
   8afe4:	aa0003f3 	mov	x19, x0
   8afe8:	aa0003e4 	mov	x4, x0
   8afec:	aa1603e2 	mov	x2, x22
   8aff0:	aa1503e1 	mov	x1, x21
   8aff4:	2a1703e3 	mov	w3, w23
   8aff8:	9101a3e0 	add	x0, sp, #0x68
   8affc:	3900027b 	strb	w27, [x19]
   8b000:	3900067a 	strb	w26, [x19, #1]
   8b004:	79000679 	strh	w25, [x19, #2]
   8b008:	79000a78 	strh	w24, [x19, #4]
   8b00c:	79000e77 	strh	w23, [x19, #6]
   8b010:	94000704 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8b014:	f9400283 	ldr	x3, [x20]
   8b018:	aa1403e0 	mov	x0, x20
   8b01c:	9101a3e1 	add	x1, sp, #0x68
   8b020:	52800002 	mov	w2, #0x0                   	// #0
   8b024:	f9400863 	ldr	x3, [x3, #16]
   8b028:	d63f0060 	blr	x3
   8b02c:	72001c1f 	tst	w0, #0xff
   8b030:	54000220 	b.eq	8b074 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xd4>  // b.none
   8b034:	9101a3e0 	add	x0, sp, #0x68
   8b038:	94000732 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8b03c:	2a0003f4 	mov	w20, w0
   8b040:	aa1303e0 	mov	x0, x19
   8b044:	d2800101 	mov	x1, #0x8                   	// #8
   8b048:	940069b2 	bl	a5710 <operator delete(void*, unsigned long)>
   8b04c:	9101a3e0 	add	x0, sp, #0x68
   8b050:	94000710 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8b054:	2a1403e0 	mov	w0, w20
   8b058:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b05c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b060:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b064:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8b068:	f9402bfb 	ldr	x27, [sp, #80]
   8b06c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8b070:	d65f03c0 	ret
   8b074:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b078:	17fffff2 	b	8b040 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>
   8b07c:	d503201f 	nop

000000000008b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   8b080:	12001cc8 	and	w8, w6, #0xff
   8b084:	12003ce9 	and	w9, w7, #0xffff
   8b088:	12001c63 	and	w3, w3, #0xff
   8b08c:	53181c42 	ubfiz	w2, w2, #8, #8
   8b090:	aa0403e6 	mov	x6, x4
   8b094:	2a0503e7 	mov	w7, w5
   8b098:	2a030044 	orr	w4, w2, w3
   8b09c:	2a0903e5 	mov	w5, w9
   8b0a0:	2a0803e2 	mov	w2, w8
   8b0a4:	528000c3 	mov	w3, #0x6                   	// #6
   8b0a8:	17ffffbe 	b	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b0ac:	d503201f 	nop

000000000008b0b0 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   8b0b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b0b4:	12001c44 	and	w4, w2, #0xff
   8b0b8:	910003fd 	mov	x29, sp
   8b0bc:	52800007 	mov	w7, #0x0                   	// #0
   8b0c0:	d2800006 	mov	x6, #0x0                   	// #0
   8b0c4:	52800005 	mov	w5, #0x0                   	// #0
   8b0c8:	528000a3 	mov	w3, #0x5                   	// #5
   8b0cc:	52800002 	mov	w2, #0x0                   	// #0
   8b0d0:	97ffffb4 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b0d4:	37f800e0 	tbnz	w0, #31, 8b0f0 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x40>
   8b0d8:	940064e2 	bl	a4460 <CTimer::Get()>
   8b0dc:	52800640 	mov	w0, #0x32                  	// #50
   8b0e0:	940064a4 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8b0e4:	52800020 	mov	w0, #0x1                   	// #1
   8b0e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b0ec:	d65f03c0 	ret
   8b0f0:	52800000 	mov	w0, #0x0                   	// #0
   8b0f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b0f8:	d65f03c0 	ret
   8b0fc:	d503201f 	nop

000000000008b100 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   8b100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b104:	12001c44 	and	w4, w2, #0xff
   8b108:	910003fd 	mov	x29, sp
   8b10c:	52800007 	mov	w7, #0x0                   	// #0
   8b110:	d2800006 	mov	x6, #0x0                   	// #0
   8b114:	52800005 	mov	w5, #0x0                   	// #0
   8b118:	52800123 	mov	w3, #0x9                   	// #9
   8b11c:	52800002 	mov	w2, #0x0                   	// #0
   8b120:	97ffffa0 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b124:	37f800e0 	tbnz	w0, #31, 8b140 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x40>
   8b128:	940064ce 	bl	a4460 <CTimer::Get()>
   8b12c:	52800640 	mov	w0, #0x32                  	// #50
   8b130:	94006490 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8b134:	52800020 	mov	w0, #0x1                   	// #1
   8b138:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b13c:	d65f03c0 	ret
   8b140:	52800000 	mov	w0, #0x0                   	// #0
   8b144:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b148:	d65f03c0 	ret
   8b14c:	d503201f 	nop

000000000008b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   8b150:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8b154:	910003fd 	mov	x29, sp
   8b158:	a90153f3 	stp	x19, x20, [sp, #16]
   8b15c:	aa0003f3 	mov	x19, x0
   8b160:	2a0403f4 	mov	w20, w4
   8b164:	9100a3e0 	add	x0, sp, #0x28
   8b168:	d2800004 	mov	x4, #0x0                   	// #0
   8b16c:	940006ad 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8b170:	f9400263 	ldr	x3, [x19]
   8b174:	2a1403e2 	mov	w2, w20
   8b178:	aa1303e0 	mov	x0, x19
   8b17c:	9100a3e1 	add	x1, sp, #0x28
   8b180:	f9400863 	ldr	x3, [x3, #16]
   8b184:	d63f0060 	blr	x3
   8b188:	72001c1f 	tst	w0, #0xff
   8b18c:	54000140 	b.eq	8b1b4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x64>  // b.none
   8b190:	9100a3e0 	add	x0, sp, #0x28
   8b194:	940006db 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8b198:	2a0003f3 	mov	w19, w0
   8b19c:	9100a3e0 	add	x0, sp, #0x28
   8b1a0:	940006bc 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8b1a4:	2a1303e0 	mov	w0, w19
   8b1a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b1ac:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8b1b0:	d65f03c0 	ret
   8b1b4:	12800013 	mov	w19, #0xffffffff            	// #-1
   8b1b8:	17fffff9 	b	8b19c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x4c>
   8b1bc:	00000000 	.inst	0x00000000 ; undefined

000000000008b1c0 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long)>:
   8b1c0:	aa0003e2 	mov	x2, x0
   8b1c4:	aa0103e0 	mov	x0, x1
   8b1c8:	f9001c41 	str	x1, [x2, #56]
   8b1cc:	d65f03c0 	ret

000000000008b1d0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   8b1d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b1d4:	910003fd 	mov	x29, sp
   8b1d8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b1dc:	913c0021 	add	x1, x1, #0xf00
   8b1e0:	a90153f3 	stp	x19, x20, [sp, #16]
   8b1e4:	aa0003f3 	mov	x19, x0
   8b1e8:	b9404800 	ldr	w0, [x0, #72]
   8b1ec:	f9000261 	str	x1, [x19]
   8b1f0:	350003a0 	cbnz	w0, 8b264 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x94>
   8b1f4:	f9402274 	ldr	x20, [x19, #64]
   8b1f8:	b40000d4 	cbz	x20, 8b210 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x40>
   8b1fc:	aa1403e0 	mov	x0, x20
   8b200:	94001c84 	bl	92410 <CPartitionManager::~CPartitionManager()>
   8b204:	aa1403e0 	mov	x0, x20
   8b208:	d2800901 	mov	x1, #0x48                  	// #72
   8b20c:	94006941 	bl	a5710 <operator delete(void*, unsigned long)>
   8b210:	f900227f 	str	xzr, [x19, #64]
   8b214:	f9401674 	ldr	x20, [x19, #40]
   8b218:	b40000d4 	cbz	x20, 8b230 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x60>
   8b21c:	aa1403e0 	mov	x0, x20
   8b220:	97fff1ac 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8b224:	aa1403e0 	mov	x0, x20
   8b228:	d2800401 	mov	x1, #0x20                  	// #32
   8b22c:	94006939 	bl	a5710 <operator delete(void*, unsigned long)>
   8b230:	f900167f 	str	xzr, [x19, #40]
   8b234:	f9401274 	ldr	x20, [x19, #32]
   8b238:	b40000d4 	cbz	x20, 8b250 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
   8b23c:	aa1403e0 	mov	x0, x20
   8b240:	97fff1a4 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8b244:	aa1403e0 	mov	x0, x20
   8b248:	d2800401 	mov	x1, #0x20                  	// #32
   8b24c:	94006931 	bl	a5710 <operator delete(void*, unsigned long)>
   8b250:	aa1303e0 	mov	x0, x19
   8b254:	f900127f 	str	xzr, [x19, #32]
   8b258:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b25c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b260:	17fff1f0 	b	87a20 <CUSBFunction::~CUSBFunction()>
   8b264:	940047d7 	bl	9d1c0 <CDeviceNameService::Get()>
   8b268:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b26c:	b9404a62 	ldr	w2, [x19, #72]
   8b270:	52800023 	mov	w3, #0x1                   	// #1
   8b274:	91300021 	add	x1, x1, #0xc00
   8b278:	940047fe 	bl	9d270 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   8b27c:	b9404a63 	ldr	w3, [x19, #72]
   8b280:	f0000141 	adrp	x1, b6000 <s_OldInfo+0x68>
   8b284:	52800020 	mov	w0, #0x1                   	// #1
   8b288:	b94e3822 	ldr	w2, [x1, #3640]
   8b28c:	1ac32000 	lsl	w0, w0, w3
   8b290:	6a02001f 	tst	w0, w2
   8b294:	540000a0 	b.eq	8b2a8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xd8>  // b.none
   8b298:	0a200040 	bic	w0, w2, w0
   8b29c:	b9004a7f 	str	wzr, [x19, #72]
   8b2a0:	b90e3820 	str	w0, [x1, #3640]
   8b2a4:	17ffffd4 	b	8b1f4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x24>
   8b2a8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b2ac:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b2b0:	91302021 	add	x1, x1, #0xc08
   8b2b4:	91308000 	add	x0, x0, #0xc20
   8b2b8:	52801a82 	mov	w2, #0xd4                  	// #212
   8b2bc:	940044f1 	bl	9c680 <assertion_failed>

000000000008b2c0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   8b2c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b2c4:	910003fd 	mov	x29, sp
   8b2c8:	f9000bf3 	str	x19, [sp, #16]
   8b2cc:	aa0003f3 	mov	x19, x0
   8b2d0:	97ffffc0 	bl	8b1d0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   8b2d4:	aa1303e0 	mov	x0, x19
   8b2d8:	d2800a01 	mov	x1, #0x50                  	// #80
   8b2dc:	f9400bf3 	ldr	x19, [sp, #16]
   8b2e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b2e4:	1400690b 	b	a5710 <operator delete(void*, unsigned long)>
   8b2e8:	d503201f 	nop
   8b2ec:	d503201f 	nop

000000000008b2f0 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   8b2f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b2f4:	910003fd 	mov	x29, sp
   8b2f8:	f9000bf3 	str	x19, [sp, #16]
   8b2fc:	aa0003f3 	mov	x19, x0
   8b300:	97fff260 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8b304:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b308:	913c0000 	add	x0, x0, #0xf00
   8b30c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8b310:	f9000260 	str	x0, [x19]
   8b314:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   8b318:	f900227f 	str	xzr, [x19, #64]
   8b31c:	b9004a7f 	str	wzr, [x19, #72]
   8b320:	f9400bf3 	ldr	x19, [sp, #16]
   8b324:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b328:	d65f03c0 	ret
   8b32c:	d503201f 	nop

000000000008b330 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   8b330:	b9403400 	ldr	w0, [x0, #52]
   8b334:	d65f03c0 	ret
   8b338:	d503201f 	nop
   8b33c:	d503201f 	nop

000000000008b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>:
   8b340:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8b344:	910003fd 	mov	x29, sp
   8b348:	a90153f3 	stp	x19, x20, [sp, #16]
   8b34c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b350:	a90363f7 	stp	x23, x24, [sp, #48]
   8b354:	b4000b21 	cbz	x1, 8b4b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x178>
   8b358:	aa0003f3 	mov	x19, x0
   8b35c:	d1001840 	sub	x0, x2, #0x6
   8b360:	f100281f 	cmp	x0, #0xa
   8b364:	aa0203f5 	mov	x21, x2
   8b368:	54000b48 	b.hi	8b4d0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x190>  // b.pmore
   8b36c:	f100009f 	cmp	x4, #0x0
   8b370:	aa0303f7 	mov	x23, x3
   8b374:	fa401860 	ccmp	x3, #0x0, #0x0, ne  // ne = any
   8b378:	aa0403f4 	mov	x20, x4
   8b37c:	54000b60 	b.eq	8b4e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1a8>  // b.none
   8b380:	aa0103f6 	mov	x22, x1
   8b384:	d28003e2 	mov	x2, #0x1f                  	// #31
   8b388:	52800001 	mov	w1, #0x0                   	// #0
   8b38c:	910143e0 	add	x0, sp, #0x50
   8b390:	12001cb8 	and	w24, w5, #0xff
   8b394:	9400643f 	bl	a4490 <memset>
   8b398:	7845d3e5 	ldurh	w5, [sp, #93]
   8b39c:	1283e1e7 	mov	w7, #0xffffe0f0            	// #-7952
   8b3a0:	531812a4 	ubfiz	w4, w21, #8, #5
   8b3a4:	7100031f 	cmp	w24, #0x0
   8b3a8:	528a6aa8 	mov	w8, #0x5355                	// #21333
   8b3ac:	72a86848 	movk	w8, #0x4342, lsl #16
   8b3b0:	b9403263 	ldr	w3, [x19, #48]
   8b3b4:	1a9f07e6 	cset	w6, ne  // ne = any
   8b3b8:	531960c6 	lsl	w6, w6, #7
   8b3bc:	aa1503e2 	mov	x2, x21
   8b3c0:	b9005bf4 	str	w20, [sp, #88]
   8b3c4:	aa1603e1 	mov	x1, x22
   8b3c8:	91017fe0 	add	x0, sp, #0x5f
   8b3cc:	0a0700a5 	and	w5, w5, w7
   8b3d0:	390173e6 	strb	w6, [sp, #92]
   8b3d4:	2a050084 	orr	w4, w4, w5
   8b3d8:	11000463 	add	w3, w3, #0x1
   8b3dc:	7805d3e4 	sturh	w4, [sp, #93]
   8b3e0:	b9003263 	str	w3, [x19, #48]
   8b3e4:	290a0fe8 	stp	w8, w3, [sp, #80]
   8b3e8:	94006644 	bl	a4cf8 <memcpy>
   8b3ec:	aa1303e0 	mov	x0, x19
   8b3f0:	97fff2a0 	bl	87e70 <CUSBFunction::GetHost() const>
   8b3f4:	aa0003f5 	mov	x21, x0
   8b3f8:	b4000840 	cbz	x0, 8b500 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1c0>
   8b3fc:	910143e2 	add	x2, sp, #0x50
   8b400:	52800004 	mov	w4, #0x0                   	// #0
   8b404:	f9401661 	ldr	x1, [x19, #40]
   8b408:	528003e3 	mov	w3, #0x1f                  	// #31
   8b40c:	97ffff51 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8b410:	37f80d00 	tbnz	w0, #31, 8b5b0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x270>
   8b414:	f9401261 	ldr	x1, [x19, #32]
   8b418:	b40004d4 	cbz	x20, 8b4b0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x170>
   8b41c:	7100031f 	cmp	w24, #0x0
   8b420:	2a1403e3 	mov	w3, w20
   8b424:	f9401665 	ldr	x5, [x19, #40]
   8b428:	aa1703e2 	mov	x2, x23
   8b42c:	52800004 	mov	w4, #0x0                   	// #0
   8b430:	aa1503e0 	mov	x0, x21
   8b434:	9a851021 	csel	x1, x1, x5, ne  // ne = any
   8b438:	97ffff46 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8b43c:	2a0003f4 	mov	w20, w0
   8b440:	37f80ca0 	tbnz	w0, #31, 8b5d4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x294>
   8b444:	f9401261 	ldr	x1, [x19, #32]
   8b448:	aa1503e0 	mov	x0, x21
   8b44c:	52800004 	mov	w4, #0x0                   	// #0
   8b450:	528001a3 	mov	w3, #0xd                   	// #13
   8b454:	910103e2 	add	x2, sp, #0x40
   8b458:	97ffff3e 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8b45c:	7100341f 	cmp	w0, #0xd
   8b460:	54000601 	b.ne	8b520 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1e0>  // b.any
   8b464:	b94043e1 	ldr	w1, [sp, #64]
   8b468:	528a6aa0 	mov	w0, #0x5355                	// #21333
   8b46c:	72aa6840 	movk	w0, #0x5342, lsl #16
   8b470:	6b00003f 	cmp	w1, w0
   8b474:	54000681 	b.ne	8b544 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x204>  // b.any
   8b478:	b9403260 	ldr	w0, [x19, #48]
   8b47c:	b94047e1 	ldr	w1, [sp, #68]
   8b480:	6b00003f 	cmp	w1, w0
   8b484:	54000721 	b.ne	8b568 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x228>  // b.any
   8b488:	394133e0 	ldrb	w0, [sp, #76]
   8b48c:	35000460 	cbnz	w0, 8b518 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1d8>
   8b490:	b9404be0 	ldr	w0, [sp, #72]
   8b494:	350007c0 	cbnz	w0, 8b58c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x24c>
   8b498:	2a1403e0 	mov	w0, w20
   8b49c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b4a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b4a4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b4a8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8b4ac:	d65f03c0 	ret
   8b4b0:	52800014 	mov	w20, #0x0                   	// #0
   8b4b4:	17ffffe5 	b	8b448 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x108>
   8b4b8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b4bc:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b4c0:	91302021 	add	x1, x1, #0xc08
   8b4c4:	91314000 	add	x0, x0, #0xc50
   8b4c8:	52804702 	mov	w2, #0x238                 	// #568
   8b4cc:	9400446d 	bl	9c680 <assertion_failed>
   8b4d0:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b4d4:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b4d8:	91302021 	add	x1, x1, #0xc08
   8b4dc:	91318000 	add	x0, x0, #0xc60
   8b4e0:	52804722 	mov	w2, #0x239                 	// #569
   8b4e4:	94004467 	bl	9c680 <assertion_failed>
   8b4e8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b4ec:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b4f0:	91302021 	add	x1, x1, #0xc08
   8b4f4:	91322000 	add	x0, x0, #0xc88
   8b4f8:	52804742 	mov	w2, #0x23a                 	// #570
   8b4fc:	94004461 	bl	9c680 <assertion_failed>
   8b500:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b504:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b508:	91302021 	add	x1, x1, #0xc08
   8b50c:	9132a000 	add	x0, x0, #0xca8
   8b510:	52804922 	mov	w2, #0x249                 	// #585
   8b514:	9400445b 	bl	9c680 <assertion_failed>
   8b518:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b51c:	17ffffdf 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b520:	94004dec 	bl	9ecd0 <CLogger::Get()>
   8b524:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b528:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b52c:	9133a063 	add	x3, x3, #0xce8
   8b530:	913d4021 	add	x1, x1, #0xf50
   8b534:	52800022 	mov	w2, #0x1                   	// #1
   8b538:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b53c:	94004d21 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b540:	17ffffd6 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b544:	94004de3 	bl	9ecd0 <CLogger::Get()>
   8b548:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b54c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b550:	91340063 	add	x3, x3, #0xd00
   8b554:	913d4021 	add	x1, x1, #0xf50
   8b558:	52800022 	mov	w2, #0x1                   	// #1
   8b55c:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b560:	94004d18 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b564:	17ffffcd 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b568:	94004dda 	bl	9ecd0 <CLogger::Get()>
   8b56c:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b570:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b574:	91346063 	add	x3, x3, #0xd18
   8b578:	913d4021 	add	x1, x1, #0xf50
   8b57c:	52800022 	mov	w2, #0x1                   	// #1
   8b580:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b584:	94004d0f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b588:	17ffffc4 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b58c:	94004dd1 	bl	9ecd0 <CLogger::Get()>
   8b590:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b594:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b598:	9134c063 	add	x3, x3, #0xd30
   8b59c:	913d4021 	add	x1, x1, #0xf50
   8b5a0:	52800022 	mov	w2, #0x1                   	// #1
   8b5a4:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b5a8:	94004d06 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b5ac:	17ffffbb 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b5b0:	94004dc8 	bl	9ecd0 <CLogger::Get()>
   8b5b4:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b5b8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b5bc:	9132e063 	add	x3, x3, #0xcb8
   8b5c0:	913d4021 	add	x1, x1, #0xf50
   8b5c4:	52800022 	mov	w2, #0x1                   	// #1
   8b5c8:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b5cc:	94004cfd 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b5d0:	17ffffb2 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b5d4:	94004dbf 	bl	9ecd0 <CLogger::Get()>
   8b5d8:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b5dc:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b5e0:	91334063 	add	x3, x3, #0xcd0
   8b5e4:	913d4021 	add	x1, x1, #0xf50
   8b5e8:	52800022 	mov	w2, #0x1                   	// #1
   8b5ec:	12800014 	mov	w20, #0xffffffff            	// #-1
   8b5f0:	94004cf4 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b5f4:	17ffffa9 	b	8b498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x158>
   8b5f8:	d503201f 	nop
   8b5fc:	d503201f 	nop

000000000008b600 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>:
   8b600:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b604:	910003fd 	mov	x29, sp
   8b608:	aa0103e3 	mov	x3, x1
   8b60c:	f9000bf3 	str	x19, [sp, #16]
   8b610:	b40003e1 	cbz	x1, 8b68c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x8c>
   8b614:	aa0203f3 	mov	x19, x2
   8b618:	f9401c02 	ldr	x2, [x0, #56]
   8b61c:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   8b620:	f240205f 	tst	x2, #0x1ff
   8b624:	fa410042 	ccmp	x2, x1, #0x2, eq  // eq = none
   8b628:	540003e8 	b.hi	8b6a4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xa4>  // b.pmore
   8b62c:	f240227f 	tst	x19, #0x1ff
   8b630:	d349fc42 	lsr	x2, x2, #9
   8b634:	54000381 	b.ne	8b6a4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xa4>  // b.any
   8b638:	5ac00842 	rev	w2, w2
   8b63c:	52800501 	mov	w1, #0x28                  	// #40
   8b640:	39009bff 	strb	wzr, [sp, #38]
   8b644:	d349fe66 	lsr	x6, x19, #9
   8b648:	52800025 	mov	w5, #0x1                   	// #1
   8b64c:	3900a7ff 	strb	wzr, [sp, #41]
   8b650:	5ac004c6 	rev16	w6, w6
   8b654:	aa1303e4 	mov	x4, x19
   8b658:	790043e1 	strh	w1, [sp, #32]
   8b65c:	910083e1 	add	x1, sp, #0x20
   8b660:	b80223e2 	stur	w2, [sp, #34]
   8b664:	d2800142 	mov	x2, #0xa                   	// #10
   8b668:	780273e6 	sturh	w6, [sp, #39]
   8b66c:	97ffff35 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8b670:	2a0003e1 	mov	w1, w0
   8b674:	2a1303e0 	mov	w0, w19
   8b678:	6b13003f 	cmp	w1, w19
   8b67c:	54000181 	b.ne	8b6ac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xac>  // b.any
   8b680:	f9400bf3 	ldr	x19, [sp, #16]
   8b684:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b688:	d65f03c0 	ret
   8b68c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b690:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b694:	91302021 	add	x1, x1, #0xc08
   8b698:	91326000 	add	x0, x0, #0xc98
   8b69c:	52803da2 	mov	w2, #0x1ed                 	// #493
   8b6a0:	940043f8 	bl	9c680 <assertion_failed>
   8b6a4:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b6a8:	17fffff6 	b	8b680 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x80>
   8b6ac:	94004d89 	bl	9ecd0 <CLogger::Get()>
   8b6b0:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b6b4:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b6b8:	91352063 	add	x3, x3, #0xd48
   8b6bc:	913d4021 	add	x1, x1, #0xf50
   8b6c0:	52800022 	mov	w2, #0x1                   	// #1
   8b6c4:	94004cbf 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b6c8:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b6cc:	17ffffed 	b	8b680 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x80>

000000000008b6d0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>:
   8b6d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b6d4:	910003fd 	mov	x29, sp
   8b6d8:	aa0103e3 	mov	x3, x1
   8b6dc:	f9000bf3 	str	x19, [sp, #16]
   8b6e0:	b40003a1 	cbz	x1, 8b754 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x84>
   8b6e4:	aa0203f3 	mov	x19, x2
   8b6e8:	f9401c02 	ldr	x2, [x0, #56]
   8b6ec:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   8b6f0:	f240205f 	tst	x2, #0x1ff
   8b6f4:	fa410042 	ccmp	x2, x1, #0x2, eq  // eq = none
   8b6f8:	540003a8 	b.hi	8b76c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x9c>  // b.pmore
   8b6fc:	f240227f 	tst	x19, #0x1ff
   8b700:	d349fc42 	lsr	x2, x2, #9
   8b704:	54000341 	b.ne	8b76c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x9c>  // b.any
   8b708:	5ac00842 	rev	w2, w2
   8b70c:	52810541 	mov	w1, #0x82a                 	// #2090
   8b710:	39009bff 	strb	wzr, [sp, #38]
   8b714:	d349fe66 	lsr	x6, x19, #9
   8b718:	52800005 	mov	w5, #0x0                   	// #0
   8b71c:	3900a7ff 	strb	wzr, [sp, #41]
   8b720:	5ac004c6 	rev16	w6, w6
   8b724:	aa1303e4 	mov	x4, x19
   8b728:	790043e1 	strh	w1, [sp, #32]
   8b72c:	910083e1 	add	x1, sp, #0x20
   8b730:	b80223e2 	stur	w2, [sp, #34]
   8b734:	d2800142 	mov	x2, #0xa                   	// #10
   8b738:	780273e6 	sturh	w6, [sp, #39]
   8b73c:	97ffff01 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8b740:	37f801a0 	tbnz	w0, #31, 8b774 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xa4>
   8b744:	2a1303e0 	mov	w0, w19
   8b748:	f9400bf3 	ldr	x19, [sp, #16]
   8b74c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b750:	d65f03c0 	ret
   8b754:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b758:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b75c:	91302021 	add	x1, x1, #0xc08
   8b760:	91326000 	add	x0, x0, #0xc98
   8b764:	52804242 	mov	w2, #0x212                 	// #530
   8b768:	940043c6 	bl	9c680 <assertion_failed>
   8b76c:	12800013 	mov	w19, #0xffffffff            	// #-1
   8b770:	17fffff5 	b	8b744 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x74>
   8b774:	94004d57 	bl	9ecd0 <CLogger::Get()>
   8b778:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b77c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b780:	91356063 	add	x3, x3, #0xd58
   8b784:	913d4021 	add	x1, x1, #0xf50
   8b788:	52800022 	mov	w2, #0x1                   	// #1
   8b78c:	12800013 	mov	w19, #0xffffffff            	// #-1
   8b790:	94004c8c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b794:	17ffffec 	b	8b744 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x74>
   8b798:	d503201f 	nop
   8b79c:	d503201f 	nop

000000000008b7a0 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   8b7a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b7a4:	910003fd 	mov	x29, sp
   8b7a8:	a90153f3 	stp	x19, x20, [sp, #16]
   8b7ac:	aa0003f3 	mov	x19, x0
   8b7b0:	97fff1b0 	bl	87e70 <CUSBFunction::GetHost() const>
   8b7b4:	b40005c0 	cbz	x0, 8b86c <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   8b7b8:	aa0003f4 	mov	x20, x0
   8b7bc:	aa1303e0 	mov	x0, x19
   8b7c0:	97fff1a0 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8b7c4:	aa0003e1 	mov	x1, x0
   8b7c8:	52800007 	mov	w7, #0x0                   	// #0
   8b7cc:	d2800006 	mov	x6, #0x0                   	// #0
   8b7d0:	52800005 	mov	w5, #0x0                   	// #0
   8b7d4:	52800004 	mov	w4, #0x0                   	// #0
   8b7d8:	12800003 	mov	w3, #0xffffffff            	// #-1
   8b7dc:	52800422 	mov	w2, #0x21                  	// #33
   8b7e0:	aa1403e0 	mov	x0, x20
   8b7e4:	97fffdef 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b7e8:	37f804e0 	tbnz	w0, #31, 8b884 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   8b7ec:	aa1303e0 	mov	x0, x19
   8b7f0:	97fff194 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8b7f4:	52800025 	mov	w5, #0x1                   	// #1
   8b7f8:	aa0003e1 	mov	x1, x0
   8b7fc:	2a0503e3 	mov	w3, w5
   8b800:	52800007 	mov	w7, #0x0                   	// #0
   8b804:	d2800006 	mov	x6, #0x0                   	// #0
   8b808:	52800004 	mov	w4, #0x0                   	// #0
   8b80c:	52800042 	mov	w2, #0x2                   	// #2
   8b810:	aa1403e0 	mov	x0, x20
   8b814:	97fffde3 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b818:	37f805a0 	tbnz	w0, #31, 8b8cc <CUSBBulkOnlyMassStorageDevice::Reset()+0x12c>
   8b81c:	aa1303e0 	mov	x0, x19
   8b820:	97fff188 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8b824:	52800045 	mov	w5, #0x2                   	// #2
   8b828:	aa0003e1 	mov	x1, x0
   8b82c:	2a0503e2 	mov	w2, w5
   8b830:	aa1403e0 	mov	x0, x20
   8b834:	52800007 	mov	w7, #0x0                   	// #0
   8b838:	d2800006 	mov	x6, #0x0                   	// #0
   8b83c:	52800004 	mov	w4, #0x0                   	// #0
   8b840:	52800023 	mov	w3, #0x1                   	// #1
   8b844:	97fffdd7 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8b848:	37f80300 	tbnz	w0, #31, 8b8a8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x108>
   8b84c:	f9401260 	ldr	x0, [x19, #32]
   8b850:	97fff05c 	bl	879c0 <CUSBEndpoint::ResetPID()>
   8b854:	f9401660 	ldr	x0, [x19, #40]
   8b858:	97fff05a 	bl	879c0 <CUSBEndpoint::ResetPID()>
   8b85c:	52800000 	mov	w0, #0x0                   	// #0
   8b860:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b864:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b868:	d65f03c0 	ret
   8b86c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b870:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8b874:	91302021 	add	x1, x1, #0xc08
   8b878:	9132a000 	add	x0, x0, #0xca8
   8b87c:	52805102 	mov	w2, #0x288                 	// #648
   8b880:	94004380 	bl	9c680 <assertion_failed>
   8b884:	94004d13 	bl	9ecd0 <CLogger::Get()>
   8b888:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b88c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b890:	9135a063 	add	x3, x3, #0xd68
   8b894:	913d4021 	add	x1, x1, #0xf50
   8b898:	52800082 	mov	w2, #0x4                   	// #4
   8b89c:	94004c49 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b8a0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b8a4:	17ffffef 	b	8b860 <CUSBBulkOnlyMassStorageDevice::Reset()+0xc0>
   8b8a8:	94004d0a 	bl	9ecd0 <CLogger::Get()>
   8b8ac:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b8b0:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b8b4:	91368063 	add	x3, x3, #0xda0
   8b8b8:	913d4021 	add	x1, x1, #0xf50
   8b8bc:	52800082 	mov	w2, #0x4                   	// #4
   8b8c0:	94004c40 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b8c4:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b8c8:	17ffffe6 	b	8b860 <CUSBBulkOnlyMassStorageDevice::Reset()+0xc0>
   8b8cc:	94004d01 	bl	9ecd0 <CLogger::Get()>
   8b8d0:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8b8d4:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8b8d8:	91360063 	add	x3, x3, #0xd80
   8b8dc:	913d4021 	add	x1, x1, #0xf50
   8b8e0:	52800082 	mov	w2, #0x4                   	// #4
   8b8e4:	94004c37 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b8e8:	12800000 	mov	w0, #0xffffffff            	// #-1
   8b8ec:	17ffffdd 	b	8b860 <CUSBBulkOnlyMassStorageDevice::Reset()+0xc0>

000000000008b8f0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)>:
   8b8f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b8f4:	910003fd 	mov	x29, sp
   8b8f8:	a90153f3 	stp	x19, x20, [sp, #16]
   8b8fc:	aa0003f4 	mov	x20, x0
   8b900:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b904:	aa0203f5 	mov	x21, x2
   8b908:	aa0103f6 	mov	x22, x1
   8b90c:	a90363f7 	stp	x23, x24, [sp, #48]
   8b910:	2a0203f7 	mov	w23, w2
   8b914:	52800098 	mov	w24, #0x4                   	// #4
   8b918:	aa1503e2 	mov	x2, x21
   8b91c:	aa1603e1 	mov	x1, x22
   8b920:	aa1403e0 	mov	x0, x20
   8b924:	97ffff37 	bl	8b600 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>
   8b928:	2a0003f3 	mov	w19, w0
   8b92c:	aa1403e0 	mov	x0, x20
   8b930:	6b17027f 	cmp	w19, w23
   8b934:	540000e1 	b.ne	8b950 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x60>  // b.any
   8b938:	2a1703e0 	mov	w0, w23
   8b93c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b940:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b944:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b948:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b94c:	d65f03c0 	ret
   8b950:	97ffff94 	bl	8b7a0 <CUSBBulkOnlyMassStorageDevice::Reset()>
   8b954:	71000718 	subs	w24, w24, #0x1
   8b958:	35000120 	cbnz	w0, 8b97c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x8c>
   8b95c:	54fffde1 	b.ne	8b918 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x28>  // b.any
   8b960:	2a1303f7 	mov	w23, w19
   8b964:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b968:	2a1703e0 	mov	w0, w23
   8b96c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b970:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b974:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b978:	d65f03c0 	ret
   8b97c:	2a0003f7 	mov	w23, w0
   8b980:	17ffffee 	b	8b938 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x48>
   8b984:	d503201f 	nop
   8b988:	d503201f 	nop
   8b98c:	d503201f 	nop

000000000008b990 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)>:
   8b990:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b994:	910003fd 	mov	x29, sp
   8b998:	a90153f3 	stp	x19, x20, [sp, #16]
   8b99c:	aa0003f4 	mov	x20, x0
   8b9a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b9a4:	aa0203f5 	mov	x21, x2
   8b9a8:	aa0103f6 	mov	x22, x1
   8b9ac:	a90363f7 	stp	x23, x24, [sp, #48]
   8b9b0:	2a0203f7 	mov	w23, w2
   8b9b4:	52800098 	mov	w24, #0x4                   	// #4
   8b9b8:	aa1503e2 	mov	x2, x21
   8b9bc:	aa1603e1 	mov	x1, x22
   8b9c0:	aa1403e0 	mov	x0, x20
   8b9c4:	97ffff43 	bl	8b6d0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>
   8b9c8:	2a0003f3 	mov	w19, w0
   8b9cc:	aa1403e0 	mov	x0, x20
   8b9d0:	6b17027f 	cmp	w19, w23
   8b9d4:	540000e1 	b.ne	8b9f0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x60>  // b.any
   8b9d8:	2a1703e0 	mov	w0, w23
   8b9dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b9e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b9e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b9e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b9ec:	d65f03c0 	ret
   8b9f0:	97ffff6c 	bl	8b7a0 <CUSBBulkOnlyMassStorageDevice::Reset()>
   8b9f4:	71000718 	subs	w24, w24, #0x1
   8b9f8:	35000120 	cbnz	w0, 8ba1c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x8c>
   8b9fc:	54fffde1 	b.ne	8b9b8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x28>  // b.any
   8ba00:	2a1303f7 	mov	w23, w19
   8ba04:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ba08:	2a1703e0 	mov	w0, w23
   8ba0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ba10:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ba14:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ba18:	d65f03c0 	ret
   8ba1c:	2a0003f7 	mov	w23, w0
   8ba20:	17ffffee 	b	8b9d8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x48>
   8ba24:	d503201f 	nop
   8ba28:	d503201f 	nop
   8ba2c:	d503201f 	nop

000000000008ba30 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   8ba30:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8ba34:	910003fd 	mov	x29, sp
   8ba38:	a90153f3 	stp	x19, x20, [sp, #16]
   8ba3c:	aa0003f4 	mov	x20, x0
   8ba40:	97fff0e8 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8ba44:	12001c00 	and	w0, w0, #0xff
   8ba48:	7100041f 	cmp	w0, #0x1
   8ba4c:	540019e9 	b.ls	8bd88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x358>  // b.plast
   8ba50:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ba54:	14000005 	b	8ba68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8ba58:	39400c01 	ldrb	w1, [x0, #3]
   8ba5c:	12001421 	and	w1, w1, #0x3f
   8ba60:	7100083f 	cmp	w1, #0x2
   8ba64:	54000580 	b.eq	8bb14 <CUSBBulkOnlyMassStorageDevice::Configure()+0xe4>  // b.none
   8ba68:	528000a1 	mov	w1, #0x5                   	// #5
   8ba6c:	aa1403e0 	mov	x0, x20
   8ba70:	97fff10c 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8ba74:	aa0003f3 	mov	x19, x0
   8ba78:	b5ffff00 	cbnz	x0, 8ba58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x28>
   8ba7c:	f9401280 	ldr	x0, [x20, #32]
   8ba80:	b4001580 	cbz	x0, 8bd30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x300>
   8ba84:	f9401680 	ldr	x0, [x20, #40]
   8ba88:	b4001540 	cbz	x0, 8bd30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x300>
   8ba8c:	aa1403e0 	mov	x0, x20
   8ba90:	97fff010 	bl	87ad0 <CUSBFunction::Configure()>
   8ba94:	72001c13 	ands	w19, w0, #0xff
   8ba98:	54001600 	b.eq	8bd58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x328>  // b.none
   8ba9c:	52800486 	mov	w6, #0x24                  	// #36
   8baa0:	52800255 	mov	w21, #0x12                  	// #18
   8baa4:	52800025 	mov	w5, #0x1                   	// #1
   8baa8:	d2800484 	mov	x4, #0x24                  	// #36
   8baac:	9101e3e3 	add	x3, sp, #0x78
   8bab0:	d28000c2 	mov	x2, #0x6                   	// #6
   8bab4:	b9003bf5 	str	w21, [sp, #56]
   8bab8:	9100e3e1 	add	x1, sp, #0x38
   8babc:	aa1403e0 	mov	x0, x20
   8bac0:	79007be6 	strh	w6, [sp, #60]
   8bac4:	97fffe1f 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8bac8:	7100901f 	cmp	w0, #0x24
   8bacc:	54001701 	b.ne	8bdac <CUSBBulkOnlyMassStorageDevice::Configure()+0x37c>  // b.any
   8bad0:	3941e3e0 	ldrb	w0, [sp, #120]
   8bad4:	52800c73 	mov	w19, #0x63                  	// #99
   8bad8:	52800076 	mov	w22, #0x3                   	// #3
   8badc:	f240101f 	tst	x0, #0x1f
   8bae0:	54000500 	b.eq	8bb80 <CUSBBulkOnlyMassStorageDevice::Configure()+0x150>  // b.none
   8bae4:	94004c7b 	bl	9ecd0 <CLogger::Get()>
   8bae8:	3941e3e4 	ldrb	w4, [sp, #120]
   8baec:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8baf0:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8baf4:	91376063 	add	x3, x3, #0xdd8
   8baf8:	913d4021 	add	x1, x1, #0xf50
   8bafc:	52800022 	mov	w2, #0x1                   	// #1
   8bb00:	52800013 	mov	w19, #0x0                   	// #0
   8bb04:	12001084 	and	w4, w4, #0x1f
   8bb08:	94004bae 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bb0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bb10:	1400008e 	b	8bd48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   8bb14:	39c00800 	ldrsb	w0, [x0, #2]
   8bb18:	37f80f20 	tbnz	w0, #31, 8bcfc <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   8bb1c:	f9401680 	ldr	x0, [x20, #40]
   8bb20:	b5001080 	cbnz	x0, 8bd30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x300>
   8bb24:	aa1403e0 	mov	x0, x20
   8bb28:	97fff0ba 	bl	87e10 <CUSBFunction::GetDevice() const>
   8bb2c:	aa0003f5 	mov	x21, x0
   8bb30:	d2800400 	mov	x0, #0x20                  	// #32
   8bb34:	940066d3 	bl	a5680 <operator new(unsigned long)>
   8bb38:	aa1503e1 	mov	x1, x21
   8bb3c:	aa0003f5 	mov	x21, x0
   8bb40:	aa1303e2 	mov	x2, x19
   8bb44:	97ffef13 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8bb48:	f9001695 	str	x21, [x20, #40]
   8bb4c:	17ffffc7 	b	8ba68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8bb50:	52800025 	mov	w5, #0x1                   	// #1
   8bb54:	d2800244 	mov	x4, #0x12                  	// #18
   8bb58:	b9004bf6 	str	w22, [sp, #72]
   8bb5c:	910163e3 	add	x3, sp, #0x58
   8bb60:	d28000c2 	mov	x2, #0x6                   	// #6
   8bb64:	79009bf5 	strh	w21, [sp, #76]
   8bb68:	910123e1 	add	x1, sp, #0x48
   8bb6c:	aa1403e0 	mov	x0, x20
   8bb70:	97fffdf4 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8bb74:	37f81360 	tbnz	w0, #31, 8bde0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b0>
   8bb78:	71000673 	subs	w19, w19, #0x1
   8bb7c:	54001520 	b.eq	8be20 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f0>  // b.none
   8bb80:	94006238 	bl	a4460 <CTimer::Get()>
   8bb84:	52800c80 	mov	w0, #0x64                  	// #100
   8bb88:	940061fa 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8bb8c:	52800005 	mov	w5, #0x0                   	// #0
   8bb90:	d2800004 	mov	x4, #0x0                   	// #0
   8bb94:	b90043ff 	str	wzr, [sp, #64]
   8bb98:	d2800003 	mov	x3, #0x0                   	// #0
   8bb9c:	d28000c2 	mov	x2, #0x6                   	// #6
   8bba0:	79008bff 	strh	wzr, [sp, #68]
   8bba4:	910103e1 	add	x1, sp, #0x40
   8bba8:	aa1403e0 	mov	x0, x20
   8bbac:	97fffde5 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8bbb0:	37fffd00 	tbnz	w0, #31, 8bb50 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   8bbb4:	d28004a0 	mov	x0, #0x25                  	// #37
   8bbb8:	910103e3 	add	x3, sp, #0x40
   8bbbc:	7900a3ff 	strh	wzr, [sp, #80]
   8bbc0:	910123e1 	add	x1, sp, #0x48
   8bbc4:	52800025 	mov	w5, #0x1                   	// #1
   8bbc8:	d2800104 	mov	x4, #0x8                   	// #8
   8bbcc:	d2800142 	mov	x2, #0xa                   	// #10
   8bbd0:	f90027e0 	str	x0, [sp, #72]
   8bbd4:	aa1403e0 	mov	x0, x20
   8bbd8:	97fffdda 	bl	8b340 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8bbdc:	7100201f 	cmp	w0, #0x8
   8bbe0:	540012a1 	b.ne	8be34 <CUSBBulkOnlyMassStorageDevice::Configure()+0x404>  // b.any
   8bbe4:	b94047e0 	ldr	w0, [sp, #68]
   8bbe8:	7140801f 	cmp	w0, #0x20, lsl #12
   8bbec:	5ac00813 	rev	w19, w0
   8bbf0:	54001021 	b.ne	8bdf4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c4>  // b.any
   8bbf4:	b94043e0 	ldr	w0, [sp, #64]
   8bbf8:	5ac00800 	rev	w0, w0
   8bbfc:	3100041f 	cmn	w0, #0x1
   8bc00:	b9003680 	str	w0, [x20, #52]
   8bc04:	54001360 	b.eq	8be70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x440>  // b.none
   8bc08:	11000400 	add	w0, w0, #0x1
   8bc0c:	f0000113 	adrp	x19, ae000 <FromDevice+0x108>
   8bc10:	913d4273 	add	x19, x19, #0xf50
   8bc14:	f0000156 	adrp	x22, b6000 <s_OldInfo+0x68>
   8bc18:	b9003680 	str	w0, [x20, #52]
   8bc1c:	94004c2d 	bl	9ecd0 <CLogger::Get()>
   8bc20:	b9403684 	ldr	w4, [x20, #52]
   8bc24:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8bc28:	aa1303e1 	mov	x1, x19
   8bc2c:	9139a063 	add	x3, x3, #0xe68
   8bc30:	52800082 	mov	w2, #0x4                   	// #4
   8bc34:	530b7c84 	lsr	w4, w4, #11
   8bc38:	94004b62 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bc3c:	52800020 	mov	w0, #0x1                   	// #1
   8bc40:	b94e3ac3 	ldr	w3, [x22, #3640]
   8bc44:	2a0003f5 	mov	w21, w0
   8bc48:	14000004 	b	8bc58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x228>
   8bc4c:	11000400 	add	w0, w0, #0x1
   8bc50:	7100801f 	cmp	w0, #0x20
   8bc54:	54001180 	b.eq	8be84 <CUSBBulkOnlyMassStorageDevice::Configure()+0x454>  // b.none
   8bc58:	1ac022a2 	lsl	w2, w21, w0
   8bc5c:	6a03005f 	tst	w2, w3
   8bc60:	54ffff61 	b.ne	8bc4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x21c>  // b.any
   8bc64:	2a030042 	orr	w2, w2, w3
   8bc68:	b9404a81 	ldr	w1, [x20, #72]
   8bc6c:	b90e3ac2 	str	w2, [x22, #3640]
   8bc70:	35001281 	cbnz	w1, 8bec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x490>
   8bc74:	b9004a80 	str	w0, [x20, #72]
   8bc78:	910163e0 	add	x0, sp, #0x58
   8bc7c:	9400586d 	bl	a1e30 <CString::CString()>
   8bc80:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bc84:	910163e0 	add	x0, sp, #0x58
   8bc88:	b9404a82 	ldr	w2, [x20, #72]
   8bc8c:	913a6021 	add	x1, x1, #0xe98
   8bc90:	94005dd8 	bl	a33f0 <CString::Format(char const*, ...)>
   8bc94:	f9402280 	ldr	x0, [x20, #64]
   8bc98:	b5001080 	cbnz	x0, 8bea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x478>
   8bc9c:	910163e0 	add	x0, sp, #0x58
   8bca0:	94005880 	bl	a1ea0 <CString::operator char const*() const>
   8bca4:	aa0003f3 	mov	x19, x0
   8bca8:	d2800900 	mov	x0, #0x48                  	// #72
   8bcac:	94006675 	bl	a5680 <operator new(unsigned long)>
   8bcb0:	aa1303e2 	mov	x2, x19
   8bcb4:	aa1403e1 	mov	x1, x20
   8bcb8:	aa0003f3 	mov	x19, x0
   8bcbc:	940019c5 	bl	923d0 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   8bcc0:	aa1303e0 	mov	x0, x19
   8bcc4:	f9002293 	str	x19, [x20, #64]
   8bcc8:	94001a0a 	bl	924f0 <CPartitionManager::Initialize()>
   8bccc:	72001c13 	ands	w19, w0, #0xff
   8bcd0:	54000bc1 	b.ne	8be48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x418>  // b.any
   8bcd4:	b9404a80 	ldr	w0, [x20, #72]
   8bcd8:	b9004a9f 	str	wzr, [x20, #72]
   8bcdc:	b94e3ac1 	ldr	w1, [x22, #3640]
   8bce0:	1ac022a0 	lsl	w0, w21, w0
   8bce4:	0a200020 	bic	w0, w1, w0
   8bce8:	b90e3ac0 	str	w0, [x22, #3640]
   8bcec:	910163e0 	add	x0, sp, #0x58
   8bcf0:	94005814 	bl	a1d40 <CString::~CString()>
   8bcf4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bcf8:	14000014 	b	8bd48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   8bcfc:	f9401280 	ldr	x0, [x20, #32]
   8bd00:	b5000180 	cbnz	x0, 8bd30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x300>
   8bd04:	aa1403e0 	mov	x0, x20
   8bd08:	97fff042 	bl	87e10 <CUSBFunction::GetDevice() const>
   8bd0c:	aa0003f5 	mov	x21, x0
   8bd10:	d2800400 	mov	x0, #0x20                  	// #32
   8bd14:	9400665b 	bl	a5680 <operator new(unsigned long)>
   8bd18:	aa1503e1 	mov	x1, x21
   8bd1c:	aa0003f5 	mov	x21, x0
   8bd20:	aa1303e2 	mov	x2, x19
   8bd24:	97ffee9b 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8bd28:	f9001295 	str	x21, [x20, #32]
   8bd2c:	17ffff4f 	b	8ba68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8bd30:	aa1403e0 	mov	x0, x20
   8bd34:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bd38:	913d4021 	add	x1, x1, #0xf50
   8bd3c:	52800013 	mov	w19, #0x0                   	// #0
   8bd40:	97fff064 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8bd44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bd48:	2a1303e0 	mov	w0, w19
   8bd4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bd50:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8bd54:	d65f03c0 	ret
   8bd58:	94004bde 	bl	9ecd0 <CLogger::Get()>
   8bd5c:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8bd60:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bd64:	9104a063 	add	x3, x3, #0x128
   8bd68:	913d4021 	add	x1, x1, #0xf50
   8bd6c:	52800022 	mov	w2, #0x1                   	// #1
   8bd70:	94004b14 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bd74:	2a1303e0 	mov	w0, w19
   8bd78:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bd7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bd80:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8bd84:	d65f03c0 	ret
   8bd88:	aa1403e0 	mov	x0, x20
   8bd8c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bd90:	913d4021 	add	x1, x1, #0xf50
   8bd94:	52800013 	mov	w19, #0x0                   	// #0
   8bd98:	97fff04e 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8bd9c:	2a1303e0 	mov	w0, w19
   8bda0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bda4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8bda8:	d65f03c0 	ret
   8bdac:	94004bc9 	bl	9ecd0 <CLogger::Get()>
   8bdb0:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8bdb4:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bdb8:	91370063 	add	x3, x3, #0xdc0
   8bdbc:	913d4021 	add	x1, x1, #0xf50
   8bdc0:	52800022 	mov	w2, #0x1                   	// #1
   8bdc4:	94004aff 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bdc8:	52800013 	mov	w19, #0x0                   	// #0
   8bdcc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bdd0:	2a1303e0 	mov	w0, w19
   8bdd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bdd8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8bddc:	d65f03c0 	ret
   8bde0:	94004bbc 	bl	9ecd0 <CLogger::Get()>
   8bde4:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8bde8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bdec:	9137e063 	add	x3, x3, #0xdf8
   8bdf0:	17fffff3 	b	8bdbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   8bdf4:	94004bb7 	bl	9ecd0 <CLogger::Get()>
   8bdf8:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8bdfc:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8be00:	2a1303e4 	mov	w4, w19
   8be04:	9138a063 	add	x3, x3, #0xe28
   8be08:	913d4021 	add	x1, x1, #0xf50
   8be0c:	52800022 	mov	w2, #0x1                   	// #1
   8be10:	94004aec 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8be14:	52800013 	mov	w19, #0x0                   	// #0
   8be18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8be1c:	17ffffcb 	b	8bd48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   8be20:	94004bac 	bl	9ecd0 <CLogger::Get()>
   8be24:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8be28:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8be2c:	913b6063 	add	x3, x3, #0xed8
   8be30:	17ffffe3 	b	8bdbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   8be34:	94004ba7 	bl	9ecd0 <CLogger::Get()>
   8be38:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8be3c:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8be40:	91384063 	add	x3, x3, #0xe10
   8be44:	17ffffde 	b	8bdbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   8be48:	940044de 	bl	9d1c0 <CDeviceNameService::Get()>
   8be4c:	aa0003f5 	mov	x21, x0
   8be50:	910163e0 	add	x0, sp, #0x58
   8be54:	94005813 	bl	a1ea0 <CString::operator char const*() const>
   8be58:	aa0003e1 	mov	x1, x0
   8be5c:	aa1403e2 	mov	x2, x20
   8be60:	aa1503e0 	mov	x0, x21
   8be64:	52800023 	mov	w3, #0x1                   	// #1
   8be68:	9400440e 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8be6c:	17ffffa0 	b	8bcec <CUSBBulkOnlyMassStorageDevice::Configure()+0x2bc>
   8be70:	94004b98 	bl	9ecd0 <CLogger::Get()>
   8be74:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8be78:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8be7c:	91392063 	add	x3, x3, #0xe48
   8be80:	17ffffcf 	b	8bdbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x38c>
   8be84:	94004b93 	bl	9ecd0 <CLogger::Get()>
   8be88:	aa1303e1 	mov	x1, x19
   8be8c:	f0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8be90:	913b0063 	add	x3, x3, #0xec0
   8be94:	52800022 	mov	w2, #0x1                   	// #1
   8be98:	94004aca 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8be9c:	52800013 	mov	w19, #0x0                   	// #0
   8bea0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bea4:	17ffffa9 	b	8bd48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   8bea8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8beac:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8beb0:	91302021 	add	x1, x1, #0xc08
   8beb4:	913a8000 	add	x0, x0, #0xea0
   8beb8:	528033a2 	mov	w2, #0x19d                 	// #413
   8bebc:	940041f1 	bl	9c680 <assertion_failed>
   8bec0:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bec4:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8bec8:	91302021 	add	x1, x1, #0xc08
   8becc:	913a0000 	add	x0, x0, #0xe80
   8bed0:	528032e2 	mov	w2, #0x197                 	// #407
   8bed4:	940041eb 	bl	9c680 <assertion_failed>
	...

000000000008bee0 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   8bee0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bee4:	910003fd 	mov	x29, sp
   8bee8:	90000121 	adrp	x1, af000 <FromUmsd+0xb0>
   8beec:	91018021 	add	x1, x1, #0x60
   8bef0:	a90153f3 	stp	x19, x20, [sp, #16]
   8bef4:	aa0003f3 	mov	x19, x0
   8bef8:	f9402000 	ldr	x0, [x0, #64]
   8befc:	f9000261 	str	x1, [x19]
   8bf00:	b4000060 	cbz	x0, 8bf0c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x2c>
   8bf04:	940065f7 	bl	a56e0 <operator delete[](void*)>
   8bf08:	f900227f 	str	xzr, [x19, #64]
   8bf0c:	f9401274 	ldr	x20, [x19, #32]
   8bf10:	b40000f4 	cbz	x20, 8bf2c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x4c>
   8bf14:	aa1403e0 	mov	x0, x20
   8bf18:	97ffee6e 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8bf1c:	aa1403e0 	mov	x0, x20
   8bf20:	d2800401 	mov	x1, #0x20                  	// #32
   8bf24:	940065fb 	bl	a5710 <operator delete(void*, unsigned long)>
   8bf28:	f900127f 	str	xzr, [x19, #32]
   8bf2c:	aa1303e0 	mov	x0, x19
   8bf30:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bf34:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bf38:	17ffeeba 	b	87a20 <CUSBFunction::~CUSBFunction()>
   8bf3c:	d503201f 	nop

000000000008bf40 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   8bf40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bf44:	910003fd 	mov	x29, sp
   8bf48:	f9000bf3 	str	x19, [sp, #16]
   8bf4c:	aa0003f3 	mov	x19, x0
   8bf50:	97ffffe4 	bl	8bee0 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   8bf54:	aa1303e0 	mov	x0, x19
   8bf58:	d2800a01 	mov	x1, #0x50                  	// #80
   8bf5c:	f9400bf3 	ldr	x19, [sp, #16]
   8bf60:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bf64:	140065eb 	b	a5710 <operator delete(void*, unsigned long)>
   8bf68:	d503201f 	nop
   8bf6c:	d503201f 	nop

000000000008bf70 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   8bf70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bf74:	910003fd 	mov	x29, sp
   8bf78:	f9000bf3 	str	x19, [sp, #16]
   8bf7c:	aa0003f3 	mov	x19, x0
   8bf80:	97ffef40 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8bf84:	90000120 	adrp	x0, af000 <FromUmsd+0xb0>
   8bf88:	91018000 	add	x0, x0, #0x60
   8bf8c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8bf90:	f9000260 	str	x0, [x19]
   8bf94:	f9001a7f 	str	xzr, [x19, #48]
   8bf98:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   8bf9c:	f9400bf3 	ldr	x19, [sp, #16]
   8bfa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bfa4:	d65f03c0 	ret
   8bfa8:	d503201f 	nop
   8bfac:	d503201f 	nop

000000000008bfb0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   8bfb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bfb4:	910003fd 	mov	x29, sp
   8bfb8:	f9401402 	ldr	x2, [x0, #40]
   8bfbc:	b50000a2 	cbnz	x2, 8bfd0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x20>
   8bfc0:	f9001401 	str	x1, [x0, #40]
   8bfc4:	b4000121 	cbz	x1, 8bfe8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x38>
   8bfc8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bfcc:	d65f03c0 	ret
   8bfd0:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bfd4:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8bfd8:	913d6021 	add	x1, x1, #0xf58
   8bfdc:	913da000 	add	x0, x0, #0xf68
   8bfe0:	52801322 	mov	w2, #0x99                  	// #153
   8bfe4:	940041a7 	bl	9c680 <assertion_failed>
   8bfe8:	f0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8bfec:	f0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8bff0:	913d6021 	add	x1, x1, #0xf58
   8bff4:	913e0000 	add	x0, x0, #0xf80
   8bff8:	52801362 	mov	w2, #0x9b                  	// #155
   8bffc:	940041a1 	bl	9c680 <assertion_failed>

000000000008c000 <CUSBMIDIDevice::StartRequest()>:
   8c000:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c004:	910003fd 	mov	x29, sp
   8c008:	a90153f3 	stp	x19, x20, [sp, #16]
   8c00c:	aa0003f3 	mov	x19, x0
   8c010:	f9401000 	ldr	x0, [x0, #32]
   8c014:	b4000440 	cbz	x0, 8c09c <CUSBMIDIDevice::StartRequest()+0x9c>
   8c018:	f9402260 	ldr	x0, [x19, #64]
   8c01c:	b40004c0 	cbz	x0, 8c0b4 <CUSBMIDIDevice::StartRequest()+0xb4>
   8c020:	f9401a60 	ldr	x0, [x19, #48]
   8c024:	b5000540 	cbnz	x0, 8c0cc <CUSBMIDIDevice::StartRequest()+0xcc>
   8c028:	79407260 	ldrh	w0, [x19, #56]
   8c02c:	340005c0 	cbz	w0, 8c0e4 <CUSBMIDIDevice::StartRequest()+0xe4>
   8c030:	d2800900 	mov	x0, #0x48                  	// #72
   8c034:	9400038f 	bl	8ce70 <CUSBRequest::operator new(unsigned long)>
   8c038:	f9401261 	ldr	x1, [x19, #32]
   8c03c:	d2800004 	mov	x4, #0x0                   	// #0
   8c040:	aa0003f4 	mov	x20, x0
   8c044:	79407263 	ldrh	w3, [x19, #56]
   8c048:	f9402262 	ldr	x2, [x19, #64]
   8c04c:	940002f5 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8c050:	90000001 	adrp	x1, 8c000 <CUSBMIDIDevice::StartRequest()>
   8c054:	aa1303e3 	mov	x3, x19
   8c058:	f9001a74 	str	x20, [x19, #48]
   8c05c:	910dc021 	add	x1, x1, #0x370
   8c060:	d2800002 	mov	x2, #0x0                   	// #0
   8c064:	aa1403e0 	mov	x0, x20
   8c068:	9400035e 	bl	8cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8c06c:	f9401a60 	ldr	x0, [x19, #48]
   8c070:	94000378 	bl	8ce50 <CUSBRequest::SetCompleteOnNAK()>
   8c074:	aa1303e0 	mov	x0, x19
   8c078:	97ffef7e 	bl	87e70 <CUSBFunction::GetHost() const>
   8c07c:	f9400003 	ldr	x3, [x0]
   8c080:	52800002 	mov	w2, #0x0                   	// #0
   8c084:	f9401a61 	ldr	x1, [x19, #48]
   8c088:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c08c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c090:	f9400c63 	ldr	x3, [x3, #24]
   8c094:	aa0303f0 	mov	x16, x3
   8c098:	d61f0200 	br	x16
   8c09c:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c0a0:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c0a4:	913d6021 	add	x1, x1, #0xf58
   8c0a8:	913e6000 	add	x0, x0, #0xf98
   8c0ac:	52801402 	mov	w2, #0xa0                  	// #160
   8c0b0:	94004174 	bl	9c680 <assertion_failed>
   8c0b4:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c0b8:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c0bc:	913d6021 	add	x1, x1, #0xf58
   8c0c0:	913ec000 	add	x0, x0, #0xfb0
   8c0c4:	52801422 	mov	w2, #0xa1                  	// #161
   8c0c8:	9400416e 	bl	9c680 <assertion_failed>
   8c0cc:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c0d0:	90000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8c0d4:	913d6021 	add	x1, x1, #0xf58
   8c0d8:	913f8000 	add	x0, x0, #0xfe0
   8c0dc:	52801462 	mov	w2, #0xa3                  	// #163
   8c0e0:	94004168 	bl	9c680 <assertion_failed>
   8c0e4:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c0e8:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c0ec:	913d6021 	add	x1, x1, #0xf58
   8c0f0:	913f2000 	add	x0, x0, #0xfc8
   8c0f4:	52801482 	mov	w2, #0xa4                  	// #164
   8c0f8:	94004162 	bl	9c680 <assertion_failed>
   8c0fc:	d503201f 	nop

000000000008c100 <CUSBMIDIDevice::TimerStub(unsigned long, void*, void*)>:
   8c100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c104:	910003fd 	mov	x29, sp
   8c108:	b4000102 	cbz	x2, 8c128 <CUSBMIDIDevice::TimerStub(unsigned long, void*, void*)+0x28>
   8c10c:	f9402441 	ldr	x1, [x2, #72]
   8c110:	eb01001f 	cmp	x0, x1
   8c114:	54000161 	b.ne	8c140 <CUSBMIDIDevice::TimerStub(unsigned long, void*, void*)+0x40>  // b.any
   8c118:	aa0203e0 	mov	x0, x2
   8c11c:	f900245f 	str	xzr, [x2, #72]
   8c120:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c124:	17ffffb7 	b	8c000 <CUSBMIDIDevice::StartRequest()>
   8c128:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c12c:	90000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8c130:	913d6021 	add	x1, x1, #0xf58
   8c134:	9138e000 	add	x0, x0, #0xe38
   8c138:	52801e02 	mov	w2, #0xf0                  	// #240
   8c13c:	94004151 	bl	9c680 <assertion_failed>
   8c140:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c144:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c148:	913d6021 	add	x1, x1, #0xf58
   8c14c:	913f8000 	add	x0, x0, #0xfe0
   8c150:	52801ce2 	mov	w2, #0xe7                  	// #231
   8c154:	9400414b 	bl	9c680 <assertion_failed>
   8c158:	d503201f 	nop
   8c15c:	d503201f 	nop

000000000008c160 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   8c160:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c164:	910003fd 	mov	x29, sp
   8c168:	a90153f3 	stp	x19, x20, [sp, #16]
   8c16c:	b4000a61 	cbz	x1, 8c2b8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x158>
   8c170:	aa0003f3 	mov	x19, x0
   8c174:	f9401814 	ldr	x20, [x0, #48]
   8c178:	eb01029f 	cmp	x20, x1
   8c17c:	54000ae1 	b.ne	8c2d8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x178>  // b.any
   8c180:	aa1403e0 	mov	x0, x20
   8c184:	940002db 	bl	8ccf0 <CUSBRequest::GetStatus() const>
   8c188:	350002e0 	cbnz	w0, 8c1e4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x84>
   8c18c:	f9401a74 	ldr	x20, [x19, #48]
   8c190:	b40000f4 	cbz	x20, 8c1ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x4c>
   8c194:	aa1403e0 	mov	x0, x20
   8c198:	940002be 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8c19c:	aa1403e0 	mov	x0, x20
   8c1a0:	d2800901 	mov	x1, #0x48                  	// #72
   8c1a4:	9400034b 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   8c1a8:	f9001a7f 	str	xzr, [x19, #48]
   8c1ac:	f9402660 	ldr	x0, [x19, #72]
   8c1b0:	b5000740 	cbnz	x0, 8c298 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x138>
   8c1b4:	940060ab 	bl	a4460 <CTimer::Get()>
   8c1b8:	90000002 	adrp	x2, 8c000 <CUSBMIDIDevice::StartRequest()>
   8c1bc:	aa1303e4 	mov	x4, x19
   8c1c0:	91040042 	add	x2, x2, #0x100
   8c1c4:	d2800003 	mov	x3, #0x0                   	// #0
   8c1c8:	52800021 	mov	w1, #0x1                   	// #1
   8c1cc:	94005ebd 	bl	a3cc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   8c1d0:	f9002660 	str	x0, [x19, #72]
   8c1d4:	b4000920 	cbz	x0, 8c2f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   8c1d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c1dc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c1e0:	d65f03c0 	ret
   8c1e4:	aa1403e0 	mov	x0, x20
   8c1e8:	940002c6 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8c1ec:	f240041f 	tst	x0, #0x3
   8c1f0:	54fffce1 	b.ne	8c18c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x2c>  // b.any
   8c1f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c1f8:	f9402275 	ldr	x21, [x19, #64]
   8c1fc:	b40008f5 	cbz	x21, 8c318 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b8>
   8c200:	aa1403e0 	mov	x0, x20
   8c204:	940002bf 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8c208:	8b2042b5 	add	x21, x21, w0, uxtw
   8c20c:	f9402274 	ldr	x20, [x19, #64]
   8c210:	eb1402bf 	cmp	x21, x20
   8c214:	54000909 	b.ls	8c334 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1d4>  // b.plast
   8c218:	52800016 	mov	w22, #0x0                   	// #0
   8c21c:	f9001bf7 	str	x23, [sp, #48]
   8c220:	f0000117 	adrp	x23, af000 <FromUmsd+0xb0>
   8c224:	9102c2f7 	add	x23, x23, #0xb0
   8c228:	39400280 	ldrb	w0, [x20]
   8c22c:	34000120 	cbz	w0, 8c250 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   8c230:	f9401663 	ldr	x3, [x19, #40]
   8c234:	52800036 	mov	w22, #0x1                   	// #1
   8c238:	b40000c3 	cbz	x3, 8c250 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   8c23c:	92400c02 	and	x2, x0, #0xf
   8c240:	91000681 	add	x1, x20, #0x1
   8c244:	b8627ae2 	ldr	w2, [x23, x2, lsl #2]
   8c248:	53047c00 	lsr	w0, w0, #4
   8c24c:	d63f0060 	blr	x3
   8c250:	91001294 	add	x20, x20, #0x4
   8c254:	eb1402bf 	cmp	x21, x20
   8c258:	54fffe88 	b.hi	8c228 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xc8>  // b.pmore
   8c25c:	f9401a74 	ldr	x20, [x19, #48]
   8c260:	b40000d4 	cbz	x20, 8c278 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x118>
   8c264:	aa1403e0 	mov	x0, x20
   8c268:	9400028a 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8c26c:	aa1403e0 	mov	x0, x20
   8c270:	d2800901 	mov	x1, #0x48                  	// #72
   8c274:	94000317 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   8c278:	f9001a7f 	str	xzr, [x19, #48]
   8c27c:	34000716 	cbz	w22, 8c35c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1fc>
   8c280:	aa1303e0 	mov	x0, x19
   8c284:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c288:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c28c:	f9401bf7 	ldr	x23, [sp, #48]
   8c290:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c294:	17ffff5b 	b	8c000 <CUSBMIDIDevice::StartRequest()>
   8c298:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c29c:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c2a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c2a4:	913d6021 	add	x1, x1, #0xf58
   8c2a8:	913fe000 	add	x0, x0, #0xff8
   8c2ac:	52801ae2 	mov	w2, #0xd7                  	// #215
   8c2b0:	f9001bf7 	str	x23, [sp, #48]
   8c2b4:	940040f3 	bl	9c680 <assertion_failed>
   8c2b8:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c2bc:	90000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8c2c0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c2c4:	913d6021 	add	x1, x1, #0xf58
   8c2c8:	913d8000 	add	x0, x0, #0xf60
   8c2cc:	52801602 	mov	w2, #0xb0                  	// #176
   8c2d0:	f9001bf7 	str	x23, [sp, #48]
   8c2d4:	940040eb 	bl	9c680 <assertion_failed>
   8c2d8:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c2dc:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c2e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c2e4:	913d6021 	add	x1, x1, #0xf58
   8c2e8:	912ce000 	add	x0, x0, #0xb38
   8c2ec:	52801622 	mov	w2, #0xb1                  	// #177
   8c2f0:	f9001bf7 	str	x23, [sp, #48]
   8c2f4:	940040e3 	bl	9c680 <assertion_failed>
   8c2f8:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c2fc:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c300:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c304:	913d6021 	add	x1, x1, #0xf58
   8c308:	91002000 	add	x0, x0, #0x8
   8c30c:	52801b22 	mov	w2, #0xd9                  	// #217
   8c310:	f9001bf7 	str	x23, [sp, #48]
   8c314:	940040db 	bl	9c680 <assertion_failed>
   8c318:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c31c:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c320:	f9001bf7 	str	x23, [sp, #48]
   8c324:	913d6021 	add	x1, x1, #0xf58
   8c328:	913ec000 	add	x0, x0, #0xfb0
   8c32c:	52801702 	mov	w2, #0xb8                  	// #184
   8c330:	940040d4 	bl	9c680 <assertion_failed>
   8c334:	f9401a74 	ldr	x20, [x19, #48]
   8c338:	b4000194 	cbz	x20, 8c368 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x208>
   8c33c:	aa1403e0 	mov	x0, x20
   8c340:	94000254 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8c344:	aa1403e0 	mov	x0, x20
   8c348:	d2800901 	mov	x1, #0x48                  	// #72
   8c34c:	940002e1 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   8c350:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c354:	f9001a7f 	str	xzr, [x19, #48]
   8c358:	17ffff95 	b	8c1ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x4c>
   8c35c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c360:	f9401bf7 	ldr	x23, [sp, #48]
   8c364:	17ffff92 	b	8c1ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x4c>
   8c368:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c36c:	17ffff90 	b	8c1ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x4c>

000000000008c370 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   8c370:	b4000082 	cbz	x2, 8c380 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   8c374:	aa0003e1 	mov	x1, x0
   8c378:	aa0203e0 	mov	x0, x2
   8c37c:	17ffff79 	b	8c160 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   8c380:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c384:	90000100 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8c388:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c38c:	913d6021 	add	x1, x1, #0xf58
   8c390:	910003fd 	mov	x29, sp
   8c394:	9138e000 	add	x0, x0, #0xe38
   8c398:	52801c02 	mov	w2, #0xe0                  	// #224
   8c39c:	940040b9 	bl	9c680 <assertion_failed>

000000000008c3a0 <CUSBMIDIDevice::TimerHandler(unsigned long)>:
   8c3a0:	f9402403 	ldr	x3, [x0, #72]
   8c3a4:	eb01007f 	cmp	x3, x1
   8c3a8:	54000061 	b.ne	8c3b4 <CUSBMIDIDevice::TimerHandler(unsigned long)+0x14>  // b.any
   8c3ac:	f900241f 	str	xzr, [x0, #72]
   8c3b0:	17ffff14 	b	8c000 <CUSBMIDIDevice::StartRequest()>
   8c3b4:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c3b8:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c3bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c3c0:	913d6021 	add	x1, x1, #0xf58
   8c3c4:	910003fd 	mov	x29, sp
   8c3c8:	913f8000 	add	x0, x0, #0xfe0
   8c3cc:	52801ce2 	mov	w2, #0xe7                  	// #231
   8c3d0:	940040ac 	bl	9c680 <assertion_failed>
   8c3d4:	d503201f 	nop
   8c3d8:	d503201f 	nop
   8c3dc:	d503201f 	nop

000000000008c3e0 <CUSBMIDIDevice::Configure()>:
   8c3e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8c3e4:	910003fd 	mov	x29, sp
   8c3e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8c3ec:	aa0003f4 	mov	x20, x0
   8c3f0:	97ffee7c 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8c3f4:	72001c1f 	tst	w0, #0xff
   8c3f8:	54000bc0 	b.eq	8c570 <CUSBMIDIDevice::Configure()+0x190>  // b.none
   8c3fc:	aa1403e0 	mov	x0, x20
   8c400:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c404:	97ffee83 	bl	87e10 <CUSBFunction::GetDevice() const>
   8c408:	97ffe8ba 	bl	866f0 <CUSBDevice::GetDeviceDescriptor() const>
   8c40c:	b4000fc0 	cbz	x0, 8c604 <CUSBMIDIDevice::Configure()+0x224>
   8c410:	79401001 	ldrh	w1, [x0, #8]
   8c414:	52800016 	mov	w22, #0x0                   	// #0
   8c418:	7116083f 	cmp	w1, #0x582
   8c41c:	54000a20 	b.eq	8c560 <CUSBMIDIDevice::Configure()+0x180>  // b.none
   8c420:	528000a1 	mov	w1, #0x5                   	// #5
   8c424:	aa1403e0 	mov	x0, x20
   8c428:	97ffee9e 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8c42c:	aa0003f3 	mov	x19, x0
   8c430:	b4000400 	cbz	x0, 8c4b0 <CUSBMIDIDevice::Configure()+0xd0>
   8c434:	39c00800 	ldrsb	w0, [x0, #2]
   8c438:	36ffff40 	tbz	w0, #31, 8c420 <CUSBMIDIDevice::Configure()+0x40>
   8c43c:	39400e60 	ldrb	w0, [x19, #3]
   8c440:	12001400 	and	w0, w0, #0x3f
   8c444:	7100081f 	cmp	w0, #0x2
   8c448:	54fffec1 	b.ne	8c420 <CUSBMIDIDevice::Configure()+0x40>  // b.any
   8c44c:	34000796 	cbz	w22, 8c53c <CUSBMIDIDevice::Configure()+0x15c>
   8c450:	f9401280 	ldr	x0, [x20, #32]
   8c454:	b5000c20 	cbnz	x0, 8c5d8 <CUSBMIDIDevice::Configure()+0x1f8>
   8c458:	aa1403e0 	mov	x0, x20
   8c45c:	97ffee6d 	bl	87e10 <CUSBFunction::GetDevice() const>
   8c460:	aa0003f5 	mov	x21, x0
   8c464:	d2800400 	mov	x0, #0x20                  	// #32
   8c468:	94006486 	bl	a5680 <operator new(unsigned long)>
   8c46c:	aa1503e1 	mov	x1, x21
   8c470:	aa1303e2 	mov	x2, x19
   8c474:	aa0003f5 	mov	x21, x0
   8c478:	97ffecc6 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8c47c:	79400a60 	ldrh	w0, [x19, #4]
   8c480:	f9001295 	str	x21, [x20, #32]
   8c484:	f9402281 	ldr	x1, [x20, #64]
   8c488:	121e3400 	and	w0, w0, #0xfffc
   8c48c:	79007280 	strh	w0, [x20, #56]
   8c490:	b5000981 	cbnz	x1, 8c5c0 <CUSBMIDIDevice::Configure()+0x1e0>
   8c494:	94006483 	bl	a56a0 <operator new[](unsigned long)>
   8c498:	528000a1 	mov	w1, #0x5                   	// #5
   8c49c:	f9002280 	str	x0, [x20, #64]
   8c4a0:	aa1403e0 	mov	x0, x20
   8c4a4:	97ffee7f 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8c4a8:	aa0003f3 	mov	x19, x0
   8c4ac:	b5fffc40 	cbnz	x0, 8c434 <CUSBMIDIDevice::Configure()+0x54>
   8c4b0:	f9401280 	ldr	x0, [x20, #32]
   8c4b4:	b4000920 	cbz	x0, 8c5d8 <CUSBMIDIDevice::Configure()+0x1f8>
   8c4b8:	aa1403e0 	mov	x0, x20
   8c4bc:	97ffed85 	bl	87ad0 <CUSBFunction::Configure()>
   8c4c0:	72001c13 	ands	w19, w0, #0xff
   8c4c4:	540006a0 	b.eq	8c598 <CUSBMIDIDevice::Configure()+0x1b8>  // b.none
   8c4c8:	9100c3e0 	add	x0, sp, #0x30
   8c4cc:	94005659 	bl	a1e30 <CString::CString()>
   8c4d0:	b0000143 	adrp	x3, b5000 <font_data+0x1340>
   8c4d4:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c4d8:	b94da862 	ldr	w2, [x3, #3496]
   8c4dc:	91012021 	add	x1, x1, #0x48
   8c4e0:	9100c3e0 	add	x0, sp, #0x30
   8c4e4:	11000444 	add	w4, w2, #0x1
   8c4e8:	b90da864 	str	w4, [x3, #3496]
   8c4ec:	94005bc1 	bl	a33f0 <CString::Format(char const*, ...)>
   8c4f0:	94004334 	bl	9d1c0 <CDeviceNameService::Get()>
   8c4f4:	aa0003f3 	mov	x19, x0
   8c4f8:	9100c3e0 	add	x0, sp, #0x30
   8c4fc:	94005669 	bl	a1ea0 <CString::operator char const*() const>
   8c500:	aa0003e1 	mov	x1, x0
   8c504:	aa1403e2 	mov	x2, x20
   8c508:	52800003 	mov	w3, #0x0                   	// #0
   8c50c:	aa1303e0 	mov	x0, x19
   8c510:	94004264 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8c514:	aa1403e0 	mov	x0, x20
   8c518:	97fffeba 	bl	8c000 <CUSBMIDIDevice::StartRequest()>
   8c51c:	12001c13 	and	w19, w0, #0xff
   8c520:	9100c3e0 	add	x0, sp, #0x30
   8c524:	94005607 	bl	a1d40 <CString::~CString()>
   8c528:	2a1303e0 	mov	w0, w19
   8c52c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c530:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c534:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c538:	d65f03c0 	ret
   8c53c:	528004a1 	mov	w1, #0x25                  	// #37
   8c540:	aa1403e0 	mov	x0, x20
   8c544:	97ffee57 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8c548:	b4fff6c0 	cbz	x0, 8c420 <CUSBMIDIDevice::Configure()+0x40>
   8c54c:	39400261 	ldrb	w1, [x19]
   8c550:	8b010261 	add	x1, x19, x1
   8c554:	eb01001f 	cmp	x0, x1
   8c558:	54fff641 	b.ne	8c420 <CUSBMIDIDevice::Configure()+0x40>  // b.any
   8c55c:	17ffffbd 	b	8c450 <CUSBMIDIDevice::Configure()+0x70>
   8c560:	79401400 	ldrh	w0, [x0, #10]
   8c564:	7104a81f 	cmp	w0, #0x12a
   8c568:	1a9f17f6 	cset	w22, eq  // eq = none
   8c56c:	17ffffad 	b	8c420 <CUSBMIDIDevice::Configure()+0x40>
   8c570:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c574:	9102c021 	add	x1, x1, #0xb0
   8c578:	aa1403e0 	mov	x0, x20
   8c57c:	91010021 	add	x1, x1, #0x40
   8c580:	52800013 	mov	w19, #0x0                   	// #0
   8c584:	97ffee53 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8c588:	2a1303e0 	mov	w0, w19
   8c58c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c590:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c594:	d65f03c0 	ret
   8c598:	940049ce 	bl	9ecd0 <CLogger::Get()>
   8c59c:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c5a0:	9102c021 	add	x1, x1, #0xb0
   8c5a4:	d0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8c5a8:	91010021 	add	x1, x1, #0x40
   8c5ac:	9104a063 	add	x3, x3, #0x128
   8c5b0:	52800022 	mov	w2, #0x1                   	// #1
   8c5b4:	94004903 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c5b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c5bc:	17fffff3 	b	8c588 <CUSBMIDIDevice::Configure()+0x1a8>
   8c5c0:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c5c4:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c5c8:	913d6021 	add	x1, x1, #0xf58
   8c5cc:	9100c000 	add	x0, x0, #0x30
   8c5d0:	52800fa2 	mov	w2, #0x7d                  	// #125
   8c5d4:	9400402b 	bl	9c680 <assertion_failed>
   8c5d8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c5dc:	9102c021 	add	x1, x1, #0xb0
   8c5e0:	aa1403e0 	mov	x0, x20
   8c5e4:	91010021 	add	x1, x1, #0x40
   8c5e8:	97ffee3a 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8c5ec:	52800013 	mov	w19, #0x0                   	// #0
   8c5f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c5f4:	2a1303e0 	mov	w0, w19
   8c5f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c5fc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c600:	d65f03c0 	ret
   8c604:	d0000101 	adrp	x1, ae000 <FromDevice+0x108>
   8c608:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c60c:	913d6021 	add	x1, x1, #0xf58
   8c610:	91006000 	add	x0, x0, #0x18
   8c614:	52800a22 	mov	w2, #0x51                  	// #81
   8c618:	9400401a 	bl	9c680 <assertion_failed>
   8c61c:	00000000 	.inst	0x00000000 ; undefined

000000000008c620 <CUSBMouseDevice::~CUSBMouseDevice()>:
   8c620:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c624:	910003fd 	mov	x29, sp
   8c628:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c62c:	91042021 	add	x1, x1, #0x108
   8c630:	f9000bf3 	str	x19, [sp, #16]
   8c634:	aa0003f3 	mov	x19, x0
   8c638:	f9402400 	ldr	x0, [x0, #72]
   8c63c:	f9000261 	str	x1, [x19]
   8c640:	b4000080 	cbz	x0, 8c650 <CUSBMouseDevice::~CUSBMouseDevice()+0x30>
   8c644:	f9400001 	ldr	x1, [x0]
   8c648:	f9400421 	ldr	x1, [x1, #8]
   8c64c:	d63f0020 	blr	x1
   8c650:	f900267f 	str	xzr, [x19, #72]
   8c654:	f9402a60 	ldr	x0, [x19, #80]
   8c658:	b4000040 	cbz	x0, 8c660 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   8c65c:	94006421 	bl	a56e0 <operator delete[](void*)>
   8c660:	aa1303e0 	mov	x0, x19
   8c664:	f9002a7f 	str	xzr, [x19, #80]
   8c668:	f9400bf3 	ldr	x19, [sp, #16]
   8c66c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c670:	17fff850 	b	8a7b0 <CUSBHIDDevice::~CUSBHIDDevice()>
   8c674:	d503201f 	nop
   8c678:	d503201f 	nop
   8c67c:	d503201f 	nop

000000000008c680 <CUSBMouseDevice::~CUSBMouseDevice()>:
   8c680:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c684:	910003fd 	mov	x29, sp
   8c688:	f9000bf3 	str	x19, [sp, #16]
   8c68c:	aa0003f3 	mov	x19, x0
   8c690:	97ffffe4 	bl	8c620 <CUSBMouseDevice::~CUSBMouseDevice()>
   8c694:	aa1303e0 	mov	x0, x19
   8c698:	d2800c01 	mov	x1, #0x60                  	// #96
   8c69c:	f9400bf3 	ldr	x19, [sp, #16]
   8c6a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c6a4:	1400641b 	b	a5710 <operator delete(void*, unsigned long)>
   8c6a8:	d503201f 	nop
   8c6ac:	d503201f 	nop

000000000008c6b0 <CUSBMouseDevice::Configure()>:
   8c6b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c6b4:	52800421 	mov	w1, #0x21                  	// #33
   8c6b8:	910003fd 	mov	x29, sp
   8c6bc:	a90153f3 	stp	x19, x20, [sp, #16]
   8c6c0:	aa0003f3 	mov	x19, x0
   8c6c4:	97ffedf7 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8c6c8:	b4000080 	cbz	x0, 8c6d8 <CUSBMouseDevice::Configure()+0x28>
   8c6cc:	78407001 	ldurh	w1, [x0, #7]
   8c6d0:	aa0003f4 	mov	x20, x0
   8c6d4:	35000141 	cbnz	w1, 8c6fc <CUSBMouseDevice::Configure()+0x4c>
   8c6d8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c6dc:	91058021 	add	x1, x1, #0x160
   8c6e0:	aa1303e0 	mov	x0, x19
   8c6e4:	52800014 	mov	w20, #0x0                   	// #0
   8c6e8:	97ffedfa 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8c6ec:	2a1403e0 	mov	w0, w20
   8c6f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c6f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c6f8:	d65f03c0 	ret
   8c6fc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c700:	92403c20 	and	x0, x1, #0xffff
   8c704:	a90363f7 	stp	x23, x24, [sp, #48]
   8c708:	7900b261 	strh	w1, [x19, #88]
   8c70c:	940063e5 	bl	a56a0 <operator new[](unsigned long)>
   8c710:	aa0003e1 	mov	x1, x0
   8c714:	aa1303e0 	mov	x0, x19
   8c718:	f9002a61 	str	x1, [x19, #80]
   8c71c:	97ffedd5 	bl	87e70 <CUSBFunction::GetHost() const>
   8c720:	aa0003f5 	mov	x21, x0
   8c724:	aa1303e0 	mov	x0, x19
   8c728:	97ffedc6 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8c72c:	39401a97 	ldrb	w23, [x20, #6]
   8c730:	aa0003e1 	mov	x1, x0
   8c734:	aa1303e0 	mov	x0, x19
   8c738:	aa0103f4 	mov	x20, x1
   8c73c:	7940b278 	ldrh	w24, [x19, #88]
   8c740:	f9402a76 	ldr	x22, [x19, #80]
   8c744:	97ffee2f 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   8c748:	12001c07 	and	w7, w0, #0xff
   8c74c:	aa1403e1 	mov	x1, x20
   8c750:	2a1803e5 	mov	w5, w24
   8c754:	2a1703e2 	mov	w2, w23
   8c758:	aa1503e0 	mov	x0, x21
   8c75c:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   8c760:	aa1603e4 	mov	x4, x22
   8c764:	52800003 	mov	w3, #0x0                   	// #0
   8c768:	97fffa46 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8c76c:	7940b261 	ldrh	w1, [x19, #88]
   8c770:	6b01001f 	cmp	w0, w1
   8c774:	540001e0 	b.eq	8c7b0 <CUSBMouseDevice::Configure()+0x100>  // b.none
   8c778:	94004956 	bl	9ecd0 <CLogger::Get()>
   8c77c:	d0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8c780:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c784:	91146063 	add	x3, x3, #0x518
   8c788:	91058021 	add	x1, x1, #0x160
   8c78c:	52800022 	mov	w2, #0x1                   	// #1
   8c790:	52800014 	mov	w20, #0x0                   	// #0
   8c794:	9400488b 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c798:	2a1403e0 	mov	w0, w20
   8c79c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c7a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c7a4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c7a8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c7ac:	d65f03c0 	ret
   8c7b0:	52800001 	mov	w1, #0x0                   	// #0
   8c7b4:	aa1303e0 	mov	x0, x19
   8c7b8:	97fff82a 	bl	8a860 <CUSBHIDDevice::Configure(unsigned int)>
   8c7bc:	72001c14 	ands	w20, w0, #0xff
   8c7c0:	54000180 	b.eq	8c7f0 <CUSBMouseDevice::Configure()+0x140>  // b.none
   8c7c4:	d2800700 	mov	x0, #0x38                  	// #56
   8c7c8:	940063ae 	bl	a5680 <operator new(unsigned long)>
   8c7cc:	aa0003f4 	mov	x20, x0
   8c7d0:	94001570 	bl	91d90 <CMouseDevice::CMouseDevice()>
   8c7d4:	aa1303e0 	mov	x0, x19
   8c7d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c7dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c7e0:	f9002674 	str	x20, [x19, #72]
   8c7e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c7e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c7ec:	17fff951 	b	8ad30 <CUSBHIDDevice::StartRequest()>
   8c7f0:	94004938 	bl	9ecd0 <CLogger::Get()>
   8c7f4:	90000103 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8c7f8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c7fc:	91298063 	add	x3, x3, #0xa60
   8c800:	91058021 	add	x1, x1, #0x160
   8c804:	52800022 	mov	w2, #0x1                   	// #1
   8c808:	9400486e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c80c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c810:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c814:	17ffffb6 	b	8c6ec <CUSBMouseDevice::Configure()+0x3c>
   8c818:	d503201f 	nop
   8c81c:	d503201f 	nop

000000000008c820 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   8c820:	f100003f 	cmp	x1, #0x0
   8c824:	aa0103e4 	mov	x4, x1
   8c828:	7a431840 	ccmp	w2, #0x3, #0x0, ne  // ne = any
   8c82c:	54000101 	b.ne	8c84c <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.any
   8c830:	39400021 	ldrb	w1, [x1]
   8c834:	f9402400 	ldr	x0, [x0, #72]
   8c838:	12000821 	and	w1, w1, #0x7
   8c83c:	b4000080 	cbz	x0, 8c84c <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>
   8c840:	39c00883 	ldrsb	w3, [x4, #2]
   8c844:	39c00482 	ldrsb	w2, [x4, #1]
   8c848:	1400159a 	b	91eb0 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   8c84c:	d65f03c0 	ret

000000000008c850 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   8c850:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c854:	52800062 	mov	w2, #0x3                   	// #3
   8c858:	910003fd 	mov	x29, sp
   8c85c:	f9000bf3 	str	x19, [sp, #16]
   8c860:	aa0003f3 	mov	x19, x0
   8c864:	97fff7bb 	bl	8a750 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   8c868:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c86c:	91042000 	add	x0, x0, #0x108
   8c870:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   8c874:	f9000260 	str	x0, [x19]
   8c878:	f9400bf3 	ldr	x19, [sp, #16]
   8c87c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c880:	d65f03c0 	ret
	...

000000000008c890 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   8c890:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c894:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c898:	91070021 	add	x1, x1, #0x1c0
   8c89c:	910003fd 	mov	x29, sp
   8c8a0:	a90153f3 	stp	x19, x20, [sp, #16]
   8c8a4:	aa0003f3 	mov	x19, x0
   8c8a8:	f9000001 	str	x1, [x0]
   8c8ac:	f9401814 	ldr	x20, [x0, #48]
   8c8b0:	b40000d4 	cbz	x20, 8c8c8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x38>
   8c8b4:	aa1403e0 	mov	x0, x20
   8c8b8:	97ffec06 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8c8bc:	aa1403e0 	mov	x0, x20
   8c8c0:	d2800401 	mov	x1, #0x20                  	// #32
   8c8c4:	94006393 	bl	a5710 <operator delete(void*, unsigned long)>
   8c8c8:	f9001a7f 	str	xzr, [x19, #48]
   8c8cc:	f9401674 	ldr	x20, [x19, #40]
   8c8d0:	b40000d4 	cbz	x20, 8c8e8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   8c8d4:	aa1403e0 	mov	x0, x20
   8c8d8:	97ffebfe 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8c8dc:	aa1403e0 	mov	x0, x20
   8c8e0:	d2800401 	mov	x1, #0x20                  	// #32
   8c8e4:	9400638b 	bl	a5710 <operator delete(void*, unsigned long)>
   8c8e8:	aa1303e0 	mov	x0, x19
   8c8ec:	f900167f 	str	xzr, [x19, #40]
   8c8f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c8f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c8f8:	17ffec4a 	b	87a20 <CUSBFunction::~CUSBFunction()>
   8c8fc:	d503201f 	nop

000000000008c900 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   8c900:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c904:	910003fd 	mov	x29, sp
   8c908:	f9000bf3 	str	x19, [sp, #16]
   8c90c:	aa0003f3 	mov	x19, x0
   8c910:	97ffffe0 	bl	8c890 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   8c914:	aa1303e0 	mov	x0, x19
   8c918:	d2800701 	mov	x1, #0x38                  	// #56
   8c91c:	f9400bf3 	ldr	x19, [sp, #16]
   8c920:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c924:	1400637b 	b	a5710 <operator delete(void*, unsigned long)>
   8c928:	d503201f 	nop
   8c92c:	d503201f 	nop

000000000008c930 <CUSBPrinterDevice::Write(void const*, unsigned long)>:
   8c930:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c934:	910003fd 	mov	x29, sp
   8c938:	a90153f3 	stp	x19, x20, [sp, #16]
   8c93c:	f90013f5 	str	x21, [sp, #32]
   8c940:	b4000241 	cbz	x1, 8c988 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x58>
   8c944:	aa0203f3 	mov	x19, x2
   8c948:	b40002c2 	cbz	x2, 8c9a0 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x70>
   8c94c:	aa0103f4 	mov	x20, x1
   8c950:	aa0003f5 	mov	x21, x0
   8c954:	97ffed47 	bl	87e70 <CUSBFunction::GetHost() const>
   8c958:	b4000300 	cbz	x0, 8c9b8 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x88>
   8c95c:	aa1403e2 	mov	x2, x20
   8c960:	2a1303e3 	mov	w3, w19
   8c964:	f9401aa1 	ldr	x1, [x21, #48]
   8c968:	52800004 	mov	w4, #0x0                   	// #0
   8c96c:	97fff9f9 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8c970:	7100001f 	cmp	w0, #0x0
   8c974:	5a9fa260 	csinv	w0, w19, wzr, ge  // ge = tcont
   8c978:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c97c:	f94013f5 	ldr	x21, [sp, #32]
   8c980:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c984:	d65f03c0 	ret
   8c988:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c98c:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c990:	9105a021 	add	x1, x1, #0x168
   8c994:	91326000 	add	x0, x0, #0xc98
   8c998:	52800fc2 	mov	w2, #0x7e                  	// #126
   8c99c:	94003f39 	bl	9c680 <assertion_failed>
   8c9a0:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c9a4:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c9a8:	9105a021 	add	x1, x1, #0x168
   8c9ac:	9105e000 	add	x0, x0, #0x178
   8c9b0:	52800fe2 	mov	w2, #0x7f                  	// #127
   8c9b4:	94003f33 	bl	9c680 <assertion_failed>
   8c9b8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8c9bc:	d0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8c9c0:	9105a021 	add	x1, x1, #0x168
   8c9c4:	9132a000 	add	x0, x0, #0xca8
   8c9c8:	52801042 	mov	w2, #0x82                  	// #130
   8c9cc:	94003f2d 	bl	9c680 <assertion_failed>

000000000008c9d0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   8c9d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c9d4:	910003fd 	mov	x29, sp
   8c9d8:	f9000bf3 	str	x19, [sp, #16]
   8c9dc:	aa0003f3 	mov	x19, x0
   8c9e0:	97ffeca8 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8c9e4:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8c9e8:	91070000 	add	x0, x0, #0x1c0
   8c9ec:	b900227f 	str	wzr, [x19, #32]
   8c9f0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   8c9f4:	f9000260 	str	x0, [x19]
   8c9f8:	f9400bf3 	ldr	x19, [sp, #16]
   8c9fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ca00:	d65f03c0 	ret
   8ca04:	d503201f 	nop
   8ca08:	d503201f 	nop
   8ca0c:	d503201f 	nop

000000000008ca10 <CUSBPrinterDevice::Configure()>:
   8ca10:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8ca14:	910003fd 	mov	x29, sp
   8ca18:	a90153f3 	stp	x19, x20, [sp, #16]
   8ca1c:	aa0003f4 	mov	x20, x0
   8ca20:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ca24:	97ffed9b 	bl	88090 <CUSBFunction::GetInterfaceProtocol() const>
   8ca28:	12001c00 	and	w0, w0, #0xff
   8ca2c:	321e73e1 	mov	w1, #0x7ffffffc            	// #2147483644
   8ca30:	51000c02 	sub	w2, w0, #0x3
   8ca34:	6b01005f 	cmp	w2, w1
   8ca38:	b9002280 	str	w0, [x20, #32]
   8ca3c:	1a9f87e1 	cset	w1, ls  // ls = plast
   8ca40:	7100001f 	cmp	w0, #0x0
   8ca44:	1a9f1435 	csinc	w21, w1, wzr, ne  // ne = any
   8ca48:	35000a15 	cbnz	w21, 8cb88 <CUSBPrinterDevice::Configure()+0x178>
   8ca4c:	aa1403e0 	mov	x0, x20
   8ca50:	97ffece4 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8ca54:	b9402281 	ldr	w1, [x20, #32]
   8ca58:	7100043f 	cmp	w1, #0x1
   8ca5c:	1a9f07e1 	cset	w1, ne  // ne = any
   8ca60:	11000421 	add	w1, w1, #0x1
   8ca64:	6b20003f 	cmp	w1, w0, uxtb
   8ca68:	540000cd 	b.le	8ca80 <CUSBPrinterDevice::Configure()+0x70>
   8ca6c:	1400002f 	b	8cb28 <CUSBPrinterDevice::Configure()+0x118>
   8ca70:	39400c01 	ldrb	w1, [x0, #3]
   8ca74:	12001421 	and	w1, w1, #0x3f
   8ca78:	7100083f 	cmp	w1, #0x2
   8ca7c:	54000680 	b.eq	8cb4c <CUSBPrinterDevice::Configure()+0x13c>  // b.none
   8ca80:	528000a1 	mov	w1, #0x5                   	// #5
   8ca84:	aa1403e0 	mov	x0, x20
   8ca88:	97ffed06 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8ca8c:	aa0003f3 	mov	x19, x0
   8ca90:	b5ffff00 	cbnz	x0, 8ca70 <CUSBPrinterDevice::Configure()+0x60>
   8ca94:	f9401a80 	ldr	x0, [x20, #48]
   8ca98:	b4000480 	cbz	x0, 8cb28 <CUSBPrinterDevice::Configure()+0x118>
   8ca9c:	b9402280 	ldr	w0, [x20, #32]
   8caa0:	7100041f 	cmp	w0, #0x1
   8caa4:	54000060 	b.eq	8cab0 <CUSBPrinterDevice::Configure()+0xa0>  // b.none
   8caa8:	f9401680 	ldr	x0, [x20, #40]
   8caac:	b40003e0 	cbz	x0, 8cb28 <CUSBPrinterDevice::Configure()+0x118>
   8cab0:	aa1403e0 	mov	x0, x20
   8cab4:	97ffec07 	bl	87ad0 <CUSBFunction::Configure()>
   8cab8:	72001c15 	ands	w21, w0, #0xff
   8cabc:	540009a0 	b.eq	8cbf0 <CUSBPrinterDevice::Configure()+0x1e0>  // b.none
   8cac0:	9100c3e0 	add	x0, sp, #0x30
   8cac4:	940054db 	bl	a1e30 <CString::CString()>
   8cac8:	b0000143 	adrp	x3, b5000 <font_data+0x1340>
   8cacc:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cad0:	b94dac62 	ldr	w2, [x3, #3500]
   8cad4:	9106a021 	add	x1, x1, #0x1a8
   8cad8:	9100c3e0 	add	x0, sp, #0x30
   8cadc:	11000444 	add	w4, w2, #0x1
   8cae0:	b90dac64 	str	w4, [x3, #3500]
   8cae4:	94005a43 	bl	a33f0 <CString::Format(char const*, ...)>
   8cae8:	940041b6 	bl	9d1c0 <CDeviceNameService::Get()>
   8caec:	aa0003f3 	mov	x19, x0
   8caf0:	9100c3e0 	add	x0, sp, #0x30
   8caf4:	940054eb 	bl	a1ea0 <CString::operator char const*() const>
   8caf8:	aa0003e1 	mov	x1, x0
   8cafc:	aa1403e2 	mov	x2, x20
   8cb00:	aa1303e0 	mov	x0, x19
   8cb04:	52800003 	mov	w3, #0x0                   	// #0
   8cb08:	940040e6 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8cb0c:	9100c3e0 	add	x0, sp, #0x30
   8cb10:	9400548c 	bl	a1d40 <CString::~CString()>
   8cb14:	2a1503e0 	mov	w0, w21
   8cb18:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cb1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cb20:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8cb24:	d65f03c0 	ret
   8cb28:	aa1403e0 	mov	x0, x20
   8cb2c:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cb30:	91084021 	add	x1, x1, #0x210
   8cb34:	97ffece7 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8cb38:	2a1503e0 	mov	w0, w21
   8cb3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cb40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cb44:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8cb48:	d65f03c0 	ret
   8cb4c:	39c00a61 	ldrsb	w1, [x19, #2]
   8cb50:	aa1403e0 	mov	x0, x20
   8cb54:	37f80361 	tbnz	w1, #31, 8cbc0 <CUSBPrinterDevice::Configure()+0x1b0>
   8cb58:	f9401a81 	ldr	x1, [x20, #48]
   8cb5c:	b5fffe61 	cbnz	x1, 8cb28 <CUSBPrinterDevice::Configure()+0x118>
   8cb60:	97ffecac 	bl	87e10 <CUSBFunction::GetDevice() const>
   8cb64:	aa0003f6 	mov	x22, x0
   8cb68:	d2800400 	mov	x0, #0x20                  	// #32
   8cb6c:	940062c5 	bl	a5680 <operator new(unsigned long)>
   8cb70:	aa1603e1 	mov	x1, x22
   8cb74:	aa0003f6 	mov	x22, x0
   8cb78:	aa1303e2 	mov	x2, x19
   8cb7c:	97ffeb05 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8cb80:	f9001a96 	str	x22, [x20, #48]
   8cb84:	17ffffbf 	b	8ca80 <CUSBPrinterDevice::Configure()+0x70>
   8cb88:	94004852 	bl	9ecd0 <CLogger::Get()>
   8cb8c:	f0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8cb90:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cb94:	b9402284 	ldr	w4, [x20, #32]
   8cb98:	91062063 	add	x3, x3, #0x188
   8cb9c:	91084021 	add	x1, x1, #0x210
   8cba0:	52800022 	mov	w2, #0x1                   	// #1
   8cba4:	52800015 	mov	w21, #0x0                   	// #0
   8cba8:	94004786 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cbac:	2a1503e0 	mov	w0, w21
   8cbb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cbb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cbb8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8cbbc:	d65f03c0 	ret
   8cbc0:	f9401681 	ldr	x1, [x20, #40]
   8cbc4:	b5fffb41 	cbnz	x1, 8cb2c <CUSBPrinterDevice::Configure()+0x11c>
   8cbc8:	97ffec92 	bl	87e10 <CUSBFunction::GetDevice() const>
   8cbcc:	aa0003f6 	mov	x22, x0
   8cbd0:	d2800400 	mov	x0, #0x20                  	// #32
   8cbd4:	940062ab 	bl	a5680 <operator new(unsigned long)>
   8cbd8:	aa1603e1 	mov	x1, x22
   8cbdc:	aa0003f6 	mov	x22, x0
   8cbe0:	aa1303e2 	mov	x2, x19
   8cbe4:	97ffeaeb 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8cbe8:	f9001696 	str	x22, [x20, #40]
   8cbec:	17ffffa5 	b	8ca80 <CUSBPrinterDevice::Configure()+0x70>
   8cbf0:	94004838 	bl	9ecd0 <CLogger::Get()>
   8cbf4:	d0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8cbf8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cbfc:	9104a063 	add	x3, x3, #0x128
   8cc00:	91084021 	add	x1, x1, #0x210
   8cc04:	52800022 	mov	w2, #0x1                   	// #1
   8cc08:	9400476e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cc0c:	2a1503e0 	mov	w0, w21
   8cc10:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cc14:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cc18:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8cc1c:	d65f03c0 	ret

000000000008cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   8cc20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8cc24:	910003fd 	mov	x29, sp
   8cc28:	a9001001 	stp	x1, x4, [x0]
   8cc2c:	f9000802 	str	x2, [x0, #16]
   8cc30:	b9001803 	str	w3, [x0, #24]
   8cc34:	f801c01f 	stur	xzr, [x0, #28]
   8cc38:	a902fc1f 	stp	xzr, xzr, [x0, #40]
   8cc3c:	f9001c1f 	str	xzr, [x0, #56]
   8cc40:	3901001f 	strb	wzr, [x0, #64]
   8cc44:	b40000c1 	cbz	x1, 8cc5c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x3c>
   8cc48:	7100007f 	cmp	w3, #0x0
   8cc4c:	fa401840 	ccmp	x2, #0x0, #0x0, ne  // ne = any
   8cc50:	54000120 	b.eq	8cc74 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x54>  // b.none
   8cc54:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8cc58:	d65f03c0 	ret
   8cc5c:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cc60:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cc64:	91086021 	add	x1, x1, #0x218
   8cc68:	9108a000 	add	x0, x0, #0x228
   8cc6c:	52800462 	mov	w2, #0x23                  	// #35
   8cc70:	94003e84 	bl	9c680 <assertion_failed>
   8cc74:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cc78:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cc7c:	91086021 	add	x1, x1, #0x218
   8cc80:	91090000 	add	x0, x0, #0x240
   8cc84:	52800482 	mov	w2, #0x24                  	// #36
   8cc88:	94003e7e 	bl	9c680 <assertion_failed>
   8cc8c:	d503201f 	nop

000000000008cc90 <CUSBRequest::~CUSBRequest()>:
   8cc90:	d65f03c0 	ret
   8cc94:	d503201f 	nop
   8cc98:	d503201f 	nop
   8cc9c:	d503201f 	nop

000000000008cca0 <CUSBRequest::GetEndpoint() const>:
   8cca0:	f9400000 	ldr	x0, [x0]
   8cca4:	b4000040 	cbz	x0, 8ccac <CUSBRequest::GetEndpoint() const+0xc>
   8cca8:	d65f03c0 	ret
   8ccac:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ccb0:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ccb4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ccb8:	91086021 	add	x1, x1, #0x218
   8ccbc:	910003fd 	mov	x29, sp
   8ccc0:	9108a000 	add	x0, x0, #0x228
   8ccc4:	52800622 	mov	w2, #0x31                  	// #49
   8ccc8:	94003e6e 	bl	9c680 <assertion_failed>
   8cccc:	d503201f 	nop

000000000008ccd0 <CUSBRequest::SetStatus(int)>:
   8ccd0:	b9001c01 	str	w1, [x0, #28]
   8ccd4:	d65f03c0 	ret
   8ccd8:	d503201f 	nop
   8ccdc:	d503201f 	nop

000000000008cce0 <CUSBRequest::SetResultLen(unsigned int)>:
   8cce0:	b9002001 	str	w1, [x0, #32]
   8cce4:	d65f03c0 	ret
   8cce8:	d503201f 	nop
   8ccec:	d503201f 	nop

000000000008ccf0 <CUSBRequest::GetStatus() const>:
   8ccf0:	b9401c00 	ldr	w0, [x0, #28]
   8ccf4:	d65f03c0 	ret
   8ccf8:	d503201f 	nop
   8ccfc:	d503201f 	nop

000000000008cd00 <CUSBRequest::GetResultLength() const>:
   8cd00:	b9401c01 	ldr	w1, [x0, #28]
   8cd04:	34000061 	cbz	w1, 8cd10 <CUSBRequest::GetResultLength() const+0x10>
   8cd08:	b9402000 	ldr	w0, [x0, #32]
   8cd0c:	d65f03c0 	ret
   8cd10:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cd14:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cd18:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8cd1c:	91086021 	add	x1, x1, #0x218
   8cd20:	910003fd 	mov	x29, sp
   8cd24:	9109a000 	add	x0, x0, #0x268
   8cd28:	528008c2 	mov	w2, #0x46                  	// #70
   8cd2c:	94003e55 	bl	9c680 <assertion_failed>

000000000008cd30 <CUSBRequest::GetSetupData()>:
   8cd30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cd34:	910003fd 	mov	x29, sp
   8cd38:	f9000bf3 	str	x19, [sp, #16]
   8cd3c:	aa0003f3 	mov	x19, x0
   8cd40:	f9400000 	ldr	x0, [x0]
   8cd44:	97ffeb03 	bl	87950 <CUSBEndpoint::GetType() const>
   8cd48:	350000c0 	cbnz	w0, 8cd60 <CUSBRequest::GetSetupData()+0x30>
   8cd4c:	f9400660 	ldr	x0, [x19, #8]
   8cd50:	b4000140 	cbz	x0, 8cd78 <CUSBRequest::GetSetupData()+0x48>
   8cd54:	f9400bf3 	ldr	x19, [sp, #16]
   8cd58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cd5c:	d65f03c0 	ret
   8cd60:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cd64:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cd68:	91086021 	add	x1, x1, #0x218
   8cd6c:	9109e000 	add	x0, x0, #0x278
   8cd70:	528009a2 	mov	w2, #0x4d                  	// #77
   8cd74:	94003e43 	bl	9c680 <assertion_failed>
   8cd78:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cd7c:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cd80:	91086021 	add	x1, x1, #0x218
   8cd84:	910aa000 	add	x0, x0, #0x2a8
   8cd88:	528009c2 	mov	w2, #0x4e                  	// #78
   8cd8c:	94003e3d 	bl	9c680 <assertion_failed>

000000000008cd90 <CUSBRequest::GetBuffer()>:
   8cd90:	aa0003e1 	mov	x1, x0
   8cd94:	f9400800 	ldr	x0, [x0, #16]
   8cd98:	b4000040 	cbz	x0, 8cda0 <CUSBRequest::GetBuffer()+0x10>
   8cd9c:	d65f03c0 	ret
   8cda0:	b9401821 	ldr	w1, [x1, #24]
   8cda4:	34ffffc1 	cbz	w1, 8cd9c <CUSBRequest::GetBuffer()+0xc>
   8cda8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cdac:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cdb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8cdb4:	91086021 	add	x1, x1, #0x218
   8cdb8:	910003fd 	mov	x29, sp
   8cdbc:	91090000 	add	x0, x0, #0x240
   8cdc0:	52800aa2 	mov	w2, #0x55                  	// #85
   8cdc4:	94003e2f 	bl	9c680 <assertion_failed>
   8cdc8:	d503201f 	nop
   8cdcc:	d503201f 	nop

000000000008cdd0 <CUSBRequest::GetBufLen() const>:
   8cdd0:	b9401800 	ldr	w0, [x0, #24]
   8cdd4:	d65f03c0 	ret
   8cdd8:	d503201f 	nop
   8cddc:	d503201f 	nop

000000000008cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   8cde0:	a9028801 	stp	x1, x2, [x0, #40]
   8cde4:	f9001c03 	str	x3, [x0, #56]
   8cde8:	b4000041 	cbz	x1, 8cdf0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x10>
   8cdec:	d65f03c0 	ret
   8cdf0:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cdf4:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cdf8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8cdfc:	91086021 	add	x1, x1, #0x218
   8ce00:	910003fd 	mov	x29, sp
   8ce04:	910b0000 	add	x0, x0, #0x2c0
   8ce08:	52800cc2 	mov	w2, #0x66                  	// #102
   8ce0c:	94003e1d 	bl	9c680 <assertion_failed>

000000000008ce10 <CUSBRequest::CallCompletionRoutine()>:
   8ce10:	f9401403 	ldr	x3, [x0, #40]
   8ce14:	b4000083 	cbz	x3, 8ce24 <CUSBRequest::CallCompletionRoutine()+0x14>
   8ce18:	aa0303f0 	mov	x16, x3
   8ce1c:	a9430801 	ldp	x1, x2, [x0, #48]
   8ce20:	d61f0200 	br	x16
   8ce24:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ce28:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ce2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ce30:	91086021 	add	x1, x1, #0x218
   8ce34:	910003fd 	mov	x29, sp
   8ce38:	910b0000 	add	x0, x0, #0x2c0
   8ce3c:	52800d62 	mov	w2, #0x6b                  	// #107
   8ce40:	94003e10 	bl	9c680 <assertion_failed>
   8ce44:	d503201f 	nop
   8ce48:	d503201f 	nop
   8ce4c:	d503201f 	nop

000000000008ce50 <CUSBRequest::SetCompleteOnNAK()>:
   8ce50:	52800021 	mov	w1, #0x1                   	// #1
   8ce54:	39010001 	strb	w1, [x0, #64]
   8ce58:	d65f03c0 	ret
   8ce5c:	d503201f 	nop

000000000008ce60 <CUSBRequest::IsCompleteOnNAK() const>:
   8ce60:	39410000 	ldrb	w0, [x0, #64]
   8ce64:	d65f03c0 	ret
   8ce68:	d503201f 	nop
   8ce6c:	d503201f 	nop

000000000008ce70 <CUSBRequest::operator new(unsigned long)>:
   8ce70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ce74:	f101201f 	cmp	x0, #0x48
   8ce78:	910003fd 	mov	x29, sp
   8ce7c:	540000c1 	b.ne	8ce94 <CUSBRequest::operator new(unsigned long)+0x24>  // b.any
   8ce80:	d0000140 	adrp	x0, b6000 <s_OldInfo+0x68>
   8ce84:	f9472000 	ldr	x0, [x0, #3648]
   8ce88:	b4000120 	cbz	x0, 8ceac <CUSBRequest::operator new(unsigned long)+0x3c>
   8ce8c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ce90:	14003ee4 	b	9ca20 <CClassAllocator::Allocate()>
   8ce94:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ce98:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ce9c:	91086021 	add	x1, x1, #0x218
   8cea0:	910b8000 	add	x0, x0, #0x2e0
   8cea4:	52800f42 	mov	w2, #0x7a                  	// #122
   8cea8:	94003df6 	bl	9c680 <assertion_failed>
   8ceac:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ceb0:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ceb4:	91086021 	add	x1, x1, #0x218
   8ceb8:	910c0000 	add	x0, x0, #0x300
   8cebc:	52800f42 	mov	w2, #0x7a                  	// #122
   8cec0:	94003df0 	bl	9c680 <assertion_failed>
   8cec4:	d503201f 	nop
   8cec8:	d503201f 	nop
   8cecc:	d503201f 	nop

000000000008ced0 <CUSBRequest::operator delete(void*, unsigned long)>:
   8ced0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ced4:	f101203f 	cmp	x1, #0x48
   8ced8:	910003fd 	mov	x29, sp
   8cedc:	540000e1 	b.ne	8cef8 <CUSBRequest::operator delete(void*, unsigned long)+0x28>  // b.any
   8cee0:	aa0003e1 	mov	x1, x0
   8cee4:	d0000140 	adrp	x0, b6000 <s_OldInfo+0x68>
   8cee8:	f9472000 	ldr	x0, [x0, #3648]
   8ceec:	b4000120 	cbz	x0, 8cf10 <CUSBRequest::operator delete(void*, unsigned long)+0x40>
   8cef0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8cef4:	14003eff 	b	9caf0 <CClassAllocator::Free(void*)>
   8cef8:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cefc:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cf00:	91086021 	add	x1, x1, #0x218
   8cf04:	910b8000 	add	x0, x0, #0x2e0
   8cf08:	52800f42 	mov	w2, #0x7a                  	// #122
   8cf0c:	94003ddd 	bl	9c680 <assertion_failed>
   8cf10:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cf14:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cf18:	91086021 	add	x1, x1, #0x218
   8cf1c:	910c0000 	add	x0, x0, #0x300
   8cf20:	52800f42 	mov	w2, #0x7a                  	// #122
   8cf24:	94003dd7 	bl	9c680 <assertion_failed>
   8cf28:	d503201f 	nop
   8cf2c:	d503201f 	nop

000000000008cf30 <CUSBRequest::InitAllocator(unsigned int)>:
   8cf30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cf34:	910003fd 	mov	x29, sp
   8cf38:	a90153f3 	stp	x19, x20, [sp, #16]
   8cf3c:	d0000154 	adrp	x20, b6000 <s_OldInfo+0x68>
   8cf40:	f9472281 	ldr	x1, [x20, #3648]
   8cf44:	b50001c1 	cbnz	x1, 8cf7c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   8cf48:	2a0003f3 	mov	w19, w0
   8cf4c:	d2800600 	mov	x0, #0x30                  	// #48
   8cf50:	940061cc 	bl	a5680 <operator new(unsigned long)>
   8cf54:	2a1303e2 	mov	w2, w19
   8cf58:	d2800901 	mov	x1, #0x48                  	// #72
   8cf5c:	aa0003f3 	mov	x19, x0
   8cf60:	f0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8cf64:	910cc063 	add	x3, x3, #0x330
   8cf68:	94003e9e 	bl	9c9e0 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8cf6c:	f9072293 	str	x19, [x20, #3648]
   8cf70:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cf74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cf78:	d65f03c0 	ret
   8cf7c:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8cf80:	f0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8cf84:	91086021 	add	x1, x1, #0x218
   8cf88:	910c6000 	add	x0, x0, #0x318
   8cf8c:	52800f42 	mov	w2, #0x7a                  	// #122
   8cf90:	94003dbc 	bl	9c680 <assertion_failed>
   8cf94:	d503201f 	nop
   8cf98:	d503201f 	nop
   8cf9c:	d503201f 	nop

000000000008cfa0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   8cfa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8cfa4:	910003fd 	mov	x29, sp
   8cfa8:	f90013f5 	str	x21, [sp, #32]
   8cfac:	d0000155 	adrp	x21, b6000 <s_OldInfo+0x68>
   8cfb0:	f94722a2 	ldr	x2, [x21, #3648]
   8cfb4:	a90153f3 	stp	x19, x20, [sp, #16]
   8cfb8:	b5000222 	cbnz	x2, 8cffc <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x5c>
   8cfbc:	2a0003f3 	mov	w19, w0
   8cfc0:	d2800600 	mov	x0, #0x30                  	// #48
   8cfc4:	2a0103f4 	mov	w20, w1
   8cfc8:	940061ae 	bl	a5680 <operator new(unsigned long)>
   8cfcc:	2a1403e3 	mov	w3, w20
   8cfd0:	2a1303e2 	mov	w2, w19
   8cfd4:	aa0003f4 	mov	x20, x0
   8cfd8:	d2800901 	mov	x1, #0x48                  	// #72
   8cfdc:	f0000104 	adrp	x4, af000 <FromUmsd+0xb0>
   8cfe0:	910cc084 	add	x4, x4, #0x330
   8cfe4:	94003e87 	bl	9ca00 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8cfe8:	f90722b4 	str	x20, [x21, #3648]
   8cfec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cff0:	f94013f5 	ldr	x21, [sp, #32]
   8cff4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8cff8:	d65f03c0 	ret
   8cffc:	f0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d000:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d004:	91086021 	add	x1, x1, #0x218
   8d008:	910c6000 	add	x0, x0, #0x318
   8d00c:	52800f42 	mov	w2, #0x7a                  	// #122
   8d010:	94003d9c 	bl	9c680 <assertion_failed>
	...

000000000008d020 <CUSBStandardHub::GetHubInfo() const>:
   8d020:	f9406000 	ldr	x0, [x0, #192]
   8d024:	d65f03c0 	ret
   8d028:	d503201f 	nop
   8d02c:	d503201f 	nop

000000000008d030 <CUSBStandardHub::~CUSBStandardHub()>:
   8d030:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d034:	910003fd 	mov	x29, sp
   8d038:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d03c:	91158021 	add	x1, x1, #0x560
   8d040:	f90013f5 	str	x21, [sp, #32]
   8d044:	aa0003f5 	mov	x21, x0
   8d048:	a90153f3 	stp	x19, x20, [sp, #16]
   8d04c:	f9406000 	ldr	x0, [x0, #192]
   8d050:	f90002a1 	str	x1, [x21]
   8d054:	b4000060 	cbz	x0, 8d060 <CUSBStandardHub::~CUSBStandardHub()+0x30>
   8d058:	d2800101 	mov	x1, #0x8                   	// #8
   8d05c:	940061ad 	bl	a5710 <operator delete(void*, unsigned long)>
   8d060:	b94032a0 	ldr	w0, [x21, #48]
   8d064:	f90062bf 	str	xzr, [x21, #192]
   8d068:	34000280 	cbz	w0, 8d0b8 <CUSBStandardHub::~CUSBStandardHub()+0x88>
   8d06c:	9101e2b3 	add	x19, x21, #0x78
   8d070:	52800014 	mov	w20, #0x0                   	// #0
   8d074:	d503201f 	nop
   8d078:	f9400260 	ldr	x0, [x19]
   8d07c:	11000694 	add	w20, w20, #0x1
   8d080:	d2800081 	mov	x1, #0x4                   	// #4
   8d084:	b4000040 	cbz	x0, 8d08c <CUSBStandardHub::~CUSBStandardHub()+0x5c>
   8d088:	940061a2 	bl	a5710 <operator delete(void*, unsigned long)>
   8d08c:	f900027f 	str	xzr, [x19]
   8d090:	f85c0260 	ldur	x0, [x19, #-64]
   8d094:	b4000080 	cbz	x0, 8d0a4 <CUSBStandardHub::~CUSBStandardHub()+0x74>
   8d098:	f9400001 	ldr	x1, [x0]
   8d09c:	f9400421 	ldr	x1, [x1, #8]
   8d0a0:	d63f0020 	blr	x1
   8d0a4:	b94032a0 	ldr	w0, [x21, #48]
   8d0a8:	91002273 	add	x19, x19, #0x8
   8d0ac:	f81b827f 	stur	xzr, [x19, #-72]
   8d0b0:	6b14001f 	cmp	w0, w20
   8d0b4:	54fffe28 	b.hi	8d078 <CUSBStandardHub::~CUSBStandardHub()+0x48>  // b.pmore
   8d0b8:	b90032bf 	str	wzr, [x21, #48]
   8d0bc:	f94016b3 	ldr	x19, [x21, #40]
   8d0c0:	b40000d3 	cbz	x19, 8d0d8 <CUSBStandardHub::~CUSBStandardHub()+0xa8>
   8d0c4:	aa1303e0 	mov	x0, x19
   8d0c8:	97ffea02 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8d0cc:	aa1303e0 	mov	x0, x19
   8d0d0:	d2800401 	mov	x1, #0x20                  	// #32
   8d0d4:	9400618f 	bl	a5710 <operator delete(void*, unsigned long)>
   8d0d8:	f90016bf 	str	xzr, [x21, #40]
   8d0dc:	f94012a0 	ldr	x0, [x21, #32]
   8d0e0:	b4000060 	cbz	x0, 8d0ec <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   8d0e4:	d2800121 	mov	x1, #0x9                   	// #9
   8d0e8:	9400618a 	bl	a5710 <operator delete(void*, unsigned long)>
   8d0ec:	aa1503e0 	mov	x0, x21
   8d0f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d0f4:	f90012bf 	str	xzr, [x21, #32]
   8d0f8:	f94013f5 	ldr	x21, [sp, #32]
   8d0fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d100:	17ffea48 	b	87a20 <CUSBFunction::~CUSBFunction()>
   8d104:	d503201f 	nop
   8d108:	d503201f 	nop
   8d10c:	d503201f 	nop

000000000008d110 <CUSBStandardHub::~CUSBStandardHub()>:
   8d110:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d114:	910003fd 	mov	x29, sp
   8d118:	f9000bf3 	str	x19, [sp, #16]
   8d11c:	aa0003f3 	mov	x19, x0
   8d120:	97ffffc4 	bl	8d030 <CUSBStandardHub::~CUSBStandardHub()>
   8d124:	aa1303e0 	mov	x0, x19
   8d128:	d2801901 	mov	x1, #0xc8                  	// #200
   8d12c:	f9400bf3 	ldr	x19, [sp, #16]
   8d130:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d134:	14006177 	b	a5710 <operator delete(void*, unsigned long)>
   8d138:	d503201f 	nop
   8d13c:	d503201f 	nop

000000000008d140 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   8d140:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d144:	910003fd 	mov	x29, sp
   8d148:	f9000bf3 	str	x19, [sp, #16]
   8d14c:	aa0003f3 	mov	x19, x0
   8d150:	97ffeacc 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8d154:	d0000104 	adrp	x4, af000 <FromUmsd+0xb0>
   8d158:	91158084 	add	x4, x4, #0x560
   8d15c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8d160:	9100e263 	add	x3, x19, #0x38
   8d164:	9101e262 	add	x2, x19, #0x78
   8d168:	9102e260 	add	x0, x19, #0xb8
   8d16c:	d2800001 	mov	x1, #0x0                   	// #0
   8d170:	f9000264 	str	x4, [x19]
   8d174:	b900327f 	str	wzr, [x19, #48]
   8d178:	3900d27f 	strb	wzr, [x19, #52]
   8d17c:	f900627f 	str	xzr, [x19, #192]
   8d180:	f821787f 	str	xzr, [x3, x1, lsl #3]
   8d184:	f821785f 	str	xzr, [x2, x1, lsl #3]
   8d188:	3821681f 	strb	wzr, [x0, x1]
   8d18c:	91000421 	add	x1, x1, #0x1
   8d190:	f100203f 	cmp	x1, #0x8
   8d194:	54ffff61 	b.ne	8d180 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x40>  // b.any
   8d198:	f9400bf3 	ldr	x19, [sp, #16]
   8d19c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d1a0:	d65f03c0 	ret
   8d1a4:	d503201f 	nop
   8d1a8:	d503201f 	nop
   8d1ac:	d503201f 	nop

000000000008d1b0 <CUSBStandardHub::DisablePort(unsigned int)>:
   8d1b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d1b4:	910003fd 	mov	x29, sp
   8d1b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8d1bc:	2a0103f3 	mov	w19, w1
   8d1c0:	b9403001 	ldr	w1, [x0, #48]
   8d1c4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8d1c8:	6b13003f 	cmp	w1, w19
   8d1cc:	540004a9 	b.ls	8d260 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>  // b.plast
   8d1d0:	aa0003f4 	mov	x20, x0
   8d1d4:	11000676 	add	w22, w19, #0x1
   8d1d8:	97ffeb26 	bl	87e70 <CUSBFunction::GetHost() const>
   8d1dc:	aa0003f5 	mov	x21, x0
   8d1e0:	aa1403e0 	mov	x0, x20
   8d1e4:	97ffeb17 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8d1e8:	52800024 	mov	w4, #0x1                   	// #1
   8d1ec:	aa0003e1 	mov	x1, x0
   8d1f0:	2a1603e5 	mov	w5, w22
   8d1f4:	aa1503e0 	mov	x0, x21
   8d1f8:	2a0403e3 	mov	w3, w4
   8d1fc:	52800007 	mov	w7, #0x0                   	// #0
   8d200:	d2800006 	mov	x6, #0x0                   	// #0
   8d204:	52800462 	mov	w2, #0x23                  	// #35
   8d208:	97fff766 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d20c:	37f80100 	tbnz	w0, #31, 8d22c <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   8d210:	8b334293 	add	x19, x20, w19, uxtw
   8d214:	52800020 	mov	w0, #0x1                   	// #1
   8d218:	3902e27f 	strb	wzr, [x19, #184]
   8d21c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d220:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d224:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d228:	d65f03c0 	ret
   8d22c:	940046a9 	bl	9ecd0 <CLogger::Get()>
   8d230:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d234:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d238:	2a1603e4 	mov	w4, w22
   8d23c:	910dc063 	add	x3, x3, #0x370
   8d240:	9116c021 	add	x1, x1, #0x5b0
   8d244:	52800022 	mov	w2, #0x1                   	// #1
   8d248:	940045de 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d24c:	52800000 	mov	w0, #0x0                   	// #0
   8d250:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d254:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d258:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d25c:	d65f03c0 	ret
   8d260:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d264:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d268:	910d0021 	add	x1, x1, #0x340
   8d26c:	910d6000 	add	x0, x0, #0x358
   8d270:	528018e2 	mov	w2, #0xc7                  	// #199
   8d274:	94003d03 	bl	9c680 <assertion_failed>
   8d278:	d503201f 	nop
   8d27c:	d503201f 	nop

000000000008d280 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   8d280:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d284:	910003fd 	mov	x29, sp
   8d288:	a90153f3 	stp	x19, x20, [sp, #16]
   8d28c:	2a0103f3 	mov	w19, w1
   8d290:	f90013f5 	str	x21, [sp, #32]
   8d294:	aa0003f5 	mov	x21, x0
   8d298:	97ffffc6 	bl	8d1b0 <CUSBStandardHub::DisablePort(unsigned int)>
   8d29c:	72001c1f 	tst	w0, #0xff
   8d2a0:	2a0003f4 	mov	w20, w0
   8d2a4:	54000100 	b.eq	8d2c4 <CUSBStandardHub::RemoveDevice(unsigned int)+0x44>  // b.none
   8d2a8:	8b334eb3 	add	x19, x21, w19, uxtw #3
   8d2ac:	f9401e60 	ldr	x0, [x19, #56]
   8d2b0:	b4000080 	cbz	x0, 8d2c0 <CUSBStandardHub::RemoveDevice(unsigned int)+0x40>
   8d2b4:	f9400001 	ldr	x1, [x0]
   8d2b8:	f9400421 	ldr	x1, [x1, #8]
   8d2bc:	d63f0020 	blr	x1
   8d2c0:	f9001e7f 	str	xzr, [x19, #56]
   8d2c4:	2a1403e0 	mov	w0, w20
   8d2c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d2cc:	f94013f5 	ldr	x21, [sp, #32]
   8d2d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d2d4:	d65f03c0 	ret
   8d2d8:	d503201f 	nop
   8d2dc:	d503201f 	nop

000000000008d2e0 <CUSBStandardHub::Initialize()>:
   8d2e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d2e4:	910003fd 	mov	x29, sp
   8d2e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8d2ec:	aa0003f3 	mov	x19, x0
   8d2f0:	97ffe9c4 	bl	87a00 <CUSBFunction::Initialize()>
   8d2f4:	72001c00 	ands	w0, w0, #0xff
   8d2f8:	54000840 	b.eq	8d400 <CUSBStandardHub::Initialize()+0x120>  // b.none
   8d2fc:	f9401260 	ldr	x0, [x19, #32]
   8d300:	b50009c0 	cbnz	x0, 8d438 <CUSBStandardHub::Initialize()+0x158>
   8d304:	d2800120 	mov	x0, #0x9                   	// #9
   8d308:	940060de 	bl	a5680 <operator new(unsigned long)>
   8d30c:	aa0003e1 	mov	x1, x0
   8d310:	aa1303e0 	mov	x0, x19
   8d314:	f9001261 	str	x1, [x19, #32]
   8d318:	97ffead6 	bl	87e70 <CUSBFunction::GetHost() const>
   8d31c:	aa0003f4 	mov	x20, x0
   8d320:	aa1303e0 	mov	x0, x19
   8d324:	97ffeac7 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8d328:	aa0003e1 	mov	x1, x0
   8d32c:	52800007 	mov	w7, #0x0                   	// #0
   8d330:	f9401264 	ldr	x4, [x19, #32]
   8d334:	aa1403e0 	mov	x0, x20
   8d338:	12800be6 	mov	w6, #0xffffffa0            	// #-96
   8d33c:	52800125 	mov	w5, #0x9                   	// #9
   8d340:	52800003 	mov	w3, #0x0                   	// #0
   8d344:	52800522 	mov	w2, #0x29                  	// #41
   8d348:	97fff74e 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8d34c:	7100241f 	cmp	w0, #0x9
   8d350:	540003e1 	b.ne	8d3cc <CUSBStandardHub::Initialize()+0xec>  // b.any
   8d354:	f9401260 	ldr	x0, [x19, #32]
   8d358:	39400800 	ldrb	w0, [x0, #2]
   8d35c:	7100201f 	cmp	w0, #0x8
   8d360:	b9003260 	str	w0, [x19, #48]
   8d364:	54000548 	b.hi	8d40c <CUSBStandardHub::Initialize()+0x12c>  // b.pmore
   8d368:	d2800100 	mov	x0, #0x8                   	// #8
   8d36c:	940060c5 	bl	a5680 <operator new(unsigned long)>
   8d370:	b9403262 	ldr	w2, [x19, #48]
   8d374:	aa0003e1 	mov	x1, x0
   8d378:	aa1303e0 	mov	x0, x19
   8d37c:	f9006261 	str	x1, [x19, #192]
   8d380:	b9000022 	str	w2, [x1]
   8d384:	97ffeb43 	bl	88090 <CUSBFunction::GetInterfaceProtocol() const>
   8d388:	f9401264 	ldr	x4, [x19, #32]
   8d38c:	12001c01 	and	w1, w0, #0xff
   8d390:	aa1303e0 	mov	x0, x19
   8d394:	7100083f 	cmp	w1, #0x2
   8d398:	1a9f17e3 	cset	w3, eq  // eq = none
   8d39c:	f9406262 	ldr	x2, [x19, #192]
   8d3a0:	78403081 	ldurh	w1, [x4, #3]
   8d3a4:	39001043 	strb	w3, [x2, #4]
   8d3a8:	d3451821 	ubfx	x1, x1, #5, #2
   8d3ac:	39001441 	strb	w1, [x2, #5]
   8d3b0:	97ffea98 	bl	87e10 <CUSBFunction::GetDevice() const>
   8d3b4:	f9400001 	ldr	x1, [x0]
   8d3b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d3bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d3c0:	f9401021 	ldr	x1, [x1, #32]
   8d3c4:	aa0103f0 	mov	x16, x1
   8d3c8:	d61f0200 	br	x16
   8d3cc:	94004641 	bl	9ecd0 <CLogger::Get()>
   8d3d0:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d3d4:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d3d8:	910e6063 	add	x3, x3, #0x398
   8d3dc:	9116c021 	add	x1, x1, #0x5b0
   8d3e0:	52800022 	mov	w2, #0x1                   	// #1
   8d3e4:	94004577 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d3e8:	f9401260 	ldr	x0, [x19, #32]
   8d3ec:	b4000060 	cbz	x0, 8d3f8 <CUSBStandardHub::Initialize()+0x118>
   8d3f0:	d2800121 	mov	x1, #0x9                   	// #9
   8d3f4:	940060c7 	bl	a5710 <operator delete(void*, unsigned long)>
   8d3f8:	52800000 	mov	w0, #0x0                   	// #0
   8d3fc:	f900127f 	str	xzr, [x19, #32]
   8d400:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d404:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d408:	d65f03c0 	ret
   8d40c:	94004631 	bl	9ecd0 <CLogger::Get()>
   8d410:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d414:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d418:	b9403264 	ldr	w4, [x19, #48]
   8d41c:	910ee063 	add	x3, x3, #0x3b8
   8d420:	9116c021 	add	x1, x1, #0x5b0
   8d424:	52800022 	mov	w2, #0x1                   	// #1
   8d428:	94004566 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d42c:	f9401260 	ldr	x0, [x19, #32]
   8d430:	b5fffe00 	cbnz	x0, 8d3f0 <CUSBStandardHub::Initialize()+0x110>
   8d434:	17fffff1 	b	8d3f8 <CUSBStandardHub::Initialize()+0x118>
   8d438:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d43c:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d440:	910d0021 	add	x1, x1, #0x340
   8d444:	910e2000 	add	x0, x0, #0x388
   8d448:	52800aa2 	mov	w2, #0x55                  	// #85
   8d44c:	94003c8d 	bl	9c680 <assertion_failed>

000000000008d450 <CUSBStandardHub::EnumeratePorts()>:
   8d450:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8d454:	910003fd 	mov	x29, sp
   8d458:	a9025bf5 	stp	x21, x22, [sp, #32]
   8d45c:	aa0003f6 	mov	x22, x0
   8d460:	97ffea84 	bl	87e70 <CUSBFunction::GetHost() const>
   8d464:	b40025a0 	cbz	x0, 8d918 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   8d468:	a90363f7 	stp	x23, x24, [sp, #48]
   8d46c:	aa0003f7 	mov	x23, x0
   8d470:	aa1603e0 	mov	x0, x22
   8d474:	97ffea73 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8d478:	aa0003f8 	mov	x24, x0
   8d47c:	b4002620 	cbz	x0, 8d940 <CUSBStandardHub::EnumeratePorts()+0x4f0>
   8d480:	b94032c0 	ldr	w0, [x22, #48]
   8d484:	a90153f3 	stp	x19, x20, [sp, #16]
   8d488:	340026e0 	cbz	w0, 8d964 <CUSBStandardHub::EnumeratePorts()+0x514>
   8d48c:	3940d2d4 	ldrb	w20, [x22, #52]
   8d490:	34001b34 	cbz	w20, 8d7f4 <CUSBStandardHub::EnumeratePorts()+0x3a4>
   8d494:	a90573fb 	stp	x27, x28, [sp, #80]
   8d498:	d000011c 	adrp	x28, af000 <FromUmsd+0xb0>
   8d49c:	9111e380 	add	x0, x28, #0x478
   8d4a0:	9100e2db 	add	x27, x22, #0x38
   8d4a4:	d2800015 	mov	x21, #0x0                   	// #0
   8d4a8:	aa1b03f3 	mov	x19, x27
   8d4ac:	a9046bf9 	stp	x25, x26, [sp, #64]
   8d4b0:	d000011a 	adrp	x26, af000 <FromUmsd+0xb0>
   8d4b4:	9116c35a 	add	x26, x26, #0x5b0
   8d4b8:	f90037e0 	str	x0, [sp, #104]
   8d4bc:	1400001a 	b	8d524 <CUSBStandardHub::EnumeratePorts()+0xd4>
   8d4c0:	f9402266 	ldr	x6, [x19, #64]
   8d4c4:	b4001886 	cbz	x6, 8d7d4 <CUSBStandardHub::EnumeratePorts()+0x384>
   8d4c8:	110006b4 	add	w20, w21, #0x1
   8d4cc:	52800087 	mov	w7, #0x4                   	// #4
   8d4d0:	12003e94 	and	w20, w20, #0xffff
   8d4d4:	52800004 	mov	w4, #0x0                   	// #0
   8d4d8:	2a1403e5 	mov	w5, w20
   8d4dc:	52800003 	mov	w3, #0x0                   	// #0
   8d4e0:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   8d4e4:	aa1803e1 	mov	x1, x24
   8d4e8:	aa1703e0 	mov	x0, x23
   8d4ec:	97fff6ad 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d4f0:	7100101f 	cmp	w0, #0x4
   8d4f4:	2a0003fc 	mov	w28, w0
   8d4f8:	54000f21 	b.ne	8d6dc <CUSBStandardHub::EnumeratePorts()+0x28c>  // b.any
   8d4fc:	f9402260 	ldr	x0, [x19, #64]
   8d500:	79400000 	ldrh	w0, [x0]
   8d504:	36401c60 	tbz	w0, #8, 8d890 <CUSBStandardHub::EnumeratePorts()+0x440>
   8d508:	37000fc0 	tbnz	w0, #0, 8d700 <CUSBStandardHub::EnumeratePorts()+0x2b0>
   8d50c:	11000734 	add	w20, w25, #0x1
   8d510:	b94032c1 	ldr	w1, [x22, #48]
   8d514:	910006b5 	add	x21, x21, #0x1
   8d518:	91002273 	add	x19, x19, #0x8
   8d51c:	6b01029f 	cmp	w20, w1
   8d520:	54000162 	b.cs	8d54c <CUSBStandardHub::EnumeratePorts()+0xfc>  // b.hs, b.nlast
   8d524:	f9400260 	ldr	x0, [x19]
   8d528:	2a1503f9 	mov	w25, w21
   8d52c:	b4fffca0 	cbz	x0, 8d4c0 <CUSBStandardHub::EnumeratePorts()+0x70>
   8d530:	97ffe374 	bl	86300 <CUSBDevice::ReScanDevices()>
   8d534:	b94032c1 	ldr	w1, [x22, #48]
   8d538:	110006b4 	add	w20, w21, #0x1
   8d53c:	91002273 	add	x19, x19, #0x8
   8d540:	910006b5 	add	x21, x21, #0x1
   8d544:	6b01029f 	cmp	w20, w1
   8d548:	54fffee3 	b.cc	8d524 <CUSBStandardHub::EnumeratePorts()+0xd4>  // b.lo, b.ul, b.last
   8d54c:	340005e1 	cbz	w1, 8d608 <CUSBStandardHub::EnumeratePorts()+0x1b8>
   8d550:	90000119 	adrp	x25, ad000 <From+0x4c0>
   8d554:	91158339 	add	x25, x25, #0x560
   8d558:	d0000115 	adrp	x21, af000 <FromUmsd+0xb0>
   8d55c:	9116c2b5 	add	x21, x21, #0x5b0
   8d560:	d2800013 	mov	x19, #0x0                   	// #0
   8d564:	9102e2d4 	add	x20, x22, #0xb8
   8d568:	1400000b 	b	8d594 <CUSBStandardHub::EnumeratePorts()+0x144>
   8d56c:	940045d9 	bl	9ecd0 <CLogger::Get()>
   8d570:	aa1503e1 	mov	x1, x21
   8d574:	2a1a03e4 	mov	w4, w26
   8d578:	aa1903e3 	mov	x3, x25
   8d57c:	52800082 	mov	w2, #0x4                   	// #4
   8d580:	94004510 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d584:	b94032c1 	ldr	w1, [x22, #48]
   8d588:	91000673 	add	x19, x19, #0x1
   8d58c:	6b13003f 	cmp	w1, w19
   8d590:	540003c9 	b.ls	8d608 <CUSBStandardHub::EnumeratePorts()+0x1b8>  // b.plast
   8d594:	f8737b60 	ldr	x0, [x27, x19, lsl #3]
   8d598:	1100067a 	add	w26, w19, #0x1
   8d59c:	b4ffff60 	cbz	x0, 8d588 <CUSBStandardHub::EnumeratePorts()+0x138>
   8d5a0:	38736a82 	ldrb	w2, [x20, x19]
   8d5a4:	35ffff22 	cbnz	w2, 8d588 <CUSBStandardHub::EnumeratePorts()+0x138>
   8d5a8:	f9400001 	ldr	x1, [x0]
   8d5ac:	52800022 	mov	w2, #0x1                   	// #1
   8d5b0:	38336a82 	strb	w2, [x20, x19]
   8d5b4:	f9400c21 	ldr	x1, [x1, #24]
   8d5b8:	d63f0020 	blr	x1
   8d5bc:	72001c1f 	tst	w0, #0xff
   8d5c0:	54fffd61 	b.ne	8d56c <CUSBStandardHub::EnumeratePorts()+0x11c>  // b.any
   8d5c4:	940045c3 	bl	9ecd0 <CLogger::Get()>
   8d5c8:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d5cc:	2a1a03e4 	mov	w4, w26
   8d5d0:	91134063 	add	x3, x3, #0x4d0
   8d5d4:	52800042 	mov	w2, #0x2                   	// #2
   8d5d8:	aa1503e1 	mov	x1, x21
   8d5dc:	940044f9 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d5e0:	f8737b60 	ldr	x0, [x27, x19, lsl #3]
   8d5e4:	b4000080 	cbz	x0, 8d5f4 <CUSBStandardHub::EnumeratePorts()+0x1a4>
   8d5e8:	f9400001 	ldr	x1, [x0]
   8d5ec:	f9400421 	ldr	x1, [x1, #8]
   8d5f0:	d63f0020 	blr	x1
   8d5f4:	b94032c1 	ldr	w1, [x22, #48]
   8d5f8:	f8337b7f 	str	xzr, [x27, x19, lsl #3]
   8d5fc:	91000673 	add	x19, x19, #0x1
   8d600:	6b13003f 	cmp	w1, w19
   8d604:	54fffc88 	b.hi	8d594 <CUSBStandardHub::EnumeratePorts()+0x144>  // b.pmore
   8d608:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8d60c:	a94573fb 	ldp	x27, x28, [sp, #80]
   8d610:	d2800080 	mov	x0, #0x4                   	// #4
   8d614:	9400601b 	bl	a5680 <operator new(unsigned long)>
   8d618:	aa0003e6 	mov	x6, x0
   8d61c:	52800087 	mov	w7, #0x4                   	// #4
   8d620:	aa0003f5 	mov	x21, x0
   8d624:	52800005 	mov	w5, #0x0                   	// #0
   8d628:	52800004 	mov	w4, #0x0                   	// #0
   8d62c:	52800003 	mov	w3, #0x0                   	// #0
   8d630:	12800be2 	mov	w2, #0xffffffa0            	// #-96
   8d634:	aa1803e1 	mov	x1, x24
   8d638:	aa1703e0 	mov	x0, x23
   8d63c:	97fff659 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d640:	7100101f 	cmp	w0, #0x4
   8d644:	54001ac1 	b.ne	8d99c <CUSBStandardHub::EnumeratePorts()+0x54c>  // b.any
   8d648:	794002a0 	ldrh	w0, [x21]
   8d64c:	36081b20 	tbz	w0, #1, 8d9b0 <CUSBStandardHub::EnumeratePorts()+0x560>
   8d650:	b94032c0 	ldr	w0, [x22, #48]
   8d654:	52800001 	mov	w1, #0x0                   	// #0
   8d658:	34000200 	cbz	w0, 8d698 <CUSBStandardHub::EnumeratePorts()+0x248>
   8d65c:	d503201f 	nop
   8d660:	11000433 	add	w19, w1, #0x1
   8d664:	52800007 	mov	w7, #0x0                   	// #0
   8d668:	aa1803e1 	mov	x1, x24
   8d66c:	2a1303e5 	mov	w5, w19
   8d670:	d2800006 	mov	x6, #0x0                   	// #0
   8d674:	52800104 	mov	w4, #0x8                   	// #8
   8d678:	52800023 	mov	w3, #0x1                   	// #1
   8d67c:	52800462 	mov	w2, #0x23                  	// #35
   8d680:	aa1703e0 	mov	x0, x23
   8d684:	97fff647 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d688:	b94032c0 	ldr	w0, [x22, #48]
   8d68c:	2a1303e1 	mov	w1, w19
   8d690:	6b13001f 	cmp	w0, w19
   8d694:	54fffe68 	b.hi	8d660 <CUSBStandardHub::EnumeratePorts()+0x210>  // b.pmore
   8d698:	9400458e 	bl	9ecd0 <CLogger::Get()>
   8d69c:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d6a0:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d6a4:	91144063 	add	x3, x3, #0x510
   8d6a8:	52800022 	mov	w2, #0x1                   	// #1
   8d6ac:	9116c021 	add	x1, x1, #0x5b0
   8d6b0:	940044c4 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d6b4:	aa1503e0 	mov	x0, x21
   8d6b8:	d2800081 	mov	x1, #0x4                   	// #4
   8d6bc:	94006015 	bl	a5710 <operator delete(void*, unsigned long)>
   8d6c0:	52800014 	mov	w20, #0x0                   	// #0
   8d6c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d6c8:	2a1403e0 	mov	w0, w20
   8d6cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d6d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8d6d4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8d6d8:	d65f03c0 	ret
   8d6dc:	9400457d 	bl	9ecd0 <CLogger::Get()>
   8d6e0:	11000734 	add	w20, w25, #0x1
   8d6e4:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d6e8:	2a1403e4 	mov	w4, w20
   8d6ec:	91102063 	add	x3, x3, #0x408
   8d6f0:	52800022 	mov	w2, #0x1                   	// #1
   8d6f4:	aa1a03e1 	mov	x1, x26
   8d6f8:	940044b2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d6fc:	17ffff85 	b	8d510 <CUSBStandardHub::EnumeratePorts()+0xc0>
   8d700:	52800007 	mov	w7, #0x0                   	// #0
   8d704:	d2800006 	mov	x6, #0x0                   	// #0
   8d708:	2a1403e5 	mov	w5, w20
   8d70c:	2a1c03e4 	mov	w4, w28
   8d710:	52800063 	mov	w3, #0x3                   	// #3
   8d714:	52800462 	mov	w2, #0x23                  	// #35
   8d718:	aa1803e1 	mov	x1, x24
   8d71c:	aa1703e0 	mov	x0, x23
   8d720:	97fff620 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d724:	37f80a40 	tbnz	w0, #31, 8d86c <CUSBStandardHub::EnumeratePorts()+0x41c>
   8d728:	94005b4e 	bl	a4460 <CTimer::Get()>
   8d72c:	52800c80 	mov	w0, #0x64                  	// #100
   8d730:	94005b10 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8d734:	2a1c03e7 	mov	w7, w28
   8d738:	2a1403e5 	mov	w5, w20
   8d73c:	f9402266 	ldr	x6, [x19, #64]
   8d740:	52800004 	mov	w4, #0x0                   	// #0
   8d744:	52800003 	mov	w3, #0x0                   	// #0
   8d748:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   8d74c:	aa1803e1 	mov	x1, x24
   8d750:	aa1703e0 	mov	x0, x23
   8d754:	97fff613 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d758:	7100101f 	cmp	w0, #0x4
   8d75c:	54001921 	b.ne	8da80 <CUSBStandardHub::EnumeratePorts()+0x630>  // b.any
   8d760:	f9402260 	ldr	x0, [x19, #64]
   8d764:	79400000 	ldrh	w0, [x0]
   8d768:	36080c80 	tbz	w0, #1, 8d8f8 <CUSBStandardHub::EnumeratePorts()+0x4a8>
   8d76c:	37181920 	tbnz	w0, #3, 8da90 <CUSBStandardHub::EnumeratePorts()+0x640>
   8d770:	5280001c 	mov	w28, #0x0                   	// #0
   8d774:	364803a0 	tbz	w0, #9, 8d7e8 <CUSBStandardHub::EnumeratePorts()+0x398>
   8d778:	f9400260 	ldr	x0, [x19]
   8d77c:	b5001040 	cbnz	x0, 8d984 <CUSBStandardHub::EnumeratePorts()+0x534>
   8d780:	d2803c00 	mov	x0, #0x1e0                 	// #480
   8d784:	11000734 	add	w20, w25, #0x1
   8d788:	94005fbe 	bl	a5680 <operator new(unsigned long)>
   8d78c:	2a1c03e2 	mov	w2, w28
   8d790:	2a1903e4 	mov	w4, w25
   8d794:	aa0003fc 	mov	x28, x0
   8d798:	aa1603e3 	mov	x3, x22
   8d79c:	aa1703e1 	mov	x1, x23
   8d7a0:	97ffe038 	bl	85880 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   8d7a4:	aa1c03e0 	mov	x0, x28
   8d7a8:	f900027c 	str	x28, [x19]
   8d7ac:	97ffe1f5 	bl	85f80 <CXHCIUSBDevice::Initialize()>
   8d7b0:	72001c1f 	tst	w0, #0xff
   8d7b4:	54ffeae1 	b.ne	8d510 <CUSBStandardHub::EnumeratePorts()+0xc0>  // b.any
   8d7b8:	f9400260 	ldr	x0, [x19]
   8d7bc:	b4000080 	cbz	x0, 8d7cc <CUSBStandardHub::EnumeratePorts()+0x37c>
   8d7c0:	f9400001 	ldr	x1, [x0]
   8d7c4:	f9400421 	ldr	x1, [x1, #8]
   8d7c8:	d63f0020 	blr	x1
   8d7cc:	f900027f 	str	xzr, [x19]
   8d7d0:	17ffff50 	b	8d510 <CUSBStandardHub::EnumeratePorts()+0xc0>
   8d7d4:	d2800080 	mov	x0, #0x4                   	// #4
   8d7d8:	94005faa 	bl	a5680 <operator new(unsigned long)>
   8d7dc:	aa0003e6 	mov	x6, x0
   8d7e0:	f9002260 	str	x0, [x19, #64]
   8d7e4:	17ffff39 	b	8d4c8 <CUSBStandardHub::EnumeratePorts()+0x78>
   8d7e8:	d34a2800 	ubfx	x0, x0, #10, #1
   8d7ec:	1100041c 	add	w28, w0, #0x1
   8d7f0:	17ffffe2 	b	8d778 <CUSBStandardHub::EnumeratePorts()+0x328>
   8d7f4:	52800013 	mov	w19, #0x0                   	// #0
   8d7f8:	14000004 	b	8d808 <CUSBStandardHub::EnumeratePorts()+0x3b8>
   8d7fc:	b94032c0 	ldr	w0, [x22, #48]
   8d800:	6b13001f 	cmp	w0, w19
   8d804:	54000529 	b.ls	8d8a8 <CUSBStandardHub::EnumeratePorts()+0x458>  // b.plast
   8d808:	11000673 	add	w19, w19, #0x1
   8d80c:	52800007 	mov	w7, #0x0                   	// #0
   8d810:	2a1303e5 	mov	w5, w19
   8d814:	d2800006 	mov	x6, #0x0                   	// #0
   8d818:	52800104 	mov	w4, #0x8                   	// #8
   8d81c:	52800063 	mov	w3, #0x3                   	// #3
   8d820:	52800462 	mov	w2, #0x23                  	// #35
   8d824:	aa1803e1 	mov	x1, x24
   8d828:	aa1703e0 	mov	x0, x23
   8d82c:	97fff5dd 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8d830:	36fffe60 	tbz	w0, #31, 8d7fc <CUSBStandardHub::EnumeratePorts()+0x3ac>
   8d834:	94004527 	bl	9ecd0 <CLogger::Get()>
   8d838:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d83c:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d840:	2a1303e4 	mov	w4, w19
   8d844:	910fc063 	add	x3, x3, #0x3f0
   8d848:	9116c021 	add	x1, x1, #0x5b0
   8d84c:	52800022 	mov	w2, #0x1                   	// #1
   8d850:	9400445c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d854:	2a1403e0 	mov	w0, w20
   8d858:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d85c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d860:	a94363f7 	ldp	x23, x24, [sp, #48]
   8d864:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8d868:	d65f03c0 	ret
   8d86c:	94004519 	bl	9ecd0 <CLogger::Get()>
   8d870:	11000734 	add	w20, w25, #0x1
   8d874:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d878:	2a1403e4 	mov	w4, w20
   8d87c:	91118063 	add	x3, x3, #0x460
   8d880:	52800022 	mov	w2, #0x1                   	// #1
   8d884:	aa1a03e1 	mov	x1, x26
   8d888:	9400444e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d88c:	17ffff21 	b	8d510 <CUSBStandardHub::EnumeratePorts()+0xc0>
   8d890:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d894:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d898:	910d0021 	add	x1, x1, #0x340
   8d89c:	9110a000 	add	x0, x0, #0x428
   8d8a0:	528024a2 	mov	w2, #0x125                 	// #293
   8d8a4:	94003b77 	bl	9c680 <assertion_failed>
   8d8a8:	52800020 	mov	w0, #0x1                   	// #1
   8d8ac:	3900d2c0 	strb	w0, [x22, #52]
   8d8b0:	940042d4 	bl	9e400 <CKernelOptions::Get()>
   8d8b4:	b4000140 	cbz	x0, 8d8dc <CUSBStandardHub::EnumeratePorts()+0x48c>
   8d8b8:	940042ba 	bl	9e3a0 <CKernelOptions::GetUSBPowerDelay() const>
   8d8bc:	2a0003f3 	mov	w19, w0
   8d8c0:	340000e0 	cbz	w0, 8d8dc <CUSBStandardHub::EnumeratePorts()+0x48c>
   8d8c4:	94005ae7 	bl	a4460 <CTimer::Get()>
   8d8c8:	2a1303e0 	mov	w0, w19
   8d8cc:	94005aa9 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8d8d0:	b94032c0 	ldr	w0, [x22, #48]
   8d8d4:	35ffde00 	cbnz	w0, 8d494 <CUSBStandardHub::EnumeratePorts()+0x44>
   8d8d8:	17ffff4e 	b	8d610 <CUSBStandardHub::EnumeratePorts()+0x1c0>
   8d8dc:	94005ae1 	bl	a4460 <CTimer::Get()>
   8d8e0:	52803fd3 	mov	w19, #0x1fe                 	// #510
   8d8e4:	2a1303e0 	mov	w0, w19
   8d8e8:	94005aa2 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   8d8ec:	b94032c0 	ldr	w0, [x22, #48]
   8d8f0:	35ffdd20 	cbnz	w0, 8d494 <CUSBStandardHub::EnumeratePorts()+0x44>
   8d8f4:	17ffff47 	b	8d610 <CUSBStandardHub::EnumeratePorts()+0x1c0>
   8d8f8:	940044f6 	bl	9ecd0 <CLogger::Get()>
   8d8fc:	11000734 	add	w20, w25, #0x1
   8d900:	52800022 	mov	w2, #0x1                   	// #1
   8d904:	f94037e3 	ldr	x3, [sp, #104]
   8d908:	2a1403e4 	mov	w4, w20
   8d90c:	aa1a03e1 	mov	x1, x26
   8d910:	9400442c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d914:	17fffeff 	b	8d510 <CUSBStandardHub::EnumeratePorts()+0xc0>
   8d918:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d91c:	b0000100 	adrp	x0, ae000 <FromDevice+0x108>
   8d920:	a90153f3 	stp	x19, x20, [sp, #16]
   8d924:	910d0021 	add	x1, x1, #0x340
   8d928:	9132a000 	add	x0, x0, #0xca8
   8d92c:	52801c62 	mov	w2, #0xe3                  	// #227
   8d930:	a90363f7 	stp	x23, x24, [sp, #48]
   8d934:	a9046bf9 	stp	x25, x26, [sp, #64]
   8d938:	a90573fb 	stp	x27, x28, [sp, #80]
   8d93c:	94003b51 	bl	9c680 <assertion_failed>
   8d940:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d944:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d948:	a90153f3 	stp	x19, x20, [sp, #16]
   8d94c:	910d0021 	add	x1, x1, #0x340
   8d950:	910f4000 	add	x0, x0, #0x3d0
   8d954:	52801cc2 	mov	w2, #0xe6                  	// #230
   8d958:	a9046bf9 	stp	x25, x26, [sp, #64]
   8d95c:	a90573fb 	stp	x27, x28, [sp, #80]
   8d960:	94003b48 	bl	9c680 <assertion_failed>
   8d964:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d968:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d96c:	a9046bf9 	stp	x25, x26, [sp, #64]
   8d970:	910d0021 	add	x1, x1, #0x340
   8d974:	910f8000 	add	x0, x0, #0x3e0
   8d978:	52801d02 	mov	w2, #0xe8                  	// #232
   8d97c:	a90573fb 	stp	x27, x28, [sp, #80]
   8d980:	94003b40 	bl	9c680 <assertion_failed>
   8d984:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d988:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8d98c:	910d0021 	add	x1, x1, #0x340
   8d990:	9112e000 	add	x0, x0, #0x4b8
   8d994:	52802c42 	mov	w2, #0x162                 	// #354
   8d998:	94003b3a 	bl	9c680 <assertion_failed>
   8d99c:	940044cd 	bl	9ecd0 <CLogger::Get()>
   8d9a0:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8d9a4:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8d9a8:	9113e063 	add	x3, x3, #0x4f8
   8d9ac:	17ffff3f 	b	8d6a8 <CUSBStandardHub::EnumeratePorts()+0x258>
   8d9b0:	aa1503e0 	mov	x0, x21
   8d9b4:	d2800081 	mov	x1, #0x4                   	// #4
   8d9b8:	94005f56 	bl	a5710 <operator delete(void*, unsigned long)>
   8d9bc:	b94032c0 	ldr	w0, [x22, #48]
   8d9c0:	34000920 	cbz	w0, 8dae4 <CUSBStandardHub::EnumeratePorts()+0x694>
   8d9c4:	d2800033 	mov	x19, #0x1                   	// #1
   8d9c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   8d9cc:	d000011a 	adrp	x26, af000 <FromUmsd+0xb0>
   8d9d0:	9116c35a 	add	x26, x26, #0x5b0
   8d9d4:	2a1303f4 	mov	w20, w19
   8d9d8:	9101c2d9 	add	x25, x22, #0x70
   8d9dc:	a90573fb 	stp	x27, x28, [sp, #80]
   8d9e0:	d000011b 	adrp	x27, af000 <FromUmsd+0xb0>
   8d9e4:	9112437b 	add	x27, x27, #0x490
   8d9e8:	14000006 	b	8da00 <CUSBStandardHub::EnumeratePorts()+0x5b0>
   8d9ec:	b94032c0 	ldr	w0, [x22, #48]
   8d9f0:	91000673 	add	x19, x19, #0x1
   8d9f4:	51000661 	sub	w1, w19, #0x1
   8d9f8:	6b00003f 	cmp	w1, w0
   8d9fc:	54000442 	b.cs	8da84 <CUSBStandardHub::EnumeratePorts()+0x634>  // b.hs, b.nlast
   8da00:	12003e75 	and	w21, w19, #0xffff
   8da04:	52800087 	mov	w7, #0x4                   	// #4
   8da08:	f8737b26 	ldr	x6, [x25, x19, lsl #3]
   8da0c:	2a1503e5 	mov	w5, w21
   8da10:	52800004 	mov	w4, #0x0                   	// #0
   8da14:	52800003 	mov	w3, #0x0                   	// #0
   8da18:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   8da1c:	aa1803e1 	mov	x1, x24
   8da20:	aa1703e0 	mov	x0, x23
   8da24:	97fff55f 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8da28:	7100101f 	cmp	w0, #0x4
   8da2c:	54fffe01 	b.ne	8d9ec <CUSBStandardHub::EnumeratePorts()+0x59c>  // b.any
   8da30:	f8737b20 	ldr	x0, [x25, x19, lsl #3]
   8da34:	79400000 	ldrh	w0, [x0]
   8da38:	361ffda0 	tbz	w0, #3, 8d9ec <CUSBStandardHub::EnumeratePorts()+0x59c>
   8da3c:	aa1803e1 	mov	x1, x24
   8da40:	2a1503e5 	mov	w5, w21
   8da44:	52800007 	mov	w7, #0x0                   	// #0
   8da48:	d2800006 	mov	x6, #0x0                   	// #0
   8da4c:	52800104 	mov	w4, #0x8                   	// #8
   8da50:	52800023 	mov	w3, #0x1                   	// #1
   8da54:	52800462 	mov	w2, #0x23                  	// #35
   8da58:	aa1703e0 	mov	x0, x23
   8da5c:	97fff551 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8da60:	9400449c 	bl	9ecd0 <CLogger::Get()>
   8da64:	2a1303e4 	mov	w4, w19
   8da68:	aa1b03e3 	mov	x3, x27
   8da6c:	52800022 	mov	w2, #0x1                   	// #1
   8da70:	aa1a03e1 	mov	x1, x26
   8da74:	52800014 	mov	w20, #0x0                   	// #0
   8da78:	940043d2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8da7c:	17ffffdc 	b	8d9ec <CUSBStandardHub::EnumeratePorts()+0x59c>
   8da80:	52800014 	mov	w20, #0x0                   	// #0
   8da84:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8da88:	a94573fb 	ldp	x27, x28, [sp, #80]
   8da8c:	17ffff72 	b	8d854 <CUSBStandardHub::EnumeratePorts()+0x404>
   8da90:	2a1403e5 	mov	w5, w20
   8da94:	aa1803e1 	mov	x1, x24
   8da98:	52800007 	mov	w7, #0x0                   	// #0
   8da9c:	d2800006 	mov	x6, #0x0                   	// #0
   8daa0:	52800104 	mov	w4, #0x8                   	// #8
   8daa4:	52800023 	mov	w3, #0x1                   	// #1
   8daa8:	52800462 	mov	w2, #0x23                  	// #35
   8daac:	aa1703e0 	mov	x0, x23
   8dab0:	97fff53c 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8dab4:	94004487 	bl	9ecd0 <CLogger::Get()>
   8dab8:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8dabc:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dac0:	11000724 	add	w4, w25, #0x1
   8dac4:	91124063 	add	x3, x3, #0x490
   8dac8:	9116c021 	add	x1, x1, #0x5b0
   8dacc:	52800022 	mov	w2, #0x1                   	// #1
   8dad0:	940043bc 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8dad4:	52800014 	mov	w20, #0x0                   	// #0
   8dad8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8dadc:	a94573fb 	ldp	x27, x28, [sp, #80]
   8dae0:	17ffff5d 	b	8d854 <CUSBStandardHub::EnumeratePorts()+0x404>
   8dae4:	52800034 	mov	w20, #0x1                   	// #1
   8dae8:	17ffff5b 	b	8d854 <CUSBStandardHub::EnumeratePorts()+0x404>
   8daec:	d503201f 	nop

000000000008daf0 <CUSBStandardHub::ReScanDevices()>:
   8daf0:	17fffe58 	b	8d450 <CUSBStandardHub::EnumeratePorts()>
   8daf4:	d503201f 	nop
   8daf8:	d503201f 	nop
   8dafc:	d503201f 	nop

000000000008db00 <CUSBStandardHub::Configure()>:
   8db00:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8db04:	910003fd 	mov	x29, sp
   8db08:	a90153f3 	stp	x19, x20, [sp, #16]
   8db0c:	aa0003f3 	mov	x19, x0
   8db10:	a9025bf5 	stp	x21, x22, [sp, #32]
   8db14:	97ffe8b3 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8db18:	12001c14 	and	w20, w0, #0xff
   8db1c:	7100069f 	cmp	w20, #0x1
   8db20:	54000181 	b.ne	8db50 <CUSBStandardHub::Configure()+0x50>  // b.any
   8db24:	528000a1 	mov	w1, #0x5                   	// #5
   8db28:	aa1303e0 	mov	x0, x19
   8db2c:	97ffe8dd 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8db30:	aa0003f5 	mov	x21, x0
   8db34:	b40000e0 	cbz	x0, 8db50 <CUSBStandardHub::Configure()+0x50>
   8db38:	39c00800 	ldrsb	w0, [x0, #2]
   8db3c:	36f800a0 	tbz	w0, #31, 8db50 <CUSBStandardHub::Configure()+0x50>
   8db40:	39400ea0 	ldrb	w0, [x21, #3]
   8db44:	12001400 	and	w0, w0, #0x3f
   8db48:	71000c1f 	cmp	w0, #0x3
   8db4c:	54000160 	b.eq	8db78 <CUSBStandardHub::Configure()+0x78>  // b.none
   8db50:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8db54:	9116c021 	add	x1, x1, #0x5b0
   8db58:	aa1303e0 	mov	x0, x19
   8db5c:	52800015 	mov	w21, #0x0                   	// #0
   8db60:	97ffe8dc 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8db64:	2a1503e0 	mov	w0, w21
   8db68:	a94153f3 	ldp	x19, x20, [sp, #16]
   8db6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8db70:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8db74:	d65f03c0 	ret
   8db78:	aa1303e0 	mov	x0, x19
   8db7c:	97ffe8a5 	bl	87e10 <CUSBFunction::GetDevice() const>
   8db80:	aa0003f6 	mov	x22, x0
   8db84:	d2800400 	mov	x0, #0x20                  	// #32
   8db88:	94005ebe 	bl	a5680 <operator new(unsigned long)>
   8db8c:	aa1503e2 	mov	x2, x21
   8db90:	aa1603e1 	mov	x1, x22
   8db94:	aa0003f5 	mov	x21, x0
   8db98:	97ffe6fe 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8db9c:	aa1303e0 	mov	x0, x19
   8dba0:	f9001675 	str	x21, [x19, #40]
   8dba4:	97ffe7cb 	bl	87ad0 <CUSBFunction::Configure()>
   8dba8:	72001c15 	ands	w21, w0, #0xff
   8dbac:	54000460 	b.eq	8dc38 <CUSBStandardHub::Configure()+0x138>  // b.none
   8dbb0:	9100c3e0 	add	x0, sp, #0x30
   8dbb4:	9400509f 	bl	a1e30 <CString::CString()>
   8dbb8:	90000143 	adrp	x3, b5000 <font_data+0x1340>
   8dbbc:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dbc0:	b94db062 	ldr	w2, [x3, #3504]
   8dbc4:	9114c021 	add	x1, x1, #0x530
   8dbc8:	9100c3e0 	add	x0, sp, #0x30
   8dbcc:	11000444 	add	w4, w2, #0x1
   8dbd0:	b90db064 	str	w4, [x3, #3504]
   8dbd4:	94005607 	bl	a33f0 <CString::Format(char const*, ...)>
   8dbd8:	94003d7a 	bl	9d1c0 <CDeviceNameService::Get()>
   8dbdc:	aa0003f5 	mov	x21, x0
   8dbe0:	9100c3e0 	add	x0, sp, #0x30
   8dbe4:	940050af 	bl	a1ea0 <CString::operator char const*() const>
   8dbe8:	aa0003e1 	mov	x1, x0
   8dbec:	52800003 	mov	w3, #0x0                   	// #0
   8dbf0:	aa1503e0 	mov	x0, x21
   8dbf4:	aa1303e2 	mov	x2, x19
   8dbf8:	94003caa 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8dbfc:	aa1303e0 	mov	x0, x19
   8dc00:	97fffe14 	bl	8d450 <CUSBStandardHub::EnumeratePorts()>
   8dc04:	72001c15 	ands	w21, w0, #0xff
   8dc08:	54000080 	b.eq	8dc18 <CUSBStandardHub::Configure()+0x118>  // b.none
   8dc0c:	9100c3e0 	add	x0, sp, #0x30
   8dc10:	9400504c 	bl	a1d40 <CString::~CString()>
   8dc14:	17ffffd4 	b	8db64 <CUSBStandardHub::Configure()+0x64>
   8dc18:	9400442e 	bl	9ecd0 <CLogger::Get()>
   8dc1c:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8dc20:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dc24:	2a1403e2 	mov	w2, w20
   8dc28:	9114e063 	add	x3, x3, #0x538
   8dc2c:	9116c021 	add	x1, x1, #0x5b0
   8dc30:	94004364 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8dc34:	17fffff6 	b	8dc0c <CUSBStandardHub::Configure()+0x10c>
   8dc38:	94004426 	bl	9ecd0 <CLogger::Get()>
   8dc3c:	b0000103 	adrp	x3, ae000 <FromDevice+0x108>
   8dc40:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dc44:	2a1403e2 	mov	w2, w20
   8dc48:	9104a063 	add	x3, x3, #0x128
   8dc4c:	9116c021 	add	x1, x1, #0x5b0
   8dc50:	9400435c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8dc54:	17ffffc4 	b	8db64 <CUSBStandardHub::Configure()+0x64>
	...

000000000008dc60 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)>:
   8dc60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8dc64:	910003fd 	mov	x29, sp
   8dc68:	a90153f3 	stp	x19, x20, [sp, #16]
   8dc6c:	aa0003f3 	mov	x19, x0
   8dc70:	aa0103e0 	mov	x0, x1
   8dc74:	aa0103f4 	mov	x20, x1
   8dc78:	f90013f5 	str	x21, [sp, #32]
   8dc7c:	91004275 	add	x21, x19, #0x10
   8dc80:	f9000261 	str	x1, [x19]
   8dc84:	97ffd173 	bl	82250 <CXHCIDevice::GetMMIOSpace()>
   8dc88:	aa0003e4 	mov	x4, x0
   8dc8c:	aa1403e3 	mov	x3, x20
   8dc90:	aa1503e0 	mov	x0, x21
   8dc94:	52800802 	mov	w2, #0x40                  	// #64
   8dc98:	52800041 	mov	w1, #0x2                   	// #2
   8dc9c:	f9000664 	str	x4, [x19, #8]
   8dca0:	97ffd89c 	bl	83f10 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   8dca4:	52800021 	mov	w1, #0x1                   	// #1
   8dca8:	aa1503e0 	mov	x0, x21
   8dcac:	f900227f 	str	xzr, [x19, #64]
   8dcb0:	3900e261 	strb	w1, [x19, #56]
   8dcb4:	97ffd8d3 	bl	84000 <CXHCIRing::IsValid() const>
   8dcb8:	72001c1f 	tst	w0, #0xff
   8dcbc:	54000200 	b.eq	8dcfc <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)+0x9c>  // b.none
   8dcc0:	f9400674 	ldr	x20, [x19, #8]
   8dcc4:	b4000254 	cbz	x20, 8dd0c <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)+0xac>
   8dcc8:	aa1503e0 	mov	x0, x21
   8dccc:	97ffd8dd 	bl	84040 <CXHCIRing::GetFirstTRB()>
   8dcd0:	aa0003f3 	mov	x19, x0
   8dcd4:	aa1503e0 	mov	x0, x21
   8dcd8:	97ffd99a 	bl	84340 <CXHCIRing::GetCycleState() const>
   8dcdc:	2a0003e2 	mov	w2, w0
   8dce0:	52800301 	mov	w1, #0x18                  	// #24
   8dce4:	f94013f5 	ldr	x21, [sp, #32]
   8dce8:	aa1403e0 	mov	x0, x20
   8dcec:	aa020262 	orr	x2, x19, x2
   8dcf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dcf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dcf8:	17ffd80a 	b	83d20 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>
   8dcfc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dd00:	f94013f5 	ldr	x21, [sp, #32]
   8dd04:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dd08:	d65f03c0 	ret
   8dd0c:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dd10:	90000100 	adrp	x0, ad000 <From+0x4c0>
   8dd14:	9116e021 	add	x1, x1, #0x5b8
   8dd18:	91060000 	add	x0, x0, #0x180
   8dd1c:	52800502 	mov	w2, #0x28                  	// #40
   8dd20:	94003a58 	bl	9c680 <assertion_failed>
   8dd24:	d503201f 	nop
   8dd28:	d503201f 	nop
   8dd2c:	d503201f 	nop

000000000008dd30 <CXHCICommandManager::~CXHCICommandManager()>:
   8dd30:	aa0003e1 	mov	x1, x0
   8dd34:	3940e000 	ldrb	w0, [x0, #56]
   8dd38:	72001c1f 	tst	w0, #0xff
   8dd3c:	540000a0 	b.eq	8dd50 <CXHCICommandManager::~CXHCICommandManager()+0x20>  // b.none
   8dd40:	aa0103e0 	mov	x0, x1
   8dd44:	f900043f 	str	xzr, [x1, #8]
   8dd48:	f801041f 	str	xzr, [x0], #16
   8dd4c:	17ffd8a5 	b	83fe0 <CXHCIRing::~CXHCIRing()>
   8dd50:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dd54:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8dd58:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dd5c:	9116e021 	add	x1, x1, #0x5b8
   8dd60:	910003fd 	mov	x29, sp
   8dd64:	91174000 	add	x0, x0, #0x5d0
   8dd68:	528005e2 	mov	w2, #0x2f                  	// #47
   8dd6c:	94003a45 	bl	9c680 <assertion_failed>

000000000008dd70 <CXHCICommandManager::IsValid()>:
   8dd70:	91004000 	add	x0, x0, #0x10
   8dd74:	17ffd8a3 	b	84000 <CXHCIRing::IsValid() const>
   8dd78:	d503201f 	nop
   8dd7c:	d503201f 	nop

000000000008dd80 <CXHCICommandManager::DumpStatus()>:
   8dd80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8dd84:	910003fd 	mov	x29, sp
   8dd88:	a90153f3 	stp	x19, x20, [sp, #16]
   8dd8c:	aa0003f3 	mov	x19, x0
   8dd90:	d0000114 	adrp	x20, af000 <FromUmsd+0xb0>
   8dd94:	91198294 	add	x20, x20, #0x660
   8dd98:	3940e000 	ldrb	w0, [x0, #56]
   8dd9c:	72001c1f 	tst	w0, #0xff
   8dda0:	540000c0 	b.eq	8ddb8 <CXHCICommandManager::DumpStatus()+0x38>  // b.none
   8dda4:	aa1403e1 	mov	x1, x20
   8dda8:	91004260 	add	x0, x19, #0x10
   8ddac:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ddb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ddb4:	17ffd96f 	b	84370 <CXHCIRing::DumpStatus(char const*)>
   8ddb8:	940043c6 	bl	9ecd0 <CLogger::Get()>
   8ddbc:	f9402264 	ldr	x4, [x19, #64]
   8ddc0:	d0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8ddc4:	aa1403e1 	mov	x1, x20
   8ddc8:	52800082 	mov	w2, #0x4                   	// #4
   8ddcc:	9117a063 	add	x3, x3, #0x5e8
   8ddd0:	b9400c84 	ldr	w4, [x4, #12]
   8ddd4:	940042fb 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ddd8:	aa1403e1 	mov	x1, x20
   8dddc:	91004260 	add	x0, x19, #0x10
   8dde0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dde4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8dde8:	17ffd962 	b	84370 <CXHCIRing::DumpStatus(char const*)>
   8ddec:	d503201f 	nop

000000000008ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>:
   8ddf0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8ddf4:	910003fd 	mov	x29, sp
   8ddf8:	a90153f3 	stp	x19, x20, [sp, #16]
   8ddfc:	aa0003f3 	mov	x19, x0
   8de00:	3940e000 	ldrb	w0, [x0, #56]
   8de04:	a9025bf5 	stp	x21, x22, [sp, #32]
   8de08:	a90363f7 	stp	x23, x24, [sp, #48]
   8de0c:	72001c1f 	tst	w0, #0xff
   8de10:	a9046bf9 	stp	x25, x26, [sp, #64]
   8de14:	540007a0 	b.eq	8df08 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x118>  // b.none
   8de18:	9100427a 	add	x26, x19, #0x10
   8de1c:	2a0103f5 	mov	w21, w1
   8de20:	aa1a03e0 	mov	x0, x26
   8de24:	2a0203f9 	mov	w25, w2
   8de28:	2a0303f8 	mov	w24, w3
   8de2c:	2a0403f7 	mov	w23, w4
   8de30:	aa0503f6 	mov	x22, x5
   8de34:	97ffd8af 	bl	840f0 <CXHCIRing::GetEnqueueTRB()>
   8de38:	aa0003f4 	mov	x20, x0
   8de3c:	b4000720 	cbz	x0, 8df20 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x130>
   8de40:	29006019 	stp	w25, w24, [x0]
   8de44:	b9000817 	str	w23, [x0, #8]
   8de48:	37000715 	tbnz	w21, #0, 8df28 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x138>
   8de4c:	aa1a03e0 	mov	x0, x26
   8de50:	97ffd93c 	bl	84340 <CXHCIRing::GetCycleState() const>
   8de54:	2a0003e1 	mov	w1, w0
   8de58:	aa1a03e0 	mov	x0, x26
   8de5c:	2a150035 	orr	w21, w1, w21
   8de60:	b9000e95 	str	w21, [x20, #12]
   8de64:	3900e27f 	strb	wzr, [x19, #56]
   8de68:	f9002274 	str	x20, [x19, #64]
   8de6c:	97ffd8f9 	bl	84250 <CXHCIRing::IncrementEnqueue()>
   8de70:	d5033f9f 	dsb	sy
   8de74:	f9400660 	ldr	x0, [x19, #8]
   8de78:	52800002 	mov	w2, #0x0                   	// #0
   8de7c:	52800001 	mov	w1, #0x0                   	// #0
   8de80:	97ffd774 	bl	83c50 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>
   8de84:	94005977 	bl	a4460 <CTimer::Get()>
   8de88:	94005682 	bl	a3890 <CTimer::GetTicks() const>
   8de8c:	2a0003f4 	mov	w20, w0
   8de90:	14000006 	b	8dea8 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0xb8>
   8de94:	94005973 	bl	a4460 <CTimer::Get()>
   8de98:	9400567e 	bl	a3890 <CTimer::GetTicks() const>
   8de9c:	4b140001 	sub	w1, w0, w20
   8dea0:	7104ac3f 	cmp	w1, #0x12b
   8dea4:	540001e8 	b.hi	8dee0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0xf0>  // b.pmore
   8dea8:	3940e261 	ldrb	w1, [x19, #56]
   8deac:	72001c3f 	tst	w1, #0xff
   8deb0:	54ffff20 	b.eq	8de94 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0xa4>  // b.none
   8deb4:	d5033fbf 	dmb	sy
   8deb8:	b4000076 	cbz	x22, 8dec4 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0xd4>
   8debc:	39412660 	ldrb	w0, [x19, #73]
   8dec0:	390002c0 	strb	w0, [x22]
   8dec4:	39412260 	ldrb	w0, [x19, #72]
   8dec8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8decc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ded0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ded4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8ded8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8dedc:	d65f03c0 	ret
   8dee0:	52800021 	mov	w1, #0x1                   	// #1
   8dee4:	12800020 	mov	w0, #0xfffffffe            	// #-2
   8dee8:	f900227f 	str	xzr, [x19, #64]
   8deec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8def0:	3900e261 	strb	w1, [x19, #56]
   8def4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8def8:	a94363f7 	ldp	x23, x24, [sp, #48]
   8defc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8df00:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8df04:	d65f03c0 	ret
   8df08:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8df0c:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8df10:	9116e021 	add	x1, x1, #0x5b8
   8df14:	91174000 	add	x0, x0, #0x5d0
   8df18:	528013a2 	mov	w2, #0x9d                  	// #157
   8df1c:	940039d9 	bl	9c680 <assertion_failed>
   8df20:	528001e0 	mov	w0, #0xf                   	// #15
   8df24:	17ffffe9 	b	8dec8 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0xd8>
   8df28:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8df2c:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8df30:	9116e021 	add	x1, x1, #0x5b8
   8df34:	91184000 	add	x0, x0, #0x610
   8df38:	52801522 	mov	w2, #0xa9                  	// #169
   8df3c:	940039d1 	bl	9c680 <assertion_failed>

000000000008df40 <CXHCICommandManager::EnableSlot(unsigned char*)>:
   8df40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8df44:	910003fd 	mov	x29, sp
   8df48:	9100bfe5 	add	x5, sp, #0x2f
   8df4c:	52800004 	mov	w4, #0x0                   	// #0
   8df50:	52800003 	mov	w3, #0x0                   	// #0
   8df54:	52800002 	mov	w2, #0x0                   	// #0
   8df58:	f9000bf3 	str	x19, [sp, #16]
   8df5c:	aa0103f3 	mov	x19, x1
   8df60:	52848001 	mov	w1, #0x2400                	// #9216
   8df64:	97ffffa3 	bl	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8df68:	7100041f 	cmp	w0, #0x1
   8df6c:	54000101 	b.ne	8df8c <CXHCICommandManager::EnableSlot(unsigned char*)+0x4c>  // b.any
   8df70:	3940bfe2 	ldrb	w2, [sp, #47]
   8df74:	51000441 	sub	w1, w2, #0x1
   8df78:	12001c21 	and	w1, w1, #0xff
   8df7c:	71007c3f 	cmp	w1, #0x1f
   8df80:	540000c8 	b.hi	8df98 <CXHCICommandManager::EnableSlot(unsigned char*)+0x58>  // b.pmore
   8df84:	b4000133 	cbz	x19, 8dfa8 <CXHCICommandManager::EnableSlot(unsigned char*)+0x68>
   8df88:	39000262 	strb	w2, [x19]
   8df8c:	f9400bf3 	ldr	x19, [sp, #16]
   8df90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8df94:	d65f03c0 	ret
   8df98:	52800120 	mov	w0, #0x9                   	// #9
   8df9c:	f9400bf3 	ldr	x19, [sp, #16]
   8dfa0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dfa4:	d65f03c0 	ret
   8dfa8:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dfac:	d0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8dfb0:	9116e021 	add	x1, x1, #0x5b8
   8dfb4:	9118e000 	add	x0, x0, #0x638
   8dfb8:	52800922 	mov	w2, #0x49                  	// #73
   8dfbc:	940039b1 	bl	9c680 <assertion_failed>

000000000008dfc0 <CXHCICommandManager::DisableSlot(unsigned char)>:
   8dfc0:	12001c21 	and	w1, w1, #0xff
   8dfc4:	51000422 	sub	w2, w1, #0x1
   8dfc8:	12001c42 	and	w2, w2, #0xff
   8dfcc:	71007c5f 	cmp	w2, #0x1f
   8dfd0:	54000108 	b.hi	8dff0 <CXHCICommandManager::DisableSlot(unsigned char)+0x30>  // b.pmore
   8dfd4:	52850002 	mov	w2, #0x2800                	// #10240
   8dfd8:	d2800005 	mov	x5, #0x0                   	// #0
   8dfdc:	2a016041 	orr	w1, w2, w1, lsl #24
   8dfe0:	52800004 	mov	w4, #0x0                   	// #0
   8dfe4:	52800003 	mov	w3, #0x0                   	// #0
   8dfe8:	52800002 	mov	w2, #0x0                   	// #0
   8dfec:	17ffff81 	b	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8dff0:	d0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8dff4:	90000100 	adrp	x0, ad000 <From+0x4c0>
   8dff8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dffc:	9116e021 	add	x1, x1, #0x5b8
   8e000:	910003fd 	mov	x29, sp
   8e004:	9120c000 	add	x0, x0, #0x830
   8e008:	52800a22 	mov	w2, #0x51                  	// #81
   8e00c:	9400399d 	bl	9c680 <assertion_failed>

000000000008e010 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)>:
   8e010:	12001c21 	and	w1, w1, #0xff
   8e014:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e018:	910003fd 	mov	x29, sp
   8e01c:	51000424 	sub	w4, w1, #0x1
   8e020:	12001c84 	and	w4, w4, #0xff
   8e024:	71007c9f 	cmp	w4, #0x1f
   8e028:	540001e8 	b.hi	8e064 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)+0x54>  // b.pmore
   8e02c:	53081c21 	lsl	w1, w1, #24
   8e030:	12001c63 	and	w3, w3, #0xff
   8e034:	52858004 	mov	w4, #0x2c00                	// #11264
   8e038:	5285c005 	mov	w5, #0x2e00                	// #11776
   8e03c:	2a040024 	orr	w4, w1, w4
   8e040:	7100007f 	cmp	w3, #0x0
   8e044:	2a050021 	orr	w1, w1, w5
   8e048:	1a840021 	csel	w1, w1, w4, eq  // eq = none
   8e04c:	b4000182 	cbz	x2, 8e07c <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)+0x6c>
   8e050:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e054:	d2800005 	mov	x5, #0x0                   	// #0
   8e058:	52800004 	mov	w4, #0x0                   	// #0
   8e05c:	d360fc43 	lsr	x3, x2, #32
   8e060:	17ffff64 	b	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8e064:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e068:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e06c:	9116e021 	add	x1, x1, #0x5b8
   8e070:	9120c000 	add	x0, x0, #0x830
   8e074:	52800b42 	mov	w2, #0x5a                  	// #90
   8e078:	94003982 	bl	9c680 <assertion_failed>
   8e07c:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e080:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e084:	9116e021 	add	x1, x1, #0x5b8
   8e088:	9102a000 	add	x0, x0, #0xa8
   8e08c:	52800c42 	mov	w2, #0x62                  	// #98
   8e090:	9400397c 	bl	9c680 <assertion_failed>
   8e094:	d503201f 	nop
   8e098:	d503201f 	nop
   8e09c:	d503201f 	nop

000000000008e0a0 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)>:
   8e0a0:	12001c21 	and	w1, w1, #0xff
   8e0a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e0a8:	910003fd 	mov	x29, sp
   8e0ac:	51000424 	sub	w4, w1, #0x1
   8e0b0:	12001c84 	and	w4, w4, #0xff
   8e0b4:	71007c9f 	cmp	w4, #0x1f
   8e0b8:	540001c8 	b.hi	8e0f0 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)+0x50>  // b.pmore
   8e0bc:	12001c63 	and	w3, w3, #0xff
   8e0c0:	53081c21 	lsl	w1, w1, #24
   8e0c4:	52864004 	mov	w4, #0x3200                	// #12800
   8e0c8:	7100007f 	cmp	w3, #0x0
   8e0cc:	32140423 	orr	w3, w1, #0x3000
   8e0d0:	2a040021 	orr	w1, w1, w4
   8e0d4:	1a831021 	csel	w1, w1, w3, ne  // ne = any
   8e0d8:	b4000182 	cbz	x2, 8e108 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)+0x68>
   8e0dc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e0e0:	d2800005 	mov	x5, #0x0                   	// #0
   8e0e4:	52800004 	mov	w4, #0x0                   	// #0
   8e0e8:	d360fc43 	lsr	x3, x2, #32
   8e0ec:	17ffff41 	b	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8e0f0:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e0f4:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e0f8:	9116e021 	add	x1, x1, #0x5b8
   8e0fc:	9120c000 	add	x0, x0, #0x830
   8e100:	52800d22 	mov	w2, #0x69                  	// #105
   8e104:	9400395f 	bl	9c680 <assertion_failed>
   8e108:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e10c:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e110:	9116e021 	add	x1, x1, #0x5b8
   8e114:	9102a000 	add	x0, x0, #0xa8
   8e118:	52800e22 	mov	w2, #0x71                  	// #113
   8e11c:	94003959 	bl	9c680 <assertion_failed>

000000000008e120 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>:
   8e120:	12001c21 	and	w1, w1, #0xff
   8e124:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e128:	910003fd 	mov	x29, sp
   8e12c:	51000423 	sub	w3, w1, #0x1
   8e130:	12001c63 	and	w3, w3, #0xff
   8e134:	71007c7f 	cmp	w3, #0x1f
   8e138:	54000128 	b.hi	8e15c <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)+0x3c>  // b.pmore
   8e13c:	52868003 	mov	w3, #0x3400                	// #13312
   8e140:	2a016061 	orr	w1, w3, w1, lsl #24
   8e144:	b4000182 	cbz	x2, 8e174 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)+0x54>
   8e148:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e14c:	d2800005 	mov	x5, #0x0                   	// #0
   8e150:	52800004 	mov	w4, #0x0                   	// #0
   8e154:	d360fc43 	lsr	x3, x2, #32
   8e158:	17ffff26 	b	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8e15c:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e160:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e164:	9116e021 	add	x1, x1, #0x5b8
   8e168:	9120c000 	add	x0, x0, #0x830
   8e16c:	52800ee2 	mov	w2, #0x77                  	// #119
   8e170:	94003944 	bl	9c680 <assertion_failed>
   8e174:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e178:	f00000e0 	adrp	x0, ad000 <From+0x4c0>
   8e17c:	9116e021 	add	x1, x1, #0x5b8
   8e180:	9102a000 	add	x0, x0, #0xa8
   8e184:	52800f62 	mov	w2, #0x7b                  	// #123
   8e188:	9400393e 	bl	9c680 <assertion_failed>
   8e18c:	d503201f 	nop

000000000008e190 <CXHCICommandManager::NoOp()>:
   8e190:	d2800005 	mov	x5, #0x0                   	// #0
   8e194:	52800004 	mov	w4, #0x0                   	// #0
   8e198:	52800003 	mov	w3, #0x0                   	// #0
   8e19c:	52800002 	mov	w2, #0x0                   	// #0
   8e1a0:	528b8001 	mov	w1, #0x5c00                	// #23552
   8e1a4:	17ffff13 	b	8ddf0 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   8e1a8:	d503201f 	nop
   8e1ac:	d503201f 	nop

000000000008e1b0 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)>:
   8e1b0:	b4000221 	cbz	x1, 8e1f4 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0x44>
   8e1b4:	3940e004 	ldrb	w4, [x0, #56]
   8e1b8:	72001c9f 	tst	w4, #0xff
   8e1bc:	54000081 	b.ne	8e1cc <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0x1c>  // b.any
   8e1c0:	f9402004 	ldr	x4, [x0, #64]
   8e1c4:	eb01009f 	cmp	x4, x1
   8e1c8:	54000040 	b.eq	8e1d0 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0x20>  // b.none
   8e1cc:	d65f03c0 	ret
   8e1d0:	12001c42 	and	w2, w2, #0xff
   8e1d4:	12001c63 	and	w3, w3, #0xff
   8e1d8:	f900201f 	str	xzr, [x0, #64]
   8e1dc:	39012002 	strb	w2, [x0, #72]
   8e1e0:	39012403 	strb	w3, [x0, #73]
   8e1e4:	d5033fbf 	dmb	sy
   8e1e8:	52800021 	mov	w1, #0x1                   	// #1
   8e1ec:	3900e001 	strb	w1, [x0, #56]
   8e1f0:	d65f03c0 	ret
   8e1f4:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e1f8:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e1fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e200:	9116e021 	add	x1, x1, #0x5b8
   8e204:	910003fd 	mov	x29, sp
   8e208:	91192000 	add	x0, x0, #0x648
   8e20c:	52801a62 	mov	w2, #0xd3                  	// #211
   8e210:	9400391c 	bl	9c680 <assertion_failed>
	...

000000000008e220 <CLAN7800Device::GetMACAddress() const>:
   8e220:	9100e000 	add	x0, x0, #0x38
   8e224:	d65f03c0 	ret
   8e228:	d503201f 	nop
   8e22c:	d503201f 	nop

000000000008e230 <CLAN7800Device::~CLAN7800Device()>:
   8e230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e234:	b0000102 	adrp	x2, af000 <FromUmsd+0xb0>
   8e238:	91212042 	add	x2, x2, #0x848
   8e23c:	910003fd 	mov	x29, sp
   8e240:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e244:	91234021 	add	x1, x1, #0x8d0
   8e248:	a90153f3 	stp	x19, x20, [sp, #16]
   8e24c:	aa0003f3 	mov	x19, x0
   8e250:	f9000002 	str	x2, [x0]
   8e254:	f9001001 	str	x1, [x0, #32]
   8e258:	f9401814 	ldr	x20, [x0, #48]
   8e25c:	b40000d4 	cbz	x20, 8e274 <CLAN7800Device::~CLAN7800Device()+0x44>
   8e260:	aa1403e0 	mov	x0, x20
   8e264:	97ffe59b 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8e268:	aa1403e0 	mov	x0, x20
   8e26c:	d2800401 	mov	x1, #0x20                  	// #32
   8e270:	94005d28 	bl	a5710 <operator delete(void*, unsigned long)>
   8e274:	f9001a7f 	str	xzr, [x19, #48]
   8e278:	f9401674 	ldr	x20, [x19, #40]
   8e27c:	b40000d4 	cbz	x20, 8e294 <CLAN7800Device::~CLAN7800Device()+0x64>
   8e280:	aa1403e0 	mov	x0, x20
   8e284:	97ffe593 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8e288:	aa1403e0 	mov	x0, x20
   8e28c:	d2800401 	mov	x1, #0x20                  	// #32
   8e290:	94005d20 	bl	a5710 <operator delete(void*, unsigned long)>
   8e294:	9100e260 	add	x0, x19, #0x38
   8e298:	f900167f 	str	xzr, [x19, #40]
   8e29c:	94005ba5 	bl	a5130 <CMACAddress::~CMACAddress()>
   8e2a0:	aa1303e0 	mov	x0, x19
   8e2a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e2a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e2ac:	17ffe5dd 	b	87a20 <CUSBFunction::~CUSBFunction()>

000000000008e2b0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   8e2b0:	d1008000 	sub	x0, x0, #0x20
   8e2b4:	17ffffdf 	b	8e230 <CLAN7800Device::~CLAN7800Device()>
   8e2b8:	d503201f 	nop
   8e2bc:	d503201f 	nop

000000000008e2c0 <CLAN7800Device::~CLAN7800Device()>:
   8e2c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e2c4:	910003fd 	mov	x29, sp
   8e2c8:	f9000bf3 	str	x19, [sp, #16]
   8e2cc:	aa0003f3 	mov	x19, x0
   8e2d0:	97ffffd8 	bl	8e230 <CLAN7800Device::~CLAN7800Device()>
   8e2d4:	aa1303e0 	mov	x0, x19
   8e2d8:	d2800801 	mov	x1, #0x40                  	// #64
   8e2dc:	f9400bf3 	ldr	x19, [sp, #16]
   8e2e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e2e4:	14005d0b 	b	a5710 <operator delete(void*, unsigned long)>
   8e2e8:	d503201f 	nop
   8e2ec:	d503201f 	nop

000000000008e2f0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   8e2f0:	d1008000 	sub	x0, x0, #0x20
   8e2f4:	17fffff3 	b	8e2c0 <CLAN7800Device::~CLAN7800Device()>
   8e2f8:	d503201f 	nop
   8e2fc:	d503201f 	nop

000000000008e300 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   8e300:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   8e304:	910003fd 	mov	x29, sp
   8e308:	a90153f3 	stp	x19, x20, [sp, #16]
   8e30c:	aa0103f3 	mov	x19, x1
   8e310:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e314:	f9401401 	ldr	x1, [x0, #40]
   8e318:	b40005c1 	cbz	x1, 8e3d0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   8e31c:	b4000673 	cbz	x19, 8e3e8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   8e320:	aa0003f4 	mov	x20, x0
   8e324:	d2800004 	mov	x4, #0x0                   	// #0
   8e328:	5280c803 	mov	w3, #0x640                 	// #1600
   8e32c:	9100e3e0 	add	x0, sp, #0x38
   8e330:	aa0203f6 	mov	x22, x2
   8e334:	aa1303e2 	mov	x2, x19
   8e338:	97fffa3a 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8e33c:	aa1403e0 	mov	x0, x20
   8e340:	97ffe6cc 	bl	87e70 <CUSBFunction::GetHost() const>
   8e344:	f9400003 	ldr	x3, [x0]
   8e348:	9100e3e1 	add	x1, sp, #0x38
   8e34c:	52800002 	mov	w2, #0x0                   	// #0
   8e350:	f9400863 	ldr	x3, [x3, #16]
   8e354:	d63f0060 	blr	x3
   8e358:	72001c14 	ands	w20, w0, #0xff
   8e35c:	54000121 	b.ne	8e380 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   8e360:	52800014 	mov	w20, #0x0                   	// #0
   8e364:	9100e3e0 	add	x0, sp, #0x38
   8e368:	97fffa4a 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8e36c:	2a1403e0 	mov	w0, w20
   8e370:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e374:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e378:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8e37c:	d65f03c0 	ret
   8e380:	9100e3e0 	add	x0, sp, #0x38
   8e384:	97fffa5f 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8e388:	7100241f 	cmp	w0, #0x9
   8e38c:	54fffea9 	b.ls	8e360 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x60>  // b.plast
   8e390:	b9400275 	ldr	w21, [x19]
   8e394:	37b00375 	tbnz	w21, #22, 8e400 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   8e398:	120036b5 	and	w21, w21, #0x3fff
   8e39c:	51002801 	sub	w1, w0, #0xa
   8e3a0:	6b15003f 	cmp	w1, w21
   8e3a4:	54000401 	b.ne	8e424 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x124>  // b.any
   8e3a8:	7100103f 	cmp	w1, #0x4
   8e3ac:	54000489 	b.ls	8e43c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x13c>  // b.plast
   8e3b0:	51003802 	sub	w2, w0, #0xe
   8e3b4:	91002a61 	add	x1, x19, #0xa
   8e3b8:	aa1303e0 	mov	x0, x19
   8e3bc:	aa0203f5 	mov	x21, x2
   8e3c0:	94005a4e 	bl	a4cf8 <memcpy>
   8e3c4:	b4000496 	cbz	x22, 8e454 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   8e3c8:	b90002d5 	str	w21, [x22]
   8e3cc:	17ffffe6 	b	8e364 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   8e3d0:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e3d4:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e3d8:	9119a021 	add	x1, x1, #0x668
   8e3dc:	9119e000 	add	x0, x0, #0x678
   8e3e0:	528037e2 	mov	w2, #0x1bf                 	// #447
   8e3e4:	940038a7 	bl	9c680 <assertion_failed>
   8e3e8:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e3ec:	90000100 	adrp	x0, ae000 <FromDevice+0x108>
   8e3f0:	9119a021 	add	x1, x1, #0x668
   8e3f4:	91326000 	add	x0, x0, #0xc98
   8e3f8:	52803802 	mov	w2, #0x1c0                 	// #448
   8e3fc:	940038a1 	bl	9c680 <assertion_failed>
   8e400:	94004234 	bl	9ecd0 <CLogger::Get()>
   8e404:	b0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8e408:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e40c:	2a1503e4 	mov	w4, w21
   8e410:	911a4063 	add	x3, x3, #0x690
   8e414:	91248021 	add	x1, x1, #0x920
   8e418:	52800042 	mov	w2, #0x2                   	// #2
   8e41c:	94004169 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e420:	17ffffd0 	b	8e360 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x60>
   8e424:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e428:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e42c:	9119a021 	add	x1, x1, #0x668
   8e430:	911aa000 	add	x0, x0, #0x6a8
   8e434:	52803ae2 	mov	w2, #0x1d7                 	// #471
   8e438:	94003892 	bl	9c680 <assertion_failed>
   8e43c:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e440:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e444:	9119a021 	add	x1, x1, #0x668
   8e448:	911b6000 	add	x0, x0, #0x6d8
   8e44c:	52803b02 	mov	w2, #0x1d8                 	// #472
   8e450:	9400388c 	bl	9c680 <assertion_failed>
   8e454:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e458:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e45c:	9119a021 	add	x1, x1, #0x668
   8e460:	911bc000 	add	x0, x0, #0x6f0
   8e464:	52803c62 	mov	w2, #0x1e3                 	// #483
   8e468:	94003886 	bl	9c680 <assertion_failed>
   8e46c:	d503201f 	nop

000000000008e470 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   8e470:	d1008000 	sub	x0, x0, #0x20
   8e474:	17ffffa3 	b	8e300 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>
   8e478:	d503201f 	nop
   8e47c:	d503201f 	nop

000000000008e480 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   8e480:	7119005f 	cmp	w2, #0x640
   8e484:	54000388 	b.hi	8e4f4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x74>  // b.pmore
   8e488:	d119c3ff 	sub	sp, sp, #0x670
   8e48c:	a9007bfd 	stp	x29, x30, [sp]
   8e490:	910003fd 	mov	x29, sp
   8e494:	a90153f3 	stp	x19, x20, [sp, #16]
   8e498:	aa0003f4 	mov	x20, x0
   8e49c:	b4000301 	cbz	x1, 8e4fc <CLAN7800Device::SendFrame(void const*, unsigned int)+0x7c>
   8e4a0:	2a0203f3 	mov	w19, w2
   8e4a4:	9100c3e0 	add	x0, sp, #0x30
   8e4a8:	2a0203e2 	mov	w2, w2
   8e4ac:	94005a13 	bl	a4cf8 <memcpy>
   8e4b0:	320a0260 	orr	w0, w19, #0x400000
   8e4b4:	f9401a81 	ldr	x1, [x20, #48]
   8e4b8:	29057fe0 	stp	w0, wzr, [sp, #40]
   8e4bc:	b40002c1 	cbz	x1, 8e514 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x94>
   8e4c0:	aa1403e0 	mov	x0, x20
   8e4c4:	97ffe66b 	bl	87e70 <CUSBFunction::GetHost() const>
   8e4c8:	11002263 	add	w3, w19, #0x8
   8e4cc:	9100a3e2 	add	x2, sp, #0x28
   8e4d0:	f9401a81 	ldr	x1, [x20, #48]
   8e4d4:	52800004 	mov	w4, #0x0                   	// #0
   8e4d8:	97fff31e 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e4dc:	2a2003e0 	mvn	w0, w0
   8e4e0:	a9407bfd 	ldp	x29, x30, [sp]
   8e4e4:	531f7c00 	lsr	w0, w0, #31
   8e4e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e4ec:	9119c3ff 	add	sp, sp, #0x670
   8e4f0:	d65f03c0 	ret
   8e4f4:	52800000 	mov	w0, #0x0                   	// #0
   8e4f8:	d65f03c0 	ret
   8e4fc:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e500:	90000100 	adrp	x0, ae000 <FromDevice+0x108>
   8e504:	9119a021 	add	x1, x1, #0x668
   8e508:	91326000 	add	x0, x0, #0xc98
   8e50c:	52803642 	mov	w2, #0x1b2                 	// #434
   8e510:	9400385c 	bl	9c680 <assertion_failed>
   8e514:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e518:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e51c:	9119a021 	add	x1, x1, #0x668
   8e520:	911c2000 	add	x0, x0, #0x708
   8e524:	52803722 	mov	w2, #0x1b9                 	// #441
   8e528:	94003856 	bl	9c680 <assertion_failed>
   8e52c:	d503201f 	nop

000000000008e530 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   8e530:	d1008000 	sub	x0, x0, #0x20
   8e534:	17ffffd3 	b	8e480 <CLAN7800Device::SendFrame(void const*, unsigned int)>
   8e538:	d503201f 	nop
   8e53c:	d503201f 	nop

000000000008e540 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   8e540:	91006000 	add	x0, x0, #0x18
   8e544:	d65f03c0 	ret
   8e548:	d503201f 	nop
   8e54c:	d503201f 	nop

000000000008e550 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   8e550:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e554:	910003fd 	mov	x29, sp
   8e558:	f9000bf3 	str	x19, [sp, #16]
   8e55c:	aa0003f3 	mov	x19, x0
   8e560:	97ffe5c8 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8e564:	b0000102 	adrp	x2, af000 <FromUmsd+0xb0>
   8e568:	91212042 	add	x2, x2, #0x848
   8e56c:	f9001a7f 	str	xzr, [x19, #48]
   8e570:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e574:	91234021 	add	x1, x1, #0x8d0
   8e578:	9100e260 	add	x0, x19, #0x38
   8e57c:	f9000262 	str	x2, [x19]
   8e580:	a9027e61 	stp	x1, xzr, [x19, #32]
   8e584:	f9400bf3 	ldr	x19, [sp, #16]
   8e588:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e58c:	14005ae5 	b	a5120 <CMACAddress::CMACAddress()>

000000000008e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   8e590:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e594:	910003fd 	mov	x29, sp
   8e598:	a90153f3 	stp	x19, x20, [sp, #16]
   8e59c:	2a0103f3 	mov	w19, w1
   8e5a0:	f90013f5 	str	x21, [sp, #32]
   8e5a4:	aa0003f5 	mov	x21, x0
   8e5a8:	b9003fe2 	str	w2, [sp, #60]
   8e5ac:	97ffe631 	bl	87e70 <CUSBFunction::GetHost() const>
   8e5b0:	aa0003f4 	mov	x20, x0
   8e5b4:	aa1503e0 	mov	x0, x21
   8e5b8:	97ffe622 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8e5bc:	aa0003e1 	mov	x1, x0
   8e5c0:	2a1303e5 	mov	w5, w19
   8e5c4:	aa1403e0 	mov	x0, x20
   8e5c8:	52800087 	mov	w7, #0x4                   	// #4
   8e5cc:	9100f3e6 	add	x6, sp, #0x3c
   8e5d0:	52800004 	mov	w4, #0x0                   	// #0
   8e5d4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   8e5d8:	52800802 	mov	w2, #0x40                  	// #64
   8e5dc:	97fff271 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e5e0:	37f800c0 	tbnz	w0, #31, 8e5f8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x68>
   8e5e4:	52800020 	mov	w0, #0x1                   	// #1
   8e5e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e5ec:	f94013f5 	ldr	x21, [sp, #32]
   8e5f0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e5f4:	d65f03c0 	ret
   8e5f8:	940041b6 	bl	9ecd0 <CLogger::Get()>
   8e5fc:	b0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8e600:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e604:	2a1303e4 	mov	w4, w19
   8e608:	911c8063 	add	x3, x3, #0x720
   8e60c:	91248021 	add	x1, x1, #0x920
   8e610:	52800042 	mov	w2, #0x2                   	// #2
   8e614:	940040eb 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e618:	52800000 	mov	w0, #0x0                   	// #0
   8e61c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e620:	f94013f5 	ldr	x21, [sp, #32]
   8e624:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e628:	d65f03c0 	ret
   8e62c:	d503201f 	nop

000000000008e630 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   8e630:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e634:	910003fd 	mov	x29, sp
   8e638:	a90153f3 	stp	x19, x20, [sp, #16]
   8e63c:	2a0103f3 	mov	w19, w1
   8e640:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e644:	aa0203f5 	mov	x21, x2
   8e648:	aa0003f6 	mov	x22, x0
   8e64c:	97ffe609 	bl	87e70 <CUSBFunction::GetHost() const>
   8e650:	aa0003f4 	mov	x20, x0
   8e654:	aa1603e0 	mov	x0, x22
   8e658:	97ffe5fa 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8e65c:	aa0003e1 	mov	x1, x0
   8e660:	aa1503e6 	mov	x6, x21
   8e664:	aa1403e0 	mov	x0, x20
   8e668:	2a1303e5 	mov	w5, w19
   8e66c:	52800087 	mov	w7, #0x4                   	// #4
   8e670:	52800004 	mov	w4, #0x0                   	// #0
   8e674:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   8e678:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   8e67c:	97fff249 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e680:	7100101f 	cmp	w0, #0x4
   8e684:	540000c1 	b.ne	8e69c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x6c>  // b.any
   8e688:	52800020 	mov	w0, #0x1                   	// #1
   8e68c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e690:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e694:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e698:	d65f03c0 	ret
   8e69c:	9400418d 	bl	9ecd0 <CLogger::Get()>
   8e6a0:	b0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8e6a4:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e6a8:	2a1303e4 	mov	w4, w19
   8e6ac:	911d0063 	add	x3, x3, #0x740
   8e6b0:	91248021 	add	x1, x1, #0x920
   8e6b4:	52800042 	mov	w2, #0x2                   	// #2
   8e6b8:	940040c2 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e6bc:	52800000 	mov	w0, #0x0                   	// #0
   8e6c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e6c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e6c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e6cc:	d65f03c0 	ret

000000000008e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   8e6d0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   8e6d4:	910003fd 	mov	x29, sp
   8e6d8:	a90153f3 	stp	x19, x20, [sp, #16]
   8e6dc:	2a0403f3 	mov	w19, w4
   8e6e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e6e4:	2a0503f5 	mov	w21, w5
   8e6e8:	a90363f7 	stp	x23, x24, [sp, #48]
   8e6ec:	aa0003f7 	mov	x23, x0
   8e6f0:	2a0103f8 	mov	w24, w1
   8e6f4:	a9046bf9 	stp	x25, x26, [sp, #64]
   8e6f8:	2a0203f9 	mov	w25, w2
   8e6fc:	2a0303fa 	mov	w26, w3
   8e700:	94005758 	bl	a4460 <CTimer::Get()>
   8e704:	b4000520 	cbz	x0, 8e7a8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd8>
   8e708:	aa0003f4 	mov	x20, x0
   8e70c:	94005461 	bl	a3890 <CTimer::GetTicks() const>
   8e710:	2a0003f6 	mov	w22, w0
   8e714:	d503201f 	nop
   8e718:	350002d3 	cbnz	w19, 8e770 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   8e71c:	aa1403e0 	mov	x0, x20
   8e720:	9400545c 	bl	a3890 <CTimer::GetTicks() const>
   8e724:	4b160000 	sub	w0, w0, w22
   8e728:	6b15001f 	cmp	w0, w21
   8e72c:	54000302 	b.cs	8e78c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xbc>  // b.hs, b.nlast
   8e730:	910173e2 	add	x2, sp, #0x5c
   8e734:	2a1803e1 	mov	w1, w24
   8e738:	aa1703e0 	mov	x0, x23
   8e73c:	97ffffbd 	bl	8e630 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   8e740:	72001c00 	ands	w0, w0, #0xff
   8e744:	54000240 	b.eq	8e78c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xbc>  // b.none
   8e748:	b9405fe1 	ldr	w1, [sp, #92]
   8e74c:	0a010321 	and	w1, w25, w1
   8e750:	6b1a003f 	cmp	w1, w26
   8e754:	54fffe21 	b.ne	8e718 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x48>  // b.any
   8e758:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e75c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e760:	a94363f7 	ldp	x23, x24, [sp, #48]
   8e764:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8e768:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8e76c:	d65f03c0 	ret
   8e770:	2a1303e0 	mov	w0, w19
   8e774:	94005707 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   8e778:	aa1403e0 	mov	x0, x20
   8e77c:	94005445 	bl	a3890 <CTimer::GetTicks() const>
   8e780:	4b160000 	sub	w0, w0, w22
   8e784:	6b15001f 	cmp	w0, w21
   8e788:	54fffd43 	b.cc	8e730 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x60>  // b.lo, b.ul, b.last
   8e78c:	52800000 	mov	w0, #0x0                   	// #0
   8e790:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e794:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e798:	a94363f7 	ldp	x23, x24, [sp, #48]
   8e79c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8e7a0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8e7a4:	d65f03c0 	ret
   8e7a8:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e7ac:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e7b0:	9119a021 	add	x1, x1, #0x668
   8e7b4:	911d8000 	add	x0, x0, #0x760
   8e7b8:	528051c2 	mov	w2, #0x28e                 	// #654
   8e7bc:	940037b1 	bl	9c680 <assertion_failed>

000000000008e7c0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   8e7c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e7c4:	910003fd 	mov	x29, sp
   8e7c8:	a90153f3 	stp	x19, x20, [sp, #16]
   8e7cc:	12001c34 	and	w20, w1, #0xff
   8e7d0:	71007e9f 	cmp	w20, #0x1f
   8e7d4:	f90013f5 	str	x21, [sp, #32]
   8e7d8:	540004e8 	b.hi	8e874 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>  // b.pmore
   8e7dc:	12003c55 	and	w21, w2, #0xffff
   8e7e0:	52800c85 	mov	w5, #0x64                  	// #100
   8e7e4:	52800004 	mov	w4, #0x0                   	// #0
   8e7e8:	52800003 	mov	w3, #0x0                   	// #0
   8e7ec:	52800022 	mov	w2, #0x1                   	// #1
   8e7f0:	52802401 	mov	w1, #0x120                 	// #288
   8e7f4:	aa0003f3 	mov	x19, x0
   8e7f8:	97ffffb6 	bl	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8e7fc:	72001c1f 	tst	w0, #0xff
   8e800:	540000c1 	b.ne	8e818 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x58>  // b.any
   8e804:	52800000 	mov	w0, #0x0                   	// #0
   8e808:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e80c:	f94013f5 	ldr	x21, [sp, #32]
   8e810:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e814:	d65f03c0 	ret
   8e818:	2a1503e2 	mov	w2, w21
   8e81c:	52802481 	mov	w1, #0x124                 	// #292
   8e820:	aa1303e0 	mov	x0, x19
   8e824:	97ffff5b 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8e828:	72001c1f 	tst	w0, #0xff
   8e82c:	54fffec0 	b.eq	8e804 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>  // b.none
   8e830:	52810062 	mov	w2, #0x803                 	// #2051
   8e834:	52802401 	mov	w1, #0x120                 	// #288
   8e838:	2a141842 	orr	w2, w2, w20, lsl #6
   8e83c:	aa1303e0 	mov	x0, x19
   8e840:	97ffff54 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8e844:	72001c1f 	tst	w0, #0xff
   8e848:	54fffde0 	b.eq	8e804 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>  // b.none
   8e84c:	aa1303e0 	mov	x0, x19
   8e850:	52800c85 	mov	w5, #0x64                  	// #100
   8e854:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e858:	52800004 	mov	w4, #0x0                   	// #0
   8e85c:	52800003 	mov	w3, #0x0                   	// #0
   8e860:	52800022 	mov	w2, #0x1                   	// #1
   8e864:	52802401 	mov	w1, #0x120                 	// #288
   8e868:	f94013f5 	ldr	x21, [sp, #32]
   8e86c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e870:	17ffff98 	b	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8e874:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e878:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e87c:	9119a021 	add	x1, x1, #0x668
   8e880:	911dc000 	add	x0, x0, #0x770
   8e884:	52804b22 	mov	w2, #0x259                 	// #601
   8e888:	9400377e 	bl	9c680 <assertion_failed>
   8e88c:	d503201f 	nop

000000000008e890 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   8e890:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e894:	910003fd 	mov	x29, sp
   8e898:	a90153f3 	stp	x19, x20, [sp, #16]
   8e89c:	12001c34 	and	w20, w1, #0xff
   8e8a0:	71007e9f 	cmp	w20, #0x1f
   8e8a4:	f90013f5 	str	x21, [sp, #32]
   8e8a8:	540005c8 	b.hi	8e960 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>  // b.pmore
   8e8ac:	aa0203f5 	mov	x21, x2
   8e8b0:	52800c85 	mov	w5, #0x64                  	// #100
   8e8b4:	52800004 	mov	w4, #0x0                   	// #0
   8e8b8:	52800003 	mov	w3, #0x0                   	// #0
   8e8bc:	52800022 	mov	w2, #0x1                   	// #1
   8e8c0:	52802401 	mov	w1, #0x120                 	// #288
   8e8c4:	aa0003f3 	mov	x19, x0
   8e8c8:	97ffff82 	bl	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8e8cc:	72001c00 	ands	w0, w0, #0xff
   8e8d0:	540000a1 	b.ne	8e8e4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x54>  // b.any
   8e8d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e8d8:	f94013f5 	ldr	x21, [sp, #32]
   8e8dc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e8e0:	d65f03c0 	ret
   8e8e4:	52810022 	mov	w2, #0x801                 	// #2049
   8e8e8:	52802401 	mov	w1, #0x120                 	// #288
   8e8ec:	2a141842 	orr	w2, w2, w20, lsl #6
   8e8f0:	aa1303e0 	mov	x0, x19
   8e8f4:	97ffff27 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8e8f8:	72001c1f 	tst	w0, #0xff
   8e8fc:	54000140 	b.eq	8e924 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x94>  // b.none
   8e900:	52800c85 	mov	w5, #0x64                  	// #100
   8e904:	52800004 	mov	w4, #0x0                   	// #0
   8e908:	52800003 	mov	w3, #0x0                   	// #0
   8e90c:	52800022 	mov	w2, #0x1                   	// #1
   8e910:	52802401 	mov	w1, #0x120                 	// #288
   8e914:	aa1303e0 	mov	x0, x19
   8e918:	97ffff6e 	bl	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8e91c:	72001c1f 	tst	w0, #0xff
   8e920:	540000c1 	b.ne	8e938 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xa8>  // b.any
   8e924:	52800000 	mov	w0, #0x0                   	// #0
   8e928:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e92c:	f94013f5 	ldr	x21, [sp, #32]
   8e930:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e934:	d65f03c0 	ret
   8e938:	aa1303e0 	mov	x0, x19
   8e93c:	9100f3e2 	add	x2, sp, #0x3c
   8e940:	52802481 	mov	w1, #0x124                 	// #292
   8e944:	97ffff3b 	bl	8e630 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   8e948:	72001c00 	ands	w0, w0, #0xff
   8e94c:	54fffec0 	b.eq	8e924 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x94>  // b.none
   8e950:	b4000155 	cbz	x21, 8e978 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   8e954:	b9403fe1 	ldr	w1, [sp, #60]
   8e958:	790002a1 	strh	w1, [x21]
   8e95c:	17ffffde 	b	8e8d4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   8e960:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e964:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e968:	9119a021 	add	x1, x1, #0x668
   8e96c:	911dc000 	add	x0, x0, #0x770
   8e970:	52804e02 	mov	w2, #0x270                 	// #624
   8e974:	94003743 	bl	9c680 <assertion_failed>
   8e978:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8e97c:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8e980:	9119a021 	add	x1, x1, #0x668
   8e984:	911e0000 	add	x0, x0, #0x780
   8e988:	52805082 	mov	w2, #0x284                 	// #644
   8e98c:	9400373d 	bl	9c680 <assertion_failed>

000000000008e990 <CLAN7800Device::IsLinkUp()>:
   8e990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e994:	52800021 	mov	w1, #0x1                   	// #1
   8e998:	910003fd 	mov	x29, sp
   8e99c:	91007be2 	add	x2, sp, #0x1e
   8e9a0:	97ffffbc 	bl	8e890 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   8e9a4:	72001c00 	ands	w0, w0, #0xff
   8e9a8:	54000060 	b.eq	8e9b4 <CLAN7800Device::IsLinkUp()+0x24>  // b.none
   8e9ac:	79403fe0 	ldrh	w0, [sp, #30]
   8e9b0:	d3420800 	ubfx	x0, x0, #2, #1
   8e9b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e9b8:	d65f03c0 	ret
   8e9bc:	d503201f 	nop

000000000008e9c0 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   8e9c0:	d1008000 	sub	x0, x0, #0x20
   8e9c4:	17fffff3 	b	8e990 <CLAN7800Device::IsLinkUp()>
   8e9c8:	d503201f 	nop
   8e9cc:	d503201f 	nop

000000000008e9d0 <CLAN7800Device::GetLinkSpeed()>:
   8e9d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e9d4:	52800002 	mov	w2, #0x0                   	// #0
   8e9d8:	910003fd 	mov	x29, sp
   8e9dc:	528003e1 	mov	w1, #0x1f                  	// #31
   8e9e0:	f9000bf3 	str	x19, [sp, #16]
   8e9e4:	aa0003f3 	mov	x19, x0
   8e9e8:	97ffff76 	bl	8e7c0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   8e9ec:	72001c1f 	tst	w0, #0xff
   8e9f0:	540001a0 	b.eq	8ea24 <CLAN7800Device::GetLinkSpeed()+0x54>  // b.none
   8e9f4:	aa1303e0 	mov	x0, x19
   8e9f8:	9100bbe2 	add	x2, sp, #0x2e
   8e9fc:	52800381 	mov	w1, #0x1c                  	// #28
   8ea00:	97ffffa4 	bl	8e890 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   8ea04:	72001c1f 	tst	w0, #0xff
   8ea08:	540000e0 	b.eq	8ea24 <CLAN7800Device::GetLinkSpeed()+0x54>  // b.none
   8ea0c:	79405fe0 	ldrh	w0, [sp, #46]
   8ea10:	37700220 	tbnz	w0, #14, 8ea54 <CLAN7800Device::GetLinkSpeed()+0x84>
   8ea14:	36780080 	tbz	w0, #15, 8ea24 <CLAN7800Device::GetLinkSpeed()+0x54>
   8ea18:	d3431400 	ubfx	x0, x0, #3, #3
   8ea1c:	71001c1f 	cmp	w0, #0x7
   8ea20:	540000a1 	b.ne	8ea34 <CLAN7800Device::GetLinkSpeed()+0x64>  // b.any
   8ea24:	528000c0 	mov	w0, #0x6                   	// #6
   8ea28:	f9400bf3 	ldr	x19, [sp, #16]
   8ea2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ea30:	d65f03c0 	ret
   8ea34:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ea38:	91248021 	add	x1, x1, #0x920
   8ea3c:	f9400bf3 	ldr	x19, [sp, #16]
   8ea40:	91002021 	add	x1, x1, #0x8
   8ea44:	2a0003e0 	mov	w0, w0
   8ea48:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   8ea4c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ea50:	d65f03c0 	ret
   8ea54:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ea58:	b0000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ea5c:	9119a021 	add	x1, x1, #0x668
   8ea60:	911e4000 	add	x0, x0, #0x790
   8ea64:	52804062 	mov	w2, #0x203                 	// #515
   8ea68:	94003706 	bl	9c680 <assertion_failed>
   8ea6c:	d503201f 	nop

000000000008ea70 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   8ea70:	d1008000 	sub	x0, x0, #0x20
   8ea74:	17ffffd7 	b	8e9d0 <CLAN7800Device::GetLinkSpeed()>
   8ea78:	d503201f 	nop
   8ea7c:	d503201f 	nop

000000000008ea80 <CLAN7800Device::InitPHY()>:
   8ea80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ea84:	52800002 	mov	w2, #0x0                   	// #0
   8ea88:	910003fd 	mov	x29, sp
   8ea8c:	528003e1 	mov	w1, #0x1f                  	// #31
   8ea90:	f9000bf3 	str	x19, [sp, #16]
   8ea94:	aa0003f3 	mov	x19, x0
   8ea98:	97ffff4a 	bl	8e7c0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   8ea9c:	72001c00 	ands	w0, w0, #0xff
   8eaa0:	54000081 	b.ne	8eab0 <CLAN7800Device::InitPHY()+0x30>  // b.any
   8eaa4:	f9400bf3 	ldr	x19, [sp, #16]
   8eaa8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8eaac:	d65f03c0 	ret
   8eab0:	9100bbe2 	add	x2, sp, #0x2e
   8eab4:	528003a1 	mov	w1, #0x1d                  	// #29
   8eab8:	aa1303e0 	mov	x0, x19
   8eabc:	97ffff75 	bl	8e890 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   8eac0:	72001c00 	ands	w0, w0, #0xff
   8eac4:	54ffff00 	b.eq	8eaa4 <CLAN7800Device::InitPHY()+0x24>  // b.none
   8eac8:	79405fe3 	ldrh	w3, [sp, #46]
   8eacc:	52800c22 	mov	w2, #0x61                  	// #97
   8ead0:	aa1303e0 	mov	x0, x19
   8ead4:	528003a1 	mov	w1, #0x1d                  	// #29
   8ead8:	12181c63 	and	w3, w3, #0xff00
   8eadc:	2a020063 	orr	w3, w3, w2
   8eae0:	2a0303e2 	mov	w2, w3
   8eae4:	79005fe3 	strh	w3, [sp, #46]
   8eae8:	97ffff36 	bl	8e7c0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   8eaec:	12001c00 	and	w0, w0, #0xff
   8eaf0:	f9400bf3 	ldr	x19, [sp, #16]
   8eaf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8eaf8:	d65f03c0 	ret
   8eafc:	d503201f 	nop

000000000008eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   8eb00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8eb04:	910003fd 	mov	x29, sp
   8eb08:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eb0c:	2a0203f6 	mov	w22, w2
   8eb10:	9100f3e2 	add	x2, sp, #0x3c
   8eb14:	2a0103f5 	mov	w21, w1
   8eb18:	a90153f3 	stp	x19, x20, [sp, #16]
   8eb1c:	2a0303f3 	mov	w19, w3
   8eb20:	aa0003f4 	mov	x20, x0
   8eb24:	97fffec3 	bl	8e630 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   8eb28:	72001c00 	ands	w0, w0, #0xff
   8eb2c:	54000120 	b.eq	8eb50 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x50>  // b.none
   8eb30:	b9403fe3 	ldr	w3, [sp, #60]
   8eb34:	2a1503e1 	mov	w1, w21
   8eb38:	aa1403e0 	mov	x0, x20
   8eb3c:	0a030263 	and	w3, w19, w3
   8eb40:	2a160062 	orr	w2, w3, w22
   8eb44:	b9003fe2 	str	w2, [sp, #60]
   8eb48:	97fffe92 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8eb4c:	12001c00 	and	w0, w0, #0xff
   8eb50:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eb54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eb58:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8eb5c:	d65f03c0 	ret

000000000008eb60 <CLAN7800Device::InitMACAddress()>:
   8eb60:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8eb64:	910003fd 	mov	x29, sp
   8eb68:	52800001 	mov	w1, #0x0                   	// #0
   8eb6c:	a90153f3 	stp	x19, x20, [sp, #16]
   8eb70:	aa0003f3 	mov	x19, x0
   8eb74:	9100c3e0 	add	x0, sp, #0x30
   8eb78:	940036e6 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8eb7c:	9100c3e0 	add	x0, sp, #0x30
   8eb80:	9100e3e2 	add	x2, sp, #0x38
   8eb84:	52800061 	mov	w1, #0x3                   	// #3
   8eb88:	72a00021 	movk	w1, #0x1, lsl #16
   8eb8c:	52800004 	mov	w4, #0x0                   	// #0
   8eb90:	52800283 	mov	w3, #0x14                  	// #20
   8eb94:	940036e7 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8eb98:	72001c1f 	tst	w0, #0xff
   8eb9c:	54000101 	b.ne	8ebbc <CLAN7800Device::InitMACAddress()+0x5c>  // b.any
   8eba0:	52800013 	mov	w19, #0x0                   	// #0
   8eba4:	9100c3e0 	add	x0, sp, #0x30
   8eba8:	940036de 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   8ebac:	2a1303e0 	mov	w0, w19
   8ebb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ebb4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8ebb8:	d65f03c0 	ret
   8ebbc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ebc0:	9100e275 	add	x21, x19, #0x38
   8ebc4:	910113e1 	add	x1, sp, #0x44
   8ebc8:	aa1503e0 	mov	x0, x21
   8ebcc:	94005981 	bl	a51d0 <CMACAddress::Set(unsigned char const*)>
   8ebd0:	b94047f4 	ldr	w20, [sp, #68]
   8ebd4:	52802381 	mov	w1, #0x11c                 	// #284
   8ebd8:	aa1303e0 	mov	x0, x19
   8ebdc:	794093f6 	ldrh	w22, [sp, #72]
   8ebe0:	2a1403e2 	mov	w2, w20
   8ebe4:	97fffe6b 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ebe8:	72001c1f 	tst	w0, #0xff
   8ebec:	540000e0 	b.eq	8ec08 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   8ebf0:	2a1603e2 	mov	w2, w22
   8ebf4:	52802301 	mov	w1, #0x118                 	// #280
   8ebf8:	aa1303e0 	mov	x0, x19
   8ebfc:	97fffe65 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ec00:	72001c1f 	tst	w0, #0xff
   8ec04:	54000061 	b.ne	8ec10 <CLAN7800Device::InitMACAddress()+0xb0>  // b.any
   8ec08:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ec0c:	17ffffe5 	b	8eba0 <CLAN7800Device::InitMACAddress()+0x40>
   8ec10:	2a1403e2 	mov	w2, w20
   8ec14:	52808081 	mov	w1, #0x404                 	// #1028
   8ec18:	aa1303e0 	mov	x0, x19
   8ec1c:	97fffe5d 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ec20:	72001c1f 	tst	w0, #0xff
   8ec24:	54ffff20 	b.eq	8ec08 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   8ec28:	aa1303e0 	mov	x0, x19
   8ec2c:	320102c2 	orr	w2, w22, #0x80000000
   8ec30:	52808001 	mov	w1, #0x400                 	// #1024
   8ec34:	97fffe57 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ec38:	72001c13 	ands	w19, w0, #0xff
   8ec3c:	54fffe60 	b.eq	8ec08 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   8ec40:	910143e0 	add	x0, sp, #0x50
   8ec44:	94004c7b 	bl	a1e30 <CString::CString()>
   8ec48:	910143e1 	add	x1, sp, #0x50
   8ec4c:	aa1503e0 	mov	x0, x21
   8ec50:	940059c8 	bl	a5370 <CMACAddress::Format(CString*) const>
   8ec54:	9400401f 	bl	9ecd0 <CLogger::Get()>
   8ec58:	aa0003f4 	mov	x20, x0
   8ec5c:	910143e0 	add	x0, sp, #0x50
   8ec60:	94004c90 	bl	a1ea0 <CString::operator char const*() const>
   8ec64:	b0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8ec68:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ec6c:	aa0003e4 	mov	x4, x0
   8ec70:	911ee063 	add	x3, x3, #0x7b8
   8ec74:	aa1403e0 	mov	x0, x20
   8ec78:	91248021 	add	x1, x1, #0x920
   8ec7c:	52800082 	mov	w2, #0x4                   	// #4
   8ec80:	94003f50 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ec84:	910143e0 	add	x0, sp, #0x50
   8ec88:	94004c2e 	bl	a1d40 <CString::~CString()>
   8ec8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ec90:	17ffffc5 	b	8eba4 <CLAN7800Device::InitMACAddress()+0x44>
   8ec94:	d503201f 	nop
   8ec98:	d503201f 	nop
   8ec9c:	d503201f 	nop

000000000008eca0 <CLAN7800Device::Configure()>:
   8eca0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8eca4:	910003fd 	mov	x29, sp
   8eca8:	a90153f3 	stp	x19, x20, [sp, #16]
   8ecac:	aa0003f4 	mov	x20, x0
   8ecb0:	97ffe44c 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8ecb4:	12001c00 	and	w0, w0, #0xff
   8ecb8:	71000c1f 	cmp	w0, #0x3
   8ecbc:	540000c0 	b.eq	8ecd4 <CLAN7800Device::Configure()+0x34>  // b.none
   8ecc0:	14000029 	b	8ed64 <CLAN7800Device::Configure()+0xc4>
   8ecc4:	39400c01 	ldrb	w1, [x0, #3]
   8ecc8:	12001421 	and	w1, w1, #0x3f
   8eccc:	7100083f 	cmp	w1, #0x2
   8ecd0:	540005c0 	b.eq	8ed88 <CLAN7800Device::Configure()+0xe8>  // b.none
   8ecd4:	528000a1 	mov	w1, #0x5                   	// #5
   8ecd8:	aa1403e0 	mov	x0, x20
   8ecdc:	97ffe471 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8ece0:	aa0003f3 	mov	x19, x0
   8ece4:	b5ffff00 	cbnz	x0, 8ecc4 <CLAN7800Device::Configure()+0x24>
   8ece8:	f9401680 	ldr	x0, [x20, #40]
   8ecec:	b40003c0 	cbz	x0, 8ed64 <CLAN7800Device::Configure()+0xc4>
   8ecf0:	f9401a80 	ldr	x0, [x20, #48]
   8ecf4:	b4000380 	cbz	x0, 8ed64 <CLAN7800Device::Configure()+0xc4>
   8ecf8:	aa1403e0 	mov	x0, x20
   8ecfc:	97ffe375 	bl	87ad0 <CUSBFunction::Configure()>
   8ed00:	72001c13 	ands	w19, w0, #0xff
   8ed04:	54001a80 	b.eq	8f054 <CLAN7800Device::Configure()+0x3b4>  // b.none
   8ed08:	9100f3e2 	add	x2, sp, #0x3c
   8ed0c:	52800001 	mov	w1, #0x0                   	// #0
   8ed10:	aa1403e0 	mov	x0, x20
   8ed14:	97fffe47 	bl	8e630 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   8ed18:	72001c1f 	tst	w0, #0xff
   8ed1c:	540000a0 	b.eq	8ed30 <CLAN7800Device::Configure()+0x90>  // b.none
   8ed20:	79407fe1 	ldrh	w1, [sp, #62]
   8ed24:	528f0000 	mov	w0, #0x7800                	// #30720
   8ed28:	6b00003f 	cmp	w1, w0
   8ed2c:	540006c0 	b.eq	8ee04 <CLAN7800Device::Configure()+0x164>  // b.none
   8ed30:	94003fe8 	bl	9ecd0 <CLogger::Get()>
   8ed34:	b0000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8ed38:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ed3c:	79407fe4 	ldrh	w4, [sp, #62]
   8ed40:	911f4063 	add	x3, x3, #0x7d0
   8ed44:	91248021 	add	x1, x1, #0x920
   8ed48:	52800022 	mov	w2, #0x1                   	// #1
   8ed4c:	52800013 	mov	w19, #0x0                   	// #0
   8ed50:	94003f1c 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ed54:	2a1303e0 	mov	w0, w19
   8ed58:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ed5c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ed60:	d65f03c0 	ret
   8ed64:	aa1403e0 	mov	x0, x20
   8ed68:	b0000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ed6c:	91248021 	add	x1, x1, #0x920
   8ed70:	52800013 	mov	w19, #0x0                   	// #0
   8ed74:	97ffe457 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8ed78:	2a1303e0 	mov	w0, w19
   8ed7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ed80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ed84:	d65f03c0 	ret
   8ed88:	39c00a61 	ldrsb	w1, [x19, #2]
   8ed8c:	aa1403e0 	mov	x0, x20
   8ed90:	37f801e1 	tbnz	w1, #31, 8edcc <CLAN7800Device::Configure()+0x12c>
   8ed94:	f9401a81 	ldr	x1, [x20, #48]
   8ed98:	b5fffe61 	cbnz	x1, 8ed64 <CLAN7800Device::Configure()+0xc4>
   8ed9c:	f90013f5 	str	x21, [sp, #32]
   8eda0:	97ffe41c 	bl	87e10 <CUSBFunction::GetDevice() const>
   8eda4:	aa0003f5 	mov	x21, x0
   8eda8:	d2800400 	mov	x0, #0x20                  	// #32
   8edac:	94005a35 	bl	a5680 <operator new(unsigned long)>
   8edb0:	aa1503e1 	mov	x1, x21
   8edb4:	aa0003f5 	mov	x21, x0
   8edb8:	aa1303e2 	mov	x2, x19
   8edbc:	97ffe275 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8edc0:	f9001a95 	str	x21, [x20, #48]
   8edc4:	f94013f5 	ldr	x21, [sp, #32]
   8edc8:	17ffffc3 	b	8ecd4 <CLAN7800Device::Configure()+0x34>
   8edcc:	f9401681 	ldr	x1, [x20, #40]
   8edd0:	b5fffcc1 	cbnz	x1, 8ed68 <CLAN7800Device::Configure()+0xc8>
   8edd4:	f90013f5 	str	x21, [sp, #32]
   8edd8:	97ffe40e 	bl	87e10 <CUSBFunction::GetDevice() const>
   8eddc:	aa0003f5 	mov	x21, x0
   8ede0:	d2800400 	mov	x0, #0x20                  	// #32
   8ede4:	94005a27 	bl	a5680 <operator new(unsigned long)>
   8ede8:	aa1503e1 	mov	x1, x21
   8edec:	aa0003f5 	mov	x21, x0
   8edf0:	aa1303e2 	mov	x2, x19
   8edf4:	97ffe267 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8edf8:	f9001695 	str	x21, [x20, #40]
   8edfc:	f94013f5 	ldr	x21, [sp, #32]
   8ee00:	17ffffb5 	b	8ecd4 <CLAN7800Device::Configure()+0x34>
   8ee04:	12800003 	mov	w3, #0xffffffff            	// #-1
   8ee08:	52800042 	mov	w2, #0x2                   	// #2
   8ee0c:	52800201 	mov	w1, #0x10                  	// #16
   8ee10:	aa1403e0 	mov	x0, x20
   8ee14:	97ffff3b 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8ee18:	72001c1f 	tst	w0, #0xff
   8ee1c:	54001320 	b.eq	8f080 <CLAN7800Device::Configure()+0x3e0>  // b.none
   8ee20:	52800c85 	mov	w5, #0x64                  	// #100
   8ee24:	52807d04 	mov	w4, #0x3e8                 	// #1000
   8ee28:	52800003 	mov	w3, #0x0                   	// #0
   8ee2c:	52800042 	mov	w2, #0x2                   	// #2
   8ee30:	52800201 	mov	w1, #0x10                  	// #16
   8ee34:	aa1403e0 	mov	x0, x20
   8ee38:	97fffe26 	bl	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8ee3c:	72001c1f 	tst	w0, #0xff
   8ee40:	54001200 	b.eq	8f080 <CLAN7800Device::Configure()+0x3e0>  // b.none
   8ee44:	aa1403e0 	mov	x0, x20
   8ee48:	97ffff46 	bl	8eb60 <CLAN7800Device::InitMACAddress()>
   8ee4c:	72001c13 	ands	w19, w0, #0xff
   8ee50:	540012e0 	b.eq	8f0ac <CLAN7800Device::Configure()+0x40c>  // b.none
   8ee54:	52800302 	mov	w2, #0x18                  	// #24
   8ee58:	52801201 	mov	w1, #0x90                  	// #144
   8ee5c:	aa1403e0 	mov	x0, x20
   8ee60:	97fffdcc 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ee64:	72001c1f 	tst	w0, #0xff
   8ee68:	540011e0 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ee6c:	52810002 	mov	w2, #0x800                 	// #2048
   8ee70:	52801281 	mov	w1, #0x94                  	// #148
   8ee74:	aa1403e0 	mov	x0, x20
   8ee78:	97fffdc6 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ee7c:	72001c1f 	tst	w0, #0xff
   8ee80:	54001120 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ee84:	12800203 	mov	w3, #0xffffffef            	// #-17
   8ee88:	52a00602 	mov	w2, #0x300000              	// #3145728
   8ee8c:	52800201 	mov	w1, #0x10                  	// #16
   8ee90:	aa1403e0 	mov	x0, x20
   8ee94:	97ffff1b 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8ee98:	72001c1f 	tst	w0, #0xff
   8ee9c:	54001040 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8eea0:	12800803 	mov	w3, #0xffffffbf            	// #-65
   8eea4:	52800402 	mov	w2, #0x20                  	// #32
   8eea8:	52801001 	mov	w1, #0x80                  	// #128
   8eeac:	aa1403e0 	mov	x0, x20
   8eeb0:	97ffff14 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8eeb4:	72001c1f 	tst	w0, #0xff
   8eeb8:	54000f60 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8eebc:	528002e2 	mov	w2, #0x17                  	// #23
   8eec0:	52801901 	mov	w1, #0xc8                  	// #200
   8eec4:	aa1403e0 	mov	x0, x20
   8eec8:	97fffdb2 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8eecc:	72001c1f 	tst	w0, #0xff
   8eed0:	54000ea0 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8eed4:	528002e2 	mov	w2, #0x17                  	// #23
   8eed8:	52801981 	mov	w1, #0xcc                  	// #204
   8eedc:	aa1403e0 	mov	x0, x20
   8eee0:	97fffdac 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8eee4:	72001c1f 	tst	w0, #0xff
   8eee8:	54000de0 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8eeec:	52800002 	mov	w2, #0x0                   	// #0
   8eef0:	52801301 	mov	w1, #0x98                  	// #152
   8eef4:	aa1403e0 	mov	x0, x20
   8eef8:	97fffda6 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8eefc:	72001c1f 	tst	w0, #0xff
   8ef00:	54000d20 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ef04:	12800002 	mov	w2, #0xffffffff            	// #-1
   8ef08:	52800181 	mov	w1, #0xc                   	// #12
   8ef0c:	aa1403e0 	mov	x0, x20
   8ef10:	97fffda0 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ef14:	72001c1f 	tst	w0, #0xff
   8ef18:	54000c60 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ef1c:	52800002 	mov	w2, #0x0                   	// #0
   8ef20:	52802181 	mov	w1, #0x10c                 	// #268
   8ef24:	aa1403e0 	mov	x0, x20
   8ef28:	97fffd9a 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ef2c:	72001c1f 	tst	w0, #0xff
   8ef30:	54000ba0 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ef34:	52800002 	mov	w2, #0x0                   	// #0
   8ef38:	52801a01 	mov	w1, #0xd0                  	// #208
   8ef3c:	aa1403e0 	mov	x0, x20
   8ef40:	97fffd94 	bl	8e590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   8ef44:	72001c1f 	tst	w0, #0xff
   8ef48:	54000ae0 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ef4c:	12800003 	mov	w3, #0xffffffff            	// #-1
   8ef50:	52808042 	mov	w2, #0x402                 	// #1026
   8ef54:	52801601 	mov	w1, #0xb0                  	// #176
   8ef58:	aa1403e0 	mov	x0, x20
   8ef5c:	97fffee9 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8ef60:	72001c1f 	tst	w0, #0xff
   8ef64:	54000a00 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8ef68:	12800003 	mov	w3, #0xffffffff            	// #-1
   8ef6c:	52800202 	mov	w2, #0x10                  	// #16
   8ef70:	52800281 	mov	w1, #0x14                  	// #20
   8ef74:	aa1403e0 	mov	x0, x20
   8ef78:	97fffee2 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8ef7c:	72001c1f 	tst	w0, #0xff
   8ef80:	54000b60 	b.eq	8f0ec <CLAN7800Device::Configure()+0x44c>  // b.none
   8ef84:	52800c85 	mov	w5, #0x64                  	// #100
   8ef88:	52807d04 	mov	w4, #0x3e8                 	// #1000
   8ef8c:	52801003 	mov	w3, #0x80                  	// #128
   8ef90:	52801202 	mov	w2, #0x90                  	// #144
   8ef94:	52800281 	mov	w1, #0x14                  	// #20
   8ef98:	aa1403e0 	mov	x0, x20
   8ef9c:	97fffdcd 	bl	8e6d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   8efa0:	72001c1f 	tst	w0, #0xff
   8efa4:	54000a40 	b.eq	8f0ec <CLAN7800Device::Configure()+0x44c>  // b.none
   8efa8:	12800003 	mov	w3, #0xffffffff            	// #-1
   8efac:	52830002 	mov	w2, #0x1800                	// #6144
   8efb0:	52802001 	mov	w1, #0x100                 	// #256
   8efb4:	aa1403e0 	mov	x0, x20
   8efb8:	97fffed2 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8efbc:	72001c1f 	tst	w0, #0xff
   8efc0:	54000720 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8efc4:	12800003 	mov	w3, #0xffffffff            	// #-1
   8efc8:	52800022 	mov	w2, #0x1                   	// #1
   8efcc:	52802101 	mov	w1, #0x108                 	// #264
   8efd0:	aa1403e0 	mov	x0, x20
   8efd4:	97fffecb 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8efd8:	72001c1f 	tst	w0, #0xff
   8efdc:	54000640 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8efe0:	12800003 	mov	w3, #0xffffffff            	// #-1
   8efe4:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   8efe8:	52801881 	mov	w1, #0xc4                  	// #196
   8efec:	aa1403e0 	mov	x0, x20
   8eff0:	97fffec4 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8eff4:	72001c1f 	tst	w0, #0xff
   8eff8:	54000560 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8effc:	52800022 	mov	w2, #0x1                   	// #1
   8f000:	72a0bdc2 	movk	w2, #0x5ee, lsl #16
   8f004:	12a7ffe3 	mov	w3, #0xc000ffff            	// #-1073676289
   8f008:	52802081 	mov	w1, #0x104                 	// #260
   8f00c:	aa1403e0 	mov	x0, x20
   8f010:	97fffebc 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8f014:	72001c1f 	tst	w0, #0xff
   8f018:	54000460 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8f01c:	12800003 	mov	w3, #0xffffffff            	// #-1
   8f020:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   8f024:	52801801 	mov	w1, #0xc0                  	// #192
   8f028:	aa1403e0 	mov	x0, x20
   8f02c:	97fffeb5 	bl	8eb00 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   8f030:	72001c1f 	tst	w0, #0xff
   8f034:	54000380 	b.eq	8f0a4 <CLAN7800Device::Configure()+0x404>  // b.none
   8f038:	aa1403e0 	mov	x0, x20
   8f03c:	97fffe91 	bl	8ea80 <CLAN7800Device::InitPHY()>
   8f040:	72001c13 	ands	w19, w0, #0xff
   8f044:	54000440 	b.eq	8f0cc <CLAN7800Device::Configure()+0x42c>  // b.none
   8f048:	91008280 	add	x0, x20, #0x20
   8f04c:	940058e9 	bl	a53f0 <CNetDevice::AddNetDevice()>
   8f050:	17ffff4a 	b	8ed78 <CLAN7800Device::Configure()+0xd8>
   8f054:	94003f1f 	bl	9ecd0 <CLogger::Get()>
   8f058:	f00000e3 	adrp	x3, ae000 <FromDevice+0x108>
   8f05c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f060:	9104a063 	add	x3, x3, #0x128
   8f064:	91248021 	add	x1, x1, #0x920
   8f068:	52800022 	mov	w2, #0x1                   	// #1
   8f06c:	94003e55 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f070:	2a1303e0 	mov	w0, w19
   8f074:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f078:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8f07c:	d65f03c0 	ret
   8f080:	94003f14 	bl	9ecd0 <CLogger::Get()>
   8f084:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f088:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f08c:	911fa063 	add	x3, x3, #0x7e8
   8f090:	91248021 	add	x1, x1, #0x920
   8f094:	52800022 	mov	w2, #0x1                   	// #1
   8f098:	52800013 	mov	w19, #0x0                   	// #0
   8f09c:	94003e49 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f0a0:	17ffff36 	b	8ed78 <CLAN7800Device::Configure()+0xd8>
   8f0a4:	52800013 	mov	w19, #0x0                   	// #0
   8f0a8:	17ffff34 	b	8ed78 <CLAN7800Device::Configure()+0xd8>
   8f0ac:	94003f09 	bl	9ecd0 <CLogger::Get()>
   8f0b0:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f0b4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f0b8:	911fe063 	add	x3, x3, #0x7f8
   8f0bc:	91248021 	add	x1, x1, #0x920
   8f0c0:	52800022 	mov	w2, #0x1                   	// #1
   8f0c4:	94003e3f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f0c8:	17ffff2c 	b	8ed78 <CLAN7800Device::Configure()+0xd8>
   8f0cc:	94003f01 	bl	9ecd0 <CLogger::Get()>
   8f0d0:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f0d4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f0d8:	9120a063 	add	x3, x3, #0x828
   8f0dc:	91248021 	add	x1, x1, #0x920
   8f0e0:	52800022 	mov	w2, #0x1                   	// #1
   8f0e4:	94003e37 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f0e8:	17ffff24 	b	8ed78 <CLAN7800Device::Configure()+0xd8>
   8f0ec:	94003ef9 	bl	9ecd0 <CLogger::Get()>
   8f0f0:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f0f4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f0f8:	91204063 	add	x3, x3, #0x810
   8f0fc:	91248021 	add	x1, x1, #0x920
   8f100:	52800022 	mov	w2, #0x1                   	// #1
   8f104:	52800013 	mov	w19, #0x0                   	// #0
   8f108:	94003e2e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f10c:	17ffff1b 	b	8ed78 <CLAN7800Device::Configure()+0xd8>

000000000008f110 <CNetDevice::GetType()>:
   8f110:	52800000 	mov	w0, #0x0                   	// #0
   8f114:	d65f03c0 	ret
	...

000000000008f120 <CNetDevice::IsSendFrameAdvisable()>:
   8f120:	52800020 	mov	w0, #0x1                   	// #1
   8f124:	d65f03c0 	ret
	...

000000000008f130 <CNetDevice::UpdatePHY()>:
   8f130:	52800000 	mov	w0, #0x0                   	// #0
   8f134:	d65f03c0 	ret
	...

000000000008f140 <CSMSC951xDevice::GetMACAddress() const>:
   8f140:	9100e000 	add	x0, x0, #0x38
   8f144:	d65f03c0 	ret
   8f148:	d503201f 	nop
   8f14c:	d503201f 	nop

000000000008f150 <CSMSC951xDevice::~CSMSC951xDevice()>:
   8f150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f154:	90000102 	adrp	x2, af000 <FromUmsd+0xb0>
   8f158:	912aa042 	add	x2, x2, #0xaa8
   8f15c:	910003fd 	mov	x29, sp
   8f160:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f164:	912cc021 	add	x1, x1, #0xb30
   8f168:	a90153f3 	stp	x19, x20, [sp, #16]
   8f16c:	aa0003f3 	mov	x19, x0
   8f170:	f9000002 	str	x2, [x0]
   8f174:	f9001001 	str	x1, [x0, #32]
   8f178:	f9401814 	ldr	x20, [x0, #48]
   8f17c:	b40000d4 	cbz	x20, 8f194 <CSMSC951xDevice::~CSMSC951xDevice()+0x44>
   8f180:	aa1403e0 	mov	x0, x20
   8f184:	97ffe1d3 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8f188:	aa1403e0 	mov	x0, x20
   8f18c:	d2800401 	mov	x1, #0x20                  	// #32
   8f190:	94005960 	bl	a5710 <operator delete(void*, unsigned long)>
   8f194:	f9001a7f 	str	xzr, [x19, #48]
   8f198:	f9401674 	ldr	x20, [x19, #40]
   8f19c:	b40000d4 	cbz	x20, 8f1b4 <CSMSC951xDevice::~CSMSC951xDevice()+0x64>
   8f1a0:	aa1403e0 	mov	x0, x20
   8f1a4:	97ffe1cb 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8f1a8:	aa1403e0 	mov	x0, x20
   8f1ac:	d2800401 	mov	x1, #0x20                  	// #32
   8f1b0:	94005958 	bl	a5710 <operator delete(void*, unsigned long)>
   8f1b4:	9100e260 	add	x0, x19, #0x38
   8f1b8:	f900167f 	str	xzr, [x19, #40]
   8f1bc:	940057dd 	bl	a5130 <CMACAddress::~CMACAddress()>
   8f1c0:	aa1303e0 	mov	x0, x19
   8f1c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f1c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f1cc:	17ffe215 	b	87a20 <CUSBFunction::~CUSBFunction()>

000000000008f1d0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   8f1d0:	d1008000 	sub	x0, x0, #0x20
   8f1d4:	17ffffdf 	b	8f150 <CSMSC951xDevice::~CSMSC951xDevice()>
   8f1d8:	d503201f 	nop
   8f1dc:	d503201f 	nop

000000000008f1e0 <CSMSC951xDevice::~CSMSC951xDevice()>:
   8f1e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f1e4:	910003fd 	mov	x29, sp
   8f1e8:	f9000bf3 	str	x19, [sp, #16]
   8f1ec:	aa0003f3 	mov	x19, x0
   8f1f0:	97ffffd8 	bl	8f150 <CSMSC951xDevice::~CSMSC951xDevice()>
   8f1f4:	aa1303e0 	mov	x0, x19
   8f1f8:	d2800801 	mov	x1, #0x40                  	// #64
   8f1fc:	f9400bf3 	ldr	x19, [sp, #16]
   8f200:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f204:	14005943 	b	a5710 <operator delete(void*, unsigned long)>
   8f208:	d503201f 	nop
   8f20c:	d503201f 	nop

000000000008f210 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   8f210:	d1008000 	sub	x0, x0, #0x20
   8f214:	17fffff3 	b	8f1e0 <CSMSC951xDevice::~CSMSC951xDevice()>
   8f218:	d503201f 	nop
   8f21c:	d503201f 	nop

000000000008f220 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   8f220:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   8f224:	910003fd 	mov	x29, sp
   8f228:	a90153f3 	stp	x19, x20, [sp, #16]
   8f22c:	aa0103f3 	mov	x19, x1
   8f230:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f234:	f9401401 	ldr	x1, [x0, #40]
   8f238:	b4000621 	cbz	x1, 8f2fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   8f23c:	b40006d3 	cbz	x19, 8f314 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   8f240:	aa0003f4 	mov	x20, x0
   8f244:	d2800004 	mov	x4, #0x0                   	// #0
   8f248:	5280c803 	mov	w3, #0x640                 	// #1600
   8f24c:	9100e3e0 	add	x0, sp, #0x38
   8f250:	aa0203f6 	mov	x22, x2
   8f254:	aa1303e2 	mov	x2, x19
   8f258:	97fff672 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8f25c:	aa1403e0 	mov	x0, x20
   8f260:	97ffe304 	bl	87e70 <CUSBFunction::GetHost() const>
   8f264:	f9400003 	ldr	x3, [x0]
   8f268:	9100e3e1 	add	x1, sp, #0x38
   8f26c:	52800002 	mov	w2, #0x0                   	// #0
   8f270:	f9400863 	ldr	x3, [x3, #16]
   8f274:	d63f0060 	blr	x3
   8f278:	72001c14 	ands	w20, w0, #0xff
   8f27c:	54000121 	b.ne	8f2a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   8f280:	52800014 	mov	w20, #0x0                   	// #0
   8f284:	9100e3e0 	add	x0, sp, #0x38
   8f288:	97fff682 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   8f28c:	2a1403e0 	mov	w0, w20
   8f290:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f294:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f298:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8f29c:	d65f03c0 	ret
   8f2a0:	9100e3e0 	add	x0, sp, #0x38
   8f2a4:	97fff697 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   8f2a8:	71000c1f 	cmp	w0, #0x3
   8f2ac:	54fffea9 	b.ls	8f280 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x60>  // b.plast
   8f2b0:	b9400275 	ldr	w21, [x19]
   8f2b4:	52921bc1 	mov	w1, #0x90de                	// #37086
   8f2b8:	72a80001 	movk	w1, #0x4000, lsl #16
   8f2bc:	6a0102bf 	tst	w21, w1
   8f2c0:	54000361 	b.ne	8f32c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x10c>  // b.any
   8f2c4:	d35076b5 	ubfx	x21, x21, #16, #14
   8f2c8:	51001000 	sub	w0, w0, #0x4
   8f2cc:	6b15001f 	cmp	w0, w21
   8f2d0:	54000401 	b.ne	8f350 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>  // b.any
   8f2d4:	7100101f 	cmp	w0, #0x4
   8f2d8:	54000489 	b.ls	8f368 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x148>  // b.plast
   8f2dc:	51001002 	sub	w2, w0, #0x4
   8f2e0:	91001261 	add	x1, x19, #0x4
   8f2e4:	aa1303e0 	mov	x0, x19
   8f2e8:	aa0203f5 	mov	x21, x2
   8f2ec:	94005683 	bl	a4cf8 <memcpy>
   8f2f0:	b4000496 	cbz	x22, 8f380 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   8f2f4:	b90002d5 	str	w21, [x22]
   8f2f8:	17ffffe3 	b	8f284 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   8f2fc:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f300:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f304:	91252021 	add	x1, x1, #0x948
   8f308:	9119e000 	add	x0, x0, #0x678
   8f30c:	52802262 	mov	w2, #0x113                 	// #275
   8f310:	940034dc 	bl	9c680 <assertion_failed>
   8f314:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f318:	f00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   8f31c:	91252021 	add	x1, x1, #0x948
   8f320:	91326000 	add	x0, x0, #0xc98
   8f324:	52802282 	mov	w2, #0x114                 	// #276
   8f328:	940034d6 	bl	9c680 <assertion_failed>
   8f32c:	94003e69 	bl	9ecd0 <CLogger::Get()>
   8f330:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f334:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f338:	2a1503e4 	mov	w4, w21
   8f33c:	911a4063 	add	x3, x3, #0x690
   8f340:	912e0021 	add	x1, x1, #0xb80
   8f344:	52800042 	mov	w2, #0x2                   	// #2
   8f348:	94003d9e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f34c:	17ffffcd 	b	8f280 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x60>
   8f350:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f354:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f358:	91252021 	add	x1, x1, #0x948
   8f35c:	91256000 	add	x0, x0, #0x958
   8f360:	52802562 	mov	w2, #0x12b                 	// #299
   8f364:	940034c7 	bl	9c680 <assertion_failed>
   8f368:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f36c:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f370:	91252021 	add	x1, x1, #0x948
   8f374:	911b6000 	add	x0, x0, #0x6d8
   8f378:	52802582 	mov	w2, #0x12c                 	// #300
   8f37c:	940034c1 	bl	9c680 <assertion_failed>
   8f380:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f384:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f388:	91252021 	add	x1, x1, #0x948
   8f38c:	911bc000 	add	x0, x0, #0x6f0
   8f390:	528026e2 	mov	w2, #0x137                 	// #311
   8f394:	940034bb 	bl	9c680 <assertion_failed>
   8f398:	d503201f 	nop
   8f39c:	d503201f 	nop

000000000008f3a0 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   8f3a0:	d1008000 	sub	x0, x0, #0x20
   8f3a4:	17ffff9f 	b	8f220 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>
   8f3a8:	d503201f 	nop
   8f3ac:	d503201f 	nop

000000000008f3b0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   8f3b0:	7119005f 	cmp	w2, #0x640
   8f3b4:	54000388 	b.hi	8f424 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x74>  // b.pmore
   8f3b8:	d119c3ff 	sub	sp, sp, #0x670
   8f3bc:	a9007bfd 	stp	x29, x30, [sp]
   8f3c0:	910003fd 	mov	x29, sp
   8f3c4:	a90153f3 	stp	x19, x20, [sp, #16]
   8f3c8:	aa0003f4 	mov	x20, x0
   8f3cc:	b4000301 	cbz	x1, 8f42c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x7c>
   8f3d0:	2a0203f3 	mov	w19, w2
   8f3d4:	9100c3e0 	add	x0, sp, #0x30
   8f3d8:	2a0203e2 	mov	w2, w2
   8f3dc:	94005647 	bl	a4cf8 <memcpy>
   8f3e0:	32140660 	orr	w0, w19, #0x3000
   8f3e4:	f9401a81 	ldr	x1, [x20, #48]
   8f3e8:	29054fe0 	stp	w0, w19, [sp, #40]
   8f3ec:	b40002c1 	cbz	x1, 8f444 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x94>
   8f3f0:	aa1403e0 	mov	x0, x20
   8f3f4:	97ffe29f 	bl	87e70 <CUSBFunction::GetHost() const>
   8f3f8:	11002263 	add	w3, w19, #0x8
   8f3fc:	9100a3e2 	add	x2, sp, #0x28
   8f400:	f9401a81 	ldr	x1, [x20, #48]
   8f404:	52800004 	mov	w4, #0x0                   	// #0
   8f408:	97ffef52 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8f40c:	2a2003e0 	mvn	w0, w0
   8f410:	a9407bfd 	ldp	x29, x30, [sp]
   8f414:	531f7c00 	lsr	w0, w0, #31
   8f418:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f41c:	9119c3ff 	add	sp, sp, #0x670
   8f420:	d65f03c0 	ret
   8f424:	52800000 	mov	w0, #0x0                   	// #0
   8f428:	d65f03c0 	ret
   8f42c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f430:	f00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   8f434:	91252021 	add	x1, x1, #0x948
   8f438:	91326000 	add	x0, x0, #0xc98
   8f43c:	528020c2 	mov	w2, #0x106                 	// #262
   8f440:	94003490 	bl	9c680 <assertion_failed>
   8f444:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f448:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f44c:	91252021 	add	x1, x1, #0x948
   8f450:	911c2000 	add	x0, x0, #0x708
   8f454:	528021a2 	mov	w2, #0x10d                 	// #269
   8f458:	9400348a 	bl	9c680 <assertion_failed>
   8f45c:	d503201f 	nop

000000000008f460 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   8f460:	d1008000 	sub	x0, x0, #0x20
   8f464:	17ffffd3 	b	8f3b0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>
   8f468:	d503201f 	nop
   8f46c:	d503201f 	nop

000000000008f470 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   8f470:	91006000 	add	x0, x0, #0x18
   8f474:	d65f03c0 	ret
   8f478:	d503201f 	nop
   8f47c:	d503201f 	nop

000000000008f480 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   8f480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f484:	910003fd 	mov	x29, sp
   8f488:	f9000bf3 	str	x19, [sp, #16]
   8f48c:	aa0003f3 	mov	x19, x0
   8f490:	97ffe1fc 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8f494:	90000102 	adrp	x2, af000 <FromUmsd+0xb0>
   8f498:	912aa042 	add	x2, x2, #0xaa8
   8f49c:	f9001a7f 	str	xzr, [x19, #48]
   8f4a0:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f4a4:	912cc021 	add	x1, x1, #0xb30
   8f4a8:	9100e260 	add	x0, x19, #0x38
   8f4ac:	f9000262 	str	x2, [x19]
   8f4b0:	a9027e61 	stp	x1, xzr, [x19, #32]
   8f4b4:	f9400bf3 	ldr	x19, [sp, #16]
   8f4b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f4bc:	14005719 	b	a5120 <CMACAddress::CMACAddress()>

000000000008f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   8f4c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8f4c4:	910003fd 	mov	x29, sp
   8f4c8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f4cc:	2a0103f4 	mov	w20, w1
   8f4d0:	f90013f5 	str	x21, [sp, #32]
   8f4d4:	aa0003f5 	mov	x21, x0
   8f4d8:	b9003fe2 	str	w2, [sp, #60]
   8f4dc:	97ffe265 	bl	87e70 <CUSBFunction::GetHost() const>
   8f4e0:	aa0003f3 	mov	x19, x0
   8f4e4:	aa1503e0 	mov	x0, x21
   8f4e8:	97ffe256 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8f4ec:	aa0003e1 	mov	x1, x0
   8f4f0:	2a1403e5 	mov	w5, w20
   8f4f4:	9100f3e6 	add	x6, sp, #0x3c
   8f4f8:	aa1303e0 	mov	x0, x19
   8f4fc:	52800087 	mov	w7, #0x4                   	// #4
   8f500:	52800004 	mov	w4, #0x0                   	// #0
   8f504:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   8f508:	52800802 	mov	w2, #0x40                  	// #64
   8f50c:	97ffeea5 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8f510:	2a2003e0 	mvn	w0, w0
   8f514:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f518:	531f7c00 	lsr	w0, w0, #31
   8f51c:	f94013f5 	ldr	x21, [sp, #32]
   8f520:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8f524:	d65f03c0 	ret
   8f528:	d503201f 	nop
   8f52c:	d503201f 	nop

000000000008f530 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   8f530:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f534:	910003fd 	mov	x29, sp
   8f538:	a90153f3 	stp	x19, x20, [sp, #16]
   8f53c:	2a0103f4 	mov	w20, w1
   8f540:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f544:	aa0203f5 	mov	x21, x2
   8f548:	aa0003f6 	mov	x22, x0
   8f54c:	97ffe249 	bl	87e70 <CUSBFunction::GetHost() const>
   8f550:	aa0003f3 	mov	x19, x0
   8f554:	aa1603e0 	mov	x0, x22
   8f558:	97ffe23a 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8f55c:	aa0003e1 	mov	x1, x0
   8f560:	aa1503e6 	mov	x6, x21
   8f564:	2a1403e5 	mov	w5, w20
   8f568:	aa1303e0 	mov	x0, x19
   8f56c:	52800087 	mov	w7, #0x4                   	// #4
   8f570:	52800004 	mov	w4, #0x0                   	// #0
   8f574:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   8f578:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   8f57c:	97ffee89 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8f580:	7100101f 	cmp	w0, #0x4
   8f584:	1a9f17e0 	cset	w0, eq  // eq = none
   8f588:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f58c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f590:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f594:	d65f03c0 	ret
   8f598:	d503201f 	nop
   8f59c:	d503201f 	nop

000000000008f5a0 <CSMSC951xDevice::PHYWaitNotBusy()>:
   8f5a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8f5a4:	910003fd 	mov	x29, sp
   8f5a8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f5ac:	f90013f5 	str	x21, [sp, #32]
   8f5b0:	aa0003f5 	mov	x21, x0
   8f5b4:	940053ab 	bl	a4460 <CTimer::Get()>
   8f5b8:	b40002e0 	cbz	x0, 8f614 <CSMSC951xDevice::PHYWaitNotBusy()+0x74>
   8f5bc:	aa0003f3 	mov	x19, x0
   8f5c0:	940050b4 	bl	a3890 <CTimer::GetTicks() const>
   8f5c4:	2a0003f4 	mov	w20, w0
   8f5c8:	14000009 	b	8f5ec <CSMSC951xDevice::PHYWaitNotBusy()+0x4c>
   8f5cc:	9100f3e2 	add	x2, sp, #0x3c
   8f5d0:	52802281 	mov	w1, #0x114                 	// #276
   8f5d4:	aa1503e0 	mov	x0, x21
   8f5d8:	97ffffd6 	bl	8f530 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   8f5dc:	72001c00 	ands	w0, w0, #0xff
   8f5e0:	54000100 	b.eq	8f600 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>  // b.none
   8f5e4:	b9403fe1 	ldr	w1, [sp, #60]
   8f5e8:	360000e1 	tbz	w1, #0, 8f604 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   8f5ec:	aa1303e0 	mov	x0, x19
   8f5f0:	940050a8 	bl	a3890 <CTimer::GetTicks() const>
   8f5f4:	4b140001 	sub	w1, w0, w20
   8f5f8:	71018c3f 	cmp	w1, #0x63
   8f5fc:	54fffe89 	b.ls	8f5cc <CSMSC951xDevice::PHYWaitNotBusy()+0x2c>  // b.plast
   8f600:	52800000 	mov	w0, #0x0                   	// #0
   8f604:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f608:	f94013f5 	ldr	x21, [sp, #32]
   8f60c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8f610:	d65f03c0 	ret
   8f614:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f618:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f61c:	91252021 	add	x1, x1, #0x948
   8f620:	911d8000 	add	x0, x0, #0x760
   8f624:	528031c2 	mov	w2, #0x18e                 	// #398
   8f628:	94003416 	bl	9c680 <assertion_failed>
   8f62c:	d503201f 	nop

000000000008f630 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   8f630:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f634:	910003fd 	mov	x29, sp
   8f638:	a90153f3 	stp	x19, x20, [sp, #16]
   8f63c:	12001c34 	and	w20, w1, #0xff
   8f640:	71007e9f 	cmp	w20, #0x1f
   8f644:	f90013f5 	str	x21, [sp, #32]
   8f648:	540003a8 	b.hi	8f6bc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x8c>  // b.pmore
   8f64c:	12003c55 	and	w21, w2, #0xffff
   8f650:	aa0003f3 	mov	x19, x0
   8f654:	97ffffd3 	bl	8f5a0 <CSMSC951xDevice::PHYWaitNotBusy()>
   8f658:	72001c1f 	tst	w0, #0xff
   8f65c:	540000c1 	b.ne	8f674 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x44>  // b.any
   8f660:	52800000 	mov	w0, #0x0                   	// #0
   8f664:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f668:	f94013f5 	ldr	x21, [sp, #32]
   8f66c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f670:	d65f03c0 	ret
   8f674:	2a1503e2 	mov	w2, w21
   8f678:	52802301 	mov	w1, #0x118                 	// #280
   8f67c:	aa1303e0 	mov	x0, x19
   8f680:	97ffff90 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8f684:	72001c1f 	tst	w0, #0xff
   8f688:	54fffec0 	b.eq	8f660 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>  // b.none
   8f68c:	52810062 	mov	w2, #0x803                 	// #2051
   8f690:	52802281 	mov	w1, #0x114                 	// #276
   8f694:	2a141842 	orr	w2, w2, w20, lsl #6
   8f698:	aa1303e0 	mov	x0, x19
   8f69c:	97ffff89 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8f6a0:	72001c1f 	tst	w0, #0xff
   8f6a4:	54fffde0 	b.eq	8f660 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>  // b.none
   8f6a8:	aa1303e0 	mov	x0, x19
   8f6ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f6b0:	f94013f5 	ldr	x21, [sp, #32]
   8f6b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f6b8:	17ffffba 	b	8f5a0 <CSMSC951xDevice::PHYWaitNotBusy()>
   8f6bc:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f6c0:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f6c4:	91252021 	add	x1, x1, #0x948
   8f6c8:	911dc000 	add	x0, x0, #0x770
   8f6cc:	52802c42 	mov	w2, #0x162                 	// #354
   8f6d0:	940033ec 	bl	9c680 <assertion_failed>
   8f6d4:	d503201f 	nop
   8f6d8:	d503201f 	nop
   8f6dc:	d503201f 	nop

000000000008f6e0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   8f6e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8f6e4:	910003fd 	mov	x29, sp
   8f6e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f6ec:	12001c34 	and	w20, w1, #0xff
   8f6f0:	71007e9f 	cmp	w20, #0x1f
   8f6f4:	f90013f5 	str	x21, [sp, #32]
   8f6f8:	54000488 	b.hi	8f788 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa8>  // b.pmore
   8f6fc:	aa0203f5 	mov	x21, x2
   8f700:	aa0003f3 	mov	x19, x0
   8f704:	97ffffa7 	bl	8f5a0 <CSMSC951xDevice::PHYWaitNotBusy()>
   8f708:	72001c00 	ands	w0, w0, #0xff
   8f70c:	540000a1 	b.ne	8f720 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x40>  // b.any
   8f710:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f714:	f94013f5 	ldr	x21, [sp, #32]
   8f718:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8f71c:	d65f03c0 	ret
   8f720:	52810022 	mov	w2, #0x801                 	// #2049
   8f724:	52802281 	mov	w1, #0x114                 	// #276
   8f728:	2a141842 	orr	w2, w2, w20, lsl #6
   8f72c:	aa1303e0 	mov	x0, x19
   8f730:	97ffff64 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8f734:	72001c1f 	tst	w0, #0xff
   8f738:	540000a0 	b.eq	8f74c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x6c>  // b.none
   8f73c:	aa1303e0 	mov	x0, x19
   8f740:	97ffff98 	bl	8f5a0 <CSMSC951xDevice::PHYWaitNotBusy()>
   8f744:	72001c1f 	tst	w0, #0xff
   8f748:	540000c1 	b.ne	8f760 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x80>  // b.any
   8f74c:	52800000 	mov	w0, #0x0                   	// #0
   8f750:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f754:	f94013f5 	ldr	x21, [sp, #32]
   8f758:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8f75c:	d65f03c0 	ret
   8f760:	aa1303e0 	mov	x0, x19
   8f764:	9100f3e2 	add	x2, sp, #0x3c
   8f768:	52802301 	mov	w1, #0x118                 	// #280
   8f76c:	97ffff71 	bl	8f530 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   8f770:	72001c00 	ands	w0, w0, #0xff
   8f774:	54fffec0 	b.eq	8f74c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x6c>  // b.none
   8f778:	b4000155 	cbz	x21, 8f7a0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   8f77c:	b9403fe1 	ldr	w1, [sp, #60]
   8f780:	790002a1 	strh	w1, [x21]
   8f784:	17ffffe3 	b	8f710 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   8f788:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f78c:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f790:	91252021 	add	x1, x1, #0x948
   8f794:	911dc000 	add	x0, x0, #0x770
   8f798:	52802ea2 	mov	w2, #0x175                 	// #373
   8f79c:	940033b9 	bl	9c680 <assertion_failed>
   8f7a0:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f7a4:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f7a8:	91252021 	add	x1, x1, #0x948
   8f7ac:	911e0000 	add	x0, x0, #0x780
   8f7b0:	528030a2 	mov	w2, #0x185                 	// #389
   8f7b4:	940033b3 	bl	9c680 <assertion_failed>
   8f7b8:	d503201f 	nop
   8f7bc:	d503201f 	nop

000000000008f7c0 <CSMSC951xDevice::IsLinkUp()>:
   8f7c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f7c4:	52800021 	mov	w1, #0x1                   	// #1
   8f7c8:	910003fd 	mov	x29, sp
   8f7cc:	91007be2 	add	x2, sp, #0x1e
   8f7d0:	97ffffc4 	bl	8f6e0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   8f7d4:	72001c00 	ands	w0, w0, #0xff
   8f7d8:	54000060 	b.eq	8f7e4 <CSMSC951xDevice::IsLinkUp()+0x24>  // b.none
   8f7dc:	79403fe0 	ldrh	w0, [sp, #30]
   8f7e0:	d3420800 	ubfx	x0, x0, #2, #1
   8f7e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f7e8:	d65f03c0 	ret
   8f7ec:	d503201f 	nop

000000000008f7f0 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   8f7f0:	d1008000 	sub	x0, x0, #0x20
   8f7f4:	17fffff3 	b	8f7c0 <CSMSC951xDevice::IsLinkUp()>
   8f7f8:	d503201f 	nop
   8f7fc:	d503201f 	nop

000000000008f800 <CSMSC951xDevice::GetLinkSpeed()>:
   8f800:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f804:	528003e1 	mov	w1, #0x1f                  	// #31
   8f808:	910003fd 	mov	x29, sp
   8f80c:	91007be2 	add	x2, sp, #0x1e
   8f810:	97ffffb4 	bl	8f6e0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   8f814:	72001c1f 	tst	w0, #0xff
   8f818:	54000200 	b.eq	8f858 <CSMSC951xDevice::GetLinkSpeed()+0x58>  // b.none
   8f81c:	79403fe1 	ldrh	w1, [sp, #30]
   8f820:	528000c0 	mov	w0, #0x6                   	// #6
   8f824:	366000a1 	tbz	w1, #12, 8f838 <CSMSC951xDevice::GetLinkSpeed()+0x38>
   8f828:	d3421021 	ubfx	x1, x1, #2, #3
   8f82c:	51000421 	sub	w1, w1, #0x1
   8f830:	7100143f 	cmp	w1, #0x5
   8f834:	54000069 	b.ls	8f840 <CSMSC951xDevice::GetLinkSpeed()+0x40>  // b.plast
   8f838:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f83c:	d65f03c0 	ret
   8f840:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8f844:	912e0000 	add	x0, x0, #0xb80
   8f848:	91004000 	add	x0, x0, #0x10
   8f84c:	b8615800 	ldr	w0, [x0, w1, uxtw #2]
   8f850:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f854:	d65f03c0 	ret
   8f858:	528000c0 	mov	w0, #0x6                   	// #6
   8f85c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f860:	d65f03c0 	ret
   8f864:	d503201f 	nop
   8f868:	d503201f 	nop
   8f86c:	d503201f 	nop

000000000008f870 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   8f870:	d1008000 	sub	x0, x0, #0x20
   8f874:	17ffffe3 	b	8f800 <CSMSC951xDevice::GetLinkSpeed()>
   8f878:	d503201f 	nop
   8f87c:	d503201f 	nop

000000000008f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   8f880:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f884:	910003fd 	mov	x29, sp
   8f888:	a90153f3 	stp	x19, x20, [sp, #16]
   8f88c:	2a0203f3 	mov	w19, w2
   8f890:	aa0103f4 	mov	x20, x1
   8f894:	9100b3e2 	add	x2, sp, #0x2c
   8f898:	2a1303e1 	mov	w1, w19
   8f89c:	97ffff25 	bl	8f530 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   8f8a0:	72001c1f 	tst	w0, #0xff
   8f8a4:	540001a0 	b.eq	8f8d8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x58>  // b.none
   8f8a8:	94003d0a 	bl	9ecd0 <CLogger::Get()>
   8f8ac:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f8b0:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f8b4:	b9402fe4 	ldr	w4, [sp, #44]
   8f8b8:	aa1403e5 	mov	x5, x20
   8f8bc:	9125e063 	add	x3, x3, #0x978
   8f8c0:	912e0021 	add	x1, x1, #0xb80
   8f8c4:	52800082 	mov	w2, #0x4                   	// #4
   8f8c8:	94003c3e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f8cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f8d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f8d4:	d65f03c0 	ret
   8f8d8:	94003cfe 	bl	9ecd0 <CLogger::Get()>
   8f8dc:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8f8e0:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f8e4:	2a1303e4 	mov	w4, w19
   8f8e8:	911d0063 	add	x3, x3, #0x740
   8f8ec:	912e0021 	add	x1, x1, #0xb80
   8f8f0:	52800022 	mov	w2, #0x1                   	// #1
   8f8f4:	94003c33 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f8f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f8fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f900:	d65f03c0 	ret
   8f904:	d503201f 	nop
   8f908:	d503201f 	nop
   8f90c:	d503201f 	nop

000000000008f910 <CSMSC951xDevice::DumpRegs()>:
   8f910:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f914:	52800002 	mov	w2, #0x0                   	// #0
   8f918:	910003fd 	mov	x29, sp
   8f91c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f920:	91260021 	add	x1, x1, #0x980
   8f924:	f9000bf3 	str	x19, [sp, #16]
   8f928:	aa0003f3 	mov	x19, x0
   8f92c:	97ffffd5 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f930:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f934:	aa1303e0 	mov	x0, x19
   8f938:	91262021 	add	x1, x1, #0x988
   8f93c:	52800102 	mov	w2, #0x8                   	// #8
   8f940:	97ffffd0 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f944:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f948:	aa1303e0 	mov	x0, x19
   8f94c:	91264021 	add	x1, x1, #0x990
   8f950:	52800182 	mov	w2, #0xc                   	// #12
   8f954:	97ffffcb 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f958:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f95c:	aa1303e0 	mov	x0, x19
   8f960:	91266021 	add	x1, x1, #0x998
   8f964:	52800202 	mov	w2, #0x10                  	// #16
   8f968:	97ffffc6 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f96c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f970:	aa1303e0 	mov	x0, x19
   8f974:	91268021 	add	x1, x1, #0x9a0
   8f978:	52800282 	mov	w2, #0x14                  	// #20
   8f97c:	97ffffc1 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f980:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f984:	aa1303e0 	mov	x0, x19
   8f988:	9126a021 	add	x1, x1, #0x9a8
   8f98c:	52800302 	mov	w2, #0x18                  	// #24
   8f990:	97ffffbc 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f994:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f998:	aa1303e0 	mov	x0, x19
   8f99c:	9126e021 	add	x1, x1, #0x9b8
   8f9a0:	52800402 	mov	w2, #0x20                  	// #32
   8f9a4:	97ffffb7 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f9a8:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f9ac:	aa1303e0 	mov	x0, x19
   8f9b0:	91270021 	add	x1, x1, #0x9c0
   8f9b4:	52800482 	mov	w2, #0x24                  	// #36
   8f9b8:	97ffffb2 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f9bc:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f9c0:	aa1303e0 	mov	x0, x19
   8f9c4:	91274021 	add	x1, x1, #0x9d0
   8f9c8:	52800502 	mov	w2, #0x28                  	// #40
   8f9cc:	97ffffad 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f9d0:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f9d4:	aa1303e0 	mov	x0, x19
   8f9d8:	91278021 	add	x1, x1, #0x9e0
   8f9dc:	52800582 	mov	w2, #0x2c                  	// #44
   8f9e0:	97ffffa8 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f9e4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f9e8:	aa1303e0 	mov	x0, x19
   8f9ec:	9127a021 	add	x1, x1, #0x9e8
   8f9f0:	52800702 	mov	w2, #0x38                  	// #56
   8f9f4:	97ffffa3 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8f9f8:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8f9fc:	aa1303e0 	mov	x0, x19
   8fa00:	9127e021 	add	x1, x1, #0x9f8
   8fa04:	52800d02 	mov	w2, #0x68                  	// #104
   8fa08:	97ffff9e 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa0c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa10:	aa1303e0 	mov	x0, x19
   8fa14:	91282021 	add	x1, x1, #0xa08
   8fa18:	52800d82 	mov	w2, #0x6c                  	// #108
   8fa1c:	97ffff99 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa20:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa24:	aa1303e0 	mov	x0, x19
   8fa28:	91286021 	add	x1, x1, #0xa18
   8fa2c:	52802002 	mov	w2, #0x100                 	// #256
   8fa30:	97ffff94 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa34:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa38:	aa1303e0 	mov	x0, x19
   8fa3c:	91288021 	add	x1, x1, #0xa20
   8fa40:	52802082 	mov	w2, #0x104                 	// #260
   8fa44:	97ffff8f 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa48:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa4c:	aa1303e0 	mov	x0, x19
   8fa50:	9128a021 	add	x1, x1, #0xa28
   8fa54:	52802102 	mov	w2, #0x108                 	// #264
   8fa58:	97ffff8a 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa5c:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa60:	aa1303e0 	mov	x0, x19
   8fa64:	9128c021 	add	x1, x1, #0xa30
   8fa68:	52802182 	mov	w2, #0x10c                 	// #268
   8fa6c:	97ffff85 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa70:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa74:	aa1303e0 	mov	x0, x19
   8fa78:	9128e021 	add	x1, x1, #0xa38
   8fa7c:	52802202 	mov	w2, #0x110                 	// #272
   8fa80:	97ffff80 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa84:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa88:	aa1303e0 	mov	x0, x19
   8fa8c:	91290021 	add	x1, x1, #0xa40
   8fa90:	52802382 	mov	w2, #0x11c                 	// #284
   8fa94:	97ffff7b 	bl	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fa98:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fa9c:	aa1303e0 	mov	x0, x19
   8faa0:	f9400bf3 	ldr	x19, [sp, #16]
   8faa4:	91292021 	add	x1, x1, #0xa48
   8faa8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8faac:	52802582 	mov	w2, #0x12c                 	// #300
   8fab0:	17ffff74 	b	8f880 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   8fab4:	d503201f 	nop
   8fab8:	d503201f 	nop
   8fabc:	d503201f 	nop

000000000008fac0 <CSMSC951xDevice::Configure()>:
   8fac0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   8fac4:	910003fd 	mov	x29, sp
   8fac8:	52800001 	mov	w1, #0x0                   	// #0
   8facc:	a90153f3 	stp	x19, x20, [sp, #16]
   8fad0:	aa0003f4 	mov	x20, x0
   8fad4:	910143e0 	add	x0, sp, #0x50
   8fad8:	9400330e 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8fadc:	910143e0 	add	x0, sp, #0x50
   8fae0:	910163e2 	add	x2, sp, #0x58
   8fae4:	52800061 	mov	w1, #0x3                   	// #3
   8fae8:	72a00021 	movk	w1, #0x1, lsl #16
   8faec:	52800004 	mov	w4, #0x0                   	// #0
   8faf0:	52800283 	mov	w3, #0x14                  	// #20
   8faf4:	9400330f 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8faf8:	72001c13 	ands	w19, w0, #0xff
   8fafc:	54000e80 	b.eq	8fccc <CSMSC951xDevice::Configure()+0x20c>  // b.none
   8fb00:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fb04:	9100e296 	add	x22, x20, #0x38
   8fb08:	910193e1 	add	x1, sp, #0x64
   8fb0c:	aa1603e0 	mov	x0, x22
   8fb10:	90000115 	adrp	x21, af000 <FromUmsd+0xb0>
   8fb14:	912e02b5 	add	x21, x21, #0xb80
   8fb18:	940055ae 	bl	a51d0 <CMACAddress::Set(unsigned char const*)>
   8fb1c:	9101c3e0 	add	x0, sp, #0x70
   8fb20:	940048c4 	bl	a1e30 <CString::CString()>
   8fb24:	9101c3e1 	add	x1, sp, #0x70
   8fb28:	aa1603e0 	mov	x0, x22
   8fb2c:	94005611 	bl	a5370 <CMACAddress::Format(CString*) const>
   8fb30:	94003c68 	bl	9ecd0 <CLogger::Get()>
   8fb34:	aa0003f3 	mov	x19, x0
   8fb38:	9101c3e0 	add	x0, sp, #0x70
   8fb3c:	940048d9 	bl	a1ea0 <CString::operator char const*() const>
   8fb40:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8fb44:	aa0003e4 	mov	x4, x0
   8fb48:	aa1503e1 	mov	x1, x21
   8fb4c:	aa1303e0 	mov	x0, x19
   8fb50:	911ee063 	add	x3, x3, #0x7b8
   8fb54:	52800082 	mov	w2, #0x4                   	// #4
   8fb58:	94003b9a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fb5c:	aa1403e0 	mov	x0, x20
   8fb60:	97ffe0a0 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   8fb64:	12001c00 	and	w0, w0, #0xff
   8fb68:	71000c1f 	cmp	w0, #0x3
   8fb6c:	54000240 	b.eq	8fbb4 <CSMSC951xDevice::Configure()+0xf4>  // b.none
   8fb70:	aa1503e1 	mov	x1, x21
   8fb74:	aa1403e0 	mov	x0, x20
   8fb78:	52800013 	mov	w19, #0x0                   	// #0
   8fb7c:	97ffe0d5 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8fb80:	9101c3e0 	add	x0, sp, #0x70
   8fb84:	9400486f 	bl	a1d40 <CString::~CString()>
   8fb88:	910143e0 	add	x0, sp, #0x50
   8fb8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fb90:	940032e4 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   8fb94:	2a1303e0 	mov	w0, w19
   8fb98:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fb9c:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8fba0:	d65f03c0 	ret
   8fba4:	39400c01 	ldrb	w1, [x0, #3]
   8fba8:	12001421 	and	w1, w1, #0x3f
   8fbac:	7100083f 	cmp	w1, #0x2
   8fbb0:	540006c0 	b.eq	8fc88 <CSMSC951xDevice::Configure()+0x1c8>  // b.none
   8fbb4:	528000a1 	mov	w1, #0x5                   	// #5
   8fbb8:	aa1403e0 	mov	x0, x20
   8fbbc:	97ffe0b9 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   8fbc0:	aa0003f3 	mov	x19, x0
   8fbc4:	b5ffff00 	cbnz	x0, 8fba4 <CSMSC951xDevice::Configure()+0xe4>
   8fbc8:	f9401680 	ldr	x0, [x20, #40]
   8fbcc:	b4fffd20 	cbz	x0, 8fb70 <CSMSC951xDevice::Configure()+0xb0>
   8fbd0:	f9401a80 	ldr	x0, [x20, #48]
   8fbd4:	b4fffce0 	cbz	x0, 8fb70 <CSMSC951xDevice::Configure()+0xb0>
   8fbd8:	aa1403e0 	mov	x0, x20
   8fbdc:	97ffdfbd 	bl	87ad0 <CUSBFunction::Configure()>
   8fbe0:	72001c13 	ands	w19, w0, #0xff
   8fbe4:	540008e0 	b.eq	8fd00 <CSMSC951xDevice::Configure()+0x240>  // b.none
   8fbe8:	aa1603e0 	mov	x0, x22
   8fbec:	910123e1 	add	x1, sp, #0x48
   8fbf0:	940055ac 	bl	a52a0 <CMACAddress::CopyTo(unsigned char*) const>
   8fbf4:	394137e3 	ldrb	w3, [sp, #77]
   8fbf8:	52802081 	mov	w1, #0x104                 	// #260
   8fbfc:	aa1403e0 	mov	x0, x20
   8fc00:	394133e2 	ldrb	w2, [sp, #76]
   8fc04:	b9404bf3 	ldr	w19, [sp, #72]
   8fc08:	33185c62 	bfi	w2, w3, #8, #24
   8fc0c:	97fffe2d 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8fc10:	72001c1f 	tst	w0, #0xff
   8fc14:	54000a00 	b.eq	8fd54 <CSMSC951xDevice::Configure()+0x294>  // b.none
   8fc18:	2a1303e2 	mov	w2, w19
   8fc1c:	52802101 	mov	w1, #0x108                 	// #264
   8fc20:	aa1403e0 	mov	x0, x20
   8fc24:	97fffe27 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8fc28:	72001c1f 	tst	w0, #0xff
   8fc2c:	54000940 	b.eq	8fd54 <CSMSC951xDevice::Configure()+0x294>  // b.none
   8fc30:	52a02222 	mov	w2, #0x1110000             	// #17891328
   8fc34:	52800481 	mov	w1, #0x24                  	// #36
   8fc38:	aa1403e0 	mov	x0, x20
   8fc3c:	97fffe21 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8fc40:	72001c1f 	tst	w0, #0xff
   8fc44:	54000980 	b.eq	8fd74 <CSMSC951xDevice::Configure()+0x2b4>  // b.none
   8fc48:	52800182 	mov	w2, #0xc                   	// #12
   8fc4c:	72a01002 	movk	w2, #0x80, lsl #16
   8fc50:	52802001 	mov	w1, #0x100                 	// #256
   8fc54:	aa1403e0 	mov	x0, x20
   8fc58:	97fffe1a 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8fc5c:	72001c1f 	tst	w0, #0xff
   8fc60:	540008a0 	b.eq	8fd74 <CSMSC951xDevice::Configure()+0x2b4>  // b.none
   8fc64:	52800082 	mov	w2, #0x4                   	// #4
   8fc68:	52800201 	mov	w1, #0x10                  	// #16
   8fc6c:	aa1403e0 	mov	x0, x20
   8fc70:	97fffe14 	bl	8f4c0 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   8fc74:	72001c13 	ands	w19, w0, #0xff
   8fc78:	540007e0 	b.eq	8fd74 <CSMSC951xDevice::Configure()+0x2b4>  // b.none
   8fc7c:	91008280 	add	x0, x20, #0x20
   8fc80:	940055dc 	bl	a53f0 <CNetDevice::AddNetDevice()>
   8fc84:	17ffffbf 	b	8fb80 <CSMSC951xDevice::Configure()+0xc0>
   8fc88:	39c00a61 	ldrsb	w1, [x19, #2]
   8fc8c:	aa1403e0 	mov	x0, x20
   8fc90:	37f80461 	tbnz	w1, #31, 8fd1c <CSMSC951xDevice::Configure()+0x25c>
   8fc94:	f9401a81 	ldr	x1, [x20, #48]
   8fc98:	b5fff6c1 	cbnz	x1, 8fb70 <CSMSC951xDevice::Configure()+0xb0>
   8fc9c:	f9001bf7 	str	x23, [sp, #48]
   8fca0:	97ffe05c 	bl	87e10 <CUSBFunction::GetDevice() const>
   8fca4:	aa0003f7 	mov	x23, x0
   8fca8:	d2800400 	mov	x0, #0x20                  	// #32
   8fcac:	94005675 	bl	a5680 <operator new(unsigned long)>
   8fcb0:	aa1703e1 	mov	x1, x23
   8fcb4:	aa0003f7 	mov	x23, x0
   8fcb8:	aa1303e2 	mov	x2, x19
   8fcbc:	97ffdeb5 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8fcc0:	f9001a97 	str	x23, [x20, #48]
   8fcc4:	f9401bf7 	ldr	x23, [sp, #48]
   8fcc8:	17ffffbb 	b	8fbb4 <CSMSC951xDevice::Configure()+0xf4>
   8fccc:	94003c01 	bl	9ecd0 <CLogger::Get()>
   8fcd0:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8fcd4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fcd8:	91294063 	add	x3, x3, #0xa50
   8fcdc:	912e0021 	add	x1, x1, #0xb80
   8fce0:	52800022 	mov	w2, #0x1                   	// #1
   8fce4:	94003b37 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fce8:	910143e0 	add	x0, sp, #0x50
   8fcec:	9400328d 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   8fcf0:	2a1303e0 	mov	w0, w19
   8fcf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fcf8:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8fcfc:	d65f03c0 	ret
   8fd00:	94003bf4 	bl	9ecd0 <CLogger::Get()>
   8fd04:	aa1503e1 	mov	x1, x21
   8fd08:	f00000e3 	adrp	x3, ae000 <FromDevice+0x108>
   8fd0c:	9104a063 	add	x3, x3, #0x128
   8fd10:	52800022 	mov	w2, #0x1                   	// #1
   8fd14:	94003b2b 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fd18:	17ffff9a 	b	8fb80 <CSMSC951xDevice::Configure()+0xc0>
   8fd1c:	f9401681 	ldr	x1, [x20, #40]
   8fd20:	b50003a1 	cbnz	x1, 8fd94 <CSMSC951xDevice::Configure()+0x2d4>
   8fd24:	f9001bf7 	str	x23, [sp, #48]
   8fd28:	97ffe03a 	bl	87e10 <CUSBFunction::GetDevice() const>
   8fd2c:	aa0003f7 	mov	x23, x0
   8fd30:	d2800400 	mov	x0, #0x20                  	// #32
   8fd34:	94005653 	bl	a5680 <operator new(unsigned long)>
   8fd38:	aa1703e1 	mov	x1, x23
   8fd3c:	aa0003f7 	mov	x23, x0
   8fd40:	aa1303e2 	mov	x2, x19
   8fd44:	97ffde93 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8fd48:	f9001697 	str	x23, [x20, #40]
   8fd4c:	f9401bf7 	ldr	x23, [sp, #48]
   8fd50:	17ffff99 	b	8fbb4 <CSMSC951xDevice::Configure()+0xf4>
   8fd54:	94003bdf 	bl	9ecd0 <CLogger::Get()>
   8fd58:	aa1503e1 	mov	x1, x21
   8fd5c:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8fd60:	9129a063 	add	x3, x3, #0xa68
   8fd64:	52800022 	mov	w2, #0x1                   	// #1
   8fd68:	52800013 	mov	w19, #0x0                   	// #0
   8fd6c:	94003b15 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fd70:	17ffff84 	b	8fb80 <CSMSC951xDevice::Configure()+0xc0>
   8fd74:	94003bd7 	bl	9ecd0 <CLogger::Get()>
   8fd78:	aa1503e1 	mov	x1, x21
   8fd7c:	90000103 	adrp	x3, af000 <FromUmsd+0xb0>
   8fd80:	912a0063 	add	x3, x3, #0xa80
   8fd84:	52800022 	mov	w2, #0x1                   	// #1
   8fd88:	52800013 	mov	w19, #0x0                   	// #0
   8fd8c:	94003b0d 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fd90:	17ffff7c 	b	8fb80 <CSMSC951xDevice::Configure()+0xc0>
   8fd94:	aa1503e1 	mov	x1, x21
   8fd98:	52800013 	mov	w19, #0x0                   	// #0
   8fd9c:	97ffe04d 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   8fda0:	17ffff78 	b	8fb80 <CSMSC951xDevice::Configure()+0xc0>
	...

000000000008fdb0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   8fdb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fdb4:	910003fd 	mov	x29, sp
   8fdb8:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fdbc:	91318021 	add	x1, x1, #0xc60
   8fdc0:	a90153f3 	stp	x19, x20, [sp, #16]
   8fdc4:	aa0003f3 	mov	x19, x0
   8fdc8:	f9402000 	ldr	x0, [x0, #64]
   8fdcc:	f9000261 	str	x1, [x19]
   8fdd0:	f900267f 	str	xzr, [x19, #72]
   8fdd4:	b4000040 	cbz	x0, 8fddc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x2c>
   8fdd8:	94005642 	bl	a56e0 <operator delete[](void*)>
   8fddc:	f900227f 	str	xzr, [x19, #64]
   8fde0:	f9401a74 	ldr	x20, [x19, #48]
   8fde4:	b40000d4 	cbz	x20, 8fdfc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x4c>
   8fde8:	aa1403e0 	mov	x0, x20
   8fdec:	97ffdeb9 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8fdf0:	aa1403e0 	mov	x0, x20
   8fdf4:	d2800401 	mov	x1, #0x20                  	// #32
   8fdf8:	94005646 	bl	a5710 <operator delete(void*, unsigned long)>
   8fdfc:	f9001a7f 	str	xzr, [x19, #48]
   8fe00:	f9401674 	ldr	x20, [x19, #40]
   8fe04:	b40000d4 	cbz	x20, 8fe1c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x6c>
   8fe08:	aa1403e0 	mov	x0, x20
   8fe0c:	97ffdeb1 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8fe10:	aa1403e0 	mov	x0, x20
   8fe14:	d2800401 	mov	x1, #0x20                  	// #32
   8fe18:	9400563e 	bl	a5710 <operator delete(void*, unsigned long)>
   8fe1c:	f900167f 	str	xzr, [x19, #40]
   8fe20:	f9401274 	ldr	x20, [x19, #32]
   8fe24:	b40000d4 	cbz	x20, 8fe3c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x8c>
   8fe28:	aa1403e0 	mov	x0, x20
   8fe2c:	97ffdea9 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   8fe30:	aa1403e0 	mov	x0, x20
   8fe34:	d2800401 	mov	x1, #0x20                  	// #32
   8fe38:	94005636 	bl	a5710 <operator delete(void*, unsigned long)>
   8fe3c:	aa1303e0 	mov	x0, x19
   8fe40:	f900127f 	str	xzr, [x19, #32]
   8fe44:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fe48:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8fe4c:	17ffdef5 	b	87a20 <CUSBFunction::~CUSBFunction()>

000000000008fe50 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   8fe50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fe54:	910003fd 	mov	x29, sp
   8fe58:	f9000bf3 	str	x19, [sp, #16]
   8fe5c:	aa0003f3 	mov	x19, x0
   8fe60:	97ffffd4 	bl	8fdb0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   8fe64:	aa1303e0 	mov	x0, x19
   8fe68:	d2800a01 	mov	x1, #0x50                  	// #80
   8fe6c:	f9400bf3 	ldr	x19, [sp, #16]
   8fe70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8fe74:	14005627 	b	a5710 <operator delete(void*, unsigned long)>
   8fe78:	d503201f 	nop
   8fe7c:	d503201f 	nop

000000000008fe80 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   8fe80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fe84:	910003fd 	mov	x29, sp
   8fe88:	f9000bf3 	str	x19, [sp, #16]
   8fe8c:	aa0003f3 	mov	x19, x0
   8fe90:	97ffdf7c 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8fe94:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8fe98:	91318000 	add	x0, x0, #0xc60
   8fe9c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8fea0:	f9000260 	str	x0, [x19]
   8fea4:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   8fea8:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   8feac:	f9400bf3 	ldr	x19, [sp, #16]
   8feb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8feb4:	d65f03c0 	ret
   8feb8:	d503201f 	nop
   8febc:	d503201f 	nop

000000000008fec0 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   8fec0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8fec4:	910003fd 	mov	x29, sp
   8fec8:	a90153f3 	stp	x19, x20, [sp, #16]
   8fecc:	aa0103f4 	mov	x20, x1
   8fed0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fed4:	2a0203f5 	mov	w21, w2
   8fed8:	aa0003f6 	mov	x22, x0
   8fedc:	97ffdfe5 	bl	87e70 <CUSBFunction::GetHost() const>
   8fee0:	aa0003f3 	mov	x19, x0
   8fee4:	aa1603e0 	mov	x0, x22
   8fee8:	97ffdfd6 	bl	87e40 <CUSBFunction::GetEndpoint0() const>
   8feec:	aa0003e1 	mov	x1, x0
   8fef0:	2a1503e7 	mov	w7, w21
   8fef4:	aa1403e6 	mov	x6, x20
   8fef8:	aa1303e0 	mov	x0, x19
   8fefc:	52800005 	mov	w5, #0x0                   	// #0
   8ff00:	52800004 	mov	w4, #0x0                   	// #0
   8ff04:	52800003 	mov	w3, #0x0                   	// #0
   8ff08:	52800402 	mov	w2, #0x20                  	// #32
   8ff0c:	97ffec25 	bl	8afa0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8ff10:	2a2003e0 	mvn	w0, w0
   8ff14:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ff18:	531f7c00 	lsr	w0, w0, #31
   8ff1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ff20:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ff24:	d65f03c0 	ret
   8ff28:	d503201f 	nop
   8ff2c:	d503201f 	nop

000000000008ff30 <CUSBBluetoothDevice::StartRequest()>:
   8ff30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ff34:	910003fd 	mov	x29, sp
   8ff38:	a90153f3 	stp	x19, x20, [sp, #16]
   8ff3c:	aa0003f3 	mov	x19, x0
   8ff40:	f9401000 	ldr	x0, [x0, #32]
   8ff44:	b4000400 	cbz	x0, 8ffc4 <CUSBBluetoothDevice::StartRequest()+0x94>
   8ff48:	f9402261 	ldr	x1, [x19, #64]
   8ff4c:	b4000481 	cbz	x1, 8ffdc <CUSBBluetoothDevice::StartRequest()+0xac>
   8ff50:	f9401e61 	ldr	x1, [x19, #56]
   8ff54:	b5000501 	cbnz	x1, 8fff4 <CUSBBluetoothDevice::StartRequest()+0xc4>
   8ff58:	97ffde96 	bl	879b0 <CUSBEndpoint::GetMaxPacketSize() const>
   8ff5c:	2a0003f4 	mov	w20, w0
   8ff60:	d2800900 	mov	x0, #0x48                  	// #72
   8ff64:	97fff3c3 	bl	8ce70 <CUSBRequest::operator new(unsigned long)>
   8ff68:	f9401261 	ldr	x1, [x19, #32]
   8ff6c:	d2800004 	mov	x4, #0x0                   	// #0
   8ff70:	2a1403e3 	mov	w3, w20
   8ff74:	aa0003f4 	mov	x20, x0
   8ff78:	f9402262 	ldr	x2, [x19, #64]
   8ff7c:	97fff329 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8ff80:	b0000001 	adrp	x1, 90000 <CUSBBluetoothDevice::StartRequest()+0xd0>
   8ff84:	aa1303e3 	mov	x3, x19
   8ff88:	f9001e74 	str	x20, [x19, #56]
   8ff8c:	aa1403e0 	mov	x0, x20
   8ff90:	91064021 	add	x1, x1, #0x190
   8ff94:	d2800002 	mov	x2, #0x0                   	// #0
   8ff98:	97fff392 	bl	8cde0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8ff9c:	aa1303e0 	mov	x0, x19
   8ffa0:	97ffdfb4 	bl	87e70 <CUSBFunction::GetHost() const>
   8ffa4:	f9400003 	ldr	x3, [x0]
   8ffa8:	52800002 	mov	w2, #0x0                   	// #0
   8ffac:	f9401e61 	ldr	x1, [x19, #56]
   8ffb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ffb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ffb8:	f9400c63 	ldr	x3, [x3, #24]
   8ffbc:	aa0303f0 	mov	x16, x3
   8ffc0:	d61f0200 	br	x16
   8ffc4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ffc8:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ffcc:	912ea021 	add	x1, x1, #0xba8
   8ffd0:	912f0000 	add	x0, x0, #0xbc0
   8ffd4:	52801462 	mov	w2, #0xa3                  	// #163
   8ffd8:	940031aa 	bl	9c680 <assertion_failed>
   8ffdc:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8ffe0:	90000100 	adrp	x0, af000 <FromUmsd+0xb0>
   8ffe4:	912ea021 	add	x1, x1, #0xba8
   8ffe8:	912f8000 	add	x0, x0, #0xbe0
   8ffec:	52801482 	mov	w2, #0xa4                  	// #164
   8fff0:	940031a4 	bl	9c680 <assertion_failed>
   8fff4:	90000101 	adrp	x1, af000 <FromUmsd+0xb0>
   8fff8:	b00000e0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   8fffc:	912ea021 	add	x1, x1, #0xba8
   90000:	913f8000 	add	x0, x0, #0xfe0
   90004:	528014c2 	mov	w2, #0xa6                  	// #166
   90008:	9400319e 	bl	9c680 <assertion_failed>
   9000c:	d503201f 	nop

0000000000090010 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   90010:	f9002401 	str	x1, [x0, #72]
   90014:	b4000041 	cbz	x1, 9001c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0xc>
   90018:	17ffffc6 	b	8ff30 <CUSBBluetoothDevice::StartRequest()>
   9001c:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90020:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90024:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90028:	912ea021 	add	x1, x1, #0xba8
   9002c:	910003fd 	mov	x29, sp
   90030:	912fe000 	add	x0, x0, #0xbf8
   90034:	52801382 	mov	w2, #0x9c                  	// #156
   90038:	94003192 	bl	9c680 <assertion_failed>
   9003c:	d503201f 	nop

0000000000090040 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   90040:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90044:	910003fd 	mov	x29, sp
   90048:	a90153f3 	stp	x19, x20, [sp, #16]
   9004c:	b4000681 	cbz	x1, 9011c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   90050:	aa0003f3 	mov	x19, x0
   90054:	f9401c14 	ldr	x20, [x0, #56]
   90058:	eb01029f 	cmp	x20, x1
   9005c:	540006e1 	b.ne	90138 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf8>  // b.any
   90060:	f9402000 	ldr	x0, [x0, #64]
   90064:	b4000780 	cbz	x0, 90154 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   90068:	aa1403e0 	mov	x0, x20
   9006c:	97fff321 	bl	8ccf0 <CUSBRequest::GetStatus() const>
   90070:	34000340 	cbz	w0, 900d8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x98>
   90074:	f90013f5 	str	x21, [sp, #32]
   90078:	f9402675 	ldr	x21, [x19, #72]
   9007c:	b40007b5 	cbz	x21, 90170 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x130>
   90080:	aa1403e0 	mov	x0, x20
   90084:	f9402274 	ldr	x20, [x19, #64]
   90088:	97fff31e 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   9008c:	2a0003e1 	mov	w1, w0
   90090:	aa1403e0 	mov	x0, x20
   90094:	d63f02a0 	blr	x21
   90098:	f94013f5 	ldr	x21, [sp, #32]
   9009c:	f9401e74 	ldr	x20, [x19, #56]
   900a0:	b40000d4 	cbz	x20, 900b8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x78>
   900a4:	aa1403e0 	mov	x0, x20
   900a8:	97fff2fa 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   900ac:	aa1403e0 	mov	x0, x20
   900b0:	d2800901 	mov	x1, #0x48                  	// #72
   900b4:	97fff387 	bl	8ced0 <CUSBRequest::operator delete(void*, unsigned long)>
   900b8:	aa1303e0 	mov	x0, x19
   900bc:	f9001e7f 	str	xzr, [x19, #56]
   900c0:	97ffff9c 	bl	8ff30 <CUSBBluetoothDevice::StartRequest()>
   900c4:	72001c1f 	tst	w0, #0xff
   900c8:	54000180 	b.eq	900f8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xb8>  // b.none
   900cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   900d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   900d4:	d65f03c0 	ret
   900d8:	94003afe 	bl	9ecd0 <CLogger::Get()>
   900dc:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   900e0:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   900e4:	91304063 	add	x3, x3, #0xc10
   900e8:	9132c021 	add	x1, x1, #0xcb0
   900ec:	52800042 	mov	w2, #0x2                   	// #2
   900f0:	94003a34 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   900f4:	17ffffea 	b	9009c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   900f8:	94003af6 	bl	9ecd0 <CLogger::Get()>
   900fc:	d00000e3 	adrp	x3, ae000 <FromDevice+0x108>
   90100:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90104:	a94153f3 	ldp	x19, x20, [sp, #16]
   90108:	912d2063 	add	x3, x3, #0xb48
   9010c:	9132c021 	add	x1, x1, #0xcb0
   90110:	52800022 	mov	w2, #0x1                   	// #1
   90114:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90118:	14003a2a 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9011c:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90120:	900000e0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   90124:	f90013f5 	str	x21, [sp, #32]
   90128:	912ea021 	add	x1, x1, #0xba8
   9012c:	913d8000 	add	x0, x0, #0xf60
   90130:	52801642 	mov	w2, #0xb2                  	// #178
   90134:	94003153 	bl	9c680 <assertion_failed>
   90138:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   9013c:	d00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   90140:	f90013f5 	str	x21, [sp, #32]
   90144:	912ea021 	add	x1, x1, #0xba8
   90148:	912ce000 	add	x0, x0, #0xb38
   9014c:	52801662 	mov	w2, #0xb3                  	// #179
   90150:	9400314c 	bl	9c680 <assertion_failed>
   90154:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90158:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   9015c:	f90013f5 	str	x21, [sp, #32]
   90160:	912ea021 	add	x1, x1, #0xba8
   90164:	912f8000 	add	x0, x0, #0xbe0
   90168:	52801682 	mov	w2, #0xb4                  	// #180
   9016c:	94003145 	bl	9c680 <assertion_failed>
   90170:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90174:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90178:	912ea021 	add	x1, x1, #0xba8
   9017c:	912fe000 	add	x0, x0, #0xbf8
   90180:	52801702 	mov	w2, #0xb8                  	// #184
   90184:	9400313f 	bl	9c680 <assertion_failed>
   90188:	d503201f 	nop
   9018c:	d503201f 	nop

0000000000090190 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   90190:	b4000082 	cbz	x2, 901a0 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   90194:	aa0003e1 	mov	x1, x0
   90198:	aa0203e0 	mov	x0, x2
   9019c:	17ffffa9 	b	90040 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   901a0:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   901a4:	900000e0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   901a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   901ac:	912ea021 	add	x1, x1, #0xba8
   901b0:	910003fd 	mov	x29, sp
   901b4:	9138e000 	add	x0, x0, #0xe38
   901b8:	52801982 	mov	w2, #0xcc                  	// #204
   901bc:	94003131 	bl	9c680 <assertion_failed>

00000000000901c0 <CUSBBluetoothDevice::Configure()>:
   901c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   901c4:	910003fd 	mov	x29, sp
   901c8:	a90153f3 	stp	x19, x20, [sp, #16]
   901cc:	aa0003f4 	mov	x20, x0
   901d0:	97ffdf8c 	bl	88000 <CUSBFunction::GetInterfaceNumber() const>
   901d4:	72001c1f 	tst	w0, #0xff
   901d8:	54000de1 	b.ne	90394 <CUSBBluetoothDevice::Configure()+0x1d4>  // b.any
   901dc:	aa1403e0 	mov	x0, x20
   901e0:	97ffdf00 	bl	87de0 <CUSBFunction::GetNumEndpoints() const>
   901e4:	12001c00 	and	w0, w0, #0xff
   901e8:	71000c1f 	cmp	w0, #0x3
   901ec:	540008c1 	b.ne	90304 <CUSBBluetoothDevice::Configure()+0x144>  // b.any
   901f0:	f90013f5 	str	x21, [sp, #32]
   901f4:	d503201f 	nop
   901f8:	528000a1 	mov	w1, #0x5                   	// #5
   901fc:	aa1403e0 	mov	x0, x20
   90200:	97ffdf28 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   90204:	aa0003f3 	mov	x19, x0
   90208:	b4000300 	cbz	x0, 90268 <CUSBBluetoothDevice::Configure()+0xa8>
   9020c:	39400c01 	ldrb	w1, [x0, #3]
   90210:	12001421 	and	w1, w1, #0x3f
   90214:	7100083f 	cmp	w1, #0x2
   90218:	54000880 	b.eq	90328 <CUSBBluetoothDevice::Configure()+0x168>  // b.none
   9021c:	71000c3f 	cmp	w1, #0x3
   90220:	54fffec1 	b.ne	901f8 <CUSBBluetoothDevice::Configure()+0x38>  // b.any
   90224:	f9401281 	ldr	x1, [x20, #32]
   90228:	aa1403e0 	mov	x0, x20
   9022c:	b5000ce1 	cbnz	x1, 903c8 <CUSBBluetoothDevice::Configure()+0x208>
   90230:	97ffdef8 	bl	87e10 <CUSBFunction::GetDevice() const>
   90234:	aa0003f5 	mov	x21, x0
   90238:	d2800400 	mov	x0, #0x20                  	// #32
   9023c:	94005511 	bl	a5680 <operator new(unsigned long)>
   90240:	aa1503e1 	mov	x1, x21
   90244:	aa1303e2 	mov	x2, x19
   90248:	aa0003f5 	mov	x21, x0
   9024c:	97ffdd51 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   90250:	528000a1 	mov	w1, #0x5                   	// #5
   90254:	aa1403e0 	mov	x0, x20
   90258:	f9001295 	str	x21, [x20, #32]
   9025c:	97ffdf11 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   90260:	aa0003f3 	mov	x19, x0
   90264:	b5fffd40 	cbnz	x0, 9020c <CUSBBluetoothDevice::Configure()+0x4c>
   90268:	f9401680 	ldr	x0, [x20, #40]
   9026c:	b4000ac0 	cbz	x0, 903c4 <CUSBBluetoothDevice::Configure()+0x204>
   90270:	f9401a80 	ldr	x0, [x20, #48]
   90274:	b4000a80 	cbz	x0, 903c4 <CUSBBluetoothDevice::Configure()+0x204>
   90278:	f9401280 	ldr	x0, [x20, #32]
   9027c:	b4000a40 	cbz	x0, 903c4 <CUSBBluetoothDevice::Configure()+0x204>
   90280:	aa1403e0 	mov	x0, x20
   90284:	97ffde13 	bl	87ad0 <CUSBFunction::Configure()>
   90288:	72001c13 	ands	w19, w0, #0xff
   9028c:	54000b00 	b.eq	903ec <CUSBBluetoothDevice::Configure()+0x22c>  // b.none
   90290:	f9401280 	ldr	x0, [x20, #32]
   90294:	97ffddc7 	bl	879b0 <CUSBEndpoint::GetMaxPacketSize() const>
   90298:	2a0003e0 	mov	w0, w0
   9029c:	94005501 	bl	a56a0 <operator new[](unsigned long)>
   902a0:	aa0003e1 	mov	x1, x0
   902a4:	9100c3e0 	add	x0, sp, #0x30
   902a8:	f9002281 	str	x1, [x20, #64]
   902ac:	940046e1 	bl	a1e30 <CString::CString()>
   902b0:	b0000123 	adrp	x3, b5000 <font_data+0x1340>
   902b4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   902b8:	b94db462 	ldr	w2, [x3, #3508]
   902bc:	91312021 	add	x1, x1, #0xc48
   902c0:	9100c3e0 	add	x0, sp, #0x30
   902c4:	11000444 	add	w4, w2, #0x1
   902c8:	b90db464 	str	w4, [x3, #3508]
   902cc:	94004c49 	bl	a33f0 <CString::Format(char const*, ...)>
   902d0:	940033bc 	bl	9d1c0 <CDeviceNameService::Get()>
   902d4:	aa0003f5 	mov	x21, x0
   902d8:	9100c3e0 	add	x0, sp, #0x30
   902dc:	940046f1 	bl	a1ea0 <CString::operator char const*() const>
   902e0:	aa0003e1 	mov	x1, x0
   902e4:	aa1403e2 	mov	x2, x20
   902e8:	aa1503e0 	mov	x0, x21
   902ec:	52800003 	mov	w3, #0x0                   	// #0
   902f0:	940032ec 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   902f4:	9100c3e0 	add	x0, sp, #0x30
   902f8:	94004692 	bl	a1d40 <CString::~CString()>
   902fc:	f94013f5 	ldr	x21, [sp, #32]
   90300:	14000006 	b	90318 <CUSBBluetoothDevice::Configure()+0x158>
   90304:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90308:	9132c021 	add	x1, x1, #0xcb0
   9030c:	aa1403e0 	mov	x0, x20
   90310:	52800013 	mov	w19, #0x0                   	// #0
   90314:	97ffdeef 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   90318:	2a1303e0 	mov	w0, w19
   9031c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90320:	a8c57bfd 	ldp	x29, x30, [sp], #80
   90324:	d65f03c0 	ret
   90328:	39c00a61 	ldrsb	w1, [x19, #2]
   9032c:	aa1403e0 	mov	x0, x20
   90330:	37f801a1 	tbnz	w1, #31, 90364 <CUSBBluetoothDevice::Configure()+0x1a4>
   90334:	f9401a81 	ldr	x1, [x20, #48]
   90338:	b5000461 	cbnz	x1, 903c4 <CUSBBluetoothDevice::Configure()+0x204>
   9033c:	97ffdeb5 	bl	87e10 <CUSBFunction::GetDevice() const>
   90340:	aa0003f5 	mov	x21, x0
   90344:	d2800400 	mov	x0, #0x20                  	// #32
   90348:	940054ce 	bl	a5680 <operator new(unsigned long)>
   9034c:	aa1503e1 	mov	x1, x21
   90350:	aa0003f5 	mov	x21, x0
   90354:	aa1303e2 	mov	x2, x19
   90358:	97ffdd0e 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9035c:	f9001a95 	str	x21, [x20, #48]
   90360:	17ffffa6 	b	901f8 <CUSBBluetoothDevice::Configure()+0x38>
   90364:	f9401681 	ldr	x1, [x20, #40]
   90368:	b5000301 	cbnz	x1, 903c8 <CUSBBluetoothDevice::Configure()+0x208>
   9036c:	97ffdea9 	bl	87e10 <CUSBFunction::GetDevice() const>
   90370:	aa0003f5 	mov	x21, x0
   90374:	d2800400 	mov	x0, #0x20                  	// #32
   90378:	940054c2 	bl	a5680 <operator new(unsigned long)>
   9037c:	aa1503e1 	mov	x1, x21
   90380:	aa0003f5 	mov	x21, x0
   90384:	aa1303e2 	mov	x2, x19
   90388:	97ffdd02 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9038c:	f9001695 	str	x21, [x20, #40]
   90390:	17ffff9a 	b	901f8 <CUSBBluetoothDevice::Configure()+0x38>
   90394:	94003a4f 	bl	9ecd0 <CLogger::Get()>
   90398:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   9039c:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   903a0:	91308063 	add	x3, x3, #0xc20
   903a4:	9132c021 	add	x1, x1, #0xcb0
   903a8:	52800042 	mov	w2, #0x2                   	// #2
   903ac:	52800013 	mov	w19, #0x0                   	// #0
   903b0:	94003984 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   903b4:	2a1303e0 	mov	w0, w19
   903b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   903bc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   903c0:	d65f03c0 	ret
   903c4:	aa1403e0 	mov	x0, x20
   903c8:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   903cc:	9132c021 	add	x1, x1, #0xcb0
   903d0:	97ffdec0 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   903d4:	52800013 	mov	w19, #0x0                   	// #0
   903d8:	f94013f5 	ldr	x21, [sp, #32]
   903dc:	2a1303e0 	mov	w0, w19
   903e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   903e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   903e8:	d65f03c0 	ret
   903ec:	94003a39 	bl	9ecd0 <CLogger::Get()>
   903f0:	d00000e3 	adrp	x3, ae000 <FromDevice+0x108>
   903f4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   903f8:	9104a063 	add	x3, x3, #0x128
   903fc:	9132c021 	add	x1, x1, #0xcb0
   90400:	52800022 	mov	w2, #0x1                   	// #1
   90404:	9400396f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90408:	f94013f5 	ldr	x21, [sp, #32]
   9040c:	17ffffc3 	b	90318 <CUSBBluetoothDevice::Configure()+0x158>

0000000000090410 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   90410:	9100e000 	add	x0, x0, #0x38
   90414:	d65f03c0 	ret
   90418:	d503201f 	nop
   9041c:	d503201f 	nop

0000000000090420 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   90420:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90424:	f00000e2 	adrp	x2, af000 <FromUmsd+0xb0>
   90428:	91344042 	add	x2, x2, #0xd10
   9042c:	910003fd 	mov	x29, sp
   90430:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90434:	91362021 	add	x1, x1, #0xd88
   90438:	a90153f3 	stp	x19, x20, [sp, #16]
   9043c:	aa0003f3 	mov	x19, x0
   90440:	f9000002 	str	x2, [x0]
   90444:	f9001001 	str	x1, [x0, #32]
   90448:	f9401814 	ldr	x20, [x0, #48]
   9044c:	b40000d4 	cbz	x20, 90464 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x44>
   90450:	aa1403e0 	mov	x0, x20
   90454:	97ffdd1f 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   90458:	aa1403e0 	mov	x0, x20
   9045c:	d2800401 	mov	x1, #0x20                  	// #32
   90460:	940054ac 	bl	a5710 <operator delete(void*, unsigned long)>
   90464:	f9001a7f 	str	xzr, [x19, #48]
   90468:	f9401674 	ldr	x20, [x19, #40]
   9046c:	b40000d4 	cbz	x20, 90484 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x64>
   90470:	aa1403e0 	mov	x0, x20
   90474:	97ffdd17 	bl	878d0 <CUSBEndpoint::~CUSBEndpoint()>
   90478:	aa1403e0 	mov	x0, x20
   9047c:	d2800401 	mov	x1, #0x20                  	// #32
   90480:	940054a4 	bl	a5710 <operator delete(void*, unsigned long)>
   90484:	9100e260 	add	x0, x19, #0x38
   90488:	f900167f 	str	xzr, [x19, #40]
   9048c:	94005329 	bl	a5130 <CMACAddress::~CMACAddress()>
   90490:	aa1303e0 	mov	x0, x19
   90494:	a94153f3 	ldp	x19, x20, [sp, #16]
   90498:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9049c:	17ffdd61 	b	87a20 <CUSBFunction::~CUSBFunction()>

00000000000904a0 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   904a0:	d1008000 	sub	x0, x0, #0x20
   904a4:	17ffffdf 	b	90420 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   904a8:	d503201f 	nop
   904ac:	d503201f 	nop

00000000000904b0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   904b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   904b4:	910003fd 	mov	x29, sp
   904b8:	f9000bf3 	str	x19, [sp, #16]
   904bc:	aa0003f3 	mov	x19, x0
   904c0:	97ffffd8 	bl	90420 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   904c4:	aa1303e0 	mov	x0, x19
   904c8:	d2800801 	mov	x1, #0x40                  	// #64
   904cc:	f9400bf3 	ldr	x19, [sp, #16]
   904d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   904d4:	1400548f 	b	a5710 <operator delete(void*, unsigned long)>
   904d8:	d503201f 	nop
   904dc:	d503201f 	nop

00000000000904e0 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   904e0:	d1008000 	sub	x0, x0, #0x20
   904e4:	17fffff3 	b	904b0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   904e8:	d503201f 	nop
   904ec:	d503201f 	nop

00000000000904f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   904f0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   904f4:	910003fd 	mov	x29, sp
   904f8:	a90153f3 	stp	x19, x20, [sp, #16]
   904fc:	f9401403 	ldr	x3, [x0, #40]
   90500:	b40004e3 	cbz	x3, 9059c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xac>
   90504:	b4000581 	cbz	x1, 905b4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc4>
   90508:	d2800004 	mov	x4, #0x0                   	// #0
   9050c:	aa0003f3 	mov	x19, x0
   90510:	aa0203f4 	mov	x20, x2
   90514:	9100a3e0 	add	x0, sp, #0x28
   90518:	aa0103e2 	mov	x2, x1
   9051c:	aa0303e1 	mov	x1, x3
   90520:	5280c803 	mov	w3, #0x640                 	// #1600
   90524:	97fff1bf 	bl	8cc20 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   90528:	9100a3e0 	add	x0, sp, #0x28
   9052c:	97fff249 	bl	8ce50 <CUSBRequest::SetCompleteOnNAK()>
   90530:	aa1303e0 	mov	x0, x19
   90534:	97ffde4f 	bl	87e70 <CUSBFunction::GetHost() const>
   90538:	f9400003 	ldr	x3, [x0]
   9053c:	9100a3e1 	add	x1, sp, #0x28
   90540:	52800002 	mov	w2, #0x0                   	// #0
   90544:	f9400863 	ldr	x3, [x3, #16]
   90548:	d63f0060 	blr	x3
   9054c:	72001c13 	ands	w19, w0, #0xff
   90550:	54000101 	b.ne	90570 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   90554:	9100a3e0 	add	x0, sp, #0x28
   90558:	52800013 	mov	w19, #0x0                   	// #0
   9055c:	97fff1cd 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   90560:	2a1303e0 	mov	w0, w19
   90564:	a94153f3 	ldp	x19, x20, [sp, #16]
   90568:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9056c:	d65f03c0 	ret
   90570:	9100a3e0 	add	x0, sp, #0x28
   90574:	97fff1e3 	bl	8cd00 <CUSBRequest::GetResultLength() const>
   90578:	34fffee0 	cbz	w0, 90554 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   9057c:	b4000294 	cbz	x20, 905cc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   90580:	b9000280 	str	w0, [x20]
   90584:	9100a3e0 	add	x0, sp, #0x28
   90588:	97fff1c2 	bl	8cc90 <CUSBRequest::~CUSBRequest()>
   9058c:	2a1303e0 	mov	w0, w19
   90590:	a94153f3 	ldp	x19, x20, [sp, #16]
   90594:	a8c77bfd 	ldp	x29, x30, [sp], #112
   90598:	d65f03c0 	ret
   9059c:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   905a0:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   905a4:	9132e021 	add	x1, x1, #0xcb8
   905a8:	9119e000 	add	x0, x0, #0x678
   905ac:	52801642 	mov	w2, #0xb2                  	// #178
   905b0:	94003034 	bl	9c680 <assertion_failed>
   905b4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   905b8:	d00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   905bc:	9132e021 	add	x1, x1, #0xcb8
   905c0:	91326000 	add	x0, x0, #0xc98
   905c4:	52801662 	mov	w2, #0xb3                  	// #179
   905c8:	9400302e 	bl	9c680 <assertion_failed>
   905cc:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   905d0:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   905d4:	9132e021 	add	x1, x1, #0xcb8
   905d8:	911bc000 	add	x0, x0, #0x6f0
   905dc:	52801862 	mov	w2, #0xc3                  	// #195
   905e0:	94003028 	bl	9c680 <assertion_failed>
   905e4:	d503201f 	nop
   905e8:	d503201f 	nop
   905ec:	d503201f 	nop

00000000000905f0 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   905f0:	d1008000 	sub	x0, x0, #0x20
   905f4:	17ffffbf 	b	904f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>
   905f8:	d503201f 	nop
   905fc:	d503201f 	nop

0000000000090600 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   90600:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90604:	910003fd 	mov	x29, sp
   90608:	a90153f3 	stp	x19, x20, [sp, #16]
   9060c:	f9401803 	ldr	x3, [x0, #48]
   90610:	f90013f5 	str	x21, [sp, #32]
   90614:	b4000263 	cbz	x3, 90660 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x60>
   90618:	aa0103f4 	mov	x20, x1
   9061c:	b40002e1 	cbz	x1, 90678 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x78>
   90620:	7119005f 	cmp	w2, #0x640
   90624:	2a0203f5 	mov	w21, w2
   90628:	54000348 	b.hi	90690 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>  // b.pmore
   9062c:	aa0003f3 	mov	x19, x0
   90630:	97ffde10 	bl	87e70 <CUSBFunction::GetHost() const>
   90634:	2a1503e3 	mov	w3, w21
   90638:	aa1403e2 	mov	x2, x20
   9063c:	f9401a61 	ldr	x1, [x19, #48]
   90640:	52800004 	mov	w4, #0x0                   	// #0
   90644:	97ffeac3 	bl	8b150 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   90648:	2a2003e0 	mvn	w0, w0
   9064c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90650:	531f7c00 	lsr	w0, w0, #31
   90654:	f94013f5 	ldr	x21, [sp, #32]
   90658:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9065c:	d65f03c0 	ret
   90660:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90664:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90668:	9132e021 	add	x1, x1, #0xcb8
   9066c:	911c2000 	add	x0, x0, #0x708
   90670:	52801542 	mov	w2, #0xaa                  	// #170
   90674:	94003003 	bl	9c680 <assertion_failed>
   90678:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   9067c:	d00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   90680:	9132e021 	add	x1, x1, #0xcb8
   90684:	91326000 	add	x0, x0, #0xc98
   90688:	52801562 	mov	w2, #0xab                  	// #171
   9068c:	94002ffd 	bl	9c680 <assertion_failed>
   90690:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90694:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90698:	9132e021 	add	x1, x1, #0xcb8
   9069c:	91334000 	add	x0, x0, #0xcd0
   906a0:	52801582 	mov	w2, #0xac                  	// #172
   906a4:	94002ff7 	bl	9c680 <assertion_failed>
   906a8:	d503201f 	nop
   906ac:	d503201f 	nop

00000000000906b0 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   906b0:	d1008000 	sub	x0, x0, #0x20
   906b4:	17ffffd3 	b	90600 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>
   906b8:	d503201f 	nop
   906bc:	d503201f 	nop

00000000000906c0 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   906c0:	91006000 	add	x0, x0, #0x18
   906c4:	d65f03c0 	ret
   906c8:	d503201f 	nop
   906cc:	d503201f 	nop

00000000000906d0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   906d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   906d4:	910003fd 	mov	x29, sp
   906d8:	f9000bf3 	str	x19, [sp, #16]
   906dc:	aa0003f3 	mov	x19, x0
   906e0:	97ffdd68 	bl	87c80 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   906e4:	f00000e2 	adrp	x2, af000 <FromUmsd+0xb0>
   906e8:	91344042 	add	x2, x2, #0xd10
   906ec:	f9001a7f 	str	xzr, [x19, #48]
   906f0:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   906f4:	91362021 	add	x1, x1, #0xd88
   906f8:	9100e260 	add	x0, x19, #0x38
   906fc:	f9000262 	str	x2, [x19]
   90700:	a9027e61 	stp	x1, xzr, [x19, #32]
   90704:	f9400bf3 	ldr	x19, [sp, #16]
   90708:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9070c:	14005285 	b	a5120 <CMACAddress::CMACAddress()>

0000000000090710 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   90710:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   90714:	910003fd 	mov	x29, sp
   90718:	a90153f3 	stp	x19, x20, [sp, #16]
   9071c:	12001c33 	and	w19, w1, #0xff
   90720:	aa0003f4 	mov	x20, x0
   90724:	97ffddbb 	bl	87e10 <CUSBFunction::GetDevice() const>
   90728:	aa0003e1 	mov	x1, x0
   9072c:	9100a3e0 	add	x0, sp, #0x28
   90730:	9400023c 	bl	91020 <CUSBString::CUSBString(CUSBDevice*)>
   90734:	35000113 	cbnz	w19, 90754 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x44>
   90738:	9100a3e0 	add	x0, sp, #0x28
   9073c:	52800013 	mov	w19, #0x0                   	// #0
   90740:	94000284 	bl	91150 <CUSBString::~CUSBString()>
   90744:	2a1303e0 	mov	w0, w19
   90748:	a94153f3 	ldp	x19, x20, [sp, #16]
   9074c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   90750:	d65f03c0 	ret
   90754:	9100a3e0 	add	x0, sp, #0x28
   90758:	9400032a 	bl	91400 <CUSBString::GetLanguageID()>
   9075c:	2a0003e2 	mov	w2, w0
   90760:	2a1303e1 	mov	w1, w19
   90764:	9100a3e0 	add	x0, sp, #0x28
   90768:	9400028e 	bl	911a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   9076c:	72001c13 	ands	w19, w0, #0xff
   90770:	54fffe40 	b.eq	90738 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.none
   90774:	9100a3e0 	add	x0, sp, #0x28
   90778:	9400031e 	bl	913f0 <CUSBString::Get() const>
   9077c:	91003005 	add	x5, x0, #0xc
   90780:	910083e4 	add	x4, sp, #0x20
   90784:	b4000480 	cbz	x0, 90814 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x104>
   90788:	39c00002 	ldrsb	w2, [x0]
   9078c:	12001c41 	and	w1, w2, #0xff
   90790:	7100e85f 	cmp	w2, #0x3a
   90794:	51001c22 	sub	w2, w1, #0x7
   90798:	12001c42 	and	w2, w2, #0xff
   9079c:	1a82b021 	csel	w1, w1, w2, lt  // lt = tstop
   907a0:	5100c021 	sub	w1, w1, #0x30
   907a4:	12001c21 	and	w1, w1, #0xff
   907a8:	71003c3f 	cmp	w1, #0xf
   907ac:	54fffc68 	b.hi	90738 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.pmore
   907b0:	39c00403 	ldrsb	w3, [x0, #1]
   907b4:	91000800 	add	x0, x0, #0x2
   907b8:	12001c62 	and	w2, w3, #0xff
   907bc:	7100e87f 	cmp	w3, #0x3a
   907c0:	51001c43 	sub	w3, w2, #0x7
   907c4:	12001c63 	and	w3, w3, #0xff
   907c8:	1a83b042 	csel	w2, w2, w3, lt  // lt = tstop
   907cc:	5100c042 	sub	w2, w2, #0x30
   907d0:	12001c42 	and	w2, w2, #0xff
   907d4:	71003c5f 	cmp	w2, #0xf
   907d8:	54fffb08 	b.hi	90738 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.pmore
   907dc:	531c0c21 	ubfiz	w1, w1, #4, #4
   907e0:	eb0000bf 	cmp	x5, x0
   907e4:	2a010041 	orr	w1, w2, w1
   907e8:	38001481 	strb	w1, [x4], #1
   907ec:	54fffce1 	b.ne	90788 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x78>  // b.any
   907f0:	910083e1 	add	x1, sp, #0x20
   907f4:	9100e280 	add	x0, x20, #0x38
   907f8:	94005276 	bl	a51d0 <CMACAddress::Set(unsigned char const*)>
   907fc:	9100a3e0 	add	x0, sp, #0x28
   90800:	94000254 	bl	91150 <CUSBString::~CUSBString()>
   90804:	2a1303e0 	mov	w0, w19
   90808:	a94153f3 	ldp	x19, x20, [sp, #16]
   9080c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   90810:	d65f03c0 	ret
   90814:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90818:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   9081c:	9132e021 	add	x1, x1, #0xcb8
   90820:	9133c000 	add	x0, x0, #0xcf0
   90824:	52801a62 	mov	w2, #0xd3                  	// #211
   90828:	94002f96 	bl	9c680 <assertion_failed>
   9082c:	d503201f 	nop

0000000000090830 <CUSBCDCEthernetDevice::Configure()>:
   90830:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   90834:	910003fd 	mov	x29, sp
   90838:	a90153f3 	stp	x19, x20, [sp, #16]
   9083c:	aa0003f4 	mov	x20, x0
   90840:	14000004 	b	90850 <CUSBCDCEthernetDevice::Configure()+0x20>
   90844:	39400800 	ldrb	w0, [x0, #2]
   90848:	71003c1f 	cmp	w0, #0xf
   9084c:	540002e0 	b.eq	908a8 <CUSBCDCEthernetDevice::Configure()+0x78>  // b.none
   90850:	52800481 	mov	w1, #0x24                  	// #36
   90854:	aa1403e0 	mov	x0, x20
   90858:	97ffdd92 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   9085c:	aa0003f3 	mov	x19, x0
   90860:	b5ffff20 	cbnz	x0, 90844 <CUSBCDCEthernetDevice::Configure()+0x14>
   90864:	aa1403e0 	mov	x0, x20
   90868:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   9086c:	91376021 	add	x1, x1, #0xdd8
   90870:	52800013 	mov	w19, #0x0                   	// #0
   90874:	97ffdd97 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   90878:	2a1303e0 	mov	w0, w19
   9087c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90880:	a8c57bfd 	ldp	x29, x30, [sp], #80
   90884:	d65f03c0 	ret
   90888:	39401801 	ldrb	w1, [x0, #6]
   9088c:	350000e1 	cbnz	w1, 908a8 <CUSBCDCEthernetDevice::Configure()+0x78>
   90890:	39401c01 	ldrb	w1, [x0, #7]
   90894:	350000a1 	cbnz	w1, 908a8 <CUSBCDCEthernetDevice::Configure()+0x78>
   90898:	39401000 	ldrb	w0, [x0, #4]
   9089c:	7100041f 	cmp	w0, #0x1
   908a0:	54000148 	b.hi	908c8 <CUSBCDCEthernetDevice::Configure()+0x98>  // b.pmore
   908a4:	d503201f 	nop
   908a8:	52800081 	mov	w1, #0x4                   	// #4
   908ac:	aa1403e0 	mov	x0, x20
   908b0:	97ffdd7c 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   908b4:	b4fffd80 	cbz	x0, 90864 <CUSBCDCEthernetDevice::Configure()+0x34>
   908b8:	39401401 	ldrb	w1, [x0, #5]
   908bc:	7100283f 	cmp	w1, #0xa
   908c0:	54ffff41 	b.ne	908a8 <CUSBCDCEthernetDevice::Configure()+0x78>  // b.any
   908c4:	17fffff1 	b	90888 <CUSBCDCEthernetDevice::Configure()+0x58>
   908c8:	aa1403e0 	mov	x0, x20
   908cc:	a9025bf5 	stp	x21, x22, [sp, #32]
   908d0:	39400e61 	ldrb	w1, [x19, #3]
   908d4:	97ffff8f 	bl	90710 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   908d8:	72001c13 	ands	w19, w0, #0xff
   908dc:	540005c0 	b.eq	90994 <CUSBCDCEthernetDevice::Configure()+0x164>  // b.none
   908e0:	9100c3e0 	add	x0, sp, #0x30
   908e4:	f00000f5 	adrp	x21, af000 <FromUmsd+0xb0>
   908e8:	913762b5 	add	x21, x21, #0xdd8
   908ec:	94004551 	bl	a1e30 <CString::CString()>
   908f0:	9100c3e1 	add	x1, sp, #0x30
   908f4:	9100e280 	add	x0, x20, #0x38
   908f8:	9400529e 	bl	a5370 <CMACAddress::Format(CString*) const>
   908fc:	940038f5 	bl	9ecd0 <CLogger::Get()>
   90900:	aa0003f3 	mov	x19, x0
   90904:	9100c3e0 	add	x0, sp, #0x30
   90908:	94004566 	bl	a1ea0 <CString::operator char const*() const>
   9090c:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   90910:	aa0003e4 	mov	x4, x0
   90914:	aa1503e1 	mov	x1, x21
   90918:	aa1303e0 	mov	x0, x19
   9091c:	911ee063 	add	x3, x3, #0x7b8
   90920:	52800082 	mov	w2, #0x4                   	// #4
   90924:	94003827 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90928:	14000005 	b	9093c <CUSBCDCEthernetDevice::Configure()+0x10c>
   9092c:	39400c00 	ldrb	w0, [x0, #3]
   90930:	12001400 	and	w0, w0, #0x3f
   90934:	7100081f 	cmp	w0, #0x2
   90938:	54000460 	b.eq	909c4 <CUSBCDCEthernetDevice::Configure()+0x194>  // b.none
   9093c:	528000a1 	mov	w1, #0x5                   	// #5
   90940:	aa1403e0 	mov	x0, x20
   90944:	97ffdd57 	bl	87ea0 <CUSBFunction::GetDescriptor(unsigned char)>
   90948:	aa0003f3 	mov	x19, x0
   9094c:	b5ffff00 	cbnz	x0, 9092c <CUSBCDCEthernetDevice::Configure()+0xfc>
   90950:	f9401680 	ldr	x0, [x20, #40]
   90954:	b4000560 	cbz	x0, 90a00 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   90958:	f9401a80 	ldr	x0, [x20, #48]
   9095c:	b4000520 	cbz	x0, 90a00 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   90960:	aa1403e0 	mov	x0, x20
   90964:	97ffdc5b 	bl	87ad0 <CUSBFunction::Configure()>
   90968:	72001c13 	ands	w19, w0, #0xff
   9096c:	540006c0 	b.eq	90a44 <CUSBCDCEthernetDevice::Configure()+0x214>  // b.none
   90970:	91008280 	add	x0, x20, #0x20
   90974:	9400529f 	bl	a53f0 <CNetDevice::AddNetDevice()>
   90978:	9100c3e0 	add	x0, sp, #0x30
   9097c:	940044f1 	bl	a1d40 <CString::~CString()>
   90980:	2a1303e0 	mov	w0, w19
   90984:	a94153f3 	ldp	x19, x20, [sp, #16]
   90988:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9098c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   90990:	d65f03c0 	ret
   90994:	940038cf 	bl	9ecd0 <CLogger::Get()>
   90998:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   9099c:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   909a0:	91294063 	add	x3, x3, #0xa50
   909a4:	91376021 	add	x1, x1, #0xdd8
   909a8:	52800022 	mov	w2, #0x1                   	// #1
   909ac:	94003805 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   909b0:	2a1303e0 	mov	w0, w19
   909b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   909b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   909bc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   909c0:	d65f03c0 	ret
   909c4:	39c00a61 	ldrsb	w1, [x19, #2]
   909c8:	aa1403e0 	mov	x0, x20
   909cc:	37f80241 	tbnz	w1, #31, 90a14 <CUSBCDCEthernetDevice::Configure()+0x1e4>
   909d0:	f9401a81 	ldr	x1, [x20, #48]
   909d4:	b5000161 	cbnz	x1, 90a00 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   909d8:	97ffdd0e 	bl	87e10 <CUSBFunction::GetDevice() const>
   909dc:	aa0003f6 	mov	x22, x0
   909e0:	d2800400 	mov	x0, #0x20                  	// #32
   909e4:	94005327 	bl	a5680 <operator new(unsigned long)>
   909e8:	aa1603e1 	mov	x1, x22
   909ec:	aa0003f6 	mov	x22, x0
   909f0:	aa1303e2 	mov	x2, x19
   909f4:	97ffdb67 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   909f8:	f9001a96 	str	x22, [x20, #48]
   909fc:	17ffffd0 	b	9093c <CUSBCDCEthernetDevice::Configure()+0x10c>
   90a00:	aa1503e1 	mov	x1, x21
   90a04:	aa1403e0 	mov	x0, x20
   90a08:	52800013 	mov	w19, #0x0                   	// #0
   90a0c:	97ffdd31 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   90a10:	17ffffda 	b	90978 <CUSBCDCEthernetDevice::Configure()+0x148>
   90a14:	f9401681 	ldr	x1, [x20, #40]
   90a18:	b5000241 	cbnz	x1, 90a60 <CUSBCDCEthernetDevice::Configure()+0x230>
   90a1c:	97ffdcfd 	bl	87e10 <CUSBFunction::GetDevice() const>
   90a20:	aa0003f6 	mov	x22, x0
   90a24:	d2800400 	mov	x0, #0x20                  	// #32
   90a28:	94005316 	bl	a5680 <operator new(unsigned long)>
   90a2c:	aa1603e1 	mov	x1, x22
   90a30:	aa0003f6 	mov	x22, x0
   90a34:	aa1303e2 	mov	x2, x19
   90a38:	97ffdb56 	bl	87790 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   90a3c:	f9001696 	str	x22, [x20, #40]
   90a40:	17ffffbf 	b	9093c <CUSBCDCEthernetDevice::Configure()+0x10c>
   90a44:	940038a3 	bl	9ecd0 <CLogger::Get()>
   90a48:	aa1503e1 	mov	x1, x21
   90a4c:	d00000e3 	adrp	x3, ae000 <FromDevice+0x108>
   90a50:	9104a063 	add	x3, x3, #0x128
   90a54:	52800022 	mov	w2, #0x1                   	// #1
   90a58:	940037da 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90a5c:	17ffffc7 	b	90978 <CUSBCDCEthernetDevice::Configure()+0x148>
   90a60:	aa1503e1 	mov	x1, x21
   90a64:	52800013 	mov	w19, #0x0                   	// #0
   90a68:	97ffdd1a 	bl	87ed0 <CUSBFunction::ConfigurationError(char const*) const>
   90a6c:	17ffffc3 	b	90978 <CUSBCDCEthernetDevice::Configure()+0x148>

0000000000090a70 <CNetDevice::IsLinkUp()>:
   90a70:	52800020 	mov	w0, #0x1                   	// #1
   90a74:	d65f03c0 	ret
	...

0000000000090a80 <CNetDevice::GetLinkSpeed()>:
   90a80:	528000c0 	mov	w0, #0x6                   	// #6
   90a84:	d65f03c0 	ret
	...

0000000000090a90 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   90a90:	8b224023 	add	x3, x1, w2, uxtw
   90a94:	f9000001 	str	x1, [x0]
   90a98:	b9000802 	str	w2, [x0, #8]
   90a9c:	3900301f 	strb	wzr, [x0, #12]
   90aa0:	a9010403 	stp	x3, x1, [x0, #16]
   90aa4:	a902041f 	stp	xzr, x1, [x0, #32]
   90aa8:	b4000701 	cbz	x1, 90b88 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf8>
   90aac:	51001044 	sub	w4, w2, #0x4
   90ab0:	7107f09f 	cmp	w4, #0x1fc
   90ab4:	54000088 	b.hi	90ac4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.pmore
   90ab8:	39400024 	ldrb	w4, [x1]
   90abc:	7100249f 	cmp	w4, #0x9
   90ac0:	54000040 	b.eq	90ac8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>  // b.none
   90ac4:	d65f03c0 	ret
   90ac8:	39400424 	ldrb	w4, [x1, #1]
   90acc:	7100089f 	cmp	w4, #0x2
   90ad0:	54ffffa1 	b.ne	90ac4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.any
   90ad4:	79400424 	ldrh	w4, [x1, #2]
   90ad8:	6b02009f 	cmp	w4, w2
   90adc:	54ffff48 	b.hi	90ac4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.pmore
   90ae0:	54000643 	b.cc	90ba8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x118>  // b.lo, b.ul, b.last
   90ae4:	91000822 	add	x2, x1, #0x2
   90ae8:	eb02007f 	cmp	x3, x2
   90aec:	54000649 	b.ls	90bb4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x124>  // b.plast
   90af0:	52800007 	mov	w7, #0x0                   	// #0
   90af4:	52800002 	mov	w2, #0x0                   	// #0
   90af8:	52800129 	mov	w9, #0x9                   	// #9
   90afc:	528000e8 	mov	w8, #0x7                   	// #7
   90b00:	14000006 	b	90b18 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   90b04:	7100085f 	cmp	w2, #0x2
   90b08:	540003a0 	b.eq	90b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>  // b.none
   90b0c:	91000824 	add	x4, x1, #0x2
   90b10:	eb04007f 	cmp	x3, x4
   90b14:	54000509 	b.ls	90bb4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x124>  // b.plast
   90b18:	39400024 	ldrb	w4, [x1]
   90b1c:	2a0203e5 	mov	w5, w2
   90b20:	aa0103e6 	mov	x6, x1
   90b24:	39400422 	ldrb	w2, [x1, #1]
   90b28:	8b240021 	add	x1, x1, w4, uxtb
   90b2c:	eb03003f 	cmp	x1, x3
   90b30:	54000168 	b.hi	90b5c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>  // b.pmore
   90b34:	7100105f 	cmp	w2, #0x4
   90b38:	54000160 	b.eq	90b64 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>  // b.none
   90b3c:	7100145f 	cmp	w2, #0x5
   90b40:	54fffe21 	b.ne	90b04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x74>  // b.any
   90b44:	121e78a5 	and	w5, w5, #0xfffffffd
   90b48:	340000a5 	cbz	w5, 90b5c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>
   90b4c:	710000ff 	cmp	w7, #0x0
   90b50:	1a881125 	csel	w5, w9, w8, ne  // ne = any
   90b54:	6b05009f 	cmp	w4, w5
   90b58:	54fffda0 	b.eq	90b0c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x7c>  // b.none
   90b5c:	f9001406 	str	x6, [x0, #40]
   90b60:	d65f03c0 	ret
   90b64:	34ffffc5 	cbz	w5, 90b5c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>
   90b68:	394014c7 	ldrb	w7, [x6, #5]
   90b6c:	52800125 	mov	w5, #0x9                   	// #9
   90b70:	710004ff 	cmp	w7, #0x1
   90b74:	1a9f17e7 	cset	w7, eq  // eq = none
   90b78:	17fffff7 	b	90b54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xc4>
   90b7c:	35ffff05 	cbnz	w5, 90b5c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>
   90b80:	52800125 	mov	w5, #0x9                   	// #9
   90b84:	17fffff4 	b	90b54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xc4>
   90b88:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90b8c:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90b90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90b94:	91378021 	add	x1, x1, #0xde0
   90b98:	910003fd 	mov	x29, sp
   90b9c:	9137e000 	add	x0, x0, #0xdf8
   90ba0:	52800482 	mov	w2, #0x24                  	// #36
   90ba4:	94002eb7 	bl	9c680 <assertion_failed>
   90ba8:	8b242023 	add	x3, x1, w4, uxth
   90bac:	f9000803 	str	x3, [x0, #16]
   90bb0:	17ffffcd 	b	90ae4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   90bb4:	eb03003f 	cmp	x1, x3
   90bb8:	54000060 	b.eq	90bc4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x134>  // b.none
   90bbc:	f9001401 	str	x1, [x0, #40]
   90bc0:	d65f03c0 	ret
   90bc4:	52800021 	mov	w1, #0x1                   	// #1
   90bc8:	39003001 	strb	w1, [x0, #12]
   90bcc:	d65f03c0 	ret

0000000000090bd0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   90bd0:	b40001c1 	cbz	x1, 90c08 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x38>
   90bd4:	39403022 	ldrb	w2, [x1, #12]
   90bd8:	b9400823 	ldr	w3, [x1, #8]
   90bdc:	f9400024 	ldr	x4, [x1]
   90be0:	39003002 	strb	w2, [x0, #12]
   90be4:	f9401022 	ldr	x2, [x1, #32]
   90be8:	b9000803 	str	w3, [x0, #8]
   90bec:	f9000004 	str	x4, [x0]
   90bf0:	a9410c24 	ldp	x4, x3, [x1, #16]
   90bf4:	f9001002 	str	x2, [x0, #32]
   90bf8:	f9401421 	ldr	x1, [x1, #40]
   90bfc:	a9010c04 	stp	x4, x3, [x0, #16]
   90c00:	f9001401 	str	x1, [x0, #40]
   90c04:	d65f03c0 	ret
   90c08:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90c0c:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90c10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90c14:	91378021 	add	x1, x1, #0xde0
   90c18:	910003fd 	mov	x29, sp
   90c1c:	91382000 	add	x0, x0, #0xe08
   90c20:	52801042 	mov	w2, #0x82                  	// #130
   90c24:	94002e97 	bl	9c680 <assertion_failed>
   90c28:	d503201f 	nop
   90c2c:	d503201f 	nop

0000000000090c30 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   90c30:	d65f03c0 	ret
   90c34:	d503201f 	nop
   90c38:	d503201f 	nop
   90c3c:	d503201f 	nop

0000000000090c40 <CUSBConfigurationParser::IsValid() const>:
   90c40:	39403000 	ldrb	w0, [x0, #12]
   90c44:	d65f03c0 	ret
   90c48:	d503201f 	nop
   90c4c:	d503201f 	nop

0000000000090c50 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   90c50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90c54:	aa0003e5 	mov	x5, x0
   90c58:	910003fd 	mov	x29, sp
   90c5c:	39403000 	ldrb	w0, [x0, #12]
   90c60:	34000460 	cbz	w0, 90cec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   90c64:	a94108a4 	ldp	x4, x2, [x5, #16]
   90c68:	12001c21 	and	w1, w1, #0xff
   90c6c:	eb04005f 	cmp	x2, x4
   90c70:	54000143 	b.cc	90c98 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>  // b.lo, b.ul, b.last
   90c74:	1400001a 	b	90cdc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>
   90c78:	7100143f 	cmp	w1, #0x5
   90c7c:	7a440860 	ccmp	w3, #0x4, #0x0, eq  // eq = none
   90c80:	540002e0 	b.eq	90cdc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>  // b.none
   90c84:	6b01007f 	cmp	w3, w1
   90c88:	54000200 	b.eq	90cc8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>  // b.none
   90c8c:	eb04005f 	cmp	x2, x4
   90c90:	f9000ca2 	str	x2, [x5, #24]
   90c94:	54000240 	b.eq	90cdc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>  // b.none
   90c98:	39400046 	ldrb	w6, [x2]
   90c9c:	aa0203e0 	mov	x0, x2
   90ca0:	39400443 	ldrb	w3, [x2, #1]
   90ca4:	8b060042 	add	x2, x2, x6
   90ca8:	eb04005f 	cmp	x2, x4
   90cac:	54fffe69 	b.ls	90c78 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x28>  // b.plast
   90cb0:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90cb4:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90cb8:	91378021 	add	x1, x1, #0xde0
   90cbc:	9138a000 	add	x0, x0, #0xe28
   90cc0:	52801522 	mov	w2, #0xa9                  	// #169
   90cc4:	94002e6f 	bl	9c680 <assertion_failed>
   90cc8:	f9000ca2 	str	x2, [x5, #24]
   90ccc:	f90010a0 	str	x0, [x5, #32]
   90cd0:	f90014a0 	str	x0, [x5, #40]
   90cd4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90cd8:	d65f03c0 	ret
   90cdc:	d2800000 	mov	x0, #0x0                   	// #0
   90ce0:	f90010a0 	str	x0, [x5, #32]
   90ce4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90ce8:	d65f03c0 	ret
   90cec:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90cf0:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90cf4:	91378021 	add	x1, x1, #0xde0
   90cf8:	91386000 	add	x0, x0, #0xe18
   90cfc:	528013e2 	mov	w2, #0x9f                  	// #159
   90d00:	94002e60 	bl	9c680 <assertion_failed>
   90d04:	d503201f 	nop
   90d08:	d503201f 	nop
   90d0c:	d503201f 	nop

0000000000090d10 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   90d10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90d14:	910003fd 	mov	x29, sp
   90d18:	39403001 	ldrb	w1, [x0, #12]
   90d1c:	340000a1 	cbz	w1, 90d30 <CUSBConfigurationParser::GetCurrentDescriptor()+0x20>
   90d20:	f9401000 	ldr	x0, [x0, #32]
   90d24:	b4000120 	cbz	x0, 90d48 <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   90d28:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90d2c:	d65f03c0 	ret
   90d30:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90d34:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90d38:	91378021 	add	x1, x1, #0xde0
   90d3c:	91386000 	add	x0, x0, #0xe18
   90d40:	528018e2 	mov	w2, #0xc7                  	// #199
   90d44:	94002e4f 	bl	9c680 <assertion_failed>
   90d48:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90d4c:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90d50:	91378021 	add	x1, x1, #0xde0
   90d54:	91392000 	add	x0, x0, #0xe48
   90d58:	52801902 	mov	w2, #0xc8                  	// #200
   90d5c:	94002e49 	bl	9c680 <assertion_failed>

0000000000090d60 <CUSBConfigurationParser::Error(char const*) const>:
   90d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90d64:	910003fd 	mov	x29, sp
   90d68:	a90153f3 	stp	x19, x20, [sp, #16]
   90d6c:	b4000241 	cbz	x1, 90db4 <CUSBConfigurationParser::Error(char const*) const+0x54>
   90d70:	aa0003f3 	mov	x19, x0
   90d74:	aa0103f4 	mov	x20, x1
   90d78:	940037d6 	bl	9ecd0 <CLogger::Get()>
   90d7c:	f9400264 	ldr	x4, [x19]
   90d80:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   90d84:	aa1403e1 	mov	x1, x20
   90d88:	52800022 	mov	w2, #0x1                   	// #1
   90d8c:	9139a063 	add	x3, x3, #0xe68
   90d90:	f9401665 	ldr	x5, [x19, #40]
   90d94:	4b0400a4 	sub	w4, w5, w4
   90d98:	9400370a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90d9c:	b9400a61 	ldr	w1, [x19, #8]
   90da0:	aa1403e2 	mov	x2, x20
   90da4:	f9400260 	ldr	x0, [x19]
   90da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   90dac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90db0:	14002f88 	b	9cbd0 <debug_hexdump(void const*, unsigned int, char const*)>
   90db4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90db8:	d00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   90dbc:	91378021 	add	x1, x1, #0xde0
   90dc0:	91066000 	add	x0, x0, #0x198
   90dc4:	528019e2 	mov	w2, #0xcf                  	// #207
   90dc8:	94002e2e 	bl	9c680 <assertion_failed>
   90dcc:	00000000 	.inst	0x00000000 ; undefined

0000000000090dd0 <CUSBGamePadDevice::GetInitialState()>:
   90dd0:	91012000 	add	x0, x0, #0x48
   90dd4:	d65f03c0 	ret
   90dd8:	d503201f 	nop
   90ddc:	d503201f 	nop

0000000000090de0 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   90de0:	b4000321 	cbz	x1, 90e44 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   90de4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90de8:	910003fd 	mov	x29, sp
   90dec:	7942a003 	ldrh	w3, [x0, #336]
   90df0:	a90153f3 	stp	x19, x20, [sp, #16]
   90df4:	aa0003f3 	mov	x19, x0
   90df8:	6b02007f 	cmp	w3, w2
   90dfc:	54000080 	b.eq	90e0c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.none
   90e00:	a94153f3 	ldp	x19, x20, [sp, #16]
   90e04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90e08:	d65f03c0 	ret
   90e0c:	f940a402 	ldr	x2, [x0, #328]
   90e10:	b4ffff82 	cbz	x2, 90e00 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   90e14:	aa0003f4 	mov	x20, x0
   90e18:	f8448682 	ldr	x2, [x20], #72
   90e1c:	f9404442 	ldr	x2, [x2, #136]
   90e20:	d63f0040 	blr	x2
   90e24:	b9415660 	ldr	w0, [x19, #340]
   90e28:	aa1403e1 	mov	x1, x20
   90e2c:	f940a662 	ldr	x2, [x19, #328]
   90e30:	a94153f3 	ldp	x19, x20, [sp, #16]
   90e34:	51000400 	sub	w0, w0, #0x1
   90e38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90e3c:	aa0203f0 	mov	x16, x2
   90e40:	d61f0200 	br	x16
   90e44:	d65f03c0 	ret
   90e48:	d503201f 	nop
   90e4c:	d503201f 	nop

0000000000090e50 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   90e50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90e54:	910003fd 	mov	x29, sp
   90e58:	f940a402 	ldr	x2, [x0, #328]
   90e5c:	b50000a2 	cbnz	x2, 90e70 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x20>
   90e60:	f900a401 	str	x1, [x0, #328]
   90e64:	b4000121 	cbz	x1, 90e88 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x38>
   90e68:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90e6c:	d65f03c0 	ret
   90e70:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90e74:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90e78:	913a6021 	add	x1, x1, #0xe98
   90e7c:	913aa000 	add	x0, x0, #0xea8
   90e80:	52800962 	mov	w2, #0x4b                  	// #75
   90e84:	94002dff 	bl	9c680 <assertion_failed>
   90e88:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90e8c:	f00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   90e90:	913a6021 	add	x1, x1, #0xe98
   90e94:	913b0000 	add	x0, x0, #0xec0
   90e98:	528009a2 	mov	w2, #0x4d                  	// #77
   90e9c:	94002df9 	bl	9c680 <assertion_failed>

0000000000090ea0 <CUSBGamePadDevice::Configure()>:
   90ea0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90ea4:	910003fd 	mov	x29, sp
   90ea8:	7942a001 	ldrh	w1, [x0, #336]
   90eac:	a90153f3 	stp	x19, x20, [sp, #16]
   90eb0:	34000441 	cbz	w1, 90f38 <CUSBGamePadDevice::Configure()+0x98>
   90eb4:	aa0003f3 	mov	x19, x0
   90eb8:	97ffe66a 	bl	8a860 <CUSBHIDDevice::Configure(unsigned int)>
   90ebc:	72001c1f 	tst	w0, #0xff
   90ec0:	2a0003f4 	mov	w20, w0
   90ec4:	54000240 	b.eq	90f0c <CUSBGamePadDevice::Configure()+0x6c>  // b.none
   90ec8:	b0000120 	adrp	x0, b5000 <font_data+0x1340>
   90ecc:	b94db801 	ldr	w1, [x0, #3512]
   90ed0:	11000422 	add	w2, w1, #0x1
   90ed4:	b9015661 	str	w1, [x19, #340]
   90ed8:	b90db802 	str	w2, [x0, #3512]
   90edc:	940030b9 	bl	9d1c0 <CDeviceNameService::Get()>
   90ee0:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90ee4:	913de021 	add	x1, x1, #0xf78
   90ee8:	b9415662 	ldr	w2, [x19, #340]
   90eec:	aa1303e3 	mov	x3, x19
   90ef0:	91002021 	add	x1, x1, #0x8
   90ef4:	52800004 	mov	w4, #0x0                   	// #0
   90ef8:	940030be 	bl	9d1f0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   90efc:	2a1403e0 	mov	w0, w20
   90f00:	a94153f3 	ldp	x19, x20, [sp, #16]
   90f04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90f08:	d65f03c0 	ret
   90f0c:	94003771 	bl	9ecd0 <CLogger::Get()>
   90f10:	900000e3 	adrp	x3, ac000 <CEMMCDevice::CardReset()+0x7b0>
   90f14:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90f18:	91298063 	add	x3, x3, #0xa60
   90f1c:	913de021 	add	x1, x1, #0xf78
   90f20:	52800022 	mov	w2, #0x1                   	// #1
   90f24:	940036a7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90f28:	2a1403e0 	mov	w0, w20
   90f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90f30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90f34:	d65f03c0 	ret
   90f38:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90f3c:	d00000e0 	adrp	x0, ae000 <FromDevice+0x108>
   90f40:	913a6021 	add	x1, x1, #0xe98
   90f44:	91150000 	add	x0, x0, #0x540
   90f48:	528006a2 	mov	w2, #0x35                  	// #53
   90f4c:	94002dcd 	bl	9c680 <assertion_failed>

0000000000090f50 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   90f50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90f54:	52800002 	mov	w2, #0x0                   	// #0
   90f58:	910003fd 	mov	x29, sp
   90f5c:	f9000bf3 	str	x19, [sp, #16]
   90f60:	aa0003f3 	mov	x19, x0
   90f64:	97ffe5fb 	bl	8a750 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   90f68:	f00000e3 	adrp	x3, af000 <FromUmsd+0xb0>
   90f6c:	913ba063 	add	x3, x3, #0xee8
   90f70:	f900a67f 	str	xzr, [x19, #328]
   90f74:	91012260 	add	x0, x19, #0x48
   90f78:	d2802002 	mov	x2, #0x100                 	// #256
   90f7c:	7902a27f 	strh	wzr, [x19, #336]
   90f80:	52800001 	mov	w1, #0x0                   	// #0
   90f84:	f9000263 	str	x3, [x19]
   90f88:	b901567f 	str	wzr, [x19, #340]
   90f8c:	f9400bf3 	ldr	x19, [sp, #16]
   90f90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90f94:	14004d3f 	b	a4490 <memset>
   90f98:	d503201f 	nop
   90f9c:	d503201f 	nop

0000000000090fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   90fa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90fa4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90fa8:	913ba021 	add	x1, x1, #0xee8
   90fac:	910003fd 	mov	x29, sp
   90fb0:	f9000bf3 	str	x19, [sp, #16]
   90fb4:	aa0003f3 	mov	x19, x0
   90fb8:	f9000001 	str	x1, [x0]
   90fbc:	f900a41f 	str	xzr, [x0, #328]
   90fc0:	94003080 	bl	9d1c0 <CDeviceNameService::Get()>
   90fc4:	f00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   90fc8:	913de021 	add	x1, x1, #0xf78
   90fcc:	b9415662 	ldr	w2, [x19, #340]
   90fd0:	91002021 	add	x1, x1, #0x8
   90fd4:	52800003 	mov	w3, #0x0                   	// #0
   90fd8:	940030a6 	bl	9d270 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   90fdc:	aa1303e0 	mov	x0, x19
   90fe0:	f9400bf3 	ldr	x19, [sp, #16]
   90fe4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90fe8:	17ffe5f2 	b	8a7b0 <CUSBHIDDevice::~CUSBHIDDevice()>
   90fec:	d503201f 	nop

0000000000090ff0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   90ff0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90ff4:	910003fd 	mov	x29, sp
   90ff8:	f9000bf3 	str	x19, [sp, #16]
   90ffc:	aa0003f3 	mov	x19, x0
   91000:	97ffffe8 	bl	90fa0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   91004:	aa1303e0 	mov	x0, x19
   91008:	d2802b01 	mov	x1, #0x158                 	// #344
   9100c:	f9400bf3 	ldr	x19, [sp, #16]
   91010:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91014:	140051bf 	b	a5710 <operator delete(void*, unsigned long)>
	...

0000000000091020 <CUSBString::CUSBString(CUSBDevice*)>:
   91020:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91024:	910003fd 	mov	x29, sp
   91028:	a90153f3 	stp	x19, x20, [sp, #16]
   9102c:	aa0003f3 	mov	x19, x0
   91030:	d2800400 	mov	x0, #0x20                  	// #32
   91034:	a9007e61 	stp	x1, xzr, [x19]
   91038:	94005192 	bl	a5680 <operator new(unsigned long)>
   9103c:	aa0003f4 	mov	x20, x0
   91040:	9400437c 	bl	a1e30 <CString::CString()>
   91044:	f9000a74 	str	x20, [x19, #16]
   91048:	f9400260 	ldr	x0, [x19]
   9104c:	b4000080 	cbz	x0, 9105c <CUSBString::CUSBString(CUSBDevice*)+0x3c>
   91050:	a94153f3 	ldp	x19, x20, [sp, #16]
   91054:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91058:	d65f03c0 	ret
   9105c:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   91060:	f00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   91064:	913e2021 	add	x1, x1, #0xf88
   91068:	913fc000 	add	x0, x0, #0xff0
   9106c:	52800462 	mov	w2, #0x23                  	// #35
   91070:	94002d84 	bl	9c680 <assertion_failed>
   91074:	d503201f 	nop
   91078:	d503201f 	nop
   9107c:	d503201f 	nop

0000000000091080 <CUSBString::CUSBString(CUSBString*)>:
   91080:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91084:	910003fd 	mov	x29, sp
   91088:	a90153f3 	stp	x19, x20, [sp, #16]
   9108c:	aa0003f3 	mov	x19, x0
   91090:	d2800400 	mov	x0, #0x20                  	// #32
   91094:	aa0103f4 	mov	x20, x1
   91098:	f90013f5 	str	x21, [sp, #32]
   9109c:	f900067f 	str	xzr, [x19, #8]
   910a0:	94005178 	bl	a5680 <operator new(unsigned long)>
   910a4:	aa0003f5 	mov	x21, x0
   910a8:	94004362 	bl	a1e30 <CString::CString()>
   910ac:	f9000a75 	str	x21, [x19, #16]
   910b0:	b4000334 	cbz	x20, 91114 <CUSBString::CUSBString(CUSBString*)+0x94>
   910b4:	a9400281 	ldp	x1, x0, [x20]
   910b8:	f9000261 	str	x1, [x19]
   910bc:	b4000120 	cbz	x0, 910e0 <CUSBString::CUSBString(CUSBString*)+0x60>
   910c0:	39400000 	ldrb	w0, [x0]
   910c4:	94005177 	bl	a56a0 <operator new[](unsigned long)>
   910c8:	f9400681 	ldr	x1, [x20, #8]
   910cc:	f9000660 	str	x0, [x19, #8]
   910d0:	39400022 	ldrb	w2, [x1]
   910d4:	94004f09 	bl	a4cf8 <memcpy>
   910d8:	f9400a60 	ldr	x0, [x19, #16]
   910dc:	b4000100 	cbz	x0, 910fc <CUSBString::CUSBString(CUSBString*)+0x7c>
   910e0:	f9400a80 	ldr	x0, [x20, #16]
   910e4:	b4000240 	cbz	x0, 9112c <CUSBString::CUSBString(CUSBString*)+0xac>
   910e8:	f94013f5 	ldr	x21, [sp, #32]
   910ec:	f9000a60 	str	x0, [x19, #16]
   910f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   910f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   910f8:	d65f03c0 	ret
   910fc:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   91100:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   91104:	913e2021 	add	x1, x1, #0xf88
   91108:	913e6000 	add	x0, x0, #0xf98
   9110c:	528006a2 	mov	w2, #0x35                  	// #53
   91110:	94002d5c 	bl	9c680 <assertion_failed>
   91114:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   91118:	900000e0 	adrp	x0, ad000 <From+0x4c0>
   9111c:	913e2021 	add	x1, x1, #0xf88
   91120:	913c6000 	add	x0, x0, #0xf18
   91124:	52800562 	mov	w2, #0x2b                  	// #43
   91128:	94002d56 	bl	9c680 <assertion_failed>
   9112c:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   91130:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   91134:	913e2021 	add	x1, x1, #0xf88
   91138:	913ea000 	add	x0, x0, #0xfa8
   9113c:	528006c2 	mov	w2, #0x36                  	// #54
   91140:	94002d50 	bl	9c680 <assertion_failed>
   91144:	d503201f 	nop
   91148:	d503201f 	nop
   9114c:	d503201f 	nop

0000000000091150 <CUSBString::~CUSBString()>:
   91150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91154:	910003fd 	mov	x29, sp
   91158:	f9000bf3 	str	x19, [sp, #16]
   9115c:	aa0003f3 	mov	x19, x0
   91160:	f9400800 	ldr	x0, [x0, #16]
   91164:	b4000080 	cbz	x0, 91174 <CUSBString::~CUSBString()+0x24>
   91168:	f9400001 	ldr	x1, [x0]
   9116c:	f9400421 	ldr	x1, [x1, #8]
   91170:	d63f0020 	blr	x1
   91174:	f9000a7f 	str	xzr, [x19, #16]
   91178:	f9400660 	ldr	x0, [x19, #8]
   9117c:	b4000080 	cbz	x0, 9118c <CUSBString::~CUSBString()+0x3c>
   91180:	f9400bf3 	ldr	x19, [sp, #16]
   91184:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91188:	14005156 	b	a56e0 <operator delete[](void*)>
   9118c:	f9400bf3 	ldr	x19, [sp, #16]
   91190:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91194:	d65f03c0 	ret
   91198:	d503201f 	nop
   9119c:	d503201f 	nop

00000000000911a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   911a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   911a4:	910003fd 	mov	x29, sp
   911a8:	a90153f3 	stp	x19, x20, [sp, #16]
   911ac:	a9025bf5 	stp	x21, x22, [sp, #32]
   911b0:	72001c35 	ands	w21, w1, #0xff
   911b4:	a90363f7 	stp	x23, x24, [sp, #48]
   911b8:	540009c0 	b.eq	912f0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>  // b.none
   911bc:	aa0003f3 	mov	x19, x0
   911c0:	12003c56 	and	w22, w2, #0xffff
   911c4:	f9400400 	ldr	x0, [x0, #8]
   911c8:	b4000040 	cbz	x0, 911d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x30>
   911cc:	94005145 	bl	a56e0 <operator delete[](void*)>
   911d0:	d2800080 	mov	x0, #0x4                   	// #4
   911d4:	94005133 	bl	a56a0 <operator new[](unsigned long)>
   911d8:	f9000660 	str	x0, [x19, #8]
   911dc:	f9400261 	ldr	x1, [x19]
   911e0:	b4000941 	cbz	x1, 91308 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x168>
   911e4:	aa0103e0 	mov	x0, x1
   911e8:	97ffd536 	bl	866c0 <CUSBDevice::GetHost() const>
   911ec:	aa0003f4 	mov	x20, x0
   911f0:	f9400260 	ldr	x0, [x19]
   911f4:	97ffd527 	bl	86690 <CUSBDevice::GetEndpoint0() const>
   911f8:	aa0003e1 	mov	x1, x0
   911fc:	2a1603e7 	mov	w7, w22
   91200:	f9400664 	ldr	x4, [x19, #8]
   91204:	aa1403e0 	mov	x0, x20
   91208:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   9120c:	52800085 	mov	w5, #0x4                   	// #4
   91210:	2a1503e3 	mov	w3, w21
   91214:	52800062 	mov	w2, #0x3                   	// #3
   91218:	97ffe79a 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   9121c:	37f805c0 	tbnz	w0, #31, 912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>
   91220:	f9400660 	ldr	x0, [x19, #8]
   91224:	39400014 	ldrb	w20, [x0]
   91228:	7100069f 	cmp	w20, #0x1
   9122c:	54000549 	b.ls	912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>  // b.plast
   91230:	37000534 	tbnz	w20, #0, 912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>
   91234:	39400417 	ldrb	w23, [x0, #1]
   91238:	71000eff 	cmp	w23, #0x3
   9123c:	540004c1 	b.ne	912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>  // b.any
   91240:	7100129f 	cmp	w20, #0x4
   91244:	540006e8 	b.hi	91320 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x180>  // b.pmore
   91248:	71000a9f 	cmp	w20, #0x2
   9124c:	54000b60 	b.eq	913b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x218>  // b.none
   91250:	7100129f 	cmp	w20, #0x4
   91254:	54000be1 	b.ne	913d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x230>  // b.any
   91258:	d10043ff 	sub	sp, sp, #0x10
   9125c:	d2800021 	mov	x1, #0x1                   	// #1
   91260:	910003f4 	mov	x20, sp
   91264:	52800003 	mov	w3, #0x0                   	// #0
   91268:	d2800005 	mov	x5, #0x0                   	// #0
   9126c:	52800be6 	mov	w6, #0x5f                  	// #95
   91270:	8b050402 	add	x2, x0, x5, lsl #1
   91274:	11000463 	add	w3, w3, #0x1
   91278:	79400442 	ldrh	w2, [x2, #2]
   9127c:	51008044 	sub	w4, w2, #0x20
   91280:	12003c84 	and	w4, w4, #0xffff
   91284:	71017c9f 	cmp	w4, #0x5f
   91288:	1a863042 	csel	w2, w2, w6, cc  // cc = lo, ul, last
   9128c:	38256a82 	strb	w2, [x20, x5]
   91290:	2a0303e5 	mov	w5, w3
   91294:	eb23403f 	cmp	x1, w3, uxtw
   91298:	54fffec8 	b.hi	91270 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>  // b.pmore
   9129c:	38216a9f 	strb	wzr, [x20, x1]
   912a0:	f9400a60 	ldr	x0, [x19, #16]
   912a4:	b4000080 	cbz	x0, 912b4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x114>
   912a8:	f9400001 	ldr	x1, [x0]
   912ac:	f9400421 	ldr	x1, [x1, #8]
   912b0:	d63f0020 	blr	x1
   912b4:	d2800400 	mov	x0, #0x20                  	// #32
   912b8:	940050f2 	bl	a5680 <operator new(unsigned long)>
   912bc:	aa1403e1 	mov	x1, x20
   912c0:	aa0003f4 	mov	x20, x0
   912c4:	940042e3 	bl	a1e50 <CString::CString(char const*)>
   912c8:	52800020 	mov	w0, #0x1                   	// #1
   912cc:	f9000a74 	str	x20, [x19, #16]
   912d0:	14000002 	b	912d8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>
   912d4:	52800000 	mov	w0, #0x0                   	// #0
   912d8:	910003bf 	mov	sp, x29
   912dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   912e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   912e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   912e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   912ec:	d65f03c0 	ret
   912f0:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   912f4:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   912f8:	913e2021 	add	x1, x1, #0xf88
   912fc:	913f0000 	add	x0, x0, #0xfc0
   91300:	528008e2 	mov	w2, #0x47                  	// #71
   91304:	94002cdf 	bl	9c680 <assertion_failed>
   91308:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   9130c:	f00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   91310:	913e2021 	add	x1, x1, #0xf88
   91314:	913fc000 	add	x0, x0, #0xff0
   91318:	528009a2 	mov	w2, #0x4d                  	// #77
   9131c:	94002cd9 	bl	9c680 <assertion_failed>
   91320:	d2800041 	mov	x1, #0x2                   	// #2
   91324:	940050fb 	bl	a5710 <operator delete(void*, unsigned long)>
   91328:	92401e80 	and	x0, x20, #0xff
   9132c:	940050dd 	bl	a56a0 <operator new[](unsigned long)>
   91330:	aa0003e1 	mov	x1, x0
   91334:	f9400260 	ldr	x0, [x19]
   91338:	f9000661 	str	x1, [x19, #8]
   9133c:	97ffd4e1 	bl	866c0 <CUSBDevice::GetHost() const>
   91340:	aa0003f8 	mov	x24, x0
   91344:	f9400260 	ldr	x0, [x19]
   91348:	97ffd4d2 	bl	86690 <CUSBDevice::GetEndpoint0() const>
   9134c:	aa0003e1 	mov	x1, x0
   91350:	2a1603e7 	mov	w7, w22
   91354:	f9400664 	ldr	x4, [x19, #8]
   91358:	aa1803e0 	mov	x0, x24
   9135c:	2a1503e3 	mov	w3, w21
   91360:	2a1703e2 	mov	w2, w23
   91364:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   91368:	2a1403e5 	mov	w5, w20
   9136c:	97ffe745 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   91370:	6b00029f 	cmp	w20, w0
   91374:	54fffb01 	b.ne	912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>  // b.any
   91378:	f9400660 	ldr	x0, [x19, #8]
   9137c:	39400001 	ldrb	w1, [x0]
   91380:	6b14003f 	cmp	w1, w20
   91384:	54fffa81 	b.ne	912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>  // b.any
   91388:	39400402 	ldrb	w2, [x0, #1]
   9138c:	71000c5f 	cmp	w2, #0x3
   91390:	54fffa21 	b.ne	912d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x134>  // b.any
   91394:	370001e1 	tbnz	w1, #0, 913d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x230>
   91398:	51000821 	sub	w1, w1, #0x2
   9139c:	13017c21 	asr	w1, w1, #1
   913a0:	93407c21 	sxtw	x1, w1
   913a4:	91004022 	add	x2, x1, #0x10
   913a8:	927cec42 	and	x2, x2, #0xfffffffffffffff0
   913ac:	cb2263ff 	sub	sp, sp, x2
   913b0:	910003f4 	mov	x20, sp
   913b4:	17ffffac 	b	91264 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc4>
   913b8:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   913bc:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   913c0:	913e2021 	add	x1, x1, #0xf88
   913c4:	913f4000 	add	x0, x0, #0xfd0
   913c8:	52800ea2 	mov	w2, #0x75                  	// #117
   913cc:	94002cad 	bl	9c680 <assertion_failed>
   913d0:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   913d4:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   913d8:	913e2021 	add	x1, x1, #0xf88
   913dc:	913fc000 	add	x0, x0, #0xff0
   913e0:	52800ec2 	mov	w2, #0x76                  	// #118
   913e4:	94002ca7 	bl	9c680 <assertion_failed>
   913e8:	d503201f 	nop
   913ec:	d503201f 	nop

00000000000913f0 <CUSBString::Get() const>:
   913f0:	f9400800 	ldr	x0, [x0, #16]
   913f4:	140042ab 	b	a1ea0 <CString::operator char const*() const>
   913f8:	d503201f 	nop
   913fc:	d503201f 	nop

0000000000091400 <CUSBString::GetLanguageID()>:
   91400:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91404:	910003fd 	mov	x29, sp
   91408:	a9025bf5 	stp	x21, x22, [sp, #32]
   9140c:	aa0003f5 	mov	x21, x0
   91410:	d2800080 	mov	x0, #0x4                   	// #4
   91414:	a90153f3 	stp	x19, x20, [sp, #16]
   91418:	940050a2 	bl	a56a0 <operator new[](unsigned long)>
   9141c:	f94002a1 	ldr	x1, [x21]
   91420:	b4000be1 	cbz	x1, 9159c <CUSBString::GetLanguageID()+0x19c>
   91424:	aa0003f3 	mov	x19, x0
   91428:	aa0103e0 	mov	x0, x1
   9142c:	97ffd4a5 	bl	866c0 <CUSBDevice::GetHost() const>
   91430:	aa0003f4 	mov	x20, x0
   91434:	f94002a0 	ldr	x0, [x21]
   91438:	97ffd496 	bl	86690 <CUSBDevice::GetEndpoint0() const>
   9143c:	aa0003e1 	mov	x1, x0
   91440:	52800007 	mov	w7, #0x0                   	// #0
   91444:	aa1403e0 	mov	x0, x20
   91448:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   9144c:	52800085 	mov	w5, #0x4                   	// #4
   91450:	aa1303e4 	mov	x4, x19
   91454:	52800003 	mov	w3, #0x0                   	// #0
   91458:	52800062 	mov	w2, #0x3                   	// #3
   9145c:	97ffe709 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   91460:	37f80380 	tbnz	w0, #31, 914d0 <CUSBString::GetLanguageID()+0xd0>
   91464:	39400274 	ldrb	w20, [x19]
   91468:	71000e9f 	cmp	w20, #0x3
   9146c:	54000329 	b.ls	914d0 <CUSBString::GetLanguageID()+0xd0>  // b.plast
   91470:	37000314 	tbnz	w20, #0, 914d0 <CUSBString::GetLanguageID()+0xd0>
   91474:	39400676 	ldrb	w22, [x19, #1]
   91478:	71000edf 	cmp	w22, #0x3
   9147c:	540002a1 	b.ne	914d0 <CUSBString::GetLanguageID()+0xd0>  // b.any
   91480:	7100129f 	cmp	w20, #0x4
   91484:	52800081 	mov	w1, #0x4                   	// #4
   91488:	54000341 	b.ne	914f0 <CUSBString::GetLanguageID()+0xf0>  // b.any
   9148c:	51000822 	sub	w2, w1, #0x2
   91490:	d2800000 	mov	x0, #0x0                   	// #0
   91494:	13017c42 	asr	w2, w2, #1
   91498:	52800001 	mov	w1, #0x0                   	// #0
   9149c:	93407c42 	sxtw	x2, w2
   914a0:	14000005 	b	914b4 <CUSBString::GetLanguageID()+0xb4>
   914a4:	11000420 	add	w0, w1, #0x1
   914a8:	eb20405f 	cmp	x2, w0, uxtw
   914ac:	aa0003e1 	mov	x1, x0
   914b0:	54000669 	b.ls	9157c <CUSBString::GetLanguageID()+0x17c>  // b.plast
   914b4:	8b000660 	add	x0, x19, x0, lsl #1
   914b8:	79400414 	ldrh	w20, [x0, #2]
   914bc:	7110269f 	cmp	w20, #0x409
   914c0:	54ffff21 	b.ne	914a4 <CUSBString::GetLanguageID()+0xa4>  // b.any
   914c4:	aa1303e0 	mov	x0, x19
   914c8:	94005086 	bl	a56e0 <operator delete[](void*)>
   914cc:	14000004 	b	914dc <CUSBString::GetLanguageID()+0xdc>
   914d0:	aa1303e0 	mov	x0, x19
   914d4:	52808134 	mov	w20, #0x409                 	// #1033
   914d8:	94005082 	bl	a56e0 <operator delete[](void*)>
   914dc:	2a1403e0 	mov	w0, w20
   914e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   914e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   914e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   914ec:	d65f03c0 	ret
   914f0:	aa1303e0 	mov	x0, x19
   914f4:	9400507b 	bl	a56e0 <operator delete[](void*)>
   914f8:	92401e80 	and	x0, x20, #0xff
   914fc:	94005069 	bl	a56a0 <operator new[](unsigned long)>
   91500:	aa0003f3 	mov	x19, x0
   91504:	f94002a0 	ldr	x0, [x21]
   91508:	97ffd46e 	bl	866c0 <CUSBDevice::GetHost() const>
   9150c:	aa0003e1 	mov	x1, x0
   91510:	f94002a0 	ldr	x0, [x21]
   91514:	aa0103f5 	mov	x21, x1
   91518:	97ffd45e 	bl	86690 <CUSBDevice::GetEndpoint0() const>
   9151c:	aa0003e1 	mov	x1, x0
   91520:	2a1603e2 	mov	w2, w22
   91524:	aa1503e0 	mov	x0, x21
   91528:	aa1303e4 	mov	x4, x19
   9152c:	52800007 	mov	w7, #0x0                   	// #0
   91530:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   91534:	2a1403e5 	mov	w5, w20
   91538:	52800003 	mov	w3, #0x0                   	// #0
   9153c:	97ffe6d1 	bl	8b080 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   91540:	6b00029f 	cmp	w20, w0
   91544:	54fffc61 	b.ne	914d0 <CUSBString::GetLanguageID()+0xd0>  // b.any
   91548:	39400261 	ldrb	w1, [x19]
   9154c:	6b14003f 	cmp	w1, w20
   91550:	54fffc01 	b.ne	914d0 <CUSBString::GetLanguageID()+0xd0>  // b.any
   91554:	39400660 	ldrb	w0, [x19, #1]
   91558:	71000c1f 	cmp	w0, #0x3
   9155c:	54fffba1 	b.ne	914d0 <CUSBString::GetLanguageID()+0xd0>  // b.any
   91560:	3607f961 	tbz	w1, #0, 9148c <CUSBString::GetLanguageID()+0x8c>
   91564:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   91568:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   9156c:	913e2021 	add	x1, x1, #0xf88
   91570:	91006000 	add	x0, x0, #0x18
   91574:	52801902 	mov	w2, #0xc8                  	// #200
   91578:	94002c42 	bl	9c680 <assertion_failed>
   9157c:	79400674 	ldrh	w20, [x19, #2]
   91580:	aa1303e0 	mov	x0, x19
   91584:	94005057 	bl	a56e0 <operator delete[](void*)>
   91588:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9158c:	2a1403e0 	mov	w0, w20
   91590:	a94153f3 	ldp	x19, x20, [sp, #16]
   91594:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91598:	d65f03c0 	ret
   9159c:	d00000e1 	adrp	x1, af000 <FromUmsd+0xb0>
   915a0:	f00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   915a4:	913e2021 	add	x1, x1, #0xf88
   915a8:	913fc000 	add	x0, x0, #0xff0
   915ac:	52801342 	mov	w2, #0x9a                  	// #154
   915b0:	94002c34 	bl	9c680 <assertion_failed>
	...

00000000000915c0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   915c0:	aa0003e1 	mov	x1, x0
   915c4:	9100a000 	add	x0, x0, #0x28
   915c8:	a9007c3f 	stp	xzr, xzr, [x1]
   915cc:	f900083f 	str	xzr, [x1, #16]
   915d0:	7900303f 	strh	wzr, [x1, #24]
   915d4:	f900103f 	str	xzr, [x1, #32]
   915d8:	140001aa 	b	91c80 <CKeyMap::CKeyMap()>
   915dc:	d503201f 	nop

00000000000915e0 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   915e0:	aa0003e1 	mov	x1, x0
   915e4:	9100a000 	add	x0, x0, #0x28
   915e8:	a9007c3f 	stp	xzr, xzr, [x1]
   915ec:	f900083f 	str	xzr, [x1, #16]
   915f0:	140000c8 	b	91910 <CKeyMap::~CKeyMap()>
   915f4:	d503201f 	nop
   915f8:	d503201f 	nop
   915fc:	d503201f 	nop

0000000000091600 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   91600:	b4000061 	cbz	x1, 9160c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0xc>
   91604:	f9000001 	str	x1, [x0]
   91608:	d65f03c0 	ret
   9160c:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91610:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91614:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91618:	91010021 	add	x1, x1, #0x40
   9161c:	910003fd 	mov	x29, sp
   91620:	91016000 	add	x0, x0, #0x58
   91624:	528005e2 	mov	w2, #0x2f                  	// #47
   91628:	94002c16 	bl	9c680 <assertion_failed>
   9162c:	d503201f 	nop

0000000000091630 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   91630:	b4000061 	cbz	x1, 9163c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0xc>
   91634:	f9000401 	str	x1, [x0, #8]
   91638:	d65f03c0 	ret
   9163c:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91640:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91644:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91648:	91010021 	add	x1, x1, #0x40
   9164c:	910003fd 	mov	x29, sp
   91650:	9101c000 	add	x0, x0, #0x70
   91654:	528006a2 	mov	w2, #0x35                  	// #53
   91658:	94002c0a 	bl	9c680 <assertion_failed>
   9165c:	d503201f 	nop

0000000000091660 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   91660:	b4000061 	cbz	x1, 9166c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0xc>
   91664:	f9000801 	str	x1, [x0, #16]
   91668:	d65f03c0 	ret
   9166c:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91670:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91674:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91678:	91010021 	add	x1, x1, #0x40
   9167c:	910003fd 	mov	x29, sp
   91680:	91024000 	add	x0, x0, #0x90
   91684:	52800762 	mov	w2, #0x3b                  	// #59
   91688:	94002bfe 	bl	9c680 <assertion_failed>
   9168c:	d503201f 	nop

0000000000091690 <CKeyboardBehaviour::GetLEDStatus() const>:
   91690:	9100a000 	add	x0, x0, #0x28
   91694:	14000143 	b	91ba0 <CKeyMap::GetLEDStatus() const>
   91698:	d503201f 	nop
   9169c:	d503201f 	nop

00000000000916a0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   916a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   916a4:	910003fd 	mov	x29, sp
   916a8:	a90153f3 	stp	x19, x20, [sp, #16]
   916ac:	9100a014 	add	x20, x0, #0x28
   916b0:	aa0003f3 	mov	x19, x0
   916b4:	f90013f5 	str	x21, [sp, #32]
   916b8:	39406015 	ldrb	w21, [x0, #24]
   916bc:	aa1403e0 	mov	x0, x20
   916c0:	2a1503e2 	mov	w2, w21
   916c4:	940000bf 	bl	919c0 <CKeyMap::Translate(unsigned char, unsigned char)>
   916c8:	12003c02 	and	w2, w0, #0xffff
   916cc:	7105045f 	cmp	w2, #0x141
   916d0:	54000168 	b.hi	916fc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x5c>  // b.pmore
   916d4:	7104d45f 	cmp	w2, #0x135
   916d8:	540003e8 	b.hi	91754 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xb4>  // b.pmore
   916dc:	5104cc42 	sub	w2, w2, #0x133
   916e0:	12003c42 	and	w2, w2, #0xffff
   916e4:	7100085f 	cmp	w2, #0x2
   916e8:	540001c8 	b.hi	91720 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x80>  // b.pmore
   916ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   916f0:	f94013f5 	ldr	x21, [sp, #32]
   916f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   916f8:	d65f03c0 	ret
   916fc:	7105085f 	cmp	w2, #0x142
   91700:	54000101 	b.ne	91720 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x80>  // b.any
   91704:	f9400a60 	ldr	x0, [x19, #16]
   91708:	b4ffff20 	cbz	x0, 916ec <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9170c:	d63f0000 	blr	x0
   91710:	a94153f3 	ldp	x19, x20, [sp, #16]
   91714:	f94013f5 	ldr	x21, [sp, #32]
   91718:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9171c:	d65f03c0 	ret
   91720:	2a0003e1 	mov	w1, w0
   91724:	2a1503e2 	mov	w2, w21
   91728:	aa1403e0 	mov	x0, x20
   9172c:	9100e3e3 	add	x3, sp, #0x38
   91730:	940000e8 	bl	91ad0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   91734:	b4fffdc0 	cbz	x0, 916ec <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   91738:	f9400261 	ldr	x1, [x19]
   9173c:	b4fffd81 	cbz	x1, 916ec <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   91740:	d63f0020 	blr	x1
   91744:	a94153f3 	ldp	x19, x20, [sp, #16]
   91748:	f94013f5 	ldr	x21, [sp, #32]
   9174c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91750:	d65f03c0 	ret
   91754:	f9400661 	ldr	x1, [x19, #8]
   91758:	b4fffca1 	cbz	x1, 916ec <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9175c:	5104d840 	sub	w0, w2, #0x136
   91760:	d63f0020 	blr	x1
   91764:	a94153f3 	ldp	x19, x20, [sp, #16]
   91768:	f94013f5 	ldr	x21, [sp, #32]
   9176c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91770:	d65f03c0 	ret
   91774:	d503201f 	nop
   91778:	d503201f 	nop
   9177c:	d503201f 	nop

0000000000091780 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   91780:	12001c23 	and	w3, w1, #0xff
   91784:	aa0003e2 	mov	x2, x0
   91788:	51020061 	sub	w1, w3, #0x80
   9178c:	12001c24 	and	w4, w1, #0xff
   91790:	71001c9f 	cmp	w4, #0x7
   91794:	540000e8 	b.hi	917b0 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x30>  // b.pmore
   91798:	39406003 	ldrb	w3, [x0, #24]
   9179c:	52800020 	mov	w0, #0x1                   	// #1
   917a0:	1ac12000 	lsl	w0, w0, w1
   917a4:	2a030000 	orr	w0, w0, w3
   917a8:	39006040 	strb	w0, [x2, #24]
   917ac:	d65f03c0 	ret
   917b0:	39406401 	ldrb	w1, [x0, #25]
   917b4:	6b03003f 	cmp	w1, w3
   917b8:	54ffffa0 	b.eq	917ac <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>  // b.none
   917bc:	2a0303e1 	mov	w1, w3
   917c0:	39006403 	strb	w3, [x0, #25]
   917c4:	17ffffb7 	b	916a0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   917c8:	d503201f 	nop
   917cc:	d503201f 	nop

00000000000917d0 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   917d0:	12001c21 	and	w1, w1, #0xff
   917d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   917d8:	910003fd 	mov	x29, sp
   917dc:	51020022 	sub	w2, w1, #0x80
   917e0:	f9000bf3 	str	x19, [sp, #16]
   917e4:	aa0003f3 	mov	x19, x0
   917e8:	12001c40 	and	w0, w2, #0xff
   917ec:	71001c1f 	cmp	w0, #0x7
   917f0:	54000128 	b.hi	91814 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>  // b.pmore
   917f4:	39406261 	ldrb	w1, [x19, #24]
   917f8:	52800020 	mov	w0, #0x1                   	// #1
   917fc:	1ac22000 	lsl	w0, w0, w2
   91800:	0a200020 	bic	w0, w1, w0
   91804:	39006260 	strb	w0, [x19, #24]
   91808:	f9400bf3 	ldr	x19, [sp, #16]
   9180c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91810:	d65f03c0 	ret
   91814:	39406660 	ldrb	w0, [x19, #25]
   91818:	6b01001f 	cmp	w0, w1
   9181c:	54ffff61 	b.ne	91808 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x38>  // b.any
   91820:	f9401260 	ldr	x0, [x19, #32]
   91824:	b50000a0 	cbnz	x0, 91838 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x68>
   91828:	3900667f 	strb	wzr, [x19, #25]
   9182c:	f9400bf3 	ldr	x19, [sp, #16]
   91830:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91834:	d65f03c0 	ret
   91838:	94004b0a 	bl	a4460 <CTimer::Get()>
   9183c:	f9401261 	ldr	x1, [x19, #32]
   91840:	94004978 	bl	a3e20 <CTimer::CancelKernelTimer(unsigned long)>
   91844:	3900667f 	strb	wzr, [x19, #25]
   91848:	f900127f 	str	xzr, [x19, #32]
   9184c:	17fffff8 	b	9182c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x5c>

0000000000091850 <CKeyboardBehaviour::TimerHandler(unsigned long)>:
   91850:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91854:	910003fd 	mov	x29, sp
   91858:	f9401002 	ldr	x2, [x0, #32]
   9185c:	f9000bf3 	str	x19, [sp, #16]
   91860:	eb01005f 	cmp	x2, x1
   91864:	540002e1 	b.ne	918c0 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x70>  // b.any
   91868:	39406401 	ldrb	w1, [x0, #25]
   9186c:	aa0003f3 	mov	x19, x0
   91870:	35000081 	cbnz	w1, 91880 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x30>
   91874:	f9400bf3 	ldr	x19, [sp, #16]
   91878:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9187c:	d65f03c0 	ret
   91880:	97ffff88 	bl	916a0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   91884:	94004af7 	bl	a4460 <CTimer::Get()>
   91888:	90000002 	adrp	x2, 91000 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x10>
   9188c:	aa1303e4 	mov	x4, x19
   91890:	91238042 	add	x2, x2, #0x8e0
   91894:	d2800003 	mov	x3, #0x0                   	// #0
   91898:	52800101 	mov	w1, #0x8                   	// #8
   9189c:	94004909 	bl	a3cc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   918a0:	f9001260 	str	x0, [x19, #32]
   918a4:	b5fffe80 	cbnz	x0, 91874 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x24>
   918a8:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   918ac:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   918b0:	91010021 	add	x1, x1, #0x40
   918b4:	91002000 	add	x0, x0, #0x8
   918b8:	528016e2 	mov	w2, #0xb7                  	// #183
   918bc:	94002b71 	bl	9c680 <assertion_failed>
   918c0:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   918c4:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   918c8:	91010021 	add	x1, x1, #0x40
   918cc:	9102a000 	add	x0, x0, #0xa8
   918d0:	52801602 	mov	w2, #0xb0                  	// #176
   918d4:	94002b6b 	bl	9c680 <assertion_failed>
   918d8:	d503201f 	nop
   918dc:	d503201f 	nop

00000000000918e0 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)>:
   918e0:	b4000082 	cbz	x2, 918f0 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x10>
   918e4:	aa0003e1 	mov	x1, x0
   918e8:	aa0203e0 	mov	x0, x2
   918ec:	17ffffd9 	b	91850 <CKeyboardBehaviour::TimerHandler(unsigned long)>
   918f0:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   918f4:	f00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   918f8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   918fc:	91010021 	add	x1, x1, #0x40
   91900:	910003fd 	mov	x29, sp
   91904:	9138e000 	add	x0, x0, #0xe38
   91908:	528017c2 	mov	w2, #0xbe                  	// #190
   9190c:	94002b5d 	bl	9c680 <assertion_failed>

0000000000091910 <CKeyMap::~CKeyMap()>:
   91910:	d65f03c0 	ret
   91914:	d503201f 	nop
   91918:	d503201f 	nop
   9191c:	d503201f 	nop

0000000000091920 <CKeyMap::ClearTable(unsigned char)>:
   91920:	12001c21 	and	w1, w1, #0xff
   91924:	71000c3f 	cmp	w1, #0x3
   91928:	54000168 	b.hi	91954 <CKeyMap::ClearTable(unsigned char)+0x34>  // b.pmore
   9192c:	d37f1c22 	ubfiz	x2, x1, #1, #8
   91930:	91100001 	add	x1, x0, #0x400
   91934:	8b020021 	add	x1, x1, x2
   91938:	8b020000 	add	x0, x0, x2
   9193c:	d503201f 	nop
   91940:	7800841f 	strh	wzr, [x0], #8
   91944:	eb01001f 	cmp	x0, x1
   91948:	54ffffc1 	b.ne	91940 <CKeyMap::ClearTable(unsigned char)+0x20>  // b.any
   9194c:	52800020 	mov	w0, #0x1                   	// #1
   91950:	d65f03c0 	ret
   91954:	52800000 	mov	w0, #0x0                   	// #0
   91958:	d65f03c0 	ret
   9195c:	d503201f 	nop

0000000000091960 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   91960:	13001c45 	sxtb	w5, w2
   91964:	12001c21 	and	w1, w1, #0xff
   91968:	71000c3f 	cmp	w1, #0x3
   9196c:	1a9f97e4 	cset	w4, hi  // hi = pmore
   91970:	12003c63 	and	w3, w3, #0xffff
   91974:	710000bf 	cmp	w5, #0x0
   91978:	1a9fc7e5 	cset	w5, le
   9197c:	2a050084 	orr	w4, w4, w5
   91980:	12001c42 	and	w2, w2, #0xff
   91984:	35000124 	cbnz	w4, 919a8 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   91988:	7104c87f 	cmp	w3, #0x132
   9198c:	540000a8 	b.hi	919a0 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x40>  // b.pmore
   91990:	52800024 	mov	w4, #0x1                   	// #1
   91994:	937e7c42 	sbfiz	x2, x2, #2, #32
   91998:	8b21c041 	add	x1, x2, w1, sxtw
   9199c:	78217803 	strh	w3, [x0, x1, lsl #1]
   919a0:	2a0403e0 	mov	w0, w4
   919a4:	d65f03c0 	ret
   919a8:	52800004 	mov	w4, #0x0                   	// #0
   919ac:	2a0403e0 	mov	w0, w4
   919b0:	d65f03c0 	ret
   919b4:	d503201f 	nop
   919b8:	d503201f 	nop
   919bc:	d503201f 	nop

00000000000919c0 <CKeyMap::Translate(unsigned char, unsigned char)>:
   919c0:	13001c23 	sxtb	w3, w1
   919c4:	aa0003e4 	mov	x4, x0
   919c8:	7100007f 	cmp	w3, #0x0
   919cc:	12001c42 	and	w2, w2, #0xff
   919d0:	12001c21 	and	w1, w1, #0xff
   919d4:	540005ed 	b.le	91a90 <CKeyMap::Translate(unsigned char, unsigned char)+0xd0>
   919d8:	937d7c20 	sbfiz	x0, x1, #3, #32
   919dc:	93407c25 	sxtw	x5, w1
   919e0:	78606883 	ldrh	w3, [x4, x0]
   919e4:	7104207f 	cmp	w3, #0x108
   919e8:	54000480 	b.eq	91a78 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>  // b.none
   919ec:	51043c60 	sub	w0, w3, #0x10f
   919f0:	12003c00 	and	w0, w0, #0xffff
   919f4:	71002c1f 	cmp	w0, #0xb
   919f8:	54000088 	b.hi	91a08 <CKeyMap::Translate(unsigned char, unsigned char)+0x48>  // b.pmore
   919fc:	11009c60 	add	w0, w3, #0x27
   91a00:	12003c00 	and	w0, w0, #0xffff
   91a04:	37100382 	tbnz	w2, #2, 91a74 <CKeyMap::Translate(unsigned char, unsigned char)+0xb4>
   91a08:	12800e63 	mov	w3, #0xffffff8c            	// #-116
   91a0c:	52800000 	mov	w0, #0x0                   	// #0
   91a10:	6a03005f 	tst	w2, w3
   91a14:	54000301 	b.ne	91a74 <CKeyMap::Translate(unsigned char, unsigned char)+0xb4>  // b.any
   91a18:	51014c21 	sub	w1, w1, #0x53
   91a1c:	12001c21 	and	w1, w1, #0xff
   91a20:	7100403f 	cmp	w1, #0x10
   91a24:	540003a9 	b.ls	91a98 <CKeyMap::Translate(unsigned char, unsigned char)+0xd8>  // b.plast
   91a28:	52800440 	mov	w0, #0x22                  	// #34
   91a2c:	0a000040 	and	w0, w2, w0
   91a30:	7100001f 	cmp	w0, #0x0
   91a34:	1a9f07e0 	cset	w0, ne  // ne = any
   91a38:	36300042 	tbz	w2, #6, 91a40 <CKeyMap::Translate(unsigned char, unsigned char)+0x80>
   91a3c:	11000800 	add	w0, w0, #0x2
   91a40:	d37ef4a5 	lsl	x5, x5, #2
   91a44:	8b2000a5 	add	x5, x5, w0, uxtb
   91a48:	78657880 	ldrh	w0, [x4, x5, lsl #1]
   91a4c:	7104781f 	cmp	w0, #0x11e
   91a50:	54000320 	b.eq	91ab4 <CKeyMap::Translate(unsigned char, unsigned char)+0xf4>  // b.none
   91a54:	7104801f 	cmp	w0, #0x120
   91a58:	54000240 	b.eq	91aa0 <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>  // b.none
   91a5c:	7104701f 	cmp	w0, #0x11c
   91a60:	540000a1 	b.ne	91a74 <CKeyMap::Translate(unsigned char, unsigned char)+0xb4>  // b.any
   91a64:	39500081 	ldrb	w1, [x4, #1024]
   91a68:	52802660 	mov	w0, #0x133                 	// #307
   91a6c:	52000021 	eor	w1, w1, #0x1
   91a70:	39100081 	strb	w1, [x4, #1024]
   91a74:	d65f03c0 	ret
   91a78:	52800220 	mov	w0, #0x11                  	// #17
   91a7c:	6a00005f 	tst	w2, w0
   91a80:	54fffc40 	b.eq	91a08 <CKeyMap::Translate(unsigned char, unsigned char)+0x48>  // b.none
   91a84:	52802840 	mov	w0, #0x142                 	// #322
   91a88:	3617fc02 	tbz	w2, #2, 91a08 <CKeyMap::Translate(unsigned char, unsigned char)+0x48>
   91a8c:	d65f03c0 	ret
   91a90:	52800000 	mov	w0, #0x0                   	// #0
   91a94:	d65f03c0 	ret
   91a98:	39500480 	ldrb	w0, [x4, #1025]
   91a9c:	17ffffe9 	b	91a40 <CKeyMap::Translate(unsigned char, unsigned char)+0x80>
   91aa0:	39500481 	ldrb	w1, [x4, #1025]
   91aa4:	52802680 	mov	w0, #0x134                 	// #308
   91aa8:	52000021 	eor	w1, w1, #0x1
   91aac:	39100481 	strb	w1, [x4, #1025]
   91ab0:	d65f03c0 	ret
   91ab4:	39500881 	ldrb	w1, [x4, #1026]
   91ab8:	528026a0 	mov	w0, #0x135                 	// #309
   91abc:	52000021 	eor	w1, w1, #0x1
   91ac0:	39100881 	strb	w1, [x4, #1026]
   91ac4:	d65f03c0 	ret
   91ac8:	d503201f 	nop
   91acc:	d503201f 	nop

0000000000091ad0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   91ad0:	12003c21 	and	w1, w1, #0xffff
   91ad4:	12001c42 	and	w2, w2, #0xff
   91ad8:	51008424 	sub	w4, w1, #0x21
   91adc:	12003c84 	and	w4, w4, #0xffff
   91ae0:	7104449f 	cmp	w4, #0x111
   91ae4:	540004a8 	b.hi	91b78 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>  // b.pmore
   91ae8:	51040024 	sub	w4, w1, #0x100
   91aec:	12003c85 	and	w5, w4, #0xffff
   91af0:	7100c8bf 	cmp	w5, #0x32
   91af4:	540003a9 	b.ls	91b68 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x98>  // b.plast
   91af8:	52800224 	mov	w4, #0x11                  	// #17
   91afc:	13001c25 	sxtb	w5, w1
   91b00:	6a04005f 	tst	w2, w4
   91b04:	54000180 	b.eq	91b34 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x64>  // b.none
   91b08:	12001c21 	and	w1, w1, #0xff
   91b0c:	d2800000 	mov	x0, #0x0                   	// #0
   91b10:	51018422 	sub	w2, w1, #0x61
   91b14:	12001c42 	and	w2, w2, #0xff
   91b18:	7100645f 	cmp	w2, #0x19
   91b1c:	540000a8 	b.hi	91b30 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>  // b.pmore
   91b20:	51018021 	sub	w1, w1, #0x60
   91b24:	aa0303e0 	mov	x0, x3
   91b28:	3900047f 	strb	wzr, [x3, #1]
   91b2c:	39000061 	strb	w1, [x3]
   91b30:	d65f03c0 	ret
   91b34:	39500000 	ldrb	w0, [x0, #1024]
   91b38:	34000100 	cbz	w0, 91b58 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   91b3c:	12001c21 	and	w1, w1, #0xff
   91b40:	51010420 	sub	w0, w1, #0x41
   91b44:	12001c00 	and	w0, w0, #0xff
   91b48:	7100641f 	cmp	w0, #0x19
   91b4c:	540001a8 	b.hi	91b80 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>  // b.pmore
   91b50:	11008021 	add	w1, w1, #0x20
   91b54:	13001c25 	sxtb	w5, w1
   91b58:	aa0303e0 	mov	x0, x3
   91b5c:	39000065 	strb	w5, [x3]
   91b60:	3900047f 	strb	wzr, [x3, #1]
   91b64:	d65f03c0 	ret
   91b68:	90000120 	adrp	x0, b5000 <font_data+0x1340>
   91b6c:	91370000 	add	x0, x0, #0xdc0
   91b70:	f864d800 	ldr	x0, [x0, w4, sxtw #3]
   91b74:	d65f03c0 	ret
   91b78:	d2800000 	mov	x0, #0x0                   	// #0
   91b7c:	d65f03c0 	ret
   91b80:	51018420 	sub	w0, w1, #0x61
   91b84:	51008021 	sub	w1, w1, #0x20
   91b88:	12001c00 	and	w0, w0, #0xff
   91b8c:	13001c21 	sxtb	w1, w1
   91b90:	7100681f 	cmp	w0, #0x1a
   91b94:	1a853025 	csel	w5, w1, w5, cc  // cc = lo, ul, last
   91b98:	17fffff0 	b	91b58 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   91b9c:	d503201f 	nop

0000000000091ba0 <CKeyMap::GetLEDStatus() const>:
   91ba0:	39500001 	ldrb	w1, [x0, #1024]
   91ba4:	39500403 	ldrb	w3, [x0, #1025]
   91ba8:	39500802 	ldrb	w2, [x0, #1026]
   91bac:	7100003f 	cmp	w1, #0x0
   91bb0:	1a9f07e0 	cset	w0, ne  // ne = any
   91bb4:	531f7800 	lsl	w0, w0, #1
   91bb8:	32000001 	orr	w1, w0, #0x1
   91bbc:	7100007f 	cmp	w3, #0x0
   91bc0:	1a810000 	csel	w0, w0, w1, eq  // eq = none
   91bc4:	321e0001 	orr	w1, w0, #0x4
   91bc8:	7100005f 	cmp	w2, #0x0
   91bcc:	1a801020 	csel	w0, w1, w0, ne  // ne = any
   91bd0:	d65f03c0 	ret
   91bd4:	d503201f 	nop
   91bd8:	d503201f 	nop
   91bdc:	d503201f 	nop

0000000000091be0 <CKeyMap::LookupDefaultMap(char const*)>:
   91be0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91be4:	910003fd 	mov	x29, sp
   91be8:	a90153f3 	stp	x19, x20, [sp, #16]
   91bec:	90000134 	adrp	x20, b5000 <font_data+0x1340>
   91bf0:	91370294 	add	x20, x20, #0xdc0
   91bf4:	f90013f5 	str	x21, [sp, #32]
   91bf8:	aa0003f5 	mov	x21, x0
   91bfc:	f940ce80 	ldr	x0, [x20, #408]
   91c00:	b4000300 	cbz	x0, 91c60 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   91c04:	91066294 	add	x20, x20, #0x198
   91c08:	d2800013 	mov	x19, #0x0                   	// #0
   91c0c:	b50000b5 	cbnz	x21, 91c20 <CKeyMap::LookupDefaultMap(char const*)+0x40>
   91c10:	1400000e 	b	91c48 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   91c14:	91000673 	add	x19, x19, #0x1
   91c18:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   91c1c:	b4000220 	cbz	x0, 91c60 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   91c20:	aa1503e1 	mov	x1, x21
   91c24:	94004a67 	bl	a45c0 <strcmp>
   91c28:	35ffff60 	cbnz	w0, 91c14 <CKeyMap::LookupDefaultMap(char const*)+0x34>
   91c2c:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91c30:	9108e000 	add	x0, x0, #0x238
   91c34:	f94013f5 	ldr	x21, [sp, #32]
   91c38:	8b132800 	add	x0, x0, x19, lsl #10
   91c3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91c40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91c44:	d65f03c0 	ret
   91c48:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91c4c:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91c50:	91030021 	add	x1, x1, #0xc0
   91c54:	91034000 	add	x0, x0, #0xd0
   91c58:	528027e2 	mov	w2, #0x13f                 	// #319
   91c5c:	94002a89 	bl	9c680 <assertion_failed>
   91c60:	d2800000 	mov	x0, #0x0                   	// #0
   91c64:	a94153f3 	ldp	x19, x20, [sp, #16]
   91c68:	f94013f5 	ldr	x21, [sp, #32]
   91c6c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91c70:	d65f03c0 	ret
   91c74:	d503201f 	nop
   91c78:	d503201f 	nop
   91c7c:	d503201f 	nop

0000000000091c80 <CKeyMap::CKeyMap()>:
   91c80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91c84:	52802001 	mov	w1, #0x100                 	// #256
   91c88:	910003fd 	mov	x29, sp
   91c8c:	f9000bf3 	str	x19, [sp, #16]
   91c90:	aa0003f3 	mov	x19, x0
   91c94:	79080001 	strh	w1, [x0, #1024]
   91c98:	3910081f 	strb	wzr, [x0, #1026]
   91c9c:	940031d9 	bl	9e400 <CKernelOptions::Get()>
   91ca0:	940031bc 	bl	9e390 <CKernelOptions::GetKeyMap() const>
   91ca4:	b4000280 	cbz	x0, 91cf4 <CKeyMap::CKeyMap()+0x74>
   91ca8:	97ffffce 	bl	91be0 <CKeyMap::LookupDefaultMap(char const*)>
   91cac:	aa0003e1 	mov	x1, x0
   91cb0:	b40000c0 	cbz	x0, 91cc8 <CKeyMap::CKeyMap()+0x48>
   91cb4:	aa1303e0 	mov	x0, x19
   91cb8:	d2808002 	mov	x2, #0x400                 	// #1024
   91cbc:	f9400bf3 	ldr	x19, [sp, #16]
   91cc0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91cc4:	14004c0d 	b	a4cf8 <memcpy>
   91cc8:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91ccc:	91038000 	add	x0, x0, #0xe0
   91cd0:	97ffffc4 	bl	91be0 <CKeyMap::LookupDefaultMap(char const*)>
   91cd4:	aa0003e1 	mov	x1, x0
   91cd8:	b5fffee0 	cbnz	x0, 91cb4 <CKeyMap::CKeyMap()+0x34>
   91cdc:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91ce0:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91ce4:	91030021 	add	x1, x1, #0xc0
   91ce8:	9103a000 	add	x0, x0, #0xe8
   91cec:	52801002 	mov	w2, #0x80                  	// #128
   91cf0:	94002a64 	bl	9c680 <assertion_failed>
   91cf4:	f00000e1 	adrp	x1, b0000 <DevicePrefix+0x80>
   91cf8:	f00000e0 	adrp	x0, b0000 <DevicePrefix+0x80>
   91cfc:	91030021 	add	x1, x1, #0xc0
   91d00:	91034000 	add	x0, x0, #0xd0
   91d04:	52800f42 	mov	w2, #0x7a                  	// #122
   91d08:	94002a5e 	bl	9c680 <assertion_failed>
   91d0c:	00000000 	.inst	0x00000000 ; undefined

0000000000091d10 <CMouseDevice::~CMouseDevice()>:
   91d10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91d14:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91d18:	91296021 	add	x1, x1, #0xa58
   91d1c:	910003fd 	mov	x29, sp
   91d20:	f9000bf3 	str	x19, [sp, #16]
   91d24:	aa0003f3 	mov	x19, x0
   91d28:	f9000001 	str	x1, [x0]
   91d2c:	f900141f 	str	xzr, [x0, #40]
   91d30:	94002d24 	bl	9d1c0 <CDeviceNameService::Get()>
   91d34:	b9403262 	ldr	w2, [x19, #48]
   91d38:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91d3c:	52800003 	mov	w3, #0x0                   	// #0
   91d40:	912a2021 	add	x1, x1, #0xa88
   91d44:	94002d4b 	bl	9d270 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   91d48:	91002260 	add	x0, x19, #0x8
   91d4c:	94000079 	bl	91f30 <CMouseBehaviour::~CMouseBehaviour()>
   91d50:	aa1303e0 	mov	x0, x19
   91d54:	f9400bf3 	ldr	x19, [sp, #16]
   91d58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91d5c:	14002c15 	b	9cdb0 <CDevice::~CDevice()>

0000000000091d60 <CMouseDevice::~CMouseDevice()>:
   91d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91d64:	910003fd 	mov	x29, sp
   91d68:	f9000bf3 	str	x19, [sp, #16]
   91d6c:	aa0003f3 	mov	x19, x0
   91d70:	97ffffe8 	bl	91d10 <CMouseDevice::~CMouseDevice()>
   91d74:	aa1303e0 	mov	x0, x19
   91d78:	d2800701 	mov	x1, #0x38                  	// #56
   91d7c:	f9400bf3 	ldr	x19, [sp, #16]
   91d80:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91d84:	14004e63 	b	a5710 <operator delete(void*, unsigned long)>
   91d88:	d503201f 	nop
   91d8c:	d503201f 	nop

0000000000091d90 <CMouseDevice::CMouseDevice()>:
   91d90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91d94:	910003fd 	mov	x29, sp
   91d98:	f9000bf3 	str	x19, [sp, #16]
   91d9c:	aa0003f3 	mov	x19, x0
   91da0:	94002c18 	bl	9ce00 <CDevice::CDevice()>
   91da4:	aa1303e0 	mov	x0, x19
   91da8:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91dac:	91296021 	add	x1, x1, #0xa58
   91db0:	f8008401 	str	x1, [x0], #8
   91db4:	94000057 	bl	91f10 <CMouseBehaviour::CMouseBehaviour()>
   91db8:	90000120 	adrp	x0, b5000 <font_data+0x1340>
   91dbc:	f900167f 	str	xzr, [x19, #40]
   91dc0:	b94f9001 	ldr	w1, [x0, #3984]
   91dc4:	11000422 	add	w2, w1, #0x1
   91dc8:	b9003261 	str	w1, [x19, #48]
   91dcc:	b90f9002 	str	w2, [x0, #3984]
   91dd0:	94002cfc 	bl	9d1c0 <CDeviceNameService::Get()>
   91dd4:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91dd8:	b9403262 	ldr	w2, [x19, #48]
   91ddc:	aa1303e3 	mov	x3, x19
   91de0:	912a2021 	add	x1, x1, #0xa88
   91de4:	52800004 	mov	w4, #0x0                   	// #0
   91de8:	f9400bf3 	ldr	x19, [sp, #16]
   91dec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91df0:	14002d00 	b	9d1f0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   91df4:	d503201f 	nop
   91df8:	d503201f 	nop
   91dfc:	d503201f 	nop

0000000000091e00 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   91e00:	91002000 	add	x0, x0, #0x8
   91e04:	1400004f 	b	91f40 <CMouseBehaviour::Setup(unsigned int, unsigned int)>
   91e08:	d503201f 	nop
   91e0c:	d503201f 	nop

0000000000091e10 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   91e10:	91002000 	add	x0, x0, #0x8
   91e14:	14000093 	b	92060 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>
   91e18:	d503201f 	nop
   91e1c:	d503201f 	nop

0000000000091e20 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   91e20:	91002000 	add	x0, x0, #0x8
   91e24:	1400011b 	b	92290 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>
   91e28:	d503201f 	nop
   91e2c:	d503201f 	nop

0000000000091e30 <CMouseDevice::ShowCursor(bool)>:
   91e30:	91002000 	add	x0, x0, #0x8
   91e34:	1400013b 	b	92320 <CMouseBehaviour::ShowCursor(bool)>
   91e38:	d503201f 	nop
   91e3c:	d503201f 	nop

0000000000091e40 <CMouseDevice::UpdateCursor()>:
   91e40:	f9401401 	ldr	x1, [x0, #40]
   91e44:	b4000041 	cbz	x1, 91e4c <CMouseDevice::UpdateCursor()+0xc>
   91e48:	d65f03c0 	ret
   91e4c:	91002000 	add	x0, x0, #0x8
   91e50:	14000154 	b	923a0 <CMouseBehaviour::UpdateCursor()>
   91e54:	d503201f 	nop
   91e58:	d503201f 	nop
   91e5c:	d503201f 	nop

0000000000091e60 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   91e60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91e64:	910003fd 	mov	x29, sp
   91e68:	f9401402 	ldr	x2, [x0, #40]
   91e6c:	b50000a2 	cbnz	x2, 91e80 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x20>
   91e70:	f9001401 	str	x1, [x0, #40]
   91e74:	b4000121 	cbz	x1, 91e98 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x38>
   91e78:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91e7c:	d65f03c0 	ret
   91e80:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91e84:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   91e88:	9128e021 	add	x1, x1, #0xa38
   91e8c:	913aa000 	add	x0, x0, #0xea8
   91e90:	52800902 	mov	w2, #0x48                  	// #72
   91e94:	940029fb 	bl	9c680 <assertion_failed>
   91e98:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91e9c:	d00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   91ea0:	9128e021 	add	x1, x1, #0xa38
   91ea4:	913b0000 	add	x0, x0, #0xec0
   91ea8:	52800942 	mov	w2, #0x4a                  	// #74
   91eac:	940029f5 	bl	9c680 <assertion_failed>

0000000000091eb0 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   91eb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91eb4:	910003fd 	mov	x29, sp
   91eb8:	a90153f3 	stp	x19, x20, [sp, #16]
   91ebc:	aa0003f3 	mov	x19, x0
   91ec0:	91002000 	add	x0, x0, #0x8
   91ec4:	2a0103f4 	mov	w20, w1
   91ec8:	a9025bf5 	stp	x21, x22, [sp, #32]
   91ecc:	2a0303f6 	mov	w22, w3
   91ed0:	2a0203f5 	mov	w21, w2
   91ed4:	94000077 	bl	920b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   91ed8:	f9401663 	ldr	x3, [x19, #40]
   91edc:	b4000123 	cbz	x3, 91f00 <CMouseDevice::ReportHandler(unsigned int, int, int)+0x50>
   91ee0:	2a1603e2 	mov	w2, w22
   91ee4:	2a1503e1 	mov	w1, w21
   91ee8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91eec:	2a1403e0 	mov	w0, w20
   91ef0:	aa0303f0 	mov	x16, x3
   91ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   91ef8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91efc:	d61f0200 	br	x16
   91f00:	a94153f3 	ldp	x19, x20, [sp, #16]
   91f04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91f08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91f0c:	d65f03c0 	ret

0000000000091f10 <CMouseBehaviour::CMouseBehaviour()>:
   91f10:	a9007c1f 	stp	xzr, xzr, [x0]
   91f14:	7900201f 	strh	wzr, [x0, #16]
   91f18:	b900141f 	str	wzr, [x0, #20]
   91f1c:	f9000c1f 	str	xzr, [x0, #24]
   91f20:	d65f03c0 	ret
   91f24:	d503201f 	nop
   91f28:	d503201f 	nop
   91f2c:	d503201f 	nop

0000000000091f30 <CMouseBehaviour::~CMouseBehaviour()>:
   91f30:	d65f03c0 	ret
   91f34:	d503201f 	nop
   91f38:	d503201f 	nop
   91f3c:	d503201f 	nop

0000000000091f40 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   91f40:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   91f44:	910003fd 	mov	x29, sp
   91f48:	aa0003e4 	mov	x4, x0
   91f4c:	b9400000 	ldr	w0, [x0]
   91f50:	f9000bf3 	str	x19, [sp, #16]
   91f54:	35000520 	cbnz	w0, 91ff8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xb8>
   91f58:	b9000081 	str	w1, [x4]
   91f5c:	340005a1 	cbz	w1, 92010 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd0>
   91f60:	b9400480 	ldr	w0, [x4, #4]
   91f64:	35000620 	cbnz	w0, 92028 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe8>
   91f68:	b9000482 	str	w2, [x4, #4]
   91f6c:	340006a2 	cbz	w2, 92040 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x100>
   91f70:	11000421 	add	w1, w1, #0x1
   91f74:	11000442 	add	w2, w2, #0x1
   91f78:	53017c23 	lsr	w3, w1, #1
   91f7c:	53017c42 	lsr	w2, w2, #1
   91f80:	52800001 	mov	w1, #0x0                   	// #0
   91f84:	910083e0 	add	x0, sp, #0x20
   91f88:	29010883 	stp	w3, w2, [x4, #8]
   91f8c:	940029e1 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   91f90:	52800201 	mov	w1, #0x10                  	// #16
   91f94:	90000105 	adrp	x5, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91f98:	912d80a5 	add	x5, x5, #0xb60
   91f9c:	d2800206 	mov	x6, #0x10                  	// #16
   91fa0:	f80443ff 	stur	xzr, [sp, #68]
   91fa4:	320204a5 	orr	w5, w5, #0xc0000000
   91fa8:	910083e0 	add	x0, sp, #0x20
   91fac:	b90037e1 	str	w1, [sp, #52]
   91fb0:	52800304 	mov	w4, #0x18                  	// #24
   91fb4:	52800483 	mov	w3, #0x24                  	// #36
   91fb8:	f9001fe6 	str	x6, [sp, #56]
   91fbc:	9100a3e2 	add	x2, sp, #0x28
   91fc0:	52900201 	mov	w1, #0x8010                	// #32784
   91fc4:	b90043e5 	str	w5, [sp, #64]
   91fc8:	940029da 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   91fcc:	72001c13 	ands	w19, w0, #0xff
   91fd0:	54000080 	b.eq	91fe0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xa0>  // b.none
   91fd4:	b94037e0 	ldr	w0, [sp, #52]
   91fd8:	7100001f 	cmp	w0, #0x0
   91fdc:	1a9f17f3 	cset	w19, eq  // eq = none
   91fe0:	910083e0 	add	x0, sp, #0x20
   91fe4:	940029cf 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   91fe8:	2a1303e0 	mov	w0, w19
   91fec:	f9400bf3 	ldr	x19, [sp, #16]
   91ff0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   91ff4:	d65f03c0 	ret
   91ff8:	90000101 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   91ffc:	90000100 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92000:	912a4021 	add	x1, x1, #0xa90
   92004:	912aa000 	add	x0, x0, #0xaa8
   92008:	52800982 	mov	w2, #0x4c                  	// #76
   9200c:	9400299d 	bl	9c680 <assertion_failed>
   92010:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92014:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92018:	912a4021 	add	x1, x1, #0xa90
   9201c:	912b0000 	add	x0, x0, #0xac0
   92020:	528009c2 	mov	w2, #0x4e                  	// #78
   92024:	94002997 	bl	9c680 <assertion_failed>
   92028:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   9202c:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92030:	912a4021 	add	x1, x1, #0xa90
   92034:	912b6000 	add	x0, x0, #0xad8
   92038:	52800a02 	mov	w2, #0x50                  	// #80
   9203c:	94002991 	bl	9c680 <assertion_failed>
   92040:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92044:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92048:	912a4021 	add	x1, x1, #0xa90
   9204c:	912bc000 	add	x0, x0, #0xaf0
   92050:	52800a42 	mov	w2, #0x52                  	// #82
   92054:	9400298b 	bl	9c680 <assertion_failed>
   92058:	d503201f 	nop
   9205c:	d503201f 	nop

0000000000092060 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   92060:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   92064:	910003fd 	mov	x29, sp
   92068:	f9400c02 	ldr	x2, [x0, #24]
   9206c:	b50000a2 	cbnz	x2, 92080 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x20>
   92070:	f9000c01 	str	x1, [x0, #24]
   92074:	b4000121 	cbz	x1, 92098 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x38>
   92078:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9207c:	d65f03c0 	ret
   92080:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92084:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92088:	912a4021 	add	x1, x1, #0xa90
   9208c:	912c2000 	add	x0, x0, #0xb08
   92090:	52800dc2 	mov	w2, #0x6e                  	// #110
   92094:	9400297b 	bl	9c680 <assertion_failed>
   92098:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   9209c:	b00000e0 	adrp	x0, af000 <FromUmsd+0xb0>
   920a0:	912a4021 	add	x1, x1, #0xa90
   920a4:	912fe000 	add	x0, x0, #0xbf8
   920a8:	52800e02 	mov	w2, #0x70                  	// #112
   920ac:	94002975 	bl	9c680 <assertion_failed>

00000000000920b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   920b0:	b9400004 	ldr	w4, [x0]
   920b4:	34000944 	cbz	w4, 921dc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x12c>
   920b8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   920bc:	910003fd 	mov	x29, sp
   920c0:	a90153f3 	stp	x19, x20, [sp, #16]
   920c4:	2a0103f4 	mov	w20, w1
   920c8:	aa0003f3 	mov	x19, x0
   920cc:	b9400401 	ldr	w1, [x0, #4]
   920d0:	34000801 	cbz	w1, 921d0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x120>
   920d4:	0b020c42 	add	w2, w2, w2, lsl #3
   920d8:	528ccce0 	mov	w0, #0x6667                	// #26215
   920dc:	72acccc0 	movk	w0, #0x6666, lsl #16
   920e0:	0b030c63 	add	w3, w3, w3, lsl #3
   920e4:	29411e66 	ldp	w6, w7, [x19, #8]
   920e8:	531f7842 	lsl	w2, w2, #1
   920ec:	531f7863 	lsl	w3, w3, #1
   920f0:	9b207c45 	smull	x5, w2, w0
   920f4:	9b207c60 	smull	x0, w3, w0
   920f8:	9362fca5 	asr	x5, x5, #34
   920fc:	4b827ca2 	sub	w2, w5, w2, asr #31
   92100:	9362fc00 	asr	x0, x0, #34
   92104:	4b837c03 	sub	w3, w0, w3, asr #31
   92108:	0b060042 	add	w2, w2, w6
   9210c:	6b02009f 	cmp	w4, w2
   92110:	0b0300e0 	add	w0, w7, w3
   92114:	54000669 	b.ls	921e0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x130>  // b.plast
   92118:	6b00003f 	cmp	w1, w0
   9211c:	29010262 	stp	w2, w0, [x19, #8]
   92120:	540006e8 	b.hi	921fc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x14c>  // b.pmore
   92124:	6b06005f 	cmp	w2, w6
   92128:	b9000e67 	str	w7, [x19, #12]
   9212c:	54000120 	b.eq	92150 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa0>  // b.none
   92130:	52800020 	mov	w0, #0x1                   	// #1
   92134:	f9400e64 	ldr	x4, [x19, #24]
   92138:	39004260 	strb	w0, [x19, #16]
   9213c:	b4000484 	cbz	x4, 921cc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   92140:	b9400e63 	ldr	w3, [x19, #12]
   92144:	2a1403e1 	mov	w1, w20
   92148:	52800000 	mov	w0, #0x0                   	// #0
   9214c:	d63f0080 	blr	x4
   92150:	b9401660 	ldr	w0, [x19, #20]
   92154:	6b14001f 	cmp	w0, w20
   92158:	540003a0 	b.eq	921cc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>  // b.none
   9215c:	f9400e61 	ldr	x1, [x19, #24]
   92160:	b4000361 	cbz	x1, 921cc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   92164:	a9025bf5 	stp	x21, x22, [sp, #32]
   92168:	52800015 	mov	w21, #0x0                   	// #0
   9216c:	52800036 	mov	w22, #0x1                   	// #1
   92170:	1ad522c1 	lsl	w1, w22, w21
   92174:	6a00003f 	tst	w1, w0
   92178:	0a010282 	and	w2, w20, w1
   9217c:	540001c0 	b.eq	921b4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x104>  // b.none
   92180:	52800040 	mov	w0, #0x2                   	// #2
   92184:	35000082 	cbnz	w2, 92194 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe4>
   92188:	29410e62 	ldp	w2, w3, [x19, #8]
   9218c:	f9400e64 	ldr	x4, [x19, #24]
   92190:	d63f0080 	blr	x4
   92194:	110006b5 	add	w21, w21, #0x1
   92198:	71000ebf 	cmp	w21, #0x3
   9219c:	54000160 	b.eq	921c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x118>  // b.none
   921a0:	b9401660 	ldr	w0, [x19, #20]
   921a4:	1ad522c1 	lsl	w1, w22, w21
   921a8:	0a010282 	and	w2, w20, w1
   921ac:	6a00003f 	tst	w1, w0
   921b0:	54fffe81 	b.ne	92180 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd0>  // b.any
   921b4:	52800020 	mov	w0, #0x1                   	// #1
   921b8:	35fffe82 	cbnz	w2, 92188 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   921bc:	110006b5 	add	w21, w21, #0x1
   921c0:	71000ebf 	cmp	w21, #0x3
   921c4:	54fffee1 	b.ne	921a0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf0>  // b.any
   921c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   921cc:	b9001674 	str	w20, [x19, #20]
   921d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   921d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   921d8:	d65f03c0 	ret
   921dc:	d65f03c0 	ret
   921e0:	6b00003f 	cmp	w1, w0
   921e4:	b9000e60 	str	w0, [x19, #12]
   921e8:	54000109 	b.ls	92208 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>  // b.plast
   921ec:	6b0000ff 	cmp	w7, w0
   921f0:	2a0603e2 	mov	w2, w6
   921f4:	54fff9e1 	b.ne	92130 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>  // b.any
   921f8:	17ffffd6 	b	92150 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa0>
   921fc:	6b06005f 	cmp	w2, w6
   92200:	54fff981 	b.ne	92130 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>  // b.any
   92204:	17fffffa 	b	921ec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x13c>
   92208:	b9000e67 	str	w7, [x19, #12]
   9220c:	17ffffd1 	b	92150 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa0>

0000000000092210 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   92210:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   92214:	910003fd 	mov	x29, sp
   92218:	a90153f3 	stp	x19, x20, [sp, #16]
   9221c:	2a0103f3 	mov	w19, w1
   92220:	2a0003f4 	mov	w20, w0
   92224:	52800001 	mov	w1, #0x0                   	// #0
   92228:	9100e3e0 	add	x0, sp, #0x38
   9222c:	f90013f5 	str	x21, [sp, #32]
   92230:	12001c55 	and	w21, w2, #0xff
   92234:	94002937 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   92238:	52800025 	mov	w5, #0x1                   	// #1
   9223c:	9100e3e0 	add	x0, sp, #0x38
   92240:	2909d3f5 	stp	w21, w20, [sp, #76]
   92244:	52800204 	mov	w4, #0x10                  	// #16
   92248:	52800383 	mov	w3, #0x1c                  	// #28
   9224c:	910103e2 	add	x2, sp, #0x40
   92250:	52900221 	mov	w1, #0x8011                	// #32785
   92254:	290a97f3 	stp	w19, w5, [sp, #84]
   92258:	94002936 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9225c:	72001c13 	ands	w19, w0, #0xff
   92260:	54000080 	b.eq	92270 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x60>  // b.none
   92264:	b9404fe0 	ldr	w0, [sp, #76]
   92268:	7100001f 	cmp	w0, #0x0
   9226c:	1a9f17f3 	cset	w19, eq  // eq = none
   92270:	9100e3e0 	add	x0, sp, #0x38
   92274:	9400292b 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   92278:	2a1303e0 	mov	w0, w19
   9227c:	a94153f3 	ldp	x19, x20, [sp, #16]
   92280:	f94013f5 	ldr	x21, [sp, #32]
   92284:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92288:	d65f03c0 	ret
   9228c:	d503201f 	nop

0000000000092290 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   92290:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   92294:	910003fd 	mov	x29, sp
   92298:	b9400005 	ldr	w5, [x0]
   9229c:	34000285 	cbz	w5, 922ec <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   922a0:	aa0003e3 	mov	x3, x0
   922a4:	b9400400 	ldr	w0, [x0, #4]
   922a8:	340002e0 	cbz	w0, 92304 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   922ac:	2a0103e4 	mov	w4, w1
   922b0:	6b02001f 	cmp	w0, w2
   922b4:	7a4480a0 	ccmp	w5, w4, #0x0, hi  // hi = pmore
   922b8:	2a0203e1 	mov	w1, w2
   922bc:	52800000 	mov	w0, #0x0                   	// #0
   922c0:	54000068 	b.hi	922cc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x3c>  // b.pmore
   922c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   922c8:	d65f03c0 	ret
   922cc:	39404462 	ldrb	w2, [x3, #17]
   922d0:	52800020 	mov	w0, #0x1                   	// #1
   922d4:	29010464 	stp	w4, w1, [x3, #8]
   922d8:	34ffff62 	cbz	w2, 922c4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   922dc:	2a0003e2 	mov	w2, w0
   922e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   922e4:	2a0403e0 	mov	w0, w4
   922e8:	17ffffca 	b	92210 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   922ec:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   922f0:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   922f4:	912a4021 	add	x1, x1, #0xa90
   922f8:	912b0000 	add	x0, x0, #0xac0
   922fc:	52800ea2 	mov	w2, #0x75                  	// #117
   92300:	940028e0 	bl	9c680 <assertion_failed>
   92304:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92308:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   9230c:	912a4021 	add	x1, x1, #0xa90
   92310:	912bc000 	add	x0, x0, #0xaf0
   92314:	52800ec2 	mov	w2, #0x76                  	// #118
   92318:	940028da 	bl	9c680 <assertion_failed>
   9231c:	d503201f 	nop

0000000000092320 <CMouseBehaviour::ShowCursor(bool)>:
   92320:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92324:	aa0003e3 	mov	x3, x0
   92328:	12001c22 	and	w2, w1, #0xff
   9232c:	910003fd 	mov	x29, sp
   92330:	b9400001 	ldr	w1, [x0]
   92334:	b9400800 	ldr	w0, [x0, #8]
   92338:	f9000bf3 	str	x19, [sp, #16]
   9233c:	39404473 	ldrb	w19, [x3, #17]
   92340:	39004462 	strb	w2, [x3, #17]
   92344:	6b01001f 	cmp	w0, w1
   92348:	54000142 	b.cs	92370 <CMouseBehaviour::ShowCursor(bool)+0x50>  // b.hs, b.nlast
   9234c:	b9400464 	ldr	w4, [x3, #4]
   92350:	b9400c61 	ldr	w1, [x3, #12]
   92354:	6b04003f 	cmp	w1, w4
   92358:	54000182 	b.cs	92388 <CMouseBehaviour::ShowCursor(bool)+0x68>  // b.hs, b.nlast
   9235c:	97ffffad 	bl	92210 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   92360:	2a1303e0 	mov	w0, w19
   92364:	f9400bf3 	ldr	x19, [sp, #16]
   92368:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9236c:	d65f03c0 	ret
   92370:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92374:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92378:	912a4021 	add	x1, x1, #0xa90
   9237c:	912c8000 	add	x0, x0, #0xb20
   92380:	528011a2 	mov	w2, #0x8d                  	// #141
   92384:	940028bf 	bl	9c680 <assertion_failed>
   92388:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   9238c:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92390:	912a4021 	add	x1, x1, #0xa90
   92394:	912d0000 	add	x0, x0, #0xb40
   92398:	528011c2 	mov	w2, #0x8e                  	// #142
   9239c:	940028b9 	bl	9c680 <assertion_failed>

00000000000923a0 <CMouseBehaviour::UpdateCursor()>:
   923a0:	aa0003e1 	mov	x1, x0
   923a4:	39404400 	ldrb	w0, [x0, #17]
   923a8:	34000060 	cbz	w0, 923b4 <CMouseBehaviour::UpdateCursor()+0x14>
   923ac:	39404020 	ldrb	w0, [x1, #16]
   923b0:	35000040 	cbnz	w0, 923b8 <CMouseBehaviour::UpdateCursor()+0x18>
   923b4:	d65f03c0 	ret
   923b8:	52800022 	mov	w2, #0x1                   	// #1
   923bc:	3900403f 	strb	wzr, [x1, #16]
   923c0:	29410420 	ldp	w0, w1, [x1, #8]
   923c4:	17ffff93 	b	92210 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
	...

00000000000923d0 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   923d0:	aa0103e3 	mov	x3, x1
   923d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   923d8:	910003fd 	mov	x29, sp
   923dc:	aa0203e1 	mov	x1, x2
   923e0:	f9000bf3 	str	x19, [sp, #16]
   923e4:	aa0003f3 	mov	x19, x0
   923e8:	f8008403 	str	x3, [x0], #8
   923ec:	94003e99 	bl	a1e50 <CString::CString(char const*)>
   923f0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   923f4:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   923f8:	f9400bf3 	ldr	x19, [sp, #16]
   923fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92400:	d65f03c0 	ret
   92404:	d503201f 	nop
   92408:	d503201f 	nop
   9240c:	d503201f 	nop

0000000000092410 <CPartitionManager::~CPartitionManager()>:
   92410:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   92414:	910003fd 	mov	x29, sp
   92418:	a90153f3 	stp	x19, x20, [sp, #16]
   9241c:	9100a013 	add	x19, x0, #0x28
   92420:	a9025bf5 	stp	x21, x22, [sp, #32]
   92424:	aa0003f6 	mov	x22, x0
   92428:	52800015 	mov	w21, #0x0                   	// #0
   9242c:	a90363f7 	stp	x23, x24, [sp, #48]
   92430:	f00000f7 	adrp	x23, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92434:	913d82f7 	add	x23, x23, #0xf60
   92438:	91012018 	add	x24, x0, #0x48
   9243c:	f90023f9 	str	x25, [sp, #64]
   92440:	91002019 	add	x25, x0, #0x8
   92444:	f9400261 	ldr	x1, [x19]
   92448:	910143e0 	add	x0, sp, #0x50
   9244c:	b4000341 	cbz	x1, 924b4 <CPartitionManager::~CPartitionManager()+0xa4>
   92450:	94003e78 	bl	a1e30 <CString::CString()>
   92454:	aa1903e0 	mov	x0, x25
   92458:	110006b5 	add	w21, w21, #0x1
   9245c:	94003e91 	bl	a1ea0 <CString::operator char const*() const>
   92460:	aa0003e2 	mov	x2, x0
   92464:	2a1503e3 	mov	w3, w21
   92468:	aa1703e1 	mov	x1, x23
   9246c:	910143e0 	add	x0, sp, #0x50
   92470:	940043e0 	bl	a33f0 <CString::Format(char const*, ...)>
   92474:	94002b53 	bl	9d1c0 <CDeviceNameService::Get()>
   92478:	aa0003f4 	mov	x20, x0
   9247c:	910143e0 	add	x0, sp, #0x50
   92480:	94003e88 	bl	a1ea0 <CString::operator char const*() const>
   92484:	aa0003e1 	mov	x1, x0
   92488:	52800022 	mov	w2, #0x1                   	// #1
   9248c:	aa1403e0 	mov	x0, x20
   92490:	94002ac0 	bl	9cf90 <CDeviceNameService::RemoveDevice(char const*, bool)>
   92494:	f9400260 	ldr	x0, [x19]
   92498:	b4000080 	cbz	x0, 924a8 <CPartitionManager::~CPartitionManager()+0x98>
   9249c:	f9400001 	ldr	x1, [x0]
   924a0:	f9400421 	ldr	x1, [x1, #8]
   924a4:	d63f0020 	blr	x1
   924a8:	910143e0 	add	x0, sp, #0x50
   924ac:	f900027f 	str	xzr, [x19]
   924b0:	94003e24 	bl	a1d40 <CString::~CString()>
   924b4:	91002273 	add	x19, x19, #0x8
   924b8:	eb18027f 	cmp	x19, x24
   924bc:	54fffc41 	b.ne	92444 <CPartitionManager::~CPartitionManager()+0x34>  // b.any
   924c0:	aa1903e0 	mov	x0, x25
   924c4:	f90002df 	str	xzr, [x22]
   924c8:	94003e1e 	bl	a1d40 <CString::~CString()>
   924cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   924d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   924d4:	a94363f7 	ldp	x23, x24, [sp, #48]
   924d8:	f94023f9 	ldr	x25, [sp, #64]
   924dc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   924e0:	d65f03c0 	ret
   924e4:	d503201f 	nop
   924e8:	d503201f 	nop
   924ec:	d503201f 	nop

00000000000924f0 <CPartitionManager::Initialize()>:
   924f0:	d109c3ff 	sub	sp, sp, #0x270
   924f4:	d2800001 	mov	x1, #0x0                   	// #0
   924f8:	a9007bfd 	stp	x29, x30, [sp]
   924fc:	910003fd 	mov	x29, sp
   92500:	a90153f3 	stp	x19, x20, [sp, #16]
   92504:	aa0003f4 	mov	x20, x0
   92508:	f9400000 	ldr	x0, [x0]
   9250c:	f9400002 	ldr	x2, [x0]
   92510:	f9401042 	ldr	x2, [x2, #32]
   92514:	d63f0040 	blr	x2
   92518:	b50005a0 	cbnz	x0, 925cc <CPartitionManager::Initialize()+0xdc>
   9251c:	f9400280 	ldr	x0, [x20]
   92520:	d2804002 	mov	x2, #0x200                 	// #512
   92524:	9101c3e1 	add	x1, sp, #0x70
   92528:	f9400003 	ldr	x3, [x0]
   9252c:	f9400863 	ldr	x3, [x3, #16]
   92530:	d63f0060 	blr	x3
   92534:	7108001f 	cmp	w0, #0x200
   92538:	540004a1 	b.ne	925cc <CPartitionManager::Initialize()+0xdc>  // b.any
   9253c:	7944dfe1 	ldrh	w1, [sp, #622]
   92540:	52954aa0 	mov	w0, #0xaa55                	// #43605
   92544:	6b00003f 	cmp	w1, w0
   92548:	54000b81 	b.ne	926b8 <CPartitionManager::Initialize()+0x1c8>  // b.any
   9254c:	9108cbf3 	add	x19, sp, #0x232
   92550:	a9025bf5 	stp	x21, x22, [sp, #32]
   92554:	9100a295 	add	x21, x20, #0x28
   92558:	91012296 	add	x22, x20, #0x48
   9255c:	a90363f7 	stp	x23, x24, [sp, #48]
   92560:	f00000f8 	adrp	x24, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92564:	913d8318 	add	x24, x24, #0xf60
   92568:	52800017 	mov	w23, #0x0                   	// #0
   9256c:	a9046bf9 	stp	x25, x26, [sp, #64]
   92570:	91002299 	add	x25, x20, #0x8
   92574:	39400260 	ldrb	w0, [x19]
   92578:	7103bc1f 	cmp	w0, #0xef
   9257c:	7a4f1804 	ccmp	w0, #0xf, #0x4, ne  // ne = any
   92580:	1a9f17e1 	cset	w1, eq  // eq = none
   92584:	7100001f 	cmp	w0, #0x0
   92588:	7a451804 	ccmp	w0, #0x5, #0x4, ne  // ne = any
   9258c:	1a9f1420 	csinc	w0, w1, wzr, ne  // ne = any
   92590:	34000380 	cbz	w0, 92600 <CPartitionManager::Initialize()+0x110>
   92594:	910022b5 	add	x21, x21, #0x8
   92598:	91004273 	add	x19, x19, #0x10
   9259c:	eb1602bf 	cmp	x21, x22
   925a0:	54fffea1 	b.ne	92574 <CPartitionManager::Initialize()+0x84>  // b.any
   925a4:	52800033 	mov	w19, #0x1                   	// #1
   925a8:	34000737 	cbz	w23, 9268c <CPartitionManager::Initialize()+0x19c>
   925ac:	2a1303e0 	mov	w0, w19
   925b0:	a9407bfd 	ldp	x29, x30, [sp]
   925b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   925b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   925bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   925c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   925c4:	9109c3ff 	add	sp, sp, #0x270
   925c8:	d65f03c0 	ret
   925cc:	940031c1 	bl	9ecd0 <CLogger::Get()>
   925d0:	f00000e3 	adrp	x3, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   925d4:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   925d8:	913da063 	add	x3, x3, #0xf68
   925dc:	913fa021 	add	x1, x1, #0xfe8
   925e0:	52800022 	mov	w2, #0x1                   	// #1
   925e4:	52800013 	mov	w19, #0x0                   	// #0
   925e8:	940030f6 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   925ec:	2a1303e0 	mov	w0, w19
   925f0:	a9407bfd 	ldp	x29, x30, [sp]
   925f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   925f8:	9109c3ff 	add	sp, sp, #0x270
   925fc:	d65f03c0 	ret
   92600:	b9400660 	ldr	w0, [x19, #4]
   92604:	34fffc80 	cbz	w0, 92594 <CPartitionManager::Initialize()+0xa4>
   92608:	b9400a60 	ldr	w0, [x19, #8]
   9260c:	34fffc40 	cbz	w0, 92594 <CPartitionManager::Initialize()+0xa4>
   92610:	f94002a0 	ldr	x0, [x21]
   92614:	b50006c0 	cbnz	x0, 926ec <CPartitionManager::Initialize()+0x1fc>
   92618:	d2800500 	mov	x0, #0x28                  	// #40
   9261c:	110006f7 	add	w23, w23, #0x1
   92620:	94004c18 	bl	a5680 <operator new(unsigned long)>
   92624:	29408e62 	ldp	w2, w3, [x19, #4]
   92628:	aa0003fa 	mov	x26, x0
   9262c:	f9400281 	ldr	x1, [x20]
   92630:	940000a8 	bl	928d0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   92634:	910143e0 	add	x0, sp, #0x50
   92638:	f90002ba 	str	x26, [x21]
   9263c:	94003dfd 	bl	a1e30 <CString::CString()>
   92640:	aa1903e0 	mov	x0, x25
   92644:	94003e17 	bl	a1ea0 <CString::operator char const*() const>
   92648:	2a1703e3 	mov	w3, w23
   9264c:	aa0003e2 	mov	x2, x0
   92650:	aa1803e1 	mov	x1, x24
   92654:	910143e0 	add	x0, sp, #0x50
   92658:	94004366 	bl	a33f0 <CString::Format(char const*, ...)>
   9265c:	94002ad9 	bl	9d1c0 <CDeviceNameService::Get()>
   92660:	aa0003fa 	mov	x26, x0
   92664:	910143e0 	add	x0, sp, #0x50
   92668:	94003e0e 	bl	a1ea0 <CString::operator char const*() const>
   9266c:	f94002a2 	ldr	x2, [x21]
   92670:	aa0003e1 	mov	x1, x0
   92674:	52800023 	mov	w3, #0x1                   	// #1
   92678:	aa1a03e0 	mov	x0, x26
   9267c:	94002a09 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   92680:	910143e0 	add	x0, sp, #0x50
   92684:	94003daf 	bl	a1d40 <CString::~CString()>
   92688:	17ffffc3 	b	92594 <CPartitionManager::Initialize()+0xa4>
   9268c:	94003191 	bl	9ecd0 <CLogger::Get()>
   92690:	f00000e3 	adrp	x3, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92694:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92698:	913f0063 	add	x3, x3, #0xfc0
   9269c:	913fa021 	add	x1, x1, #0xfe8
   926a0:	52800042 	mov	w2, #0x2                   	// #2
   926a4:	940030c7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   926a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   926ac:	a94363f7 	ldp	x23, x24, [sp, #48]
   926b0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   926b4:	17ffffce 	b	925ec <CPartitionManager::Initialize()+0xfc>
   926b8:	94003186 	bl	9ecd0 <CLogger::Get()>
   926bc:	f00000e3 	adrp	x3, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   926c0:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   926c4:	913de063 	add	x3, x3, #0xf78
   926c8:	913fa021 	add	x1, x1, #0xfe8
   926cc:	52800042 	mov	w2, #0x2                   	// #2
   926d0:	52800033 	mov	w19, #0x1                   	// #1
   926d4:	940030bb 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   926d8:	2a1303e0 	mov	w0, w19
   926dc:	a9407bfd 	ldp	x29, x30, [sp]
   926e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   926e4:	9109c3ff 	add	sp, sp, #0x270
   926e8:	d65f03c0 	ret
   926ec:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   926f0:	f00000e0 	adrp	x0, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   926f4:	913e4021 	add	x1, x1, #0xf90
   926f8:	913ea000 	add	x0, x0, #0xfa8
   926fc:	52800f02 	mov	w2, #0x78                  	// #120
   92700:	940027e0 	bl	9c680 <assertion_failed>
	...

0000000000092710 <CPartition::~CPartition()>:
   92710:	90000102 	adrp	x2, b2000 <vtable for CPartition>
   92714:	91004042 	add	x2, x2, #0x10
   92718:	a9007c02 	stp	x2, xzr, [x0]
   9271c:	140029a5 	b	9cdb0 <CDevice::~CDevice()>

0000000000092720 <CPartition::~CPartition()>:
   92720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92724:	90000101 	adrp	x1, b2000 <vtable for CPartition>
   92728:	91004021 	add	x1, x1, #0x10
   9272c:	910003fd 	mov	x29, sp
   92730:	f9000bf3 	str	x19, [sp, #16]
   92734:	aa0003f3 	mov	x19, x0
   92738:	a9007c01 	stp	x1, xzr, [x0]
   9273c:	9400299d 	bl	9cdb0 <CDevice::~CDevice()>
   92740:	aa1303e0 	mov	x0, x19
   92744:	d2800501 	mov	x1, #0x28                  	// #40
   92748:	f9400bf3 	ldr	x19, [sp, #16]
   9274c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92750:	14004bf0 	b	a5710 <operator delete(void*, unsigned long)>
   92754:	d503201f 	nop
   92758:	d503201f 	nop
   9275c:	d503201f 	nop

0000000000092760 <CPartition::Read(void*, unsigned long)>:
   92760:	39408004 	ldrb	w4, [x0, #32]
   92764:	350002a4 	cbnz	w4, 927b8 <CPartition::Read(void*, unsigned long)+0x58>
   92768:	f9400c05 	ldr	x5, [x0, #24]
   9276c:	9107fc43 	add	x3, x2, #0x1ff
   92770:	b9401404 	ldr	w4, [x0, #20]
   92774:	8b050063 	add	x3, x3, x5
   92778:	eb43249f 	cmp	x4, x3, lsr #9
   9277c:	540001e3 	b.cc	927b8 <CPartition::Read(void*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   92780:	f9400400 	ldr	x0, [x0, #8]
   92784:	b40000a0 	cbz	x0, 92798 <CPartition::Read(void*, unsigned long)+0x38>
   92788:	f9400003 	ldr	x3, [x0]
   9278c:	f9400863 	ldr	x3, [x3, #16]
   92790:	aa0303f0 	mov	x16, x3
   92794:	d61f0200 	br	x16
   92798:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   9279c:	d00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   927a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   927a4:	913fc021 	add	x1, x1, #0xff0
   927a8:	910003fd 	mov	x29, sp
   927ac:	913fc000 	add	x0, x0, #0xff0
   927b0:	528006a2 	mov	w2, #0x35                  	// #53
   927b4:	940027b3 	bl	9c680 <assertion_failed>
   927b8:	12800000 	mov	w0, #0xffffffff            	// #-1
   927bc:	d65f03c0 	ret

00000000000927c0 <CPartition::Write(void const*, unsigned long)>:
   927c0:	39408004 	ldrb	w4, [x0, #32]
   927c4:	350002a4 	cbnz	w4, 92818 <CPartition::Write(void const*, unsigned long)+0x58>
   927c8:	f9400c05 	ldr	x5, [x0, #24]
   927cc:	9107fc43 	add	x3, x2, #0x1ff
   927d0:	b9401404 	ldr	w4, [x0, #20]
   927d4:	8b050063 	add	x3, x3, x5
   927d8:	eb43249f 	cmp	x4, x3, lsr #9
   927dc:	540001e3 	b.cc	92818 <CPartition::Write(void const*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   927e0:	f9400400 	ldr	x0, [x0, #8]
   927e4:	b40000a0 	cbz	x0, 927f8 <CPartition::Write(void const*, unsigned long)+0x38>
   927e8:	f9400003 	ldr	x3, [x0]
   927ec:	f9400c63 	ldr	x3, [x3, #24]
   927f0:	aa0303f0 	mov	x16, x3
   927f4:	d61f0200 	br	x16
   927f8:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   927fc:	d00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   92800:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   92804:	913fc021 	add	x1, x1, #0xff0
   92808:	910003fd 	mov	x29, sp
   9280c:	913fc000 	add	x0, x0, #0xff0
   92810:	528008e2 	mov	w2, #0x47                  	// #71
   92814:	9400279b 	bl	9c680 <assertion_failed>
   92818:	12800000 	mov	w0, #0xffffffff            	// #-1
   9281c:	d65f03c0 	ret

0000000000092820 <CPartition::Seek(unsigned long)>:
   92820:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   92824:	910003fd 	mov	x29, sp
   92828:	f240203f 	tst	x1, #0x1ff
   9282c:	a90153f3 	stp	x19, x20, [sp, #16]
   92830:	aa0003f3 	mov	x19, x0
   92834:	52800020 	mov	w0, #0x1                   	// #1
   92838:	39008260 	strb	w0, [x19, #32]
   9283c:	54000301 	b.ne	9289c <CPartition::Seek(unsigned long)+0x7c>  // b.any
   92840:	b9401660 	ldr	w0, [x19, #20]
   92844:	aa0103f4 	mov	x20, x1
   92848:	eb41241f 	cmp	x0, x1, lsr #9
   9284c:	54000289 	b.ls	9289c <CPartition::Seek(unsigned long)+0x7c>  // b.plast
   92850:	f9400660 	ldr	x0, [x19, #8]
   92854:	f90013f5 	str	x21, [sp, #32]
   92858:	b9401275 	ldr	w21, [x19, #16]
   9285c:	8b152435 	add	x21, x1, x21, lsl #9
   92860:	b4000260 	cbz	x0, 928ac <CPartition::Seek(unsigned long)+0x8c>
   92864:	f9400002 	ldr	x2, [x0]
   92868:	aa1503e1 	mov	x1, x21
   9286c:	f9401042 	ldr	x2, [x2, #32]
   92870:	d63f0040 	blr	x2
   92874:	eb15001f 	cmp	x0, x21
   92878:	54000101 	b.ne	92898 <CPartition::Seek(unsigned long)+0x78>  // b.any
   9287c:	aa1403e0 	mov	x0, x20
   92880:	3900827f 	strb	wzr, [x19, #32]
   92884:	f94013f5 	ldr	x21, [sp, #32]
   92888:	f9000e74 	str	x20, [x19, #24]
   9288c:	a94153f3 	ldp	x19, x20, [sp, #16]
   92890:	a8c37bfd 	ldp	x29, x30, [sp], #48
   92894:	d65f03c0 	ret
   92898:	f94013f5 	ldr	x21, [sp, #32]
   9289c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   928a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   928a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   928a8:	d65f03c0 	ret
   928ac:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   928b0:	d00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   928b4:	913fc021 	add	x1, x1, #0xff0
   928b8:	913fc000 	add	x0, x0, #0xff0
   928bc:	52800b22 	mov	w2, #0x59                  	// #89
   928c0:	94002770 	bl	9c680 <assertion_failed>
   928c4:	d503201f 	nop
   928c8:	d503201f 	nop
   928cc:	d503201f 	nop

00000000000928d0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   928d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   928d4:	910003fd 	mov	x29, sp
   928d8:	a90153f3 	stp	x19, x20, [sp, #16]
   928dc:	aa0003f3 	mov	x19, x0
   928e0:	aa0103f4 	mov	x20, x1
   928e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   928e8:	2a0203f6 	mov	w22, w2
   928ec:	2a0303f5 	mov	w21, w3
   928f0:	94002944 	bl	9ce00 <CDevice::CDevice()>
   928f4:	90000100 	adrp	x0, b2000 <vtable for CPartition>
   928f8:	91004000 	add	x0, x0, #0x10
   928fc:	29025676 	stp	w22, w21, [x19, #16]
   92900:	52800021 	mov	w1, #0x1                   	// #1
   92904:	f9000e7f 	str	xzr, [x19, #24]
   92908:	a9005260 	stp	x0, x20, [x19]
   9290c:	39008261 	strb	w1, [x19, #32]
   92910:	b40000b4 	cbz	x20, 92924 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x54>
   92914:	a94153f3 	ldp	x19, x20, [sp, #16]
   92918:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9291c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   92920:	d65f03c0 	ret
   92924:	f00000e1 	adrp	x1, b1000 <CKeyMap::s_DefaultMap+0xdc8>
   92928:	d00000c0 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   9292c:	913fc021 	add	x1, x1, #0xff0
   92930:	913fc000 	add	x0, x0, #0xff0
   92934:	528003e2 	mov	w2, #0x1f                  	// #31
   92938:	94002752 	bl	9c680 <assertion_failed>
   9293c:	00000000 	.inst	0x00000000 ; undefined

0000000000092940 <ld_qword>:
   92940:	39400c02 	ldrb	w2, [x0, #3]
   92944:	b9400401 	ldr	w1, [x0, #4]
   92948:	39400804 	ldrb	w4, [x0, #2]
   9294c:	39400403 	ldrb	w3, [x0, #1]
   92950:	aa012041 	orr	x1, x2, x1, lsl #8
   92954:	39400002 	ldrb	w2, [x0]
   92958:	aa012081 	orr	x1, x4, x1, lsl #8
   9295c:	aa012060 	orr	x0, x3, x1, lsl #8
   92960:	aa002040 	orr	x0, x2, x0, lsl #8
   92964:	d65f03c0 	ret
   92968:	d503201f 	nop
   9296c:	d503201f 	nop

0000000000092970 <pattern_matching>:
   92970:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   92974:	910003fd 	mov	x29, sp
   92978:	90000106 	adrp	x6, b2000 <vtable for CPartition>
   9297c:	910360c6 	add	x6, x6, #0xd8
   92980:	a9025bf5 	stp	x21, x22, [sp, #32]
   92984:	aa0003f6 	mov	x22, x0
   92988:	a90153f3 	stp	x19, x20, [sp, #16]
   9298c:	8b224034 	add	x20, x1, w2, uxtw
   92990:	eb14003f 	cmp	x1, x20
   92994:	540001e0 	b.eq	929d0 <pattern_matching+0x60>  // b.none
   92998:	38401424 	ldrb	w4, [x1], #1
   9299c:	51018485 	sub	w5, w4, #0x61
   929a0:	51020082 	sub	w2, w4, #0x80
   929a4:	710064bf 	cmp	w5, #0x19
   929a8:	54ffff49 	b.ls	92990 <pattern_matching+0x20>  // b.plast
   929ac:	7101fc9f 	cmp	w4, #0x7f
   929b0:	54000049 	b.ls	929b8 <pattern_matching+0x48>  // b.plast
   929b4:	386248c4 	ldrb	w4, [x6, w2, uxtw]
   929b8:	35fffec4 	cbnz	w4, 92990 <pattern_matching+0x20>
   929bc:	52800000 	mov	w0, #0x0                   	// #0
   929c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   929c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   929c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   929cc:	d65f03c0 	ret
   929d0:	a90363f7 	stp	x23, x24, [sp, #48]
   929d4:	7100007f 	cmp	w3, #0x0
   929d8:	1a9f07f8 	cset	w24, ne  // ne = any
   929dc:	39c002d7 	ldrsb	w23, [x22]
   929e0:	710002ff 	cmp	w23, #0x0
   929e4:	7a400b04 	ccmp	w24, #0x0, #0x4, eq  // eq = none
   929e8:	540005e1 	b.ne	92aa4 <pattern_matching+0x134>  // b.any
   929ec:	90000115 	adrp	x21, b2000 <vtable for CPartition>
   929f0:	910362b5 	add	x21, x21, #0xd8
   929f4:	2a1703e3 	mov	w3, w23
   929f8:	aa1403f3 	mov	x19, x20
   929fc:	aa1603e0 	mov	x0, x22
   92a00:	52800542 	mov	w2, #0x2a                  	// #42
   92a04:	1400000b 	b	92a30 <pattern_matching+0xc0>
   92a08:	51008063 	sub	w3, w3, #0x20
   92a0c:	38401664 	ldrb	w4, [x19], #1
   92a10:	51018481 	sub	w1, w4, #0x61
   92a14:	7100643f 	cmp	w1, #0x19
   92a18:	540002c8 	b.hi	92a70 <pattern_matching+0x100>  // b.pmore
   92a1c:	51008084 	sub	w4, w4, #0x20
   92a20:	6b03009f 	cmp	w4, w3
   92a24:	54000321 	b.ne	92a88 <pattern_matching+0x118>  // b.any
   92a28:	340003e4 	cbz	w4, 92aa4 <pattern_matching+0x134>
   92a2c:	39c00003 	ldrsb	w3, [x0]
   92a30:	7100fc7f 	cmp	w3, #0x3f
   92a34:	91000400 	add	x0, x0, #0x1
   92a38:	7a421064 	ccmp	w3, w2, #0x4, ne  // ne = any
   92a3c:	54000400 	b.eq	92abc <pattern_matching+0x14c>  // b.none
   92a40:	12001c63 	and	w3, w3, #0xff
   92a44:	51018461 	sub	w1, w3, #0x61
   92a48:	7100643f 	cmp	w1, #0x19
   92a4c:	54fffde9 	b.ls	92a08 <pattern_matching+0x98>  // b.plast
   92a50:	7101fc7f 	cmp	w3, #0x7f
   92a54:	54fffdc9 	b.ls	92a0c <pattern_matching+0x9c>  // b.plast
   92a58:	38401664 	ldrb	w4, [x19], #1
   92a5c:	51020063 	sub	w3, w3, #0x80
   92a60:	38634aa3 	ldrb	w3, [x21, w3, uxtw]
   92a64:	51018481 	sub	w1, w4, #0x61
   92a68:	7100643f 	cmp	w1, #0x19
   92a6c:	54fffd89 	b.ls	92a1c <pattern_matching+0xac>  // b.plast
   92a70:	7101fc9f 	cmp	w4, #0x7f
   92a74:	54fffd69 	b.ls	92a20 <pattern_matching+0xb0>  // b.plast
   92a78:	51020084 	sub	w4, w4, #0x80
   92a7c:	38644aa4 	ldrb	w4, [x21, w4, uxtw]
   92a80:	6b03009f 	cmp	w4, w3
   92a84:	54fffd20 	b.eq	92a28 <pattern_matching+0xb8>  // b.none
   92a88:	7100009f 	cmp	w4, #0x0
   92a8c:	91000694 	add	x20, x20, #0x1
   92a90:	7a401b04 	ccmp	w24, #0x0, #0x4, ne  // ne = any
   92a94:	54fffb01 	b.ne	929f4 <pattern_matching+0x84>  // b.any
   92a98:	52800000 	mov	w0, #0x0                   	// #0
   92a9c:	a94363f7 	ldp	x23, x24, [sp, #48]
   92aa0:	17ffffc8 	b	929c0 <pattern_matching+0x50>
   92aa4:	52800020 	mov	w0, #0x1                   	// #1
   92aa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   92aac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92ab0:	a94363f7 	ldp	x23, x24, [sp, #48]
   92ab4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   92ab8:	d65f03c0 	ret
   92abc:	52800004 	mov	w4, #0x0                   	// #0
   92ac0:	52800002 	mov	w2, #0x0                   	// #0
   92ac4:	52800541 	mov	w1, #0x2a                  	// #42
   92ac8:	14000007 	b	92ae4 <pattern_matching+0x174>
   92acc:	39c00003 	ldrsb	w3, [x0]
   92ad0:	52800024 	mov	w4, #0x1                   	// #1
   92ad4:	7100fc7f 	cmp	w3, #0x3f
   92ad8:	7a411064 	ccmp	w3, w1, #0x4, ne  // ne = any
   92adc:	54000121 	b.ne	92b00 <pattern_matching+0x190>  // b.any
   92ae0:	91000400 	add	x0, x0, #0x1
   92ae4:	7100fc7f 	cmp	w3, #0x3f
   92ae8:	54ffff21 	b.ne	92acc <pattern_matching+0x15c>  // b.any
   92aec:	39c00003 	ldrsb	w3, [x0]
   92af0:	11000442 	add	w2, w2, #0x1
   92af4:	7100fc7f 	cmp	w3, #0x3f
   92af8:	7a411064 	ccmp	w3, w1, #0x4, ne  // ne = any
   92afc:	54ffff20 	b.eq	92ae0 <pattern_matching+0x170>  // b.none
   92b00:	2a0403e3 	mov	w3, w4
   92b04:	aa1303e1 	mov	x1, x19
   92b08:	97ffff9a 	bl	92970 <pattern_matching>
   92b0c:	35fffcc0 	cbnz	w0, 92aa4 <pattern_matching+0x134>
   92b10:	39c00264 	ldrsb	w4, [x19]
   92b14:	91000694 	add	x20, x20, #0x1
   92b18:	7100009f 	cmp	w4, #0x0
   92b1c:	7a401b04 	ccmp	w24, #0x0, #0x4, ne  // ne = any
   92b20:	54fff6a1 	b.ne	929f4 <pattern_matching+0x84>  // b.any
   92b24:	17ffffdd 	b	92a98 <pattern_matching+0x128>
   92b28:	d503201f 	nop
   92b2c:	d503201f 	nop

0000000000092b30 <get_ldnumber>:
   92b30:	f940000c 	ldr	x12, [x0]
   92b34:	aa0003ea 	mov	x10, x0
   92b38:	b400086c 	cbz	x12, 92c44 <get_ldnumber+0x114>
   92b3c:	aa0c03e7 	mov	x7, x12
   92b40:	38c014e1 	ldrsb	w1, [x7], #1
   92b44:	7100e83f 	cmp	w1, #0x3a
   92b48:	12001c22 	and	w2, w1, #0xff
   92b4c:	7a5f1840 	ccmp	w2, #0x1f, #0x0, ne  // ne = any
   92b50:	54ffff88 	b.hi	92b40 <get_ldnumber+0x10>  // b.pmore
   92b54:	7100e83f 	cmp	w1, #0x3a
   92b58:	54000080 	b.eq	92b68 <get_ldnumber+0x38>  // b.none
   92b5c:	90000120 	adrp	x0, b6000 <s_OldInfo+0x68>
   92b60:	39792000 	ldrb	w0, [x0, #3656]
   92b64:	d65f03c0 	ret
   92b68:	39c0018e 	ldrsb	w14, [x12]
   92b6c:	5100c1c0 	sub	w0, w14, #0x30
   92b70:	12001c01 	and	w1, w0, #0xff
   92b74:	7100243f 	cmp	w1, #0x9
   92b78:	54000589 	b.ls	92c28 <get_ldnumber+0xf8>  // b.plast
   92b7c:	9000010d 	adrp	x13, b2000 <vtable for CPartition>
   92b80:	910361ad 	add	x13, x13, #0xd8
   92b84:	90000108 	adrp	x8, b2000 <vtable for CPartition>
   92b88:	91010108 	add	x8, x8, #0x40
   92b8c:	d280000b 	mov	x11, #0x0                   	// #0
   92b90:	52800a63 	mov	w3, #0x53                  	// #83
   92b94:	910201ad 	add	x13, x13, #0x80
   92b98:	2a0b03e0 	mov	w0, w11
   92b9c:	2a0e03e4 	mov	w4, w14
   92ba0:	aa0c03e9 	mov	x9, x12
   92ba4:	14000003 	b	92bb0 <get_ldnumber+0x80>
   92ba8:	39c00103 	ldrsb	w3, [x8]
   92bac:	39c00124 	ldrsb	w4, [x9]
   92bb0:	12001c62 	and	w2, w3, #0xff
   92bb4:	12001c81 	and	w1, w4, #0xff
   92bb8:	51018446 	sub	w6, w2, #0x61
   92bbc:	51018425 	sub	w5, w1, #0x61
   92bc0:	12001cc6 	and	w6, w6, #0xff
   92bc4:	51008042 	sub	w2, w2, #0x20
   92bc8:	710068df 	cmp	w6, #0x1a
   92bcc:	12001ca5 	and	w5, w5, #0xff
   92bd0:	51008021 	sub	w1, w1, #0x20
   92bd4:	13001c42 	sxtb	w2, w2
   92bd8:	1a833043 	csel	w3, w2, w3, cc  // cc = lo, ul, last
   92bdc:	13001c21 	sxtb	w1, w1
   92be0:	710068bf 	cmp	w5, #0x1a
   92be4:	1a843024 	csel	w4, w1, w4, cc  // cc = lo, ul, last
   92be8:	7100007f 	cmp	w3, #0x0
   92bec:	91000508 	add	x8, x8, #0x1
   92bf0:	1a9f07e1 	cset	w1, ne  // ne = any
   92bf4:	7100003f 	cmp	w1, #0x0
   92bf8:	91000529 	add	x9, x9, #0x1
   92bfc:	7a431080 	ccmp	w4, w3, #0x0, ne  // ne = any
   92c00:	54fffd40 	b.eq	92ba8 <get_ldnumber+0x78>  // b.none
   92c04:	7100003f 	cmp	w1, #0x0
   92c08:	fa4900e0 	ccmp	x7, x9, #0x0, eq  // eq = none
   92c0c:	54000180 	b.eq	92c3c <get_ldnumber+0x10c>  // b.none
   92c10:	9100056b 	add	x11, x11, #0x1
   92c14:	f100117f 	cmp	x11, #0x4
   92c18:	54000160 	b.eq	92c44 <get_ldnumber+0x114>  // b.none
   92c1c:	f86b79a8 	ldr	x8, [x13, x11, lsl #3]
   92c20:	39c00103 	ldrsb	w3, [x8]
   92c24:	17ffffdd 	b	92b98 <get_ldnumber+0x68>
   92c28:	91000981 	add	x1, x12, #0x2
   92c2c:	eb0100ff 	cmp	x7, x1
   92c30:	54fffa61 	b.ne	92b7c <get_ldnumber+0x4c>  // b.any
   92c34:	71000c1f 	cmp	w0, #0x3
   92c38:	5400006c 	b.gt	92c44 <get_ldnumber+0x114>
   92c3c:	f9000147 	str	x7, [x10]
   92c40:	d65f03c0 	ret
   92c44:	12800000 	mov	w0, #0xffffffff            	// #-1
   92c48:	d65f03c0 	ret
   92c4c:	d503201f 	nop

0000000000092c50 <put_utf>:
   92c50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92c54:	910003fd 	mov	x29, sp
   92c58:	a90153f3 	stp	x19, x20, [sp, #16]
   92c5c:	aa0103f4 	mov	x20, x1
   92c60:	52806a41 	mov	w1, #0x352                 	// #850
   92c64:	2a0203f3 	mov	w19, w2
   92c68:	9400254a 	bl	9c190 <ff_uni2oem>
   92c6c:	12003c01 	and	w1, w0, #0xffff
   92c70:	7103fc3f 	cmp	w1, #0xff
   92c74:	540000e9 	b.ls	92c90 <put_utf+0x40>  // b.plast
   92c78:	7100067f 	cmp	w19, #0x1
   92c7c:	52800000 	mov	w0, #0x0                   	// #0
   92c80:	540001a8 	b.hi	92cb4 <put_utf+0x64>  // b.pmore
   92c84:	a94153f3 	ldp	x19, x20, [sp, #16]
   92c88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92c8c:	d65f03c0 	ret
   92c90:	7100003f 	cmp	w1, #0x0
   92c94:	52800000 	mov	w0, #0x0                   	// #0
   92c98:	7a401a64 	ccmp	w19, #0x0, #0x4, ne  // ne = any
   92c9c:	54ffff40 	b.eq	92c84 <put_utf+0x34>  // b.none
   92ca0:	52800020 	mov	w0, #0x1                   	// #1
   92ca4:	39000281 	strb	w1, [x20]
   92ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   92cac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92cb0:	d65f03c0 	ret
   92cb4:	5ac00423 	rev16	w3, w1
   92cb8:	52800040 	mov	w0, #0x2                   	// #2
   92cbc:	79000283 	strh	w3, [x20]
   92cc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   92cc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92cc8:	d65f03c0 	ret
   92ccc:	d503201f 	nop

0000000000092cd0 <get_fileinfo>:
   92cd0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   92cd4:	910003fd 	mov	x29, sp
   92cd8:	a90153f3 	stp	x19, x20, [sp, #16]
   92cdc:	aa0003f4 	mov	x20, x0
   92ce0:	a9025bf5 	stp	x21, x22, [sp, #32]
   92ce4:	f9400015 	ldr	x21, [x0]
   92ce8:	3900683f 	strb	wzr, [x1, #26]
   92cec:	f9401c00 	ldr	x0, [x0, #56]
   92cf0:	b4000cc0 	cbz	x0, 92e88 <get_fileinfo+0x1b8>
   92cf4:	394002a0 	ldrb	w0, [x21]
   92cf8:	aa0103f3 	mov	x19, x1
   92cfc:	7100101f 	cmp	w0, #0x4
   92d00:	540014a0 	b.eq	92f94 <get_fileinfo+0x2c4>  // b.none
   92d04:	b9405680 	ldr	w0, [x20, #84]
   92d08:	5280000a 	mov	w10, #0x0                   	// #0
   92d0c:	3100041f 	cmn	w0, #0x1
   92d10:	54000520 	b.eq	92db4 <get_fileinfo+0xe4>  // b.none
   92d14:	f9400aa5 	ldr	x5, [x21, #16]
   92d18:	52850016 	mov	w22, #0x2800                	// #10240
   92d1c:	a90363f7 	stp	x23, x24, [sp, #48]
   92d20:	52800018 	mov	w24, #0x0                   	// #0
   92d24:	52801ff7 	mov	w23, #0xff                  	// #255
   92d28:	a9046bf9 	stp	x25, x26, [sp, #64]
   92d2c:	52800019 	mov	w25, #0x0                   	// #0
   92d30:	5280001a 	mov	w26, #0x0                   	// #0
   92d34:	794000a4 	ldrh	w4, [x5]
   92d38:	35000144 	cbnz	w4, 92d60 <get_fileinfo+0x90>
   92d3c:	14000018 	b	92d9c <get_fileinfo+0xcc>
   92d40:	97ffffc4 	bl	92c50 <put_utf>
   92d44:	72001c00 	ands	w0, w0, #0xff
   92d48:	54001200 	b.eq	92f88 <get_fileinfo+0x2b8>  // b.none
   92d4c:	f9400aa5 	ldr	x5, [x21, #16]
   92d50:	0b000318 	add	w24, w24, w0
   92d54:	52800019 	mov	w25, #0x0                   	// #0
   92d58:	787a58a4 	ldrh	w4, [x5, w26, uxtw #1]
   92d5c:	340001e4 	cbz	w4, 92d98 <get_fileinfo+0xc8>
   92d60:	2a1803e1 	mov	w1, w24
   92d64:	0b160083 	add	w3, w4, w22
   92d68:	2a194080 	orr	w0, w4, w25, lsl #16
   92d6c:	91006821 	add	x1, x1, #0x1a
   92d70:	12003c63 	and	w3, w3, #0xffff
   92d74:	4b1802e2 	sub	w2, w23, w24
   92d78:	8b010261 	add	x1, x19, x1
   92d7c:	711ffc7f 	cmp	w3, #0x7ff
   92d80:	1100075a 	add	w26, w26, #0x1
   92d84:	35fffdf9 	cbnz	w25, 92d40 <get_fileinfo+0x70>
   92d88:	54fffdc8 	b.hi	92d40 <get_fileinfo+0x70>  // b.pmore
   92d8c:	2a0403f9 	mov	w25, w4
   92d90:	787a58a4 	ldrh	w4, [x5, w26, uxtw #1]
   92d94:	35fffe64 	cbnz	w4, 92d60 <get_fileinfo+0x90>
   92d98:	34000059 	cbz	w25, 92da0 <get_fileinfo+0xd0>
   92d9c:	52800018 	mov	w24, #0x0                   	// #0
   92da0:	8b384278 	add	x24, x19, w24, uxtw
   92da4:	39006b1f 	strb	wzr, [x24, #26]
   92da8:	39c06a6a 	ldrsb	w10, [x19, #26]
   92dac:	a94363f7 	ldp	x23, x24, [sp, #48]
   92db0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92db4:	d2800022 	mov	x2, #0x1                   	// #1
   92db8:	52800004 	mov	w4, #0x0                   	// #0
   92dbc:	12800348 	mov	w8, #0xffffffe5            	// #-27
   92dc0:	528005c9 	mov	w9, #0x2e                  	// #46
   92dc4:	f9402287 	ldr	x7, [x20, #64]
   92dc8:	d10004e6 	sub	x6, x7, #0x1
   92dcc:	14000008 	b	92dec <get_fileinfo+0x11c>
   92dd0:	11000884 	add	w4, w4, #0x2
   92dd4:	390034a9 	strb	w9, [x5, #13]
   92dd8:	8b234263 	add	x3, x19, w3, uxtw
   92ddc:	39003461 	strb	w1, [x3, #13]
   92de0:	91000442 	add	x2, x2, #0x1
   92de4:	f100305f 	cmp	x2, #0xc
   92de8:	54000580 	b.eq	92e98 <get_fileinfo+0x1c8>  // b.none
   92dec:	386268c0 	ldrb	w0, [x6, x2]
   92df0:	11000483 	add	w3, w4, #0x1
   92df4:	7100801f 	cmp	w0, #0x20
   92df8:	13001c01 	sxtb	w1, w0
   92dfc:	12003c00 	and	w0, w0, #0xffff
   92e00:	54ffff00 	b.eq	92de0 <get_fileinfo+0x110>  // b.none
   92e04:	7100141f 	cmp	w0, #0x5
   92e08:	1a881021 	csel	w1, w1, w8, ne  // ne = any
   92e0c:	2a0303e0 	mov	w0, w3
   92e10:	7100245f 	cmp	w2, #0x9
   92e14:	8b244265 	add	x5, x19, w4, uxtw
   92e18:	7a4b0882 	ccmp	w4, #0xb, #0x2, eq  // eq = none
   92e1c:	54fffda9 	b.ls	92dd0 <get_fileinfo+0x100>  // b.plast
   92e20:	2a0403e3 	mov	w3, w4
   92e24:	2a0003e4 	mov	w4, w0
   92e28:	17ffffec 	b	92dd8 <get_fileinfo+0x108>
   92e2c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92e30:	528007e0 	mov	w0, #0x3f                  	// #63
   92e34:	52800035 	mov	w21, #0x1                   	// #1
   92e38:	39006a60 	strb	w0, [x19, #26]
   92e3c:	8b354275 	add	x21, x19, w21, uxtw
   92e40:	39006abf 	strb	wzr, [x21, #26]
   92e44:	d2800000 	mov	x0, #0x0                   	// #0
   92e48:	3900367f 	strb	wzr, [x19, #13]
   92e4c:	39401301 	ldrb	w1, [x24, #4]
   92e50:	39003261 	strb	w1, [x19, #12]
   92e54:	37200061 	tbnz	w1, #4, 92e60 <get_fileinfo+0x190>
   92e58:	9100e300 	add	x0, x24, #0x38
   92e5c:	97fffeb9 	bl	92940 <ld_qword>
   92e60:	f9000260 	str	x0, [x19]
   92e64:	39403301 	ldrb	w1, [x24, #12]
   92e68:	39403700 	ldrb	w0, [x24, #13]
   92e6c:	2a002020 	orr	w0, w1, w0, lsl #8
   92e70:	79001660 	strh	w0, [x19, #10]
   92e74:	39403f00 	ldrb	w0, [x24, #15]
   92e78:	39403b01 	ldrb	w1, [x24, #14]
   92e7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   92e80:	2a002020 	orr	w0, w1, w0, lsl #8
   92e84:	79001260 	strh	w0, [x19, #8]
   92e88:	a94153f3 	ldp	x19, x20, [sp, #16]
   92e8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92e90:	a8c57bfd 	ldp	x29, x30, [sp], #80
   92e94:	d65f03c0 	ret
   92e98:	8b244260 	add	x0, x19, w4, uxtw
   92e9c:	3900341f 	strb	wzr, [x0, #13]
   92ea0:	350004ca 	cbnz	w10, 92f38 <get_fileinfo+0x268>
   92ea4:	340003a4 	cbz	w4, 92f18 <get_fileinfo+0x248>
   92ea8:	39c03660 	ldrsb	w0, [x19, #13]
   92eac:	52800002 	mov	w2, #0x0                   	// #0
   92eb0:	340003a0 	cbz	w0, 92f24 <get_fileinfo+0x254>
   92eb4:	d2800021 	mov	x1, #0x1                   	// #1
   92eb8:	52800108 	mov	w8, #0x8                   	// #8
   92ebc:	91006666 	add	x6, x19, #0x19
   92ec0:	91003265 	add	x5, x19, #0xc
   92ec4:	1400000c 	b	92ef4 <get_fileinfo+0x224>
   92ec8:	7100645f 	cmp	w2, #0x19
   92ecc:	13001c84 	sxtb	w4, w4
   92ed0:	54000088 	b.hi	92ee0 <get_fileinfo+0x210>  // b.pmore
   92ed4:	394030e2 	ldrb	w2, [x7, #12]
   92ed8:	6a02011f 	tst	w8, w2
   92edc:	1a801080 	csel	w0, w4, w0, ne  // ne = any
   92ee0:	2a0103e2 	mov	w2, w1
   92ee4:	382168c0 	strb	w0, [x6, x1]
   92ee8:	91000421 	add	x1, x1, #0x1
   92eec:	38e168a0 	ldrsb	w0, [x5, x1]
   92ef0:	340001a0 	cbz	w0, 92f24 <get_fileinfo+0x254>
   92ef4:	12003c03 	and	w3, w0, #0xffff
   92ef8:	11008004 	add	w4, w0, #0x20
   92efc:	51010462 	sub	w2, w3, #0x41
   92f00:	7100b87f 	cmp	w3, #0x2e
   92f04:	12003c42 	and	w2, w2, #0xffff
   92f08:	54fffe01 	b.ne	92ec8 <get_fileinfo+0x1f8>  // b.any
   92f0c:	2a0303e0 	mov	w0, w3
   92f10:	52800208 	mov	w8, #0x10                  	// #16
   92f14:	17fffff3 	b	92ee0 <get_fileinfo+0x210>
   92f18:	528007e0 	mov	w0, #0x3f                  	// #63
   92f1c:	52800022 	mov	w2, #0x1                   	// #1
   92f20:	39006a60 	strb	w0, [x19, #26]
   92f24:	8b224262 	add	x2, x19, w2, uxtw
   92f28:	3900685f 	strb	wzr, [x2, #26]
   92f2c:	394030e0 	ldrb	w0, [x7, #12]
   92f30:	35000040 	cbnz	w0, 92f38 <get_fileinfo+0x268>
   92f34:	3900367f 	strb	wzr, [x19, #13]
   92f38:	39402ce0 	ldrb	w0, [x7, #11]
   92f3c:	39003260 	strb	w0, [x19, #12]
   92f40:	79403ce0 	ldrh	w0, [x7, #30]
   92f44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92f48:	394074e2 	ldrb	w2, [x7, #29]
   92f4c:	394070e1 	ldrb	w1, [x7, #28]
   92f50:	2a002040 	orr	w0, w2, w0, lsl #8
   92f54:	2a002020 	orr	w0, w1, w0, lsl #8
   92f58:	f9000260 	str	x0, [x19]
   92f5c:	394058e1 	ldrb	w1, [x7, #22]
   92f60:	39405ce0 	ldrb	w0, [x7, #23]
   92f64:	2a002020 	orr	w0, w1, w0, lsl #8
   92f68:	79001660 	strh	w0, [x19, #10]
   92f6c:	394064e0 	ldrb	w0, [x7, #25]
   92f70:	394060e1 	ldrb	w1, [x7, #24]
   92f74:	2a002020 	orr	w0, w1, w0, lsl #8
   92f78:	79001260 	strh	w0, [x19, #8]
   92f7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   92f80:	a8c57bfd 	ldp	x29, x30, [sp], #80
   92f84:	d65f03c0 	ret
   92f88:	52800018 	mov	w24, #0x0                   	// #0
   92f8c:	35fff099 	cbnz	w25, 92d9c <get_fileinfo+0xcc>
   92f90:	17ffff84 	b	92da0 <get_fileinfo+0xd0>
   92f94:	a90363f7 	stp	x23, x24, [sp, #48]
   92f98:	f9400eb8 	ldr	x24, [x21, #24]
   92f9c:	39408f05 	ldrb	w5, [x24, #35]
   92fa0:	34fff485 	cbz	w5, 92e30 <get_fileinfo+0x160>
   92fa4:	52800015 	mov	w21, #0x0                   	// #0
   92fa8:	52800003 	mov	w3, #0x0                   	// #0
   92fac:	a9046bf9 	stp	x25, x26, [sp, #64]
   92fb0:	52800814 	mov	w20, #0x40                  	// #64
   92fb4:	52800019 	mov	w25, #0x0                   	// #0
   92fb8:	52801ff6 	mov	w22, #0xff                  	// #255
   92fbc:	52850017 	mov	w23, #0x2800                	// #10240
   92fc0:	1400001b 	b	9302c <get_fileinfo+0x35c>
   92fc4:	11001294 	add	w20, w20, #0x4
   92fc8:	38614b00 	ldrb	w0, [x24, w1, uxtw]
   92fcc:	8b214304 	add	x4, x24, w1, uxtw
   92fd0:	2a1503e1 	mov	w1, w21
   92fd4:	91006821 	add	x1, x1, #0x1a
   92fd8:	4b1502c2 	sub	w2, w22, w21
   92fdc:	39400484 	ldrb	w4, [x4, #1]
   92fe0:	8b010261 	add	x1, x19, x1
   92fe4:	11000739 	add	w25, w25, #0x1
   92fe8:	33185c80 	bfi	w0, w4, #8, #24
   92fec:	350000a3 	cbnz	w3, 93000 <get_fileinfo+0x330>
   92ff0:	0b170004 	add	w4, w0, w23
   92ff4:	12003c84 	and	w4, w4, #0xffff
   92ff8:	711ffc9f 	cmp	w4, #0x7ff
   92ffc:	54000269 	b.ls	93048 <get_fileinfo+0x378>  // b.plast
   93000:	2a034000 	orr	w0, w0, w3, lsl #16
   93004:	97ffff13 	bl	92c50 <put_utf>
   93008:	72001c00 	ands	w0, w0, #0xff
   9300c:	52800003 	mov	w3, #0x0                   	// #0
   93010:	54fff0e0 	b.eq	92e2c <get_fileinfo+0x15c>  // b.none
   93014:	39408f05 	ldrb	w5, [x24, #35]
   93018:	0b0002b5 	add	w21, w21, w0
   9301c:	6b05033f 	cmp	w25, w5
   93020:	54000182 	b.cs	93050 <get_fileinfo+0x380>  // b.hs, b.nlast
   93024:	71097e9f 	cmp	w20, #0x25f
   93028:	54fff028 	b.hi	92e2c <get_fileinfo+0x15c>  // b.pmore
   9302c:	11000a81 	add	w1, w20, #0x2
   93030:	f240129f 	tst	x20, #0x1f
   93034:	2a0103e0 	mov	w0, w1
   93038:	54fffc60 	b.eq	92fc4 <get_fileinfo+0x2f4>  // b.none
   9303c:	2a1403e1 	mov	w1, w20
   93040:	2a0003f4 	mov	w20, w0
   93044:	17ffffe1 	b	92fc8 <get_fileinfo+0x2f8>
   93048:	2a0003e3 	mov	w3, w0
   9304c:	17fffff4 	b	9301c <get_fileinfo+0x34c>
   93050:	35ffeee3 	cbnz	w3, 92e2c <get_fileinfo+0x15c>
   93054:	a9446bf9 	ldp	x25, x26, [sp, #64]
   93058:	35ffef35 	cbnz	w21, 92e3c <get_fileinfo+0x16c>
   9305c:	17ffff75 	b	92e30 <get_fileinfo+0x160>

0000000000093060 <xname_sum>:
   93060:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93064:	910003fd 	mov	x29, sp
   93068:	a90153f3 	stp	x19, x20, [sp, #16]
   9306c:	aa0003f4 	mov	x20, x0
   93070:	52800013 	mov	w19, #0x0                   	// #0
   93074:	78402680 	ldrh	w0, [x20], #2
   93078:	34000200 	cbz	w0, 930b8 <xname_sum+0x58>
   9307c:	d503201f 	nop
   93080:	9400246c 	bl	9c230 <ff_wtoupper>
   93084:	2a0003e2 	mov	w2, w0
   93088:	53110261 	ubfiz	w1, w19, #15, #1
   9308c:	78402680 	ldrh	w0, [x20], #2
   93090:	12001c43 	and	w3, w2, #0xff
   93094:	d3483c42 	ubfx	x2, x2, #8, #8
   93098:	0b530473 	add	w19, w3, w19, lsr #1
   9309c:	0b130021 	add	w1, w1, w19
   930a0:	53110273 	ubfiz	w19, w19, #15, #1
   930a4:	d3413c21 	ubfx	x1, x1, #1, #15
   930a8:	0b020021 	add	w1, w1, w2
   930ac:	0b010273 	add	w19, w19, w1
   930b0:	12003e73 	and	w19, w19, #0xffff
   930b4:	35fffe60 	cbnz	w0, 93080 <xname_sum+0x20>
   930b8:	2a1303e0 	mov	w0, w19
   930bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   930c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   930c4:	d65f03c0 	ret
   930c8:	d503201f 	nop
   930cc:	d503201f 	nop

00000000000930d0 <mem_cpy.part.0>:
   930d0:	2a0203e2 	mov	w2, w2
   930d4:	d2800003 	mov	x3, #0x0                   	// #0
   930d8:	38636824 	ldrb	w4, [x1, x3]
   930dc:	38236804 	strb	w4, [x0, x3]
   930e0:	91000463 	add	x3, x3, #0x1
   930e4:	eb02007f 	cmp	x3, x2
   930e8:	54ffff81 	b.ne	930d8 <mem_cpy.part.0+0x8>  // b.any
   930ec:	d65f03c0 	ret

00000000000930f0 <init_alloc_info.isra.0>:
   930f0:	aa0003e5 	mov	x5, x0
   930f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   930f8:	aa0103e6 	mov	x6, x1
   930fc:	910003fd 	mov	x29, sp
   93100:	9100e000 	add	x0, x0, #0x38
   93104:	785fe001 	ldurh	w1, [x0, #-2]
   93108:	3940d4a3 	ldrb	w3, [x5, #53]
   9310c:	3940d0a2 	ldrb	w2, [x5, #52]
   93110:	2a012061 	orr	w1, w3, w1, lsl #8
   93114:	2a012041 	orr	w1, w2, w1, lsl #8
   93118:	b9000cc1 	str	w1, [x6, #12]
   9311c:	97fffe09 	bl	92940 <ld_qword>
   93120:	f90008c0 	str	x0, [x6, #16]
   93124:	394084a0 	ldrb	w0, [x5, #33]
   93128:	b9001cdf 	str	wzr, [x6, #28]
   9312c:	121f0000 	and	w0, w0, #0x2
   93130:	39002cc0 	strb	w0, [x6, #11]
   93134:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93138:	d65f03c0 	ret
   9313c:	d503201f 	nop

0000000000093140 <sync_window.part.0>:
   93140:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93144:	910003fd 	mov	x29, sp
   93148:	52800023 	mov	w3, #0x1                   	// #1
   9314c:	f9403802 	ldr	x2, [x0, #112]
   93150:	f90013f5 	str	x21, [sp, #32]
   93154:	9101e015 	add	x21, x0, #0x78
   93158:	aa1503e1 	mov	x1, x21
   9315c:	a90153f3 	stp	x19, x20, [sp, #16]
   93160:	aa0003f3 	mov	x19, x0
   93164:	52800034 	mov	w20, #0x1                   	// #1
   93168:	39400400 	ldrb	w0, [x0, #1]
   9316c:	940022fd 	bl	9bd60 <disk_write>
   93170:	35000180 	cbnz	w0, 931a0 <sync_window.part.0+0x60>
   93174:	2a0003f4 	mov	w20, w0
   93178:	f9402a60 	ldr	x0, [x19, #80]
   9317c:	39000e7f 	strb	wzr, [x19, #3]
   93180:	f9403a62 	ldr	x2, [x19, #112]
   93184:	b9404661 	ldr	w1, [x19, #68]
   93188:	cb000040 	sub	x0, x2, x0
   9318c:	eb01001f 	cmp	x0, x1
   93190:	54000082 	b.cs	931a0 <sync_window.part.0+0x60>  // b.hs, b.nlast
   93194:	39400a60 	ldrb	w0, [x19, #2]
   93198:	7100081f 	cmp	w0, #0x2
   9319c:	540000c0 	b.eq	931b4 <sync_window.part.0+0x74>  // b.none
   931a0:	2a1403e0 	mov	w0, w20
   931a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   931a8:	f94013f5 	ldr	x21, [sp, #32]
   931ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   931b0:	d65f03c0 	ret
   931b4:	8b010042 	add	x2, x2, x1
   931b8:	39400660 	ldrb	w0, [x19, #1]
   931bc:	aa1503e1 	mov	x1, x21
   931c0:	52800023 	mov	w3, #0x1                   	// #1
   931c4:	940022e7 	bl	9bd60 <disk_write>
   931c8:	17fffff6 	b	931a0 <sync_window.part.0+0x60>
   931cc:	d503201f 	nop

00000000000931d0 <dir_clear>:
   931d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   931d4:	910003fd 	mov	x29, sp
   931d8:	a90153f3 	stp	x19, x20, [sp, #16]
   931dc:	2a0103f3 	mov	w19, w1
   931e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   931e4:	aa0003f6 	mov	x22, x0
   931e8:	39400c01 	ldrb	w1, [x0, #3]
   931ec:	35000a61 	cbnz	w1, 93338 <dir_clear+0x168>
   931f0:	b94042c1 	ldr	w1, [x22, #64]
   931f4:	51000a60 	sub	w0, w19, #0x2
   931f8:	a90363f7 	stp	x23, x24, [sp, #48]
   931fc:	d2800017 	mov	x23, #0x0                   	// #0
   93200:	51000821 	sub	w1, w1, #0x2
   93204:	6b01001f 	cmp	w0, w1
   93208:	54000082 	b.cs	93218 <dir_clear+0x48>  // b.hs, b.nlast
   9320c:	794016d7 	ldrh	w23, [x22, #10]
   93210:	f94032c1 	ldr	x1, [x22, #96]
   93214:	9bb70417 	umaddl	x23, w0, w23, x1
   93218:	9101e2d8 	add	x24, x22, #0x78
   9321c:	9109e2c1 	add	x1, x22, #0x278
   93220:	f9003ad7 	str	x23, [x22, #112]
   93224:	aa1803e0 	mov	x0, x24
   93228:	3800141f 	strb	wzr, [x0], #1
   9322c:	eb01001f 	cmp	x0, x1
   93230:	54ffffc1 	b.ne	93228 <dir_clear+0x58>  // b.any
   93234:	794016c1 	ldrh	w1, [x22, #10]
   93238:	52900013 	mov	w19, #0x8000                	// #32768
   9323c:	53175820 	lsl	w0, w1, #9
   93240:	7101003f 	cmp	w1, #0x40
   93244:	1a939013 	csel	w19, w0, w19, ls  // ls = plast
   93248:	7108001f 	cmp	w0, #0x200
   9324c:	2a0103e0 	mov	w0, w1
   93250:	540000a8 	b.hi	93264 <dir_clear+0x94>  // b.pmore
   93254:	14000029 	b	932f8 <dir_clear+0x128>
   93258:	53017e73 	lsr	w19, w19, #1
   9325c:	7108027f 	cmp	w19, #0x200
   93260:	54000489 	b.ls	932f0 <dir_clear+0x120>  // b.plast
   93264:	2a1303e0 	mov	w0, w19
   93268:	94002372 	bl	9c030 <ff_memalloc>
   9326c:	aa0003f4 	mov	x20, x0
   93270:	b4ffff40 	cbz	x0, 93258 <dir_clear+0x88>
   93274:	51000661 	sub	w1, w19, #0x1
   93278:	91000421 	add	x1, x1, #0x1
   9327c:	8b010001 	add	x1, x0, x1
   93280:	3800141f 	strb	wzr, [x0], #1
   93284:	eb00003f 	cmp	x1, x0
   93288:	54ffffc1 	b.ne	93280 <dir_clear+0xb0>  // b.any
   9328c:	794016c0 	ldrh	w0, [x22, #10]
   93290:	53097e73 	lsr	w19, w19, #9
   93294:	52800015 	mov	w21, #0x0                   	// #0
   93298:	350000c0 	cbnz	w0, 932b0 <dir_clear+0xe0>
   9329c:	1400000b 	b	932c8 <dir_clear+0xf8>
   932a0:	794016c0 	ldrh	w0, [x22, #10]
   932a4:	0b1302b5 	add	w21, w21, w19
   932a8:	6b15001f 	cmp	w0, w21
   932ac:	540000e9 	b.ls	932c8 <dir_clear+0xf8>  // b.plast
   932b0:	394006c0 	ldrb	w0, [x22, #1]
   932b4:	2a1303e3 	mov	w3, w19
   932b8:	aa1403e1 	mov	x1, x20
   932bc:	8b3542e2 	add	x2, x23, w21, uxtw
   932c0:	940022a8 	bl	9bd60 <disk_write>
   932c4:	34fffee0 	cbz	w0, 932a0 <dir_clear+0xd0>
   932c8:	aa1403e0 	mov	x0, x20
   932cc:	9400235d 	bl	9c040 <ff_memfree>
   932d0:	794016c0 	ldrh	w0, [x22, #10]
   932d4:	6b0002bf 	cmp	w21, w0
   932d8:	1a9f07e0 	cset	w0, ne  // ne = any
   932dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   932e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   932e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   932e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   932ec:	d65f03c0 	ret
   932f0:	794016c1 	ldrh	w1, [x22, #10]
   932f4:	2a0103e0 	mov	w0, w1
   932f8:	52800015 	mov	w21, #0x0                   	// #0
   932fc:	350000c1 	cbnz	w1, 93314 <dir_clear+0x144>
   93300:	17fffff5 	b	932d4 <dir_clear+0x104>
   93304:	794016c0 	ldrh	w0, [x22, #10]
   93308:	110006b5 	add	w21, w21, #0x1
   9330c:	6b15001f 	cmp	w0, w21
   93310:	54fffe29 	b.ls	932d4 <dir_clear+0x104>  // b.plast
   93314:	aa1703e2 	mov	x2, x23
   93318:	394006c0 	ldrb	w0, [x22, #1]
   9331c:	52800023 	mov	w3, #0x1                   	// #1
   93320:	aa1803e1 	mov	x1, x24
   93324:	910006f7 	add	x23, x23, #0x1
   93328:	9400228e 	bl	9bd60 <disk_write>
   9332c:	34fffec0 	cbz	w0, 93304 <dir_clear+0x134>
   93330:	794016c0 	ldrh	w0, [x22, #10]
   93334:	17ffffe8 	b	932d4 <dir_clear+0x104>
   93338:	97ffff82 	bl	93140 <sync_window.part.0>
   9333c:	2a0003e1 	mov	w1, w0
   93340:	52800020 	mov	w0, #0x1                   	// #1
   93344:	34fff561 	cbz	w1, 931f0 <dir_clear+0x20>
   93348:	a94153f3 	ldp	x19, x20, [sp, #16]
   9334c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93350:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93354:	d65f03c0 	ret
   93358:	d503201f 	nop
   9335c:	d503201f 	nop

0000000000093360 <sync_fs>:
   93360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93364:	910003fd 	mov	x29, sp
   93368:	f9000bf3 	str	x19, [sp, #16]
   9336c:	aa0003f3 	mov	x19, x0
   93370:	39400c01 	ldrb	w1, [x0, #3]
   93374:	35000201 	cbnz	w1, 933b4 <sync_fs+0x54>
   93378:	f9400260 	ldr	x0, [x19]
   9337c:	d2800061 	mov	x1, #0x3                   	// #3
   93380:	f2c00021 	movk	x1, #0x1, lsl #32
   93384:	92001c00 	and	x0, x0, #0xff000000ff
   93388:	eb01001f 	cmp	x0, x1
   9338c:	54000260 	b.eq	933d8 <sync_fs+0x78>  // b.none
   93390:	39400660 	ldrb	w0, [x19, #1]
   93394:	d2800002 	mov	x2, #0x0                   	// #0
   93398:	52800001 	mov	w1, #0x0                   	// #0
   9339c:	940022a9 	bl	9be40 <disk_ioctl>
   933a0:	7100001f 	cmp	w0, #0x0
   933a4:	1a9f07e0 	cset	w0, ne  // ne = any
   933a8:	f9400bf3 	ldr	x19, [sp, #16]
   933ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   933b0:	d65f03c0 	ret
   933b4:	97ffff63 	bl	93140 <sync_window.part.0>
   933b8:	35ffff80 	cbnz	w0, 933a8 <sync_fs+0x48>
   933bc:	f9400260 	ldr	x0, [x19]
   933c0:	d2800061 	mov	x1, #0x3                   	// #3
   933c4:	f2c00021 	movk	x1, #0x1, lsl #32
   933c8:	92001c00 	and	x0, x0, #0xff000000ff
   933cc:	eb01001f 	cmp	x0, x1
   933d0:	54fffe01 	b.ne	93390 <sync_fs+0x30>  // b.any
   933d4:	d503201f 	nop
   933d8:	9101e261 	add	x1, x19, #0x78
   933dc:	9109e262 	add	x2, x19, #0x278
   933e0:	aa0103e0 	mov	x0, x1
   933e4:	d503201f 	nop
   933e8:	3800141f 	strb	wzr, [x0], #1
   933ec:	eb02001f 	cmp	x0, x2
   933f0:	54ffffc1 	b.ne	933e8 <sync_fs+0x88>  // b.any
   933f4:	528a4a40 	mov	w0, #0x5252                	// #21074
   933f8:	72a82c20 	movk	w0, #0x4161, lsl #16
   933fc:	f9402662 	ldr	x2, [x19, #72]
   93400:	128ab545 	mov	w5, #0xffffaa55            	// #-21931
   93404:	528e4e46 	mov	w6, #0x7272                	// #29298
   93408:	72ac2826 	movk	w6, #0x6141, lsl #16
   9340c:	b9402a64 	ldr	w4, [x19, #40]
   93410:	52800023 	mov	w3, #0x1                   	// #1
   93414:	b9007a60 	str	w0, [x19, #120]
   93418:	b9402e60 	ldr	w0, [x19, #44]
   9341c:	91000442 	add	x2, x2, #0x1
   93420:	b9025e66 	str	w6, [x19, #604]
   93424:	7904ee65 	strh	w5, [x19, #630]
   93428:	f9003a62 	str	x2, [x19, #112]
   9342c:	b9026664 	str	w4, [x19, #612]
   93430:	b9026260 	str	w0, [x19, #608]
   93434:	39400660 	ldrb	w0, [x19, #1]
   93438:	9400224a 	bl	9bd60 <disk_write>
   9343c:	3900127f 	strb	wzr, [x19, #4]
   93440:	17ffffd4 	b	93390 <sync_fs+0x30>
   93444:	d503201f 	nop
   93448:	d503201f 	nop
   9344c:	d503201f 	nop

0000000000093450 <move_window.part.0>:
   93450:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93454:	910003fd 	mov	x29, sp
   93458:	a90153f3 	stp	x19, x20, [sp, #16]
   9345c:	aa0103f4 	mov	x20, x1
   93460:	aa0003f3 	mov	x19, x0
   93464:	39400c01 	ldrb	w1, [x0, #3]
   93468:	350001c1 	cbnz	w1, 934a0 <move_window.part.0+0x50>
   9346c:	39400660 	ldrb	w0, [x19, #1]
   93470:	52800023 	mov	w3, #0x1                   	// #1
   93474:	aa1403e2 	mov	x2, x20
   93478:	9101e261 	add	x1, x19, #0x78
   9347c:	940021f1 	bl	9bc40 <disk_read>
   93480:	350000a0 	cbnz	w0, 93494 <move_window.part.0+0x44>
   93484:	f9003a74 	str	x20, [x19, #112]
   93488:	a94153f3 	ldp	x19, x20, [sp, #16]
   9348c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93490:	d65f03c0 	ret
   93494:	52800020 	mov	w0, #0x1                   	// #1
   93498:	92800014 	mov	x20, #0xffffffffffffffff    	// #-1
   9349c:	17fffffa 	b	93484 <move_window.part.0+0x34>
   934a0:	97ffff28 	bl	93140 <sync_window.part.0>
   934a4:	34fffe40 	cbz	w0, 9346c <move_window.part.0+0x1c>
   934a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   934ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   934b0:	d65f03c0 	ret
   934b4:	d503201f 	nop
   934b8:	d503201f 	nop
   934bc:	d503201f 	nop

00000000000934c0 <check_fs>:
   934c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   934c4:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   934c8:	910003fd 	mov	x29, sp
   934cc:	eb02003f 	cmp	x1, x2
   934d0:	f9000bf3 	str	x19, [sp, #16]
   934d4:	aa0003f3 	mov	x19, x0
   934d8:	39000c1f 	strb	wzr, [x0, #3]
   934dc:	f9003802 	str	x2, [x0, #112]
   934e0:	540000a0 	b.eq	934f4 <check_fs+0x34>  // b.none
   934e4:	97ffffdb 	bl	93450 <move_window.part.0>
   934e8:	2a0003e1 	mov	w1, w0
   934ec:	52800080 	mov	w0, #0x4                   	// #4
   934f0:	35000221 	cbnz	w1, 93534 <check_fs+0x74>
   934f4:	3949de61 	ldrb	w1, [x19, #631]
   934f8:	52954aa0 	mov	w0, #0xaa55                	// #43605
   934fc:	3949da64 	ldrb	w4, [x19, #630]
   93500:	3941e263 	ldrb	w3, [x19, #120]
   93504:	33185c24 	bfi	w4, w1, #8, #24
   93508:	6b00009f 	cmp	w4, w0
   9350c:	54000260 	b.eq	93558 <check_fs+0x98>  // b.none
   93510:	7103ac7f 	cmp	w3, #0xeb
   93514:	54000161 	b.ne	93540 <check_fs+0x80>  // b.any
   93518:	39421261 	ldrb	w1, [x19, #132]
   9351c:	39420e60 	ldrb	w0, [x19, #131]
   93520:	33185c20 	bfi	w0, w1, #8, #24
   93524:	51000401 	sub	w1, w0, #0x1
   93528:	6a00003f 	tst	w1, w0
   9352c:	54000780 	b.eq	9361c <check_fs+0x15c>  // b.none
   93530:	52800060 	mov	w0, #0x3                   	// #3
   93534:	f9400bf3 	ldr	x19, [sp, #16]
   93538:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9353c:	d65f03c0 	ret
   93540:	11006063 	add	w3, w3, #0x18
   93544:	12001c63 	and	w3, w3, #0xff
   93548:	7100047f 	cmp	w3, #0x1
   9354c:	54fffe69 	b.ls	93518 <check_fs+0x58>  // b.plast
   93550:	52800060 	mov	w0, #0x3                   	// #3
   93554:	17fffff8 	b	93534 <check_fs+0x74>
   93558:	f00000e5 	adrp	x5, b2000 <vtable for CPartition>
   9355c:	910124a5 	add	x5, x5, #0x49
   93560:	5103ac62 	sub	w2, w3, #0xeb
   93564:	d2800001 	mov	x1, #0x0                   	// #0
   93568:	9101e666 	add	x6, x19, #0x79
   9356c:	d503201f 	nop
   93570:	35000122 	cbnz	w2, 93594 <check_fs+0xd4>
   93574:	386168c2 	ldrb	w2, [x6, x1]
   93578:	38656820 	ldrb	w0, [x1, x5]
   9357c:	91000421 	add	x1, x1, #0x1
   93580:	f100283f 	cmp	x1, #0xa
   93584:	4b000042 	sub	w2, w2, w0
   93588:	54ffff41 	b.ne	93570 <check_fs+0xb0>  // b.any
   9358c:	52800020 	mov	w0, #0x1                   	// #1
   93590:	34fffd22 	cbz	w2, 93534 <check_fs+0x74>
   93594:	7103ac7f 	cmp	w3, #0xeb
   93598:	540000a0 	b.eq	935ac <check_fs+0xec>  // b.none
   9359c:	11006063 	add	w3, w3, #0x18
   935a0:	12001c63 	and	w3, w3, #0xff
   935a4:	7100047f 	cmp	w3, #0x1
   935a8:	54000328 	b.hi	9360c <check_fs+0x14c>  // b.pmore
   935ac:	39432a61 	ldrb	w1, [x19, #202]
   935b0:	f00000e3 	adrp	x3, b2000 <vtable for CPartition>
   935b4:	91016463 	add	x3, x3, #0x59
   935b8:	d2800000 	mov	x0, #0x0                   	// #0
   935bc:	91032e65 	add	x5, x19, #0xcb
   935c0:	51011821 	sub	w1, w1, #0x46
   935c4:	d503201f 	nop
   935c8:	35000121 	cbnz	w1, 935ec <check_fs+0x12c>
   935cc:	386068a1 	ldrb	w1, [x5, x0]
   935d0:	38636802 	ldrb	w2, [x0, x3]
   935d4:	91000400 	add	x0, x0, #0x1
   935d8:	f1001c1f 	cmp	x0, #0x7
   935dc:	4b020021 	sub	w1, w1, w2
   935e0:	54ffff41 	b.ne	935c8 <check_fs+0x108>  // b.any
   935e4:	52800000 	mov	w0, #0x0                   	// #0
   935e8:	34fffa61 	cbz	w1, 93534 <check_fs+0x74>
   935ec:	39421261 	ldrb	w1, [x19, #132]
   935f0:	39420e60 	ldrb	w0, [x19, #131]
   935f4:	33185c20 	bfi	w0, w1, #8, #24
   935f8:	51000401 	sub	w1, w0, #0x1
   935fc:	6a00003f 	tst	w1, w0
   93600:	54000061 	b.ne	9360c <check_fs+0x14c>  // b.any
   93604:	7108001f 	cmp	w0, #0x200
   93608:	54000460 	b.eq	93694 <check_fs+0x1d4>  // b.none
   9360c:	52800040 	mov	w0, #0x2                   	// #2
   93610:	f9400bf3 	ldr	x19, [sp, #16]
   93614:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93618:	d65f03c0 	ret
   9361c:	7108001f 	cmp	w0, #0x200
   93620:	54fff881 	b.ne	93530 <check_fs+0x70>  // b.any
   93624:	39421660 	ldrb	w0, [x19, #133]
   93628:	34fff840 	cbz	w0, 93530 <check_fs+0x70>
   9362c:	51000401 	sub	w1, w0, #0x1
   93630:	6a00003f 	tst	w1, w0
   93634:	54000221 	b.ne	93678 <check_fs+0x1b8>  // b.any
   93638:	39422260 	ldrb	w0, [x19, #136]
   9363c:	51000400 	sub	w0, w0, #0x1
   93640:	12001c00 	and	w0, w0, #0xff
   93644:	7100041f 	cmp	w0, #0x1
   93648:	54000188 	b.hi	93678 <check_fs+0x1b8>  // b.pmore
   9364c:	39422a60 	ldrb	w0, [x19, #138]
   93650:	39422661 	ldrb	w1, [x19, #137]
   93654:	2a002020 	orr	w0, w1, w0, lsl #8
   93658:	72003c1f 	tst	w0, #0xffff
   9365c:	540000e0 	b.eq	93678 <check_fs+0x1b8>  // b.none
   93660:	39423e61 	ldrb	w1, [x19, #143]
   93664:	52800000 	mov	w0, #0x0                   	// #0
   93668:	39423a62 	ldrb	w2, [x19, #142]
   9366c:	2a012041 	orr	w1, w2, w1, lsl #8
   93670:	72003c3f 	tst	w1, #0xffff
   93674:	54fff601 	b.ne	93534 <check_fs+0x74>  // b.any
   93678:	52954aa0 	mov	w0, #0xaa55                	// #43605
   9367c:	f9400bf3 	ldr	x19, [sp, #16]
   93680:	6b00009f 	cmp	w4, w0
   93684:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93688:	1a9f07e0 	cset	w0, ne  // ne = any
   9368c:	11000800 	add	w0, w0, #0x2
   93690:	d65f03c0 	ret
   93694:	39421660 	ldrb	w0, [x19, #133]
   93698:	35fffca0 	cbnz	w0, 9362c <check_fs+0x16c>
   9369c:	52800040 	mov	w0, #0x2                   	// #2
   936a0:	17ffffdc 	b	93610 <check_fs+0x150>
   936a4:	d503201f 	nop
   936a8:	d503201f 	nop
   936ac:	d503201f 	nop

00000000000936b0 <find_bitmap>:
   936b0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   936b4:	910003fd 	mov	x29, sp
   936b8:	b9404006 	ldr	w6, [x0, #64]
   936bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   936c0:	51000836 	sub	w22, w1, #0x2
   936c4:	aa0003f5 	mov	x21, x0
   936c8:	a90153f3 	stp	x19, x20, [sp, #16]
   936cc:	52800014 	mov	w20, #0x0                   	// #0
   936d0:	510008c0 	sub	w0, w6, #0x2
   936d4:	6b16001f 	cmp	w0, w22
   936d8:	1a9f82d6 	csel	w22, w22, wzr, hi  // hi = pmore
   936dc:	2a1603f3 	mov	w19, w22
   936e0:	a90363f7 	stp	x23, x24, [sp, #48]
   936e4:	2a0203f8 	mov	w24, w2
   936e8:	2a1603f7 	mov	w23, w22
   936ec:	f90023f9 	str	x25, [sp, #64]
   936f0:	52800039 	mov	w25, #0x1                   	// #1
   936f4:	a94682a2 	ldp	x2, x0, [x21, #104]
   936f8:	530c7e61 	lsr	w1, w19, #12
   936fc:	8b020021 	add	x1, x1, x2
   93700:	eb00003f 	cmp	x1, x0
   93704:	540000a0 	b.eq	93718 <find_bitmap+0x68>  // b.none
   93708:	aa1503e0 	mov	x0, x21
   9370c:	97ffff51 	bl	93450 <move_window.part.0>
   93710:	350006e0 	cbnz	w0, 937ec <find_bitmap+0x13c>
   93714:	b94042a6 	ldr	w6, [x21, #64]
   93718:	12000a63 	and	w3, w19, #0x7
   9371c:	d3432e65 	ubfx	x5, x19, #3, #9
   93720:	1ac32323 	lsl	w3, w25, w3
   93724:	510008c0 	sub	w0, w6, #0x2
   93728:	12001c63 	and	w3, w3, #0xff
   9372c:	d503201f 	nop
   93730:	8b2542a4 	add	x4, x21, w5, uxtw
   93734:	3941e084 	ldrb	w4, [x4, #120]
   93738:	11000673 	add	w19, w19, #0x1
   9373c:	6b13001f 	cmp	w0, w19
   93740:	0a040064 	and	w4, w3, w4
   93744:	54000269 	b.ls	93790 <find_bitmap+0xe0>  // b.plast
   93748:	531f1863 	ubfiz	w3, w3, #1, #7
   9374c:	11000694 	add	w20, w20, #0x1
   93750:	350002a4 	cbnz	w4, 937a4 <find_bitmap+0xf4>
   93754:	6b18029f 	cmp	w20, w24
   93758:	540003c0 	b.eq	937d0 <find_bitmap+0x120>  // b.none
   9375c:	6b1302df 	cmp	w22, w19
   93760:	540002a0 	b.eq	937b4 <find_bitmap+0x104>  // b.none
   93764:	35fffe63 	cbnz	w3, 93730 <find_bitmap+0x80>
   93768:	110004a5 	add	w5, w5, #0x1
   9376c:	52800023 	mov	w3, #0x1                   	// #1
   93770:	7107fcbf 	cmp	w5, #0x1ff
   93774:	54fffc08 	b.hi	936f4 <find_bitmap+0x44>  // b.pmore
   93778:	8b2542a4 	add	x4, x21, w5, uxtw
   9377c:	3941e084 	ldrb	w4, [x4, #120]
   93780:	11000673 	add	w19, w19, #0x1
   93784:	6b13001f 	cmp	w0, w19
   93788:	0a040064 	and	w4, w3, w4
   9378c:	54fffde8 	b.hi	93748 <find_bitmap+0x98>  // b.pmore
   93790:	52800013 	mov	w19, #0x0                   	// #0
   93794:	52804005 	mov	w5, #0x200                 	// #512
   93798:	52800003 	mov	w3, #0x0                   	// #0
   9379c:	11000694 	add	w20, w20, #0x1
   937a0:	34fffda4 	cbz	w4, 93754 <find_bitmap+0xa4>
   937a4:	6b1302df 	cmp	w22, w19
   937a8:	2a1303f7 	mov	w23, w19
   937ac:	52800014 	mov	w20, #0x0                   	// #0
   937b0:	54fffda1 	b.ne	93764 <find_bitmap+0xb4>  // b.any
   937b4:	52800000 	mov	w0, #0x0                   	// #0
   937b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   937bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   937c0:	a94363f7 	ldp	x23, x24, [sp, #48]
   937c4:	f94023f9 	ldr	x25, [sp, #64]
   937c8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   937cc:	d65f03c0 	ret
   937d0:	11000ae0 	add	w0, w23, #0x2
   937d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   937d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   937dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   937e0:	f94023f9 	ldr	x25, [sp, #64]
   937e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   937e8:	d65f03c0 	ret
   937ec:	12800000 	mov	w0, #0xffffffff            	// #-1
   937f0:	17fffff2 	b	937b8 <find_bitmap+0x108>
   937f4:	d503201f 	nop
   937f8:	d503201f 	nop
   937fc:	d503201f 	nop

0000000000093800 <change_bitmap>:
   93800:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   93804:	910003fd 	mov	x29, sp
   93808:	a9025bf5 	stp	x21, x22, [sp, #32]
   9380c:	51000835 	sub	w21, w1, #0x2
   93810:	aa0003f6 	mov	x22, x0
   93814:	f9403401 	ldr	x1, [x0, #104]
   93818:	a90153f3 	stp	x19, x20, [sp, #16]
   9381c:	12000ab3 	and	w19, w21, #0x7
   93820:	2a0203f4 	mov	w20, w2
   93824:	a90363f7 	stp	x23, x24, [sp, #48]
   93828:	52800037 	mov	w23, #0x1                   	// #1
   9382c:	2a0303f8 	mov	w24, w3
   93830:	1ad322f3 	lsl	w19, w23, w19
   93834:	12001e73 	and	w19, w19, #0xff
   93838:	f90023f9 	str	x25, [sp, #64]
   9383c:	530c7eb9 	lsr	w25, w21, #12
   93840:	d3432eb5 	ubfx	x21, x21, #3, #9
   93844:	8b010339 	add	x25, x25, x1
   93848:	f9403ac0 	ldr	x0, [x22, #112]
   9384c:	eb19001f 	cmp	x0, x25
   93850:	540000a0 	b.eq	93864 <change_bitmap+0x64>  // b.none
   93854:	aa1903e1 	mov	x1, x25
   93858:	aa1603e0 	mov	x0, x22
   9385c:	97fffefd 	bl	93450 <move_window.part.0>
   93860:	35000620 	cbnz	w0, 93924 <change_bitmap+0x124>
   93864:	2a1503e6 	mov	w6, w21
   93868:	8b0602c1 	add	x1, x22, x6
   9386c:	3941e020 	ldrb	w0, [x1, #120]
   93870:	6a00027f 	tst	w19, w0
   93874:	1a9f07e2 	cset	w2, ne  // ne = any
   93878:	6b02031f 	cmp	w24, w2
   9387c:	54000320 	b.eq	938e0 <change_bitmap+0xe0>  // b.none
   93880:	4a000260 	eor	w0, w19, w0
   93884:	71000694 	subs	w20, w20, #0x1
   93888:	3901e020 	strb	w0, [x1, #120]
   9388c:	39000ed7 	strb	w23, [x22, #3]
   93890:	540000c1 	b.ne	938a8 <change_bitmap+0xa8>  // b.any
   93894:	1400001a 	b	938fc <change_bitmap+0xfc>
   93898:	3901e085 	strb	w5, [x4, #120]
   9389c:	71000694 	subs	w20, w20, #0x1
   938a0:	39000ed7 	strb	w23, [x22, #3]
   938a4:	540002c0 	b.eq	938fc <change_bitmap+0xfc>  // b.none
   938a8:	531f1a73 	ubfiz	w19, w19, #1, #7
   938ac:	350000d3 	cbnz	w19, 938c4 <change_bitmap+0xc4>
   938b0:	110006a6 	add	w6, w21, #0x1
   938b4:	52800033 	mov	w19, #0x1                   	// #1
   938b8:	710800df 	cmp	w6, #0x200
   938bc:	aa0603f5 	mov	x21, x6
   938c0:	540002c0 	b.eq	93918 <change_bitmap+0x118>  // b.none
   938c4:	8b0602c4 	add	x4, x22, x6
   938c8:	3941e082 	ldrb	w2, [x4, #120]
   938cc:	6a13005f 	tst	w2, w19
   938d0:	1a9f07e0 	cset	w0, ne  // ne = any
   938d4:	4a130045 	eor	w5, w2, w19
   938d8:	6b18001f 	cmp	w0, w24
   938dc:	54fffde1 	b.ne	93898 <change_bitmap+0x98>  // b.any
   938e0:	52800040 	mov	w0, #0x2                   	// #2
   938e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   938e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   938ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   938f0:	f94023f9 	ldr	x25, [sp, #64]
   938f4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   938f8:	d65f03c0 	ret
   938fc:	52800000 	mov	w0, #0x0                   	// #0
   93900:	a94153f3 	ldp	x19, x20, [sp, #16]
   93904:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93908:	a94363f7 	ldp	x23, x24, [sp, #48]
   9390c:	f94023f9 	ldr	x25, [sp, #64]
   93910:	a8c57bfd 	ldp	x29, x30, [sp], #80
   93914:	d65f03c0 	ret
   93918:	91000739 	add	x25, x25, #0x1
   9391c:	52800015 	mov	w21, #0x0                   	// #0
   93920:	17ffffca 	b	93848 <change_bitmap+0x48>
   93924:	52800020 	mov	w0, #0x1                   	// #1
   93928:	17ffffef 	b	938e4 <change_bitmap+0xe4>
   9392c:	d503201f 	nop

0000000000093930 <get_fat>:
   93930:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93934:	910003fd 	mov	x29, sp
   93938:	7100043f 	cmp	w1, #0x1
   9393c:	a90153f3 	stp	x19, x20, [sp, #16]
   93940:	2a0103f3 	mov	w19, w1
   93944:	540007c9 	b.ls	93a3c <get_fat+0x10c>  // b.plast
   93948:	aa0003e1 	mov	x1, x0
   9394c:	52800020 	mov	w0, #0x1                   	// #1
   93950:	f9400034 	ldr	x20, [x1]
   93954:	b9404282 	ldr	w2, [x20, #64]
   93958:	6b13005f 	cmp	w2, w19
   9395c:	54000309 	b.ls	939bc <get_fat+0x8c>  // b.plast
   93960:	39400282 	ldrb	w2, [x20]
   93964:	71000c5f 	cmp	w2, #0x3
   93968:	54000b60 	b.eq	93ad4 <get_fat+0x1a4>  // b.none
   9396c:	540002e8 	b.hi	939c8 <get_fat+0x98>  // b.pmore
   93970:	6b00005f 	cmp	w2, w0
   93974:	540006c0 	b.eq	93a4c <get_fat+0x11c>  // b.none
   93978:	7100085f 	cmp	w2, #0x2
   9397c:	54000201 	b.ne	939bc <get_fat+0x8c>  // b.any
   93980:	f9402a82 	ldr	x2, [x20, #80]
   93984:	53087e61 	lsr	w1, w19, #8
   93988:	f9403a80 	ldr	x0, [x20, #112]
   9398c:	8b020021 	add	x1, x1, x2
   93990:	eb00003f 	cmp	x1, x0
   93994:	54000080 	b.eq	939a4 <get_fat+0x74>  // b.none
   93998:	aa1403e0 	mov	x0, x20
   9399c:	97fffead 	bl	93450 <move_window.part.0>
   939a0:	35000dc0 	cbnz	w0, 93b58 <get_fat+0x228>
   939a4:	9101e294 	add	x20, x20, #0x78
   939a8:	531f1e60 	ubfiz	w0, w19, #1, #8
   939ac:	8b330693 	add	x19, x20, w19, uxtb #1
   939b0:	38604a80 	ldrb	w0, [x20, w0, uxtw]
   939b4:	39400661 	ldrb	w1, [x19, #1]
   939b8:	33185c20 	bfi	w0, w1, #8, #24
   939bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   939c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   939c4:	d65f03c0 	ret
   939c8:	7100105f 	cmp	w2, #0x4
   939cc:	54ffff81 	b.ne	939bc <get_fat+0x8c>  // b.any
   939d0:	f9400822 	ldr	x2, [x1, #16]
   939d4:	39402c23 	ldrb	w3, [x1, #11]
   939d8:	b5000a62 	cbnz	x2, 93b24 <get_fat+0x1f4>
   939dc:	35000303 	cbnz	w3, 93a3c <get_fat+0x10c>
   939e0:	b9401c21 	ldr	w1, [x1, #28]
   939e4:	12b00000 	mov	w0, #0x7fffffff            	// #2147483647
   939e8:	35fffea1 	cbnz	w1, 939bc <get_fat+0x8c>
   939ec:	f9402a82 	ldr	x2, [x20, #80]
   939f0:	53077e61 	lsr	w1, w19, #7
   939f4:	f9403a80 	ldr	x0, [x20, #112]
   939f8:	8b020021 	add	x1, x1, x2
   939fc:	eb00003f 	cmp	x1, x0
   93a00:	54000080 	b.eq	93a10 <get_fat+0xe0>  // b.none
   93a04:	aa1403e0 	mov	x0, x20
   93a08:	97fffe92 	bl	93450 <move_window.part.0>
   93a0c:	35000a60 	cbnz	w0, 93b58 <get_fat+0x228>
   93a10:	9101e294 	add	x20, x20, #0x78
   93a14:	d37e1a61 	ubfiz	x1, x19, #2, #7
   93a18:	8b010281 	add	x1, x20, x1
   93a1c:	531e1a73 	ubfiz	w19, w19, #2, #7
   93a20:	79400420 	ldrh	w0, [x1, #2]
   93a24:	39400422 	ldrb	w2, [x1, #1]
   93a28:	38734a81 	ldrb	w1, [x20, w19, uxtw]
   93a2c:	2a002040 	orr	w0, w2, w0, lsl #8
   93a30:	2a002020 	orr	w0, w1, w0, lsl #8
   93a34:	12007800 	and	w0, w0, #0x7fffffff
   93a38:	17ffffe1 	b	939bc <get_fat+0x8c>
   93a3c:	52800020 	mov	w0, #0x1                   	// #1
   93a40:	a94153f3 	ldp	x19, x20, [sp, #16]
   93a44:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93a48:	d65f03c0 	ret
   93a4c:	f9402a82 	ldr	x2, [x20, #80]
   93a50:	a9025bf5 	stp	x21, x22, [sp, #32]
   93a54:	0b530675 	add	w21, w19, w19, lsr #1
   93a58:	53097ea1 	lsr	w1, w21, #9
   93a5c:	f9403a80 	ldr	x0, [x20, #112]
   93a60:	8b020021 	add	x1, x1, x2
   93a64:	eb00003f 	cmp	x1, x0
   93a68:	540000c0 	b.eq	93a80 <get_fat+0x150>  // b.none
   93a6c:	aa1403e0 	mov	x0, x20
   93a70:	97fffe78 	bl	93450 <move_window.part.0>
   93a74:	35000700 	cbnz	w0, 93b54 <get_fat+0x224>
   93a78:	f9402a82 	ldr	x2, [x20, #80]
   93a7c:	f9403a80 	ldr	x0, [x20, #112]
   93a80:	110006b6 	add	w22, w21, #0x1
   93a84:	924022b5 	and	x21, x21, #0x1ff
   93a88:	53097ec1 	lsr	w1, w22, #9
   93a8c:	8b150295 	add	x21, x20, x21
   93a90:	8b020021 	add	x1, x1, x2
   93a94:	3941e2b5 	ldrb	w21, [x21, #120]
   93a98:	eb00003f 	cmp	x1, x0
   93a9c:	54000080 	b.eq	93aac <get_fat+0x17c>  // b.none
   93aa0:	aa1403e0 	mov	x0, x20
   93aa4:	97fffe6b 	bl	93450 <move_window.part.0>
   93aa8:	35000560 	cbnz	w0, 93b54 <get_fat+0x224>
   93aac:	924022d6 	and	x22, x22, #0x1ff
   93ab0:	f240027f 	tst	x19, #0x1
   93ab4:	8b160294 	add	x20, x20, x22
   93ab8:	3941e280 	ldrb	w0, [x20, #120]
   93abc:	2a0022a0 	orr	w0, w21, w0, lsl #8
   93ac0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93ac4:	12002c01 	and	w1, w0, #0xfff
   93ac8:	53047c00 	lsr	w0, w0, #4
   93acc:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   93ad0:	17ffffbb 	b	939bc <get_fat+0x8c>
   93ad4:	f9402a82 	ldr	x2, [x20, #80]
   93ad8:	53077e61 	lsr	w1, w19, #7
   93adc:	f9403a80 	ldr	x0, [x20, #112]
   93ae0:	8b020021 	add	x1, x1, x2
   93ae4:	eb00003f 	cmp	x1, x0
   93ae8:	54000080 	b.eq	93af8 <get_fat+0x1c8>  // b.none
   93aec:	aa1403e0 	mov	x0, x20
   93af0:	97fffe58 	bl	93450 <move_window.part.0>
   93af4:	35000320 	cbnz	w0, 93b58 <get_fat+0x228>
   93af8:	9101e294 	add	x20, x20, #0x78
   93afc:	d37e1a62 	ubfiz	x2, x19, #2, #7
   93b00:	8b020282 	add	x2, x20, x2
   93b04:	531e1a73 	ubfiz	w19, w19, #2, #7
   93b08:	79400440 	ldrh	w0, [x2, #2]
   93b0c:	39400442 	ldrb	w2, [x2, #1]
   93b10:	38734a81 	ldrb	w1, [x20, w19, uxtw]
   93b14:	2a002040 	orr	w0, w2, w0, lsl #8
   93b18:	2a002020 	orr	w0, w1, w0, lsl #8
   93b1c:	12006c00 	and	w0, w0, #0xfffffff
   93b20:	17ffffa7 	b	939bc <get_fat+0x8c>
   93b24:	b9400c24 	ldr	w4, [x1, #12]
   93b28:	34fff5a4 	cbz	w4, 939dc <get_fat+0xac>
   93b2c:	7100087f 	cmp	w3, #0x2
   93b30:	4b040264 	sub	w4, w19, w4
   93b34:	54000160 	b.eq	93b60 <get_fat+0x230>  // b.none
   93b38:	71000c7f 	cmp	w3, #0x3
   93b3c:	54fff521 	b.ne	939e0 <get_fat+0xb0>  // b.any
   93b40:	b9401820 	ldr	w0, [x1, #24]
   93b44:	6b04001f 	cmp	w0, w4
   93b48:	54fff4c9 	b.ls	939e0 <get_fat+0xb0>  // b.plast
   93b4c:	11000660 	add	w0, w19, #0x1
   93b50:	17ffff9b 	b	939bc <get_fat+0x8c>
   93b54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93b58:	12800000 	mov	w0, #0xffffffff            	// #-1
   93b5c:	17ffff98 	b	939bc <get_fat+0x8c>
   93b60:	79401683 	ldrh	w3, [x20, #10]
   93b64:	d1000441 	sub	x1, x2, #0x1
   93b68:	d349fc21 	lsr	x1, x1, #9
   93b6c:	9ac30821 	udiv	x1, x1, x3
   93b70:	6b01009f 	cmp	w4, w1
   93b74:	54fff248 	b.hi	939bc <get_fat+0x8c>  // b.pmore
   93b78:	12b00000 	mov	w0, #0x7fffffff            	// #2147483647
   93b7c:	54fff200 	b.eq	939bc <get_fat+0x8c>  // b.none
   93b80:	11000660 	add	w0, w19, #0x1
   93b84:	17ffff8e 	b	939bc <get_fat+0x8c>
   93b88:	d503201f 	nop
   93b8c:	d503201f 	nop

0000000000093b90 <dir_sdi>:
   93b90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   93b94:	910003fd 	mov	x29, sp
   93b98:	a9025bf5 	stp	x21, x22, [sp, #32]
   93b9c:	f9400015 	ldr	x21, [x0]
   93ba0:	a90153f3 	stp	x19, x20, [sp, #16]
   93ba4:	2a0103f3 	mov	w19, w1
   93ba8:	aa0003f4 	mov	x20, x0
   93bac:	52a00401 	mov	w1, #0x200000              	// #2097152
   93bb0:	52a20000 	mov	w0, #0x10000000            	// #268435456
   93bb4:	394002a2 	ldrb	w2, [x21]
   93bb8:	7100105f 	cmp	w2, #0x4
   93bbc:	1a810000 	csel	w0, w0, w1, eq  // eq = none
   93bc0:	6b13001f 	cmp	w0, w19
   93bc4:	540003e9 	b.ls	93c40 <dir_sdi+0xb0>  // b.plast
   93bc8:	72001276 	ands	w22, w19, #0x1f
   93bcc:	540003a1 	b.ne	93c40 <dir_sdi+0xb0>  // b.any
   93bd0:	b9400e81 	ldr	w1, [x20, #12]
   93bd4:	b9003293 	str	w19, [x20, #48]
   93bd8:	34000401 	cbz	w1, 93c58 <dir_sdi+0xc8>
   93bdc:	f9001bf7 	str	x23, [sp, #48]
   93be0:	794016b7 	ldrh	w23, [x21, #10]
   93be4:	6b17267f 	cmp	w19, w23, lsl #9
   93be8:	53175af7 	lsl	w23, w23, #9
   93bec:	54000122 	b.cs	93c10 <dir_sdi+0x80>  // b.hs, b.nlast
   93bf0:	14000036 	b	93cc8 <dir_sdi+0x138>
   93bf4:	7100041f 	cmp	w0, #0x1
   93bf8:	54000649 	b.ls	93cc0 <dir_sdi+0x130>  // b.plast
   93bfc:	b94042a0 	ldr	w0, [x21, #64]
   93c00:	6b01001f 	cmp	w0, w1
   93c04:	540005e9 	b.ls	93cc0 <dir_sdi+0x130>  // b.plast
   93c08:	6b1302ff 	cmp	w23, w19
   93c0c:	54000628 	b.hi	93cd0 <dir_sdi+0x140>  // b.pmore
   93c10:	aa1403e0 	mov	x0, x20
   93c14:	4b170273 	sub	w19, w19, w23
   93c18:	97ffff46 	bl	93930 <get_fat>
   93c1c:	3100041f 	cmn	w0, #0x1
   93c20:	2a0003e1 	mov	w1, w0
   93c24:	54fffe81 	b.ne	93bf4 <dir_sdi+0x64>  // b.any
   93c28:	52800036 	mov	w22, #0x1                   	// #1
   93c2c:	f9401bf7 	ldr	x23, [sp, #48]
   93c30:	14000005 	b	93c44 <dir_sdi+0xb4>
   93c34:	f9401bf7 	ldr	x23, [sp, #48]
   93c38:	b9003681 	str	w1, [x20, #52]
   93c3c:	f9001e9f 	str	xzr, [x20, #56]
   93c40:	52800056 	mov	w22, #0x2                   	// #2
   93c44:	2a1603e0 	mov	w0, w22
   93c48:	a94153f3 	ldp	x19, x20, [sp, #16]
   93c4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93c50:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93c54:	d65f03c0 	ret
   93c58:	7100085f 	cmp	w2, #0x2
   93c5c:	54000268 	b.hi	93ca8 <dir_sdi+0x118>  // b.pmore
   93c60:	794012a0 	ldrh	w0, [x21, #8]
   93c64:	6b53141f 	cmp	w0, w19, lsr #5
   93c68:	54fffec9 	b.ls	93c40 <dir_sdi+0xb0>  // b.plast
   93c6c:	f9402ea0 	ldr	x0, [x21, #88]
   93c70:	f9001e80 	str	x0, [x20, #56]
   93c74:	b9003681 	str	w1, [x20, #52]
   93c78:	b4fffe40 	cbz	x0, 93c40 <dir_sdi+0xb0>
   93c7c:	92402261 	and	x1, x19, #0x1ff
   93c80:	9101e2b5 	add	x21, x21, #0x78
   93c84:	53097e73 	lsr	w19, w19, #9
   93c88:	8b0102b5 	add	x21, x21, x1
   93c8c:	8b000273 	add	x19, x19, x0
   93c90:	2a1603e0 	mov	w0, w22
   93c94:	a903d693 	stp	x19, x21, [x20, #56]
   93c98:	a94153f3 	ldp	x19, x20, [sp, #16]
   93c9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93ca0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93ca4:	d65f03c0 	ret
   93ca8:	f9402ea0 	ldr	x0, [x21, #88]
   93cac:	39002e9f 	strb	wzr, [x20, #11]
   93cb0:	34fffd80 	cbz	w0, 93c60 <dir_sdi+0xd0>
   93cb4:	2a0003e1 	mov	w1, w0
   93cb8:	f9001bf7 	str	x23, [sp, #48]
   93cbc:	17ffffc9 	b	93be0 <dir_sdi+0x50>
   93cc0:	f9401bf7 	ldr	x23, [sp, #48]
   93cc4:	17ffffdf 	b	93c40 <dir_sdi+0xb0>
   93cc8:	b94042a0 	ldr	w0, [x21, #64]
   93ccc:	d503201f 	nop
   93cd0:	51000800 	sub	w0, w0, #0x2
   93cd4:	51000822 	sub	w2, w1, #0x2
   93cd8:	6b00005f 	cmp	w2, w0
   93cdc:	54fffac2 	b.cs	93c34 <dir_sdi+0xa4>  // b.hs, b.nlast
   93ce0:	794016a3 	ldrh	w3, [x21, #10]
   93ce4:	f94032a0 	ldr	x0, [x21, #96]
   93ce8:	f9401bf7 	ldr	x23, [sp, #48]
   93cec:	9ba30040 	umaddl	x0, w2, w3, x0
   93cf0:	f9001e80 	str	x0, [x20, #56]
   93cf4:	17ffffe0 	b	93c74 <dir_sdi+0xe4>
   93cf8:	d503201f 	nop
   93cfc:	d503201f 	nop

0000000000093d00 <put_fat.part.0>:
   93d00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   93d04:	910003fd 	mov	x29, sp
   93d08:	a90153f3 	stp	x19, x20, [sp, #16]
   93d0c:	aa0003f3 	mov	x19, x0
   93d10:	2a0103f4 	mov	w20, w1
   93d14:	a9025bf5 	stp	x21, x22, [sp, #32]
   93d18:	2a0203f5 	mov	w21, w2
   93d1c:	39400004 	ldrb	w4, [x0]
   93d20:	7100089f 	cmp	w4, #0x2
   93d24:	54000aa0 	b.eq	93e78 <put_fat.part.0+0x178>  // b.none
   93d28:	54000628 	b.hi	93dec <put_fat.part.0+0xec>  // b.pmore
   93d2c:	7100049f 	cmp	w4, #0x1
   93d30:	52800041 	mov	w1, #0x2                   	// #2
   93d34:	54000521 	b.ne	93dd8 <put_fat.part.0+0xd8>  // b.any
   93d38:	f9402803 	ldr	x3, [x0, #80]
   93d3c:	0b540696 	add	w22, w20, w20, lsr #1
   93d40:	f9403802 	ldr	x2, [x0, #112]
   93d44:	53097ec1 	lsr	w1, w22, #9
   93d48:	8b030021 	add	x1, x1, x3
   93d4c:	eb02003f 	cmp	x1, x2
   93d50:	54000080 	b.eq	93d60 <put_fat.part.0+0x60>  // b.none
   93d54:	97fffdbf 	bl	93450 <move_window.part.0>
   93d58:	2a0003e1 	mov	w1, w0
   93d5c:	350003e0 	cbnz	w0, 93dd8 <put_fat.part.0+0xd8>
   93d60:	a90363f7 	stp	x23, x24, [sp, #48]
   93d64:	110006d7 	add	w23, w22, #0x1
   93d68:	9101e278 	add	x24, x19, #0x78
   93d6c:	120022d6 	and	w22, w22, #0x1ff
   93d70:	53097ee1 	lsr	w1, w23, #9
   93d74:	36000a94 	tbz	w20, #0, 93ec4 <put_fat.part.0+0x1c4>
   93d78:	531c1ea0 	ubfiz	w0, w21, #4, #8
   93d7c:	52800023 	mov	w3, #0x1                   	// #1
   93d80:	38764b02 	ldrb	w2, [x24, w22, uxtw]
   93d84:	12000c42 	and	w2, w2, #0xf
   93d88:	2a000040 	orr	w0, w2, w0
   93d8c:	38364b00 	strb	w0, [x24, w22, uxtw]
   93d90:	f9402a62 	ldr	x2, [x19, #80]
   93d94:	39000e63 	strb	w3, [x19, #3]
   93d98:	f9403a60 	ldr	x0, [x19, #112]
   93d9c:	8b020021 	add	x1, x1, x2
   93da0:	eb00003f 	cmp	x1, x0
   93da4:	540000a0 	b.eq	93db8 <put_fat.part.0+0xb8>  // b.none
   93da8:	aa1303e0 	mov	x0, x19
   93dac:	97fffda9 	bl	93450 <move_window.part.0>
   93db0:	2a0003e1 	mov	w1, w0
   93db4:	35000a00 	cbnz	w0, 93ef4 <put_fat.part.0+0x1f4>
   93db8:	924022e0 	and	x0, x23, #0x1ff
   93dbc:	d3442ea2 	ubfx	x2, x21, #4, #8
   93dc0:	8b000300 	add	x0, x24, x0
   93dc4:	52800023 	mov	w3, #0x1                   	// #1
   93dc8:	39000002 	strb	w2, [x0]
   93dcc:	52800001 	mov	w1, #0x0                   	// #0
   93dd0:	39000e63 	strb	w3, [x19, #3]
   93dd4:	a94363f7 	ldp	x23, x24, [sp, #48]
   93dd8:	2a0103e0 	mov	w0, w1
   93ddc:	a94153f3 	ldp	x19, x20, [sp, #16]
   93de0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93de4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93de8:	d65f03c0 	ret
   93dec:	51000c83 	sub	w3, w4, #0x3
   93df0:	52800041 	mov	w1, #0x2                   	// #2
   93df4:	12001c63 	and	w3, w3, #0xff
   93df8:	7100047f 	cmp	w3, #0x1
   93dfc:	54fffee8 	b.hi	93dd8 <put_fat.part.0+0xd8>  // b.pmore
   93e00:	f9402803 	ldr	x3, [x0, #80]
   93e04:	53077e81 	lsr	w1, w20, #7
   93e08:	f9403802 	ldr	x2, [x0, #112]
   93e0c:	8b030021 	add	x1, x1, x3
   93e10:	eb02003f 	cmp	x1, x2
   93e14:	540000a0 	b.eq	93e28 <put_fat.part.0+0x128>  // b.none
   93e18:	97fffd8e 	bl	93450 <move_window.part.0>
   93e1c:	2a0003e1 	mov	w1, w0
   93e20:	35fffdc0 	cbnz	w0, 93dd8 <put_fat.part.0+0xd8>
   93e24:	39400264 	ldrb	w4, [x19]
   93e28:	d37e1a80 	ubfiz	x0, x20, #2, #7
   93e2c:	9101e261 	add	x1, x19, #0x78
   93e30:	7100109f 	cmp	w4, #0x4
   93e34:	531e1a94 	ubfiz	w20, w20, #2, #7
   93e38:	8b000020 	add	x0, x1, x0
   93e3c:	540000c0 	b.eq	93e54 <put_fat.part.0+0x154>  // b.none
   93e40:	79400400 	ldrh	w0, [x0, #2]
   93e44:	12006ea2 	and	w2, w21, #0xfffffff
   93e48:	53103c00 	lsl	w0, w0, #16
   93e4c:	12040c00 	and	w0, w0, #0xf0000000
   93e50:	2a020015 	orr	w21, w0, w2
   93e54:	52800020 	mov	w0, #0x1                   	// #1
   93e58:	b8344835 	str	w21, [x1, w20, uxtw]
   93e5c:	52800001 	mov	w1, #0x0                   	// #0
   93e60:	39000e60 	strb	w0, [x19, #3]
   93e64:	2a0103e0 	mov	w0, w1
   93e68:	a94153f3 	ldp	x19, x20, [sp, #16]
   93e6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93e70:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93e74:	d65f03c0 	ret
   93e78:	f9402803 	ldr	x3, [x0, #80]
   93e7c:	53087c21 	lsr	w1, w1, #8
   93e80:	f9403802 	ldr	x2, [x0, #112]
   93e84:	8b030021 	add	x1, x1, x3
   93e88:	eb02003f 	cmp	x1, x2
   93e8c:	54000080 	b.eq	93e9c <put_fat.part.0+0x19c>  // b.none
   93e90:	97fffd70 	bl	93450 <move_window.part.0>
   93e94:	2a0003e1 	mov	w1, w0
   93e98:	35fffa00 	cbnz	w0, 93dd8 <put_fat.part.0+0xd8>
   93e9c:	52800020 	mov	w0, #0x1                   	// #1
   93ea0:	52800001 	mov	w1, #0x0                   	// #0
   93ea4:	8b340674 	add	x20, x19, w20, uxtb #1
   93ea8:	7900f295 	strh	w21, [x20, #120]
   93eac:	39000e60 	strb	w0, [x19, #3]
   93eb0:	2a0103e0 	mov	w0, w1
   93eb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   93eb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93ebc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93ec0:	d65f03c0 	ret
   93ec4:	52800020 	mov	w0, #0x1                   	// #1
   93ec8:	38364b15 	strb	w21, [x24, w22, uxtw]
   93ecc:	f9402a62 	ldr	x2, [x19, #80]
   93ed0:	39000e60 	strb	w0, [x19, #3]
   93ed4:	f9403a60 	ldr	x0, [x19, #112]
   93ed8:	8b020021 	add	x1, x1, x2
   93edc:	eb00003f 	cmp	x1, x0
   93ee0:	540000e0 	b.eq	93efc <put_fat.part.0+0x1fc>  // b.none
   93ee4:	aa1303e0 	mov	x0, x19
   93ee8:	97fffd5a 	bl	93450 <move_window.part.0>
   93eec:	2a0003e1 	mov	w1, w0
   93ef0:	34000060 	cbz	w0, 93efc <put_fat.part.0+0x1fc>
   93ef4:	a94363f7 	ldp	x23, x24, [sp, #48]
   93ef8:	17ffffb8 	b	93dd8 <put_fat.part.0+0xd8>
   93efc:	924022e0 	and	x0, x23, #0x1ff
   93f00:	d3482ea2 	ubfx	x2, x21, #8, #4
   93f04:	8b000300 	add	x0, x24, x0
   93f08:	39400001 	ldrb	w1, [x0]
   93f0c:	121c0c35 	and	w21, w1, #0xf0
   93f10:	2a0202a2 	orr	w2, w21, w2
   93f14:	17ffffac 	b	93dc4 <put_fat.part.0+0xc4>
   93f18:	d503201f 	nop
   93f1c:	d503201f 	nop

0000000000093f20 <remove_chain>:
   93f20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   93f24:	910003fd 	mov	x29, sp
   93f28:	7100043f 	cmp	w1, #0x1
   93f2c:	a90153f3 	stp	x19, x20, [sp, #16]
   93f30:	f9400014 	ldr	x20, [x0]
   93f34:	540007a9 	b.ls	94028 <remove_chain+0x108>  // b.plast
   93f38:	a9025bf5 	stp	x21, x22, [sp, #32]
   93f3c:	aa0003f5 	mov	x21, x0
   93f40:	2a0103f3 	mov	w19, w1
   93f44:	b9404280 	ldr	w0, [x20, #64]
   93f48:	6b01001f 	cmp	w0, w1
   93f4c:	540006c9 	b.ls	94024 <remove_chain+0x104>  // b.plast
   93f50:	a90363f7 	stp	x23, x24, [sp, #48]
   93f54:	2a0203f7 	mov	w23, w2
   93f58:	35000702 	cbnz	w2, 94038 <remove_chain+0x118>
   93f5c:	2a1303f8 	mov	w24, w19
   93f60:	2a1303e1 	mov	w1, w19
   93f64:	aa1503e0 	mov	x0, x21
   93f68:	97fffe72 	bl	93930 <get_fat>
   93f6c:	2a1303f6 	mov	w22, w19
   93f70:	2a0003f3 	mov	w19, w0
   93f74:	340004a0 	cbz	w0, 94008 <remove_chain+0xe8>
   93f78:	7100041f 	cmp	w0, #0x1
   93f7c:	540006a0 	b.eq	94050 <remove_chain+0x130>  // b.none
   93f80:	3100041f 	cmn	w0, #0x1
   93f84:	54000960 	b.eq	940b0 <remove_chain+0x190>  // b.none
   93f88:	39400280 	ldrb	w0, [x20]
   93f8c:	7100101f 	cmp	w0, #0x4
   93f90:	54000160 	b.eq	93fbc <remove_chain+0x9c>  // b.none
   93f94:	710006df 	cmp	w22, #0x1
   93f98:	540005c9 	b.ls	94050 <remove_chain+0x130>  // b.plast
   93f9c:	b9404280 	ldr	w0, [x20, #64]
   93fa0:	6b0002df 	cmp	w22, w0
   93fa4:	54000562 	b.cs	94050 <remove_chain+0x130>  // b.hs, b.nlast
   93fa8:	52800002 	mov	w2, #0x0                   	// #0
   93fac:	2a1603e1 	mov	w1, w22
   93fb0:	aa1403e0 	mov	x0, x20
   93fb4:	97ffff53 	bl	93d00 <put_fat.part.0>
   93fb8:	350005c0 	cbnz	w0, 94070 <remove_chain+0x150>
   93fbc:	b9404281 	ldr	w1, [x20, #64]
   93fc0:	b9402e80 	ldr	w0, [x20, #44]
   93fc4:	51000822 	sub	w2, w1, #0x2
   93fc8:	6b02001f 	cmp	w0, w2
   93fcc:	540000c2 	b.cs	93fe4 <remove_chain+0xc4>  // b.hs, b.nlast
   93fd0:	39401282 	ldrb	w2, [x20, #4]
   93fd4:	11000400 	add	w0, w0, #0x1
   93fd8:	b9002e80 	str	w0, [x20, #44]
   93fdc:	32000040 	orr	w0, w2, #0x1
   93fe0:	39001280 	strb	w0, [x20, #4]
   93fe4:	110006d6 	add	w22, w22, #0x1
   93fe8:	6b1302df 	cmp	w22, w19
   93fec:	540000a0 	b.eq	94000 <remove_chain+0xe0>  // b.none
   93ff0:	39400280 	ldrb	w0, [x20]
   93ff4:	7100101f 	cmp	w0, #0x4
   93ff8:	540004a0 	b.eq	9408c <remove_chain+0x16c>  // b.none
   93ffc:	2a1303f8 	mov	w24, w19
   94000:	6b01027f 	cmp	w19, w1
   94004:	54fffae3 	b.cc	93f60 <remove_chain+0x40>  // b.lo, b.ul, b.last
   94008:	39400280 	ldrb	w0, [x20]
   9400c:	7100101f 	cmp	w0, #0x4
   94010:	54000580 	b.eq	940c0 <remove_chain+0x1a0>  // b.none
   94014:	52800000 	mov	w0, #0x0                   	// #0
   94018:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9401c:	a94363f7 	ldp	x23, x24, [sp, #48]
   94020:	14000003 	b	9402c <remove_chain+0x10c>
   94024:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94028:	52800040 	mov	w0, #0x2                   	// #2
   9402c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94030:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94034:	d65f03c0 	ret
   94038:	39400281 	ldrb	w1, [x20]
   9403c:	7100103f 	cmp	w1, #0x4
   94040:	540001e0 	b.eq	9407c <remove_chain+0x15c>  // b.none
   94044:	6b17001f 	cmp	w0, w23
   94048:	7a418ae0 	ccmp	w23, #0x1, #0x0, hi  // hi = pmore
   9404c:	54000088 	b.hi	9405c <remove_chain+0x13c>  // b.pmore
   94050:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94054:	a94363f7 	ldp	x23, x24, [sp, #48]
   94058:	17fffff4 	b	94028 <remove_chain+0x108>
   9405c:	12800002 	mov	w2, #0xffffffff            	// #-1
   94060:	2a1703e1 	mov	w1, w23
   94064:	aa1403e0 	mov	x0, x20
   94068:	97ffff26 	bl	93d00 <put_fat.part.0>
   9406c:	34fff780 	cbz	w0, 93f5c <remove_chain+0x3c>
   94070:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94074:	a94363f7 	ldp	x23, x24, [sp, #48]
   94078:	17ffffed 	b	9402c <remove_chain+0x10c>
   9407c:	39402ea1 	ldrb	w1, [x21, #11]
   94080:	7100083f 	cmp	w1, #0x2
   94084:	54fffe01 	b.ne	94044 <remove_chain+0x124>  // b.any
   94088:	17ffffb5 	b	93f5c <remove_chain+0x3c>
   9408c:	4b1802c2 	sub	w2, w22, w24
   94090:	2a1803e1 	mov	w1, w24
   94094:	52800003 	mov	w3, #0x0                   	// #0
   94098:	aa1403e0 	mov	x0, x20
   9409c:	97fffdd9 	bl	93800 <change_bitmap>
   940a0:	35fffe80 	cbnz	w0, 94070 <remove_chain+0x150>
   940a4:	b9404281 	ldr	w1, [x20, #64]
   940a8:	2a1303f8 	mov	w24, w19
   940ac:	17ffffd5 	b	94000 <remove_chain+0xe0>
   940b0:	52800020 	mov	w0, #0x1                   	// #1
   940b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   940b8:	a94363f7 	ldp	x23, x24, [sp, #48]
   940bc:	17ffffdc 	b	9402c <remove_chain+0x10c>
   940c0:	350000d7 	cbnz	w23, 940d8 <remove_chain+0x1b8>
   940c4:	52800000 	mov	w0, #0x0                   	// #0
   940c8:	39002ebf 	strb	wzr, [x21, #11]
   940cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   940d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   940d4:	17ffffd6 	b	9402c <remove_chain+0x10c>
   940d8:	39402ea0 	ldrb	w0, [x21, #11]
   940dc:	350002c0 	cbnz	w0, 94134 <remove_chain+0x214>
   940e0:	b9400eb3 	ldr	w19, [x21, #12]
   940e4:	1400000a 	b	9410c <remove_chain+0x1ec>
   940e8:	97fffe12 	bl	93930 <get_fat>
   940ec:	11000661 	add	w1, w19, #0x1
   940f0:	7100041f 	cmp	w0, #0x1
   940f4:	2a0103f3 	mov	w19, w1
   940f8:	54fffac9 	b.ls	94050 <remove_chain+0x130>  // b.plast
   940fc:	3100041f 	cmn	w0, #0x1
   94100:	54fffd80 	b.eq	940b0 <remove_chain+0x190>  // b.none
   94104:	6b00003f 	cmp	w1, w0
   94108:	54fff861 	b.ne	94014 <remove_chain+0xf4>  // b.any
   9410c:	6b17027f 	cmp	w19, w23
   94110:	2a1303e1 	mov	w1, w19
   94114:	aa1503e0 	mov	x0, x21
   94118:	54fffe81 	b.ne	940e8 <remove_chain+0x1c8>  // b.any
   9411c:	52800041 	mov	w1, #0x2                   	// #2
   94120:	52800000 	mov	w0, #0x0                   	// #0
   94124:	39002ea1 	strb	w1, [x21, #11]
   94128:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9412c:	a94363f7 	ldp	x23, x24, [sp, #48]
   94130:	17ffffbf 	b	9402c <remove_chain+0x10c>
   94134:	71000c1f 	cmp	w0, #0x3
   94138:	54fff6e1 	b.ne	94014 <remove_chain+0xf4>  // b.any
   9413c:	b9400ea0 	ldr	w0, [x21, #12]
   94140:	6b17001f 	cmp	w0, w23
   94144:	54fff688 	b.hi	94014 <remove_chain+0xf4>  // b.pmore
   94148:	b9401aa1 	ldr	w1, [x21, #24]
   9414c:	0b010000 	add	w0, w0, w1
   94150:	6b17001f 	cmp	w0, w23
   94154:	54fff603 	b.cc	94014 <remove_chain+0xf4>  // b.lo, b.ul, b.last
   94158:	17fffff1 	b	9411c <remove_chain+0x1fc>
   9415c:	d503201f 	nop

0000000000094160 <fill_last_frag.isra.0>:
   94160:	b9400025 	ldr	w5, [x1]
   94164:	340004a5 	cbz	w5, 941f8 <fill_last_frag.isra.0+0x98>
   94168:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9416c:	910003fd 	mov	x29, sp
   94170:	a90153f3 	stp	x19, x20, [sp, #16]
   94174:	aa0103f3 	mov	x19, x1
   94178:	2a0303f4 	mov	w20, w3
   9417c:	a9025bf5 	stp	x21, x22, [sp, #32]
   94180:	aa0003f6 	mov	x22, x0
   94184:	2a0203f5 	mov	w21, w2
   94188:	4b0502a4 	sub	w4, w21, w5
   9418c:	710004bf 	cmp	w5, #0x1
   94190:	11000485 	add	w5, w4, #0x1
   94194:	11000884 	add	w4, w4, #0x2
   94198:	1a948082 	csel	w2, w4, w20, hi  // hi = pmore
   9419c:	710004bf 	cmp	w5, #0x1
   941a0:	2a0503e1 	mov	w1, w5
   941a4:	54000209 	b.ls	941e4 <fill_last_frag.isra.0+0x84>  // b.plast
   941a8:	f94002c0 	ldr	x0, [x22]
   941ac:	b9404003 	ldr	w3, [x0, #64]
   941b0:	6b0300bf 	cmp	w5, w3
   941b4:	54000182 	b.cs	941e4 <fill_last_frag.isra.0+0x84>  // b.hs, b.nlast
   941b8:	97fffed2 	bl	93d00 <put_fat.part.0>
   941bc:	350000c0 	cbnz	w0, 941d4 <fill_last_frag.isra.0+0x74>
   941c0:	b9400265 	ldr	w5, [x19]
   941c4:	510004a5 	sub	w5, w5, #0x1
   941c8:	b9000265 	str	w5, [x19]
   941cc:	35fffde5 	cbnz	w5, 94188 <fill_last_frag.isra.0+0x28>
   941d0:	52800000 	mov	w0, #0x0                   	// #0
   941d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   941d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   941dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   941e0:	d65f03c0 	ret
   941e4:	52800040 	mov	w0, #0x2                   	// #2
   941e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   941ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   941f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   941f4:	d65f03c0 	ret
   941f8:	52800000 	mov	w0, #0x0                   	// #0
   941fc:	d65f03c0 	ret

0000000000094200 <create_chain>:
   94200:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94204:	910003fd 	mov	x29, sp
   94208:	a90153f3 	stp	x19, x20, [sp, #16]
   9420c:	a9025bf5 	stp	x21, x22, [sp, #32]
   94210:	2a0103f6 	mov	w22, w1
   94214:	a90363f7 	stp	x23, x24, [sp, #48]
   94218:	aa0003f8 	mov	x24, x0
   9421c:	f9400017 	ldr	x23, [x0]
   94220:	35000a61 	cbnz	w1, 9436c <create_chain+0x16c>
   94224:	b9402af5 	ldr	w21, [x23, #40]
   94228:	340008f5 	cbz	w21, 94344 <create_chain+0x144>
   9422c:	b94042e0 	ldr	w0, [x23, #64]
   94230:	6b15001f 	cmp	w0, w21
   94234:	1a9f86b5 	csinc	w21, w21, wzr, hi  // hi = pmore
   94238:	b9402ee0 	ldr	w0, [x23, #44]
   9423c:	340008a0 	cbz	w0, 94350 <create_chain+0x150>
   94240:	394002e0 	ldrb	w0, [x23]
   94244:	7100101f 	cmp	w0, #0x4
   94248:	54000e00 	b.eq	94408 <create_chain+0x208>  // b.none
   9424c:	6b1602bf 	cmp	w21, w22
   94250:	b94042e2 	ldr	w2, [x23, #64]
   94254:	54000b40 	b.eq	943bc <create_chain+0x1bc>  // b.none
   94258:	2a1503f4 	mov	w20, w21
   9425c:	14000006 	b	94274 <create_chain+0x74>
   94260:	3a411804 	ccmn	w0, #0x1, #0x4, ne  // ne = any
   94264:	54000640 	b.eq	9432c <create_chain+0x12c>  // b.none
   94268:	6b15029f 	cmp	w20, w21
   9426c:	54000720 	b.eq	94350 <create_chain+0x150>  // b.none
   94270:	b94042e2 	ldr	w2, [x23, #64]
   94274:	11000694 	add	w20, w20, #0x1
   94278:	aa1803e0 	mov	x0, x24
   9427c:	6b02029f 	cmp	w20, w2
   94280:	54000083 	b.cc	94290 <create_chain+0x90>  // b.lo, b.ul, b.last
   94284:	710006bf 	cmp	w21, #0x1
   94288:	52800054 	mov	w20, #0x2                   	// #2
   9428c:	54000629 	b.ls	94350 <create_chain+0x150>  // b.plast
   94290:	2a1403e1 	mov	w1, w20
   94294:	97fffda7 	bl	93930 <get_fat>
   94298:	2a0003f3 	mov	w19, w0
   9429c:	7100041f 	cmp	w0, #0x1
   942a0:	35fffe00 	cbnz	w0, 94260 <create_chain+0x60>
   942a4:	7100069f 	cmp	w20, #0x1
   942a8:	540007c9 	b.ls	943a0 <create_chain+0x1a0>  // b.plast
   942ac:	b94042e0 	ldr	w0, [x23, #64]
   942b0:	6b00029f 	cmp	w20, w0
   942b4:	54000762 	b.cs	943a0 <create_chain+0x1a0>  // b.hs, b.nlast
   942b8:	12800002 	mov	w2, #0xffffffff            	// #-1
   942bc:	2a1403e1 	mov	w1, w20
   942c0:	aa1703e0 	mov	x0, x23
   942c4:	97fffe8f 	bl	93d00 <put_fat.part.0>
   942c8:	7100001f 	cmp	w0, #0x0
   942cc:	7a400ac4 	ccmp	w22, #0x0, #0x4, eq  // eq = none
   942d0:	54000140 	b.eq	942f8 <create_chain+0xf8>  // b.none
   942d4:	710006df 	cmp	w22, #0x1
   942d8:	54000649 	b.ls	943a0 <create_chain+0x1a0>  // b.plast
   942dc:	b94042e0 	ldr	w0, [x23, #64]
   942e0:	6b0002df 	cmp	w22, w0
   942e4:	540005e2 	b.cs	943a0 <create_chain+0x1a0>  // b.hs, b.nlast
   942e8:	2a1603e1 	mov	w1, w22
   942ec:	2a1403e2 	mov	w2, w20
   942f0:	aa1703e0 	mov	x0, x23
   942f4:	97fffe83 	bl	93d00 <put_fat.part.0>
   942f8:	35000500 	cbnz	w0, 94398 <create_chain+0x198>
   942fc:	b94042e0 	ldr	w0, [x23, #64]
   94300:	b9002af4 	str	w20, [x23, #40]
   94304:	b9402ee1 	ldr	w1, [x23, #44]
   94308:	51000800 	sub	w0, w0, #0x2
   9430c:	6b00003f 	cmp	w1, w0
   94310:	54000068 	b.hi	9431c <create_chain+0x11c>  // b.pmore
   94314:	51000421 	sub	w1, w1, #0x1
   94318:	b9002ee1 	str	w1, [x23, #44]
   9431c:	394012e0 	ldrb	w0, [x23, #4]
   94320:	2a1403f3 	mov	w19, w20
   94324:	32000000 	orr	w0, w0, #0x1
   94328:	390012e0 	strb	w0, [x23, #4]
   9432c:	2a1303e0 	mov	w0, w19
   94330:	a94153f3 	ldp	x19, x20, [sp, #16]
   94334:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94338:	a94363f7 	ldp	x23, x24, [sp, #48]
   9433c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94340:	d65f03c0 	ret
   94344:	b9402ee0 	ldr	w0, [x23, #44]
   94348:	52800035 	mov	w21, #0x1                   	// #1
   9434c:	35fff7a0 	cbnz	w0, 94240 <create_chain+0x40>
   94350:	52800013 	mov	w19, #0x0                   	// #0
   94354:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94358:	2a1303e0 	mov	w0, w19
   9435c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94360:	a94363f7 	ldp	x23, x24, [sp, #48]
   94364:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94368:	d65f03c0 	ret
   9436c:	97fffd71 	bl	93930 <get_fat>
   94370:	7100041f 	cmp	w0, #0x1
   94374:	2a0003f3 	mov	w19, w0
   94378:	54000149 	b.ls	943a0 <create_chain+0x1a0>  // b.plast
   9437c:	3100041f 	cmn	w0, #0x1
   94380:	54000720 	b.eq	94464 <create_chain+0x264>  // b.none
   94384:	b94042e0 	ldr	w0, [x23, #64]
   94388:	2a1603f5 	mov	w21, w22
   9438c:	6b13001f 	cmp	w0, w19
   94390:	54fff549 	b.ls	94238 <create_chain+0x38>  // b.plast
   94394:	17ffffe6 	b	9432c <create_chain+0x12c>
   94398:	7100041f 	cmp	w0, #0x1
   9439c:	54000640 	b.eq	94464 <create_chain+0x264>  // b.none
   943a0:	52800033 	mov	w19, #0x1                   	// #1
   943a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   943a8:	2a1303e0 	mov	w0, w19
   943ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   943b0:	a94363f7 	ldp	x23, x24, [sp, #48]
   943b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   943b8:	d65f03c0 	ret
   943bc:	110006b4 	add	w20, w21, #0x1
   943c0:	52800041 	mov	w1, #0x2                   	// #2
   943c4:	6b02029f 	cmp	w20, w2
   943c8:	aa1803e0 	mov	x0, x24
   943cc:	1a813294 	csel	w20, w20, w1, cc  // cc = lo, ul, last
   943d0:	2a1403e1 	mov	w1, w20
   943d4:	97fffd57 	bl	93930 <get_fat>
   943d8:	7100041f 	cmp	w0, #0x1
   943dc:	2a0003f3 	mov	w19, w0
   943e0:	3a411804 	ccmn	w0, #0x1, #0x4, ne  // ne = any
   943e4:	54fffa40 	b.eq	9432c <create_chain+0x12c>  // b.none
   943e8:	34000420 	cbz	w0, 9446c <create_chain+0x26c>
   943ec:	b9402ae0 	ldr	w0, [x23, #40]
   943f0:	b94042e2 	ldr	w2, [x23, #64]
   943f4:	7100041f 	cmp	w0, #0x1
   943f8:	54fff309 	b.ls	94258 <create_chain+0x58>  // b.plast
   943fc:	6b02001f 	cmp	w0, w2
   94400:	1a8022b5 	csel	w21, w21, w0, cs  // cs = hs, nlast
   94404:	17ffff95 	b	94258 <create_chain+0x58>
   94408:	52800022 	mov	w2, #0x1                   	// #1
   9440c:	2a1503e1 	mov	w1, w21
   94410:	aa1703e0 	mov	x0, x23
   94414:	97fffca7 	bl	936b0 <find_bitmap>
   94418:	2a0003f3 	mov	w19, w0
   9441c:	51000400 	sub	w0, w0, #0x1
   94420:	31000c1f 	cmn	w0, #0x3
   94424:	54fff848 	b.hi	9432c <create_chain+0x12c>  // b.pmore
   94428:	52800023 	mov	w3, #0x1                   	// #1
   9442c:	2a1303e1 	mov	w1, w19
   94430:	2a0303e2 	mov	w2, w3
   94434:	aa1703e0 	mov	x0, x23
   94438:	97fffcf2 	bl	93800 <change_bitmap>
   9443c:	7100081f 	cmp	w0, #0x2
   94440:	54fffb00 	b.eq	943a0 <create_chain+0x1a0>  // b.none
   94444:	7100041f 	cmp	w0, #0x1
   94448:	540000e0 	b.eq	94464 <create_chain+0x264>  // b.none
   9444c:	35000176 	cbnz	w22, 94478 <create_chain+0x278>
   94450:	52800041 	mov	w1, #0x2                   	// #2
   94454:	39002f01 	strb	w1, [x24, #11]
   94458:	2a1303f4 	mov	w20, w19
   9445c:	34fff500 	cbz	w0, 942fc <create_chain+0xfc>
   94460:	17ffffd0 	b	943a0 <create_chain+0x1a0>
   94464:	12800013 	mov	w19, #0xffffffff            	// #-1
   94468:	17ffffb1 	b	9432c <create_chain+0x12c>
   9446c:	35fff1d4 	cbnz	w20, 942a4 <create_chain+0xa4>
   94470:	b94042e2 	ldr	w2, [x23, #64]
   94474:	17ffff79 	b	94258 <create_chain+0x58>
   94478:	39402f01 	ldrb	w1, [x24, #11]
   9447c:	7100083f 	cmp	w1, #0x2
   94480:	540002e0 	b.eq	944dc <create_chain+0x2dc>  // b.none
   94484:	110006c1 	add	w1, w22, #0x1
   94488:	b9401f02 	ldr	w2, [x24, #28]
   9448c:	6b13003f 	cmp	w1, w19
   94490:	540001c0 	b.eq	944c8 <create_chain+0x2c8>  // b.none
   94494:	35000062 	cbnz	w2, 944a0 <create_chain+0x2a0>
   94498:	52800020 	mov	w0, #0x1                   	// #1
   9449c:	b9001f00 	str	w0, [x24, #28]
   944a0:	2a1603e2 	mov	w2, w22
   944a4:	2a1303e3 	mov	w3, w19
   944a8:	91007301 	add	x1, x24, #0x1c
   944ac:	aa1803e0 	mov	x0, x24
   944b0:	97ffff2c 	bl	94160 <fill_last_frag.isra.0>
   944b4:	35fff720 	cbnz	w0, 94398 <create_chain+0x198>
   944b8:	52800020 	mov	w0, #0x1                   	// #1
   944bc:	2a1303f4 	mov	w20, w19
   944c0:	b9001f00 	str	w0, [x24, #28]
   944c4:	17ffff8e 	b	942fc <create_chain+0xfc>
   944c8:	7100005f 	cmp	w2, #0x0
   944cc:	52800041 	mov	w1, #0x2                   	// #2
   944d0:	1a820422 	csinc	w2, w1, w2, eq  // eq = none
   944d4:	b9001f02 	str	w2, [x24, #28]
   944d8:	17ffffe0 	b	94458 <create_chain+0x258>
   944dc:	110006a1 	add	w1, w21, #0x1
   944e0:	6b13003f 	cmp	w1, w19
   944e4:	54fffba0 	b.eq	94458 <create_chain+0x258>  // b.none
   944e8:	b9400f01 	ldr	w1, [x24, #12]
   944ec:	52800062 	mov	w2, #0x3                   	// #3
   944f0:	39002f02 	strb	w2, [x24, #11]
   944f4:	4b0102b5 	sub	w21, w21, w1
   944f8:	b9001b15 	str	w21, [x24, #24]
   944fc:	17ffffe2 	b	94484 <create_chain+0x284>

0000000000094500 <dir_next>:
   94500:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94504:	910003fd 	mov	x29, sp
   94508:	52a20002 	mov	w2, #0x10000000            	// #268435456
   9450c:	52a00403 	mov	w3, #0x200000              	// #2097152
   94510:	a90363f7 	stp	x23, x24, [sp, #48]
   94514:	f9400017 	ldr	x23, [x0]
   94518:	a90153f3 	stp	x19, x20, [sp, #16]
   9451c:	aa0003f3 	mov	x19, x0
   94520:	b9403014 	ldr	w20, [x0, #48]
   94524:	a9025bf5 	stp	x21, x22, [sp, #32]
   94528:	2a0103f5 	mov	w21, w1
   9452c:	394002e1 	ldrb	w1, [x23]
   94530:	11008294 	add	w20, w20, #0x20
   94534:	7100103f 	cmp	w1, #0x4
   94538:	1a830042 	csel	w2, w2, w3, eq  // eq = none
   9453c:	6b14005f 	cmp	w2, w20
   94540:	54000108 	b.hi	94560 <dir_next+0x60>  // b.pmore
   94544:	52800080 	mov	w0, #0x4                   	// #4
   94548:	f9001e7f 	str	xzr, [x19, #56]
   9454c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94550:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94554:	a94363f7 	ldp	x23, x24, [sp, #48]
   94558:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9455c:	d65f03c0 	ret
   94560:	f9401c01 	ldr	x1, [x0, #56]
   94564:	b4000941 	cbz	x1, 9468c <dir_next+0x18c>
   94568:	72002296 	ands	w22, w20, #0x1ff
   9456c:	540005e1 	b.ne	94628 <dir_next+0x128>  // b.any
   94570:	91000422 	add	x2, x1, #0x1
   94574:	b9403401 	ldr	w1, [x0, #52]
   94578:	f9001c02 	str	x2, [x0, #56]
   9457c:	340006c1 	cbz	w1, 94654 <dir_next+0x154>
   94580:	794016e2 	ldrh	w2, [x23, #10]
   94584:	51000442 	sub	w2, w2, #0x1
   94588:	6a54245f 	tst	w2, w20, lsr #9
   9458c:	540004e1 	b.ne	94628 <dir_next+0x128>  // b.any
   94590:	97fffce8 	bl	93930 <get_fat>
   94594:	7100041f 	cmp	w0, #0x1
   94598:	2a0003f8 	mov	w24, w0
   9459c:	54000749 	b.ls	94684 <dir_next+0x184>  // b.plast
   945a0:	3100041f 	cmn	w0, #0x1
   945a4:	540006c0 	b.eq	9467c <dir_next+0x17c>  // b.none
   945a8:	b94042e0 	ldr	w0, [x23, #64]
   945ac:	6b18001f 	cmp	w0, w24
   945b0:	54000288 	b.hi	94600 <dir_next+0x100>  // b.pmore
   945b4:	34fffc95 	cbz	w21, 94544 <dir_next+0x44>
   945b8:	b9403661 	ldr	w1, [x19, #52]
   945bc:	aa1303e0 	mov	x0, x19
   945c0:	97ffff10 	bl	94200 <create_chain>
   945c4:	2a0003f8 	mov	w24, w0
   945c8:	528000e0 	mov	w0, #0x7                   	// #7
   945cc:	34fffc18 	cbz	w24, 9454c <dir_next+0x4c>
   945d0:	7100071f 	cmp	w24, #0x1
   945d4:	54000580 	b.eq	94684 <dir_next+0x184>  // b.none
   945d8:	3100071f 	cmn	w24, #0x1
   945dc:	54000500 	b.eq	9467c <dir_next+0x17c>  // b.none
   945e0:	2a1803e1 	mov	w1, w24
   945e4:	aa1703e0 	mov	x0, x23
   945e8:	97fffafa 	bl	931d0 <dir_clear>
   945ec:	35000480 	cbnz	w0, 9467c <dir_next+0x17c>
   945f0:	39402e60 	ldrb	w0, [x19, #11]
   945f4:	321e0000 	orr	w0, w0, #0x4
   945f8:	39002e60 	strb	w0, [x19, #11]
   945fc:	b94042e0 	ldr	w0, [x23, #64]
   94600:	51000800 	sub	w0, w0, #0x2
   94604:	51000b01 	sub	w1, w24, #0x2
   94608:	b9003678 	str	w24, [x19, #52]
   9460c:	6b00003f 	cmp	w1, w0
   94610:	d2800000 	mov	x0, #0x0                   	// #0
   94614:	54000082 	b.cs	94624 <dir_next+0x124>  // b.hs, b.nlast
   94618:	794016e0 	ldrh	w0, [x23, #10]
   9461c:	f94032e2 	ldr	x2, [x23, #96]
   94620:	9ba00820 	umaddl	x0, w1, w0, x2
   94624:	f9001e60 	str	x0, [x19, #56]
   94628:	9101e2e1 	add	x1, x23, #0x78
   9462c:	2a1603f6 	mov	w22, w22
   94630:	b9003274 	str	w20, [x19, #48]
   94634:	8b160021 	add	x1, x1, x22
   94638:	52800000 	mov	w0, #0x0                   	// #0
   9463c:	f9002261 	str	x1, [x19, #64]
   94640:	a94153f3 	ldp	x19, x20, [sp, #16]
   94644:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94648:	a94363f7 	ldp	x23, x24, [sp, #48]
   9464c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94650:	d65f03c0 	ret
   94654:	794012e0 	ldrh	w0, [x23, #8]
   94658:	6b54141f 	cmp	w0, w20, lsr #5
   9465c:	54fff749 	b.ls	94544 <dir_next+0x44>  // b.plast
   94660:	9101e2e1 	add	x1, x23, #0x78
   94664:	2a1603f6 	mov	w22, w22
   94668:	b9003274 	str	w20, [x19, #48]
   9466c:	8b160021 	add	x1, x1, x22
   94670:	52800000 	mov	w0, #0x0                   	// #0
   94674:	f9002261 	str	x1, [x19, #64]
   94678:	17fffff2 	b	94640 <dir_next+0x140>
   9467c:	52800020 	mov	w0, #0x1                   	// #1
   94680:	17ffffb3 	b	9454c <dir_next+0x4c>
   94684:	52800040 	mov	w0, #0x2                   	// #2
   94688:	17ffffb1 	b	9454c <dir_next+0x4c>
   9468c:	52800080 	mov	w0, #0x4                   	// #4
   94690:	17ffffaf 	b	9454c <dir_next+0x4c>
   94694:	d503201f 	nop
   94698:	d503201f 	nop
   9469c:	d503201f 	nop

00000000000946a0 <load_xdir>:
   946a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   946a4:	910003fd 	mov	x29, sp
   946a8:	a90153f3 	stp	x19, x20, [sp, #16]
   946ac:	aa0003f3 	mov	x19, x0
   946b0:	f9400000 	ldr	x0, [x0]
   946b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   946b8:	f9401e61 	ldr	x1, [x19, #56]
   946bc:	f9403802 	ldr	x2, [x0, #112]
   946c0:	f9400c16 	ldr	x22, [x0, #24]
   946c4:	eb02003f 	cmp	x1, x2
   946c8:	54000080 	b.eq	946d8 <load_xdir+0x38>  // b.none
   946cc:	97fffb61 	bl	93450 <move_window.part.0>
   946d0:	2a0003f4 	mov	w20, w0
   946d4:	350000c0 	cbnz	w0, 946ec <load_xdir+0x4c>
   946d8:	f9402261 	ldr	x1, [x19, #64]
   946dc:	39400020 	ldrb	w0, [x1]
   946e0:	7102141f 	cmp	w0, #0x85
   946e4:	540000e0 	b.eq	94700 <load_xdir+0x60>  // b.none
   946e8:	52800054 	mov	w20, #0x2                   	// #2
   946ec:	2a1403e0 	mov	w0, w20
   946f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   946f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   946f8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   946fc:	d65f03c0 	ret
   94700:	aa1603e0 	mov	x0, x22
   94704:	52800402 	mov	w2, #0x20                  	// #32
   94708:	f9001bf7 	str	x23, [sp, #48]
   9470c:	97fffa71 	bl	930d0 <mem_cpy.part.0>
   94710:	394006c0 	ldrb	w0, [x22, #1]
   94714:	11000400 	add	w0, w0, #0x1
   94718:	531b6817 	lsl	w23, w0, #5
   9471c:	510182e0 	sub	w0, w23, #0x60
   94720:	7108001f 	cmp	w0, #0x200
   94724:	540002a8 	b.hi	94778 <load_xdir+0xd8>  // b.pmore
   94728:	52800001 	mov	w1, #0x0                   	// #0
   9472c:	aa1303e0 	mov	x0, x19
   94730:	97ffff74 	bl	94500 <dir_next>
   94734:	7100101f 	cmp	w0, #0x4
   94738:	2a0003f4 	mov	w20, w0
   9473c:	540001e0 	b.eq	94778 <load_xdir+0xd8>  // b.none
   94740:	35000620 	cbnz	w0, 94804 <load_xdir+0x164>
   94744:	f9400260 	ldr	x0, [x19]
   94748:	f9401e61 	ldr	x1, [x19, #56]
   9474c:	f9403802 	ldr	x2, [x0, #112]
   94750:	eb02003f 	cmp	x1, x2
   94754:	54000080 	b.eq	94764 <load_xdir+0xc4>  // b.none
   94758:	97fffb3e 	bl	93450 <move_window.part.0>
   9475c:	2a0003f4 	mov	w20, w0
   94760:	35000520 	cbnz	w0, 94804 <load_xdir+0x164>
   94764:	f9402261 	ldr	x1, [x19, #64]
   94768:	39400020 	ldrb	w0, [x1]
   9476c:	7103001f 	cmp	w0, #0xc0
   94770:	54000560 	b.eq	9481c <load_xdir+0x17c>  // b.none
   94774:	d503201f 	nop
   94778:	f9401bf7 	ldr	x23, [sp, #48]
   9477c:	17ffffdb 	b	946e8 <load_xdir+0x48>
   94780:	710982bf 	cmp	w21, #0x260
   94784:	54000408 	b.hi	94804 <load_xdir+0x164>  // b.pmore
   94788:	394006c3 	ldrb	w3, [x22, #1]
   9478c:	52800002 	mov	w2, #0x0                   	// #0
   94790:	52800000 	mov	w0, #0x0                   	// #0
   94794:	11000463 	add	w3, w3, #0x1
   94798:	531b6863 	lsl	w3, w3, #5
   9479c:	53017c01 	lsr	w1, w0, #1
   947a0:	7100085f 	cmp	w2, #0x2
   947a4:	0b003c21 	add	w1, w1, w0, lsl #15
   947a8:	54000141 	b.ne	947d0 <load_xdir+0x130>  // b.any
   947ac:	394012c0 	ldrb	w0, [x22, #4]
   947b0:	0b212001 	add	w1, w0, w1, uxth
   947b4:	528000c2 	mov	w2, #0x6                   	// #6
   947b8:	d3413c20 	ubfx	x0, x1, #1, #15
   947bc:	53113c21 	ubfiz	w1, w1, #15, #16
   947c0:	0b010000 	add	w0, w0, w1
   947c4:	394016c1 	ldrb	w1, [x22, #5]
   947c8:	0b202020 	add	w0, w1, w0, uxth
   947cc:	12003c00 	and	w0, w0, #0xffff
   947d0:	38624ac1 	ldrb	w1, [x22, w2, uxtw]
   947d4:	11000442 	add	w2, w2, #0x1
   947d8:	53017c04 	lsr	w4, w0, #1
   947dc:	6b02007f 	cmp	w3, w2
   947e0:	0b003c80 	add	w0, w4, w0, lsl #15
   947e4:	0b202020 	add	w0, w1, w0, uxth
   947e8:	12003c00 	and	w0, w0, #0xffff
   947ec:	54fffd88 	b.hi	9479c <load_xdir+0xfc>  // b.pmore
   947f0:	39400ec2 	ldrb	w2, [x22, #3]
   947f4:	39400ac1 	ldrb	w1, [x22, #2]
   947f8:	33185c41 	bfi	w1, w2, #8, #24
   947fc:	6b00003f 	cmp	w1, w0
   94800:	54fffbc1 	b.ne	94778 <load_xdir+0xd8>  // b.any
   94804:	2a1403e0 	mov	w0, w20
   94808:	a94153f3 	ldp	x19, x20, [sp, #16]
   9480c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94810:	f9401bf7 	ldr	x23, [sp, #48]
   94814:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94818:	d65f03c0 	ret
   9481c:	910082c0 	add	x0, x22, #0x20
   94820:	52800402 	mov	w2, #0x20                  	// #32
   94824:	97fffa2b 	bl	930d0 <mem_cpy.part.0>
   94828:	39408ec0 	ldrb	w0, [x22, #35]
   9482c:	52911121 	mov	w1, #0x8889                	// #34953
   94830:	72b11101 	movk	w1, #0x8888, lsl #16
   94834:	1100b000 	add	w0, w0, #0x2c
   94838:	9ba17c00 	umull	x0, w0, w1
   9483c:	d363fc00 	lsr	x0, x0, #35
   94840:	6b0016ff 	cmp	w23, w0, lsl #5
   94844:	54fff9a3 	b.cc	94778 <load_xdir+0xd8>  // b.lo, b.ul, b.last
   94848:	52800815 	mov	w21, #0x40                  	// #64
   9484c:	14000004 	b	9485c <load_xdir+0x1bc>
   94850:	110082b5 	add	w21, w21, #0x20
   94854:	6b1502ff 	cmp	w23, w21
   94858:	54fff949 	b.ls	94780 <load_xdir+0xe0>  // b.plast
   9485c:	52800001 	mov	w1, #0x0                   	// #0
   94860:	aa1303e0 	mov	x0, x19
   94864:	97ffff27 	bl	94500 <dir_next>
   94868:	7100101f 	cmp	w0, #0x4
   9486c:	2a0003f4 	mov	w20, w0
   94870:	54fff840 	b.eq	94778 <load_xdir+0xd8>  // b.none
   94874:	35fffc80 	cbnz	w0, 94804 <load_xdir+0x164>
   94878:	f9400260 	ldr	x0, [x19]
   9487c:	f9401e61 	ldr	x1, [x19, #56]
   94880:	f9403802 	ldr	x2, [x0, #112]
   94884:	eb02003f 	cmp	x1, x2
   94888:	54000060 	b.eq	94894 <load_xdir+0x1f4>  // b.none
   9488c:	97fffaf1 	bl	93450 <move_window.part.0>
   94890:	35000160 	cbnz	w0, 948bc <load_xdir+0x21c>
   94894:	f9402261 	ldr	x1, [x19, #64]
   94898:	39400020 	ldrb	w0, [x1]
   9489c:	7103041f 	cmp	w0, #0xc1
   948a0:	54fff6c1 	b.ne	94778 <load_xdir+0xd8>  // b.any
   948a4:	71097ebf 	cmp	w21, #0x25f
   948a8:	54fffd48 	b.hi	94850 <load_xdir+0x1b0>  // b.pmore
   948ac:	52800402 	mov	w2, #0x20                  	// #32
   948b0:	8b3542c0 	add	x0, x22, w21, uxtw
   948b4:	97fffa07 	bl	930d0 <mem_cpy.part.0>
   948b8:	17ffffe6 	b	94850 <load_xdir+0x1b0>
   948bc:	2a0003f4 	mov	w20, w0
   948c0:	f9401bf7 	ldr	x23, [sp, #48]
   948c4:	17ffff8a 	b	946ec <load_xdir+0x4c>
   948c8:	d503201f 	nop
   948cc:	d503201f 	nop

00000000000948d0 <load_obj_xdir>:
   948d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   948d4:	910003fd 	mov	x29, sp
   948d8:	29440823 	ldp	w3, w2, [x1, #32]
   948dc:	f9400024 	ldr	x4, [x1]
   948e0:	f9000bf3 	str	x19, [sp, #16]
   948e4:	aa0003f3 	mov	x19, x0
   948e8:	39002c02 	strb	w2, [x0, #11]
   948ec:	92785c42 	and	x2, x2, #0xffffff00
   948f0:	b9402821 	ldr	w1, [x1, #40]
   948f4:	f9000004 	str	x4, [x0]
   948f8:	b9000c03 	str	w3, [x0, #12]
   948fc:	f9000802 	str	x2, [x0, #16]
   94900:	b9001c1f 	str	wzr, [x0, #28]
   94904:	b9005401 	str	w1, [x0, #84]
   94908:	97fffca2 	bl	93b90 <dir_sdi>
   9490c:	34000080 	cbz	w0, 9491c <load_obj_xdir+0x4c>
   94910:	f9400bf3 	ldr	x19, [sp, #16]
   94914:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94918:	d65f03c0 	ret
   9491c:	aa1303e0 	mov	x0, x19
   94920:	f9400bf3 	ldr	x19, [sp, #16]
   94924:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94928:	17ffff5e 	b	946a0 <load_xdir>
   9492c:	d503201f 	nop

0000000000094930 <dir_alloc>:
   94930:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94934:	910003fd 	mov	x29, sp
   94938:	a9025bf5 	stp	x21, x22, [sp, #32]
   9493c:	2a0103f6 	mov	w22, w1
   94940:	52800001 	mov	w1, #0x0                   	// #0
   94944:	a90153f3 	stp	x19, x20, [sp, #16]
   94948:	aa0003f3 	mov	x19, x0
   9494c:	f9001bf7 	str	x23, [sp, #48]
   94950:	f9400017 	ldr	x23, [x0]
   94954:	97fffc8f 	bl	93b90 <dir_sdi>
   94958:	2a0003f5 	mov	w21, w0
   9495c:	35000480 	cbnz	w0, 949ec <dir_alloc+0xbc>
   94960:	52800014 	mov	w20, #0x0                   	// #0
   94964:	1400000d 	b	94998 <dir_alloc+0x68>
   94968:	7103945f 	cmp	w2, #0xe5
   9496c:	52800021 	mov	w1, #0x1                   	// #1
   94970:	1a9f17e3 	cset	w3, eq  // eq = none
   94974:	aa1303e0 	mov	x0, x19
   94978:	7100005f 	cmp	w2, #0x0
   9497c:	1a9f1462 	csinc	w2, w3, wzr, ne  // ne = any
   94980:	340002e2 	cbz	w2, 949dc <dir_alloc+0xac>
   94984:	0b010294 	add	w20, w20, w1
   94988:	6b16029f 	cmp	w20, w22
   9498c:	54000360 	b.eq	949f8 <dir_alloc+0xc8>  // b.none
   94990:	97fffedc 	bl	94500 <dir_next>
   94994:	350002a0 	cbnz	w0, 949e8 <dir_alloc+0xb8>
   94998:	f9401e61 	ldr	x1, [x19, #56]
   9499c:	aa1703e0 	mov	x0, x23
   949a0:	f9403ae2 	ldr	x2, [x23, #112]
   949a4:	eb02003f 	cmp	x1, x2
   949a8:	54000060 	b.eq	949b4 <dir_alloc+0x84>  // b.none
   949ac:	97fffaa9 	bl	93450 <move_window.part.0>
   949b0:	350001c0 	cbnz	w0, 949e8 <dir_alloc+0xb8>
   949b4:	394002e1 	ldrb	w1, [x23]
   949b8:	f9402260 	ldr	x0, [x19, #64]
   949bc:	7100103f 	cmp	w1, #0x4
   949c0:	39400002 	ldrb	w2, [x0]
   949c4:	54fffd21 	b.ne	94968 <dir_alloc+0x38>  // b.any
   949c8:	2a2203e2 	mvn	w2, w2
   949cc:	52800021 	mov	w1, #0x1                   	// #1
   949d0:	d3471c42 	ubfx	x2, x2, #7, #1
   949d4:	aa1303e0 	mov	x0, x19
   949d8:	35fffd62 	cbnz	w2, 94984 <dir_alloc+0x54>
   949dc:	52800014 	mov	w20, #0x0                   	// #0
   949e0:	97fffec8 	bl	94500 <dir_next>
   949e4:	34fffda0 	cbz	w0, 94998 <dir_alloc+0x68>
   949e8:	2a0003f5 	mov	w21, w0
   949ec:	710012bf 	cmp	w21, #0x4
   949f0:	528000e0 	mov	w0, #0x7                   	// #7
   949f4:	1a8012b5 	csel	w21, w21, w0, ne  // ne = any
   949f8:	2a1503e0 	mov	w0, w21
   949fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   94a00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94a04:	f9401bf7 	ldr	x23, [sp, #48]
   94a08:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94a0c:	d65f03c0 	ret

0000000000094a10 <store_xdir>:
   94a10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94a14:	910003fd 	mov	x29, sp
   94a18:	52800001 	mov	w1, #0x0                   	// #0
   94a1c:	52800002 	mov	w2, #0x0                   	// #0
   94a20:	a90153f3 	stp	x19, x20, [sp, #16]
   94a24:	aa0003f3 	mov	x19, x0
   94a28:	f9400000 	ldr	x0, [x0]
   94a2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   94a30:	f9400c14 	ldr	x20, [x0, #24]
   94a34:	f9001bf7 	str	x23, [sp, #48]
   94a38:	39400695 	ldrb	w21, [x20, #1]
   94a3c:	110006a3 	add	w3, w21, #0x1
   94a40:	531b6863 	lsl	w3, w3, #5
   94a44:	53017c20 	lsr	w0, w1, #1
   94a48:	7100085f 	cmp	w2, #0x2
   94a4c:	0b013c00 	add	w0, w0, w1, lsl #15
   94a50:	54000141 	b.ne	94a78 <store_xdir+0x68>  // b.any
   94a54:	39401281 	ldrb	w1, [x20, #4]
   94a58:	0b202020 	add	w0, w1, w0, uxth
   94a5c:	528000c2 	mov	w2, #0x6                   	// #6
   94a60:	d3413c01 	ubfx	x1, x0, #1, #15
   94a64:	53113c00 	ubfiz	w0, w0, #15, #16
   94a68:	0b000021 	add	w1, w1, w0
   94a6c:	39401680 	ldrb	w0, [x20, #5]
   94a70:	0b212001 	add	w1, w0, w1, uxth
   94a74:	12003c21 	and	w1, w1, #0xffff
   94a78:	38624a80 	ldrb	w0, [x20, w2, uxtw]
   94a7c:	11000442 	add	w2, w2, #0x1
   94a80:	53017c24 	lsr	w4, w1, #1
   94a84:	6b02007f 	cmp	w3, w2
   94a88:	0b013c81 	add	w1, w4, w1, lsl #15
   94a8c:	0b212001 	add	w1, w0, w1, uxth
   94a90:	12003c21 	and	w1, w1, #0xffff
   94a94:	54fffd88 	b.hi	94a44 <store_xdir+0x34>  // b.pmore
   94a98:	aa1303e0 	mov	x0, x19
   94a9c:	79000681 	strh	w1, [x20, #2]
   94aa0:	b9405661 	ldr	w1, [x19, #84]
   94aa4:	97fffc3b 	bl	93b90 <dir_sdi>
   94aa8:	2a0003f7 	mov	w23, w0
   94aac:	35000500 	cbnz	w0, 94b4c <store_xdir+0x13c>
   94ab0:	d37b1eb5 	ubfiz	x21, x21, #5, #8
   94ab4:	52800036 	mov	w22, #0x1                   	// #1
   94ab8:	8b150295 	add	x21, x20, x21
   94abc:	14000003 	b	94ac8 <store_xdir+0xb8>
   94ac0:	97fffe90 	bl	94500 <dir_next>
   94ac4:	35000320 	cbnz	w0, 94b28 <store_xdir+0x118>
   94ac8:	f9400260 	ldr	x0, [x19]
   94acc:	f9401e61 	ldr	x1, [x19, #56]
   94ad0:	f9403802 	ldr	x2, [x0, #112]
   94ad4:	eb02003f 	cmp	x1, x2
   94ad8:	54000060 	b.eq	94ae4 <store_xdir+0xd4>  // b.none
   94adc:	97fffa5d 	bl	93450 <move_window.part.0>
   94ae0:	35000240 	cbnz	w0, 94b28 <store_xdir+0x118>
   94ae4:	aa1403e1 	mov	x1, x20
   94ae8:	52800402 	mov	w2, #0x20                  	// #32
   94aec:	f9402260 	ldr	x0, [x19, #64]
   94af0:	97fff978 	bl	930d0 <mem_cpy.part.0>
   94af4:	f9400262 	ldr	x2, [x19]
   94af8:	eb15029f 	cmp	x20, x21
   94afc:	52800001 	mov	w1, #0x0                   	// #0
   94b00:	aa1303e0 	mov	x0, x19
   94b04:	91008294 	add	x20, x20, #0x20
   94b08:	39000c56 	strb	w22, [x2, #3]
   94b0c:	54fffda1 	b.ne	94ac0 <store_xdir+0xb0>  // b.any
   94b10:	2a1703e0 	mov	w0, w23
   94b14:	a94153f3 	ldp	x19, x20, [sp, #16]
   94b18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94b1c:	f9401bf7 	ldr	x23, [sp, #48]
   94b20:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94b24:	d65f03c0 	ret
   94b28:	7100081f 	cmp	w0, #0x2
   94b2c:	52800057 	mov	w23, #0x2                   	// #2
   94b30:	1a979017 	csel	w23, w0, w23, ls  // ls = plast
   94b34:	2a1703e0 	mov	w0, w23
   94b38:	a94153f3 	ldp	x19, x20, [sp, #16]
   94b3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94b40:	f9401bf7 	ldr	x23, [sp, #48]
   94b44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94b48:	d65f03c0 	ret
   94b4c:	7100081f 	cmp	w0, #0x2
   94b50:	52800040 	mov	w0, #0x2                   	// #2
   94b54:	1a8092f7 	csel	w23, w23, w0, ls  // ls = plast
   94b58:	17ffffee 	b	94b10 <store_xdir+0x100>
   94b5c:	d503201f 	nop

0000000000094b60 <dir_remove>:
   94b60:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94b64:	910003fd 	mov	x29, sp
   94b68:	b9405401 	ldr	w1, [x0, #84]
   94b6c:	a90153f3 	stp	x19, x20, [sp, #16]
   94b70:	aa0003f3 	mov	x19, x0
   94b74:	a9025bf5 	stp	x21, x22, [sp, #32]
   94b78:	3100043f 	cmn	w1, #0x1
   94b7c:	b9403015 	ldr	w21, [x0, #48]
   94b80:	f9400014 	ldr	x20, [x0]
   94b84:	54000501 	b.ne	94c24 <dir_remove+0xc4>  // b.any
   94b88:	52800036 	mov	w22, #0x1                   	// #1
   94b8c:	f9001bf7 	str	x23, [sp, #48]
   94b90:	12800357 	mov	w23, #0xffffffe5            	// #-27
   94b94:	1400000a 	b	94bbc <dir_remove+0x5c>
   94b98:	39000017 	strb	w23, [x0]
   94b9c:	52800001 	mov	w1, #0x0                   	// #0
   94ba0:	aa1303e0 	mov	x0, x19
   94ba4:	39000e96 	strb	w22, [x20, #3]
   94ba8:	b9403262 	ldr	w2, [x19, #48]
   94bac:	6b15005f 	cmp	w2, w21
   94bb0:	540002e2 	b.cs	94c0c <dir_remove+0xac>  // b.hs, b.nlast
   94bb4:	97fffe53 	bl	94500 <dir_next>
   94bb8:	35000420 	cbnz	w0, 94c3c <dir_remove+0xdc>
   94bbc:	f9401e61 	ldr	x1, [x19, #56]
   94bc0:	aa1403e0 	mov	x0, x20
   94bc4:	f9403a82 	ldr	x2, [x20, #112]
   94bc8:	eb02003f 	cmp	x1, x2
   94bcc:	54000060 	b.eq	94bd8 <dir_remove+0x78>  // b.none
   94bd0:	97fffa20 	bl	93450 <move_window.part.0>
   94bd4:	35000340 	cbnz	w0, 94c3c <dir_remove+0xdc>
   94bd8:	39400281 	ldrb	w1, [x20]
   94bdc:	f9402260 	ldr	x0, [x19, #64]
   94be0:	7100103f 	cmp	w1, #0x4
   94be4:	54fffda1 	b.ne	94b98 <dir_remove+0x38>  // b.any
   94be8:	39400001 	ldrb	w1, [x0]
   94bec:	12001821 	and	w1, w1, #0x7f
   94bf0:	39000001 	strb	w1, [x0]
   94bf4:	52800001 	mov	w1, #0x0                   	// #0
   94bf8:	aa1303e0 	mov	x0, x19
   94bfc:	39000e96 	strb	w22, [x20, #3]
   94c00:	b9403262 	ldr	w2, [x19, #48]
   94c04:	6b15005f 	cmp	w2, w21
   94c08:	54fffd63 	b.cc	94bb4 <dir_remove+0x54>  // b.lo, b.ul, b.last
   94c0c:	52800000 	mov	w0, #0x0                   	// #0
   94c10:	a94153f3 	ldp	x19, x20, [sp, #16]
   94c14:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94c18:	f9401bf7 	ldr	x23, [sp, #48]
   94c1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94c20:	d65f03c0 	ret
   94c24:	97fffbdb 	bl	93b90 <dir_sdi>
   94c28:	34fffb00 	cbz	w0, 94b88 <dir_remove+0x28>
   94c2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94c30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94c34:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94c38:	d65f03c0 	ret
   94c3c:	7100101f 	cmp	w0, #0x4
   94c40:	52800041 	mov	w1, #0x2                   	// #2
   94c44:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   94c48:	a94153f3 	ldp	x19, x20, [sp, #16]
   94c4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94c50:	f9401bf7 	ldr	x23, [sp, #48]
   94c54:	a8c47bfd 	ldp	x29, x30, [sp], #64
   94c58:	d65f03c0 	ret
   94c5c:	d503201f 	nop

0000000000094c60 <fill_first_frag.part.0>:
   94c60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94c64:	910003fd 	mov	x29, sp
   94c68:	a90153f3 	stp	x19, x20, [sp, #16]
   94c6c:	aa0003f4 	mov	x20, x0
   94c70:	b9401800 	ldr	w0, [x0, #24]
   94c74:	b9400e93 	ldr	w19, [x20, #12]
   94c78:	34000420 	cbz	w0, 94cfc <fill_first_frag.part.0+0x9c>
   94c7c:	7100067f 	cmp	w19, #0x1
   94c80:	54000349 	b.ls	94ce8 <fill_first_frag.part.0+0x88>  // b.plast
   94c84:	a9025bf5 	stp	x21, x22, [sp, #32]
   94c88:	0b000275 	add	w21, w19, w0
   94c8c:	11000676 	add	w22, w19, #0x1
   94c90:	510006b5 	sub	w21, w21, #0x1
   94c94:	2a1303e1 	mov	w1, w19
   94c98:	2a1603e2 	mov	w2, w22
   94c9c:	f9400280 	ldr	x0, [x20]
   94ca0:	b9404003 	ldr	w3, [x0, #64]
   94ca4:	6b13007f 	cmp	w3, w19
   94ca8:	540001e9 	b.ls	94ce4 <fill_first_frag.part.0+0x84>  // b.plast
   94cac:	97fffc15 	bl	93d00 <put_fat.part.0>
   94cb0:	6b1302bf 	cmp	w21, w19
   94cb4:	2a1603f3 	mov	w19, w22
   94cb8:	35000280 	cbnz	w0, 94d08 <fill_first_frag.part.0+0xa8>
   94cbc:	540001e0 	b.eq	94cf8 <fill_first_frag.part.0+0x98>  // b.none
   94cc0:	710006df 	cmp	w22, #0x1
   94cc4:	54000109 	b.ls	94ce4 <fill_first_frag.part.0+0x84>  // b.plast
   94cc8:	f9400280 	ldr	x0, [x20]
   94ccc:	11000676 	add	w22, w19, #0x1
   94cd0:	2a1303e1 	mov	w1, w19
   94cd4:	2a1603e2 	mov	w2, w22
   94cd8:	b9404003 	ldr	w3, [x0, #64]
   94cdc:	6b13007f 	cmp	w3, w19
   94ce0:	54fffe68 	b.hi	94cac <fill_first_frag.part.0+0x4c>  // b.pmore
   94ce4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94ce8:	52800040 	mov	w0, #0x2                   	// #2
   94cec:	a94153f3 	ldp	x19, x20, [sp, #16]
   94cf0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94cf4:	d65f03c0 	ret
   94cf8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94cfc:	52800000 	mov	w0, #0x0                   	// #0
   94d00:	39002e9f 	strb	wzr, [x20, #11]
   94d04:	17fffffa 	b	94cec <fill_first_frag.part.0+0x8c>
   94d08:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94d0c:	17fffff8 	b	94cec <fill_first_frag.part.0+0x8c>

0000000000094d10 <unlock_fs.part.0>:
   94d10:	121d7821 	and	w1, w1, #0xfffffffb
   94d14:	71002c3f 	cmp	w1, #0xb
   94d18:	54000041 	b.ne	94d20 <unlock_fs.part.0+0x10>  // b.any
   94d1c:	d65f03c0 	ret
   94d20:	f9401000 	ldr	x0, [x0, #32]
   94d24:	14001cb3 	b	9bff0 <ff_rel_grant>
   94d28:	d503201f 	nop
   94d2c:	d503201f 	nop

0000000000094d30 <mount_volume>:
   94d30:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   94d34:	910003fd 	mov	x29, sp
   94d38:	a9025bf5 	stp	x21, x22, [sp, #32]
   94d3c:	aa0103f6 	mov	x22, x1
   94d40:	a90363f7 	stp	x23, x24, [sp, #48]
   94d44:	12001c57 	and	w23, w2, #0xff
   94d48:	f900003f 	str	xzr, [x1]
   94d4c:	97fff779 	bl	92b30 <get_ldnumber>
   94d50:	37f826e0 	tbnz	w0, #31, 9522c <mount_volume+0x4fc>
   94d54:	d0000115 	adrp	x21, b6000 <s_OldInfo+0x68>
   94d58:	913922b5 	add	x21, x21, #0xe48
   94d5c:	a90153f3 	stp	x19, x20, [sp, #16]
   94d60:	2a0003f4 	mov	w20, w0
   94d64:	910022a0 	add	x0, x21, #0x8
   94d68:	f874d813 	ldr	x19, [x0, w20, sxtw #3]
   94d6c:	b4002533 	cbz	x19, 95210 <mount_volume+0x4e0>
   94d70:	f9401260 	ldr	x0, [x19, #32]
   94d74:	94001c8b 	bl	9bfa0 <ff_req_grant>
   94d78:	528001e1 	mov	w1, #0xf                   	// #15
   94d7c:	340004e0 	cbz	w0, 94e18 <mount_volume+0xe8>
   94d80:	f90002d3 	str	x19, [x22]
   94d84:	121f1af7 	and	w23, w23, #0xfe
   94d88:	39400260 	ldrb	w0, [x19]
   94d8c:	35000360 	cbnz	w0, 94df8 <mount_volume+0xc8>
   94d90:	12001e94 	and	w20, w20, #0xff
   94d94:	3900027f 	strb	wzr, [x19]
   94d98:	2a1403e0 	mov	w0, w20
   94d9c:	39000674 	strb	w20, [x19, #1]
   94da0:	94001b90 	bl	9bbe0 <disk_initialize>
   94da4:	52800061 	mov	w1, #0x3                   	// #3
   94da8:	12001c02 	and	w2, w0, #0xff
   94dac:	37000360 	tbnz	w0, #0, 94e18 <mount_volume+0xe8>
   94db0:	34000057 	cbz	w23, 94db8 <mount_volume+0x88>
   94db4:	37102282 	tbnz	w2, #2, 95204 <mount_volume+0x4d4>
   94db8:	d2800001 	mov	x1, #0x0                   	// #0
   94dbc:	aa1303e0 	mov	x0, x19
   94dc0:	97fff9c0 	bl	934c0 <check_fs>
   94dc4:	7100081f 	cmp	w0, #0x2
   94dc8:	54000340 	b.eq	94e30 <mount_volume+0x100>  // b.none
   94dcc:	7100101f 	cmp	w0, #0x4
   94dd0:	540023e0 	b.eq	9524c <mount_volume+0x51c>  // b.none
   94dd4:	7100041f 	cmp	w0, #0x1
   94dd8:	54000669 	b.ls	94ea4 <mount_volume+0x174>  // b.plast
   94ddc:	528001a1 	mov	w1, #0xd                   	// #13
   94de0:	a94153f3 	ldp	x19, x20, [sp, #16]
   94de4:	2a0103e0 	mov	w0, w1
   94de8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94dec:	a94363f7 	ldp	x23, x24, [sp, #48]
   94df0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   94df4:	d65f03c0 	ret
   94df8:	39400660 	ldrb	w0, [x19, #1]
   94dfc:	94001b6d 	bl	9bbb0 <disk_status>
   94e00:	12001c02 	and	w2, w0, #0xff
   94e04:	3707fc60 	tbnz	w0, #0, 94d90 <mount_volume+0x60>
   94e08:	52800001 	mov	w1, #0x0                   	// #0
   94e0c:	34000077 	cbz	w23, 94e18 <mount_volume+0xe8>
   94e10:	37101fa2 	tbnz	w2, #2, 95204 <mount_volume+0x4d4>
   94e14:	d503201f 	nop
   94e18:	a94153f3 	ldp	x19, x20, [sp, #16]
   94e1c:	2a0103e0 	mov	w0, w1
   94e20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94e24:	a94363f7 	ldp	x23, x24, [sp, #48]
   94e28:	a8c67bfd 	ldp	x29, x30, [sp], #96
   94e2c:	d65f03c0 	ret
   94e30:	3948ea60 	ldrb	w0, [x19, #570]
   94e34:	7103b81f 	cmp	w0, #0xee
   94e38:	54000fe0 	b.eq	95034 <mount_volume+0x304>  // b.none
   94e3c:	910143f4 	add	x20, sp, #0x50
   94e40:	aa1303e0 	mov	x0, x19
   94e44:	aa1403e2 	mov	x2, x20
   94e48:	91010265 	add	x5, x19, #0x40
   94e4c:	79448001 	ldrh	w1, [x0, #576]
   94e50:	91004000 	add	x0, x0, #0x10
   94e54:	3948bc04 	ldrb	w4, [x0, #559]
   94e58:	3948b803 	ldrb	w3, [x0, #558]
   94e5c:	eb05001f 	cmp	x0, x5
   94e60:	2a012081 	orr	w1, w4, w1, lsl #8
   94e64:	2a012061 	orr	w1, w3, w1, lsl #8
   94e68:	b8004441 	str	w1, [x2], #4
   94e6c:	54ffff01 	b.ne	94e4c <mount_volume+0x11c>  // b.any
   94e70:	91004296 	add	x22, x20, #0x10
   94e74:	14000003 	b	94e80 <mount_volume+0x150>
   94e78:	eb16029f 	cmp	x20, x22
   94e7c:	54001e40 	b.eq	95244 <mount_volume+0x514>  // b.none
   94e80:	b9400281 	ldr	w1, [x20]
   94e84:	52800060 	mov	w0, #0x3                   	// #3
   94e88:	91001294 	add	x20, x20, #0x4
   94e8c:	34ffff61 	cbz	w1, 94e78 <mount_volume+0x148>
   94e90:	aa1303e0 	mov	x0, x19
   94e94:	2a0103e1 	mov	w1, w1
   94e98:	97fff98a 	bl	934c0 <check_fs>
   94e9c:	7100041f 	cmp	w0, #0x1
   94ea0:	54fffec8 	b.hi	94e78 <mount_volume+0x148>  // b.pmore
   94ea4:	7100041f 	cmp	w0, #0x1
   94ea8:	39420e62 	ldrb	w2, [x19, #131]
   94eac:	f9403a65 	ldr	x5, [x19, #112]
   94eb0:	54001d40 	b.eq	95258 <mount_volume+0x528>  // b.none
   94eb4:	39421260 	ldrb	w0, [x19, #132]
   94eb8:	2a002042 	orr	w2, w2, w0, lsl #8
   94ebc:	7108005f 	cmp	w2, #0x200
   94ec0:	54fff8e1 	b.ne	94ddc <mount_volume+0xac>  // b.any
   94ec4:	39423e61 	ldrb	w1, [x19, #143]
   94ec8:	39423a60 	ldrb	w0, [x19, #142]
   94ecc:	33185c20 	bfi	w0, w1, #8, #24
   94ed0:	350000c0 	cbnz	w0, 94ee8 <mount_volume+0x1b8>
   94ed4:	79413e60 	ldrh	w0, [x19, #158]
   94ed8:	39427662 	ldrb	w2, [x19, #157]
   94edc:	39427261 	ldrb	w1, [x19, #156]
   94ee0:	2a002040 	orr	w0, w2, w0, lsl #8
   94ee4:	2a002020 	orr	w0, w1, w0, lsl #8
   94ee8:	39422263 	ldrb	w3, [x19, #136]
   94eec:	b9004660 	str	w0, [x19, #68]
   94ef0:	51000462 	sub	w2, w3, #0x1
   94ef4:	39000a63 	strb	w3, [x19, #2]
   94ef8:	12001c42 	and	w2, w2, #0xff
   94efc:	7100045f 	cmp	w2, #0x1
   94f00:	54fff6e8 	b.hi	94ddc <mount_volume+0xac>  // b.pmore
   94f04:	39421664 	ldrb	w4, [x19, #133]
   94f08:	12003c81 	and	w1, w4, #0xffff
   94f0c:	79001661 	strh	w1, [x19, #10]
   94f10:	34fff661 	cbz	w1, 94ddc <mount_volume+0xac>
   94f14:	51000481 	sub	w1, w4, #0x1
   94f18:	6a04003f 	tst	w1, w4
   94f1c:	54fff601 	b.ne	94ddc <mount_volume+0xac>  // b.any
   94f20:	39422a61 	ldrb	w1, [x19, #138]
   94f24:	39422662 	ldrb	w2, [x19, #137]
   94f28:	2a012041 	orr	w1, w2, w1, lsl #8
   94f2c:	12003c27 	and	w7, w1, #0xffff
   94f30:	13003c21 	sxth	w1, w1
   94f34:	f2400cff 	tst	x7, #0xf
   94f38:	79001267 	strh	w7, [x19, #8]
   94f3c:	54fff501 	b.ne	94ddc <mount_volume+0xac>  // b.any
   94f40:	39423266 	ldrb	w6, [x19, #140]
   94f44:	39422e62 	ldrb	w2, [x19, #139]
   94f48:	33185cc2 	bfi	w2, w6, #8, #24
   94f4c:	350000c2 	cbnz	w2, 94f64 <mount_volume+0x234>
   94f50:	79413662 	ldrh	w2, [x19, #154]
   94f54:	39426668 	ldrb	w8, [x19, #153]
   94f58:	39426266 	ldrb	w6, [x19, #152]
   94f5c:	2a022102 	orr	w2, w8, w2, lsl #8
   94f60:	2a0220c2 	orr	w2, w6, w2, lsl #8
   94f64:	39421e68 	ldrb	w8, [x19, #135]
   94f68:	39421a66 	ldrb	w6, [x19, #134]
   94f6c:	33185d06 	bfi	w6, w8, #8, #24
   94f70:	34fff366 	cbz	w6, 94ddc <mount_volume+0xac>
   94f74:	1b007c63 	mul	w3, w3, w0
   94f78:	0b4710c8 	add	w8, w6, w7, lsr #4
   94f7c:	0b030108 	add	w8, w8, w3
   94f80:	6b08005f 	cmp	w2, w8
   94f84:	54fff2c3 	b.cc	94ddc <mount_volume+0xac>  // b.lo, b.ul, b.last
   94f88:	4b080042 	sub	w2, w2, w8
   94f8c:	529ffea9 	mov	w9, #0xfff5                	// #65525
   94f90:	72a1ffe9 	movk	w9, #0xfff, lsl #16
   94f94:	6b04005f 	cmp	w2, w4
   94f98:	1ac40842 	udiv	w2, w2, w4
   94f9c:	7a492042 	ccmp	w2, w9, #0x2, cs  // cs = hs, nlast
   94fa0:	54fff1e8 	b.hi	94ddc <mount_volume+0xac>  // b.pmore
   94fa4:	529ffea4 	mov	w4, #0xfff5                	// #65525
   94fa8:	8b2620a6 	add	x6, x5, w6, uxth
   94fac:	8b2840a8 	add	x8, x5, w8, uxtw
   94fb0:	6b04005f 	cmp	w2, w4
   94fb4:	11000844 	add	w4, w2, #0x2
   94fb8:	54002808 	b.hi	954b8 <mount_volume+0x788>  // b.pmore
   94fbc:	713fd45f 	cmp	w2, #0xff5
   94fc0:	b9004264 	str	w4, [x19, #64]
   94fc4:	a9049a65 	stp	x5, x6, [x19, #72]
   94fc8:	f9003268 	str	x8, [x19, #96]
   94fcc:	54003088 	b.hi	955dc <mount_volume+0x8ac>  // b.pmore
   94fd0:	34fff067 	cbz	w7, 94ddc <mount_volume+0xac>
   94fd4:	0b040481 	add	w1, w4, w4, lsl #1
   94fd8:	12000084 	and	w4, w4, #0x1
   94fdc:	52800022 	mov	w2, #0x1                   	// #1
   94fe0:	8b2340c3 	add	x3, x6, w3, uxtw
   94fe4:	f9002e63 	str	x3, [x19, #88]
   94fe8:	0b410484 	add	w4, w4, w1, lsr #1
   94fec:	1107fc84 	add	w4, w4, #0x1ff
   94ff0:	6b44241f 	cmp	w0, w4, lsr #9
   94ff4:	54ffef43 	b.cc	94ddc <mount_volume+0xac>  // b.lo, b.ul, b.last
   94ff8:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   94ffc:	12800fe1 	mov	w1, #0xffffff80            	// #-128
   95000:	12001c42 	and	w2, w2, #0xff
   95004:	39001261 	strb	w1, [x19, #4]
   95008:	f9001660 	str	x0, [x19, #40]
   9500c:	794052a0 	ldrh	w0, [x21, #40]
   95010:	52800001 	mov	w1, #0x0                   	// #0
   95014:	39000262 	strb	w2, [x19]
   95018:	b900327f 	str	wzr, [x19, #48]
   9501c:	11000400 	add	w0, w0, #0x1
   95020:	12003c00 	and	w0, w0, #0xffff
   95024:	79000e60 	strh	w0, [x19, #6]
   95028:	790052a0 	strh	w0, [x21, #40]
   9502c:	a94153f3 	ldp	x19, x20, [sp, #16]
   95030:	17ffff7b 	b	94e1c <mount_volume+0xec>
   95034:	f9403a60 	ldr	x0, [x19, #112]
   95038:	f100041f 	cmp	x0, #0x1
   9503c:	540000a0 	b.eq	95050 <mount_volume+0x320>  // b.none
   95040:	d2800021 	mov	x1, #0x1                   	// #1
   95044:	aa1303e0 	mov	x0, x19
   95048:	97fff902 	bl	93450 <move_window.part.0>
   9504c:	35001000 	cbnz	w0, 9524c <mount_volume+0x51c>
   95050:	3941e261 	ldrb	w1, [x19, #120]
   95054:	b00000f6 	adrp	x22, b2000 <vtable for CPartition>
   95058:	910362d6 	add	x22, x22, #0xd8
   9505c:	910282c3 	add	x3, x22, #0xa0
   95060:	d2800000 	mov	x0, #0x0                   	// #0
   95064:	9101e664 	add	x4, x19, #0x79
   95068:	51011421 	sub	w1, w1, #0x45
   9506c:	d503201f 	nop
   95070:	8b030002 	add	x2, x0, x3
   95074:	35ffeb41 	cbnz	w1, 94ddc <mount_volume+0xac>
   95078:	38606881 	ldrb	w1, [x4, x0]
   9507c:	91000400 	add	x0, x0, #0x1
   95080:	f1003c1f 	cmp	x0, #0xf
   95084:	39400442 	ldrb	w2, [x2, #1]
   95088:	4b020021 	sub	w1, w1, w2
   9508c:	54ffff21 	b.ne	95070 <mount_volume+0x340>  // b.any
   95090:	35ffea61 	cbnz	w1, 94ddc <mount_volume+0xac>
   95094:	128001e5 	mov	w5, #0xfffffff0            	// #-16
   95098:	f90023f9 	str	x25, [sp, #64]
   9509c:	9101e279 	add	x25, x19, #0x78
   950a0:	52906406 	mov	w6, #0x8320                	// #33568
   950a4:	72bdb706 	movk	w6, #0xedb8, lsl #16
   950a8:	91035267 	add	x7, x19, #0xd4
   950ac:	12800000 	mov	w0, #0xffffffff            	// #-1
   950b0:	aa1903e1 	mov	x1, x25
   950b4:	4b1900a5 	sub	w5, w5, w25
   950b8:	0b0100a2 	add	w2, w5, w1
   950bc:	52800003 	mov	w3, #0x0                   	// #0
   950c0:	71000c5f 	cmp	w2, #0x3
   950c4:	54002988 	b.hi	955f4 <mount_volume+0x8c4>  // b.pmore
   950c8:	52800114 	mov	w20, #0x8                   	// #8
   950cc:	52800022 	mov	w2, #0x1                   	// #1
   950d0:	6a02007f 	tst	w3, w2
   950d4:	1a9f07e4 	cset	w4, ne  // ne = any
   950d8:	4a000080 	eor	w0, w4, w0
   950dc:	f240001f 	tst	x0, #0x1
   950e0:	53017c00 	lsr	w0, w0, #1
   950e4:	531f1842 	ubfiz	w2, w2, #1, #7
   950e8:	4a060004 	eor	w4, w0, w6
   950ec:	1a801080 	csel	w0, w4, w0, ne  // ne = any
   950f0:	71000694 	subs	w20, w20, #0x1
   950f4:	54fffee1 	b.ne	950d0 <mount_volume+0x3a0>  // b.any
   950f8:	91000421 	add	x1, x1, #0x1
   950fc:	eb0100ff 	cmp	x7, x1
   95100:	54fffdc1 	b.ne	950b8 <mount_volume+0x388>  // b.any
   95104:	79411661 	ldrh	w1, [x19, #138]
   95108:	2a2003e0 	mvn	w0, w0
   9510c:	39422663 	ldrb	w3, [x19, #137]
   95110:	39422262 	ldrb	w2, [x19, #136]
   95114:	2a012061 	orr	w1, w3, w1, lsl #8
   95118:	2a012041 	orr	w1, w2, w1, lsl #8
   9511c:	6b01001f 	cmp	w0, w1
   95120:	540006e1 	b.ne	951fc <mount_volume+0x4cc>  // b.any
   95124:	79419e60 	ldrh	w0, [x19, #206]
   95128:	39433662 	ldrb	w2, [x19, #205]
   9512c:	39433261 	ldrb	w1, [x19, #204]
   95130:	2a002040 	orr	w0, w2, w0, lsl #8
   95134:	2a002020 	orr	w0, w1, w0, lsl #8
   95138:	7102001f 	cmp	w0, #0x80
   9513c:	54000601 	b.ne	951fc <mount_volume+0x4cc>  // b.any
   95140:	79419677 	ldrh	w23, [x19, #202]
   95144:	39432661 	ldrb	w1, [x19, #201]
   95148:	39432260 	ldrb	w0, [x19, #200]
   9514c:	2a172037 	orr	w23, w1, w23, lsl #8
   95150:	2a172017 	orr	w23, w0, w23, lsl #8
   95154:	710202ff 	cmp	w23, #0x80
   95158:	54000528 	b.hi	951fc <mount_volume+0x4cc>  // b.pmore
   9515c:	91030260 	add	x0, x19, #0xc0
   95160:	97fff5f8 	bl	92940 <ld_qword>
   95164:	aa0003f8 	mov	x24, x0
   95168:	340004b7 	cbz	w23, 951fc <mount_volume+0x4cc>
   9516c:	531962f7 	lsl	w23, w23, #7
   95170:	9102c2d6 	add	x22, x22, #0xb0
   95174:	d503201f 	nop
   95178:	f9403a60 	ldr	x0, [x19, #112]
   9517c:	53097e81 	lsr	w1, w20, #9
   95180:	8b180021 	add	x1, x1, x24
   95184:	eb00003f 	cmp	x1, x0
   95188:	54000080 	b.eq	95198 <mount_volume+0x468>  // b.none
   9518c:	aa1303e0 	mov	x0, x19
   95190:	97fff8b0 	bl	93450 <move_window.part.0>
   95194:	350018a0 	cbnz	w0, 954a8 <mount_volume+0x778>
   95198:	12190681 	and	w1, w20, #0x180
   9519c:	92790680 	and	x0, x20, #0x180
   951a0:	38614b21 	ldrb	w1, [x25, w1, uxtw]
   951a4:	8b000324 	add	x4, x25, x0
   951a8:	d2800022 	mov	x2, #0x1                   	// #1
   951ac:	51028821 	sub	w1, w1, #0xa2
   951b0:	35000201 	cbnz	w1, 951f0 <mount_volume+0x4c0>
   951b4:	38626881 	ldrb	w1, [x4, x2]
   951b8:	38766843 	ldrb	w3, [x2, x22]
   951bc:	91000442 	add	x2, x2, #0x1
   951c0:	f100405f 	cmp	x2, #0x10
   951c4:	4b030021 	sub	w1, w1, w3
   951c8:	54ffff41 	b.ne	951b0 <mount_volume+0x480>  // b.any
   951cc:	35000121 	cbnz	w1, 951f0 <mount_volume+0x4c0>
   951d0:	91008000 	add	x0, x0, #0x20
   951d4:	8b000320 	add	x0, x25, x0
   951d8:	97fff5da 	bl	92940 <ld_qword>
   951dc:	aa0003e1 	mov	x1, x0
   951e0:	aa1303e0 	mov	x0, x19
   951e4:	97fff8b7 	bl	934c0 <check_fs>
   951e8:	7100041f 	cmp	w0, #0x1
   951ec:	54001629 	b.ls	954b0 <mount_volume+0x780>  // b.plast
   951f0:	11020294 	add	w20, w20, #0x80
   951f4:	6b17029f 	cmp	w20, w23
   951f8:	54fffc01 	b.ne	95178 <mount_volume+0x448>  // b.any
   951fc:	f94023f9 	ldr	x25, [sp, #64]
   95200:	17fffef7 	b	94ddc <mount_volume+0xac>
   95204:	52800141 	mov	w1, #0xa                   	// #10
   95208:	a94153f3 	ldp	x19, x20, [sp, #16]
   9520c:	17ffff04 	b	94e1c <mount_volume+0xec>
   95210:	52800181 	mov	w1, #0xc                   	// #12
   95214:	a94153f3 	ldp	x19, x20, [sp, #16]
   95218:	2a0103e0 	mov	w0, w1
   9521c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95220:	a94363f7 	ldp	x23, x24, [sp, #48]
   95224:	a8c67bfd 	ldp	x29, x30, [sp], #96
   95228:	d65f03c0 	ret
   9522c:	52800161 	mov	w1, #0xb                   	// #11
   95230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95234:	2a0103e0 	mov	w0, w1
   95238:	a94363f7 	ldp	x23, x24, [sp, #48]
   9523c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   95240:	d65f03c0 	ret
   95244:	7100101f 	cmp	w0, #0x4
   95248:	54ffdca1 	b.ne	94ddc <mount_volume+0xac>  // b.any
   9524c:	52800021 	mov	w1, #0x1                   	// #1
   95250:	a94153f3 	ldp	x19, x20, [sp, #16]
   95254:	17fffef2 	b	94e1c <mount_volume+0xec>
   95258:	91021260 	add	x0, x19, #0x84
   9525c:	9102e263 	add	x3, x19, #0xb8
   95260:	14000003 	b	9526c <mount_volume+0x53c>
   95264:	540000a0 	b.eq	95278 <mount_volume+0x548>  // b.none
   95268:	38401402 	ldrb	w2, [x0], #1
   9526c:	eb03001f 	cmp	x0, x3
   95270:	34ffffa2 	cbz	w2, 95264 <mount_volume+0x534>
   95274:	17fffeda 	b	94ddc <mount_volume+0xac>
   95278:	39438660 	ldrb	w0, [x19, #225]
   9527c:	39438261 	ldrb	w1, [x19, #224]
   95280:	2a002020 	orr	w0, w1, w0, lsl #8
   95284:	13003c00 	sxth	w0, w0
   95288:	7104001f 	cmp	w0, #0x100
   9528c:	54ffda81 	b.ne	94ddc <mount_volume+0xac>  // b.any
   95290:	39439260 	ldrb	w0, [x19, #228]
   95294:	7100241f 	cmp	w0, #0x9
   95298:	54ffda21 	b.ne	94ddc <mount_volume+0xac>  // b.any
   9529c:	91030260 	add	x0, x19, #0xc0
   952a0:	97fff5a8 	bl	92940 <ld_qword>
   952a4:	79419e62 	ldrh	w2, [x19, #206]
   952a8:	39433664 	ldrb	w4, [x19, #205]
   952ac:	39433263 	ldrb	w3, [x19, #204]
   952b0:	39439a61 	ldrb	w1, [x19, #230]
   952b4:	2a022082 	orr	w2, w4, w2, lsl #8
   952b8:	2a022062 	orr	w2, w3, w2, lsl #8
   952bc:	7100043f 	cmp	w1, #0x1
   952c0:	39000a61 	strb	w1, [x19, #2]
   952c4:	b9004662 	str	w2, [x19, #68]
   952c8:	54ffd8a1 	b.ne	94ddc <mount_volume+0xac>  // b.any
   952cc:	39439662 	ldrb	w2, [x19, #229]
   952d0:	1ac22021 	lsl	w1, w1, w2
   952d4:	12003c22 	and	w2, w1, #0xffff
   952d8:	79001662 	strh	w2, [x19, #10]
   952dc:	34ffd802 	cbz	w2, 94ddc <mount_volume+0xac>
   952e0:	7941ae63 	ldrh	w3, [x19, #214]
   952e4:	321f77e2 	mov	w2, #0x7ffffffe            	// #2147483646
   952e8:	39435666 	ldrb	w6, [x19, #213]
   952ec:	39435264 	ldrb	w4, [x19, #212]
   952f0:	2a0320c3 	orr	w3, w6, w3, lsl #8
   952f4:	2a032083 	orr	w3, w4, w3, lsl #8
   952f8:	6b02007f 	cmp	w3, w2
   952fc:	54ffd702 	b.cs	94ddc <mount_volume+0xac>  // b.hs, b.nlast
   95300:	7941a664 	ldrh	w4, [x19, #210]
   95304:	11000867 	add	w7, w3, #0x2
   95308:	12003c21 	and	w1, w1, #0xffff
   9530c:	8b050002 	add	x2, x0, x5
   95310:	f9002665 	str	x5, [x19, #72]
   95314:	39434666 	ldrb	w6, [x19, #209]
   95318:	1b037c20 	mul	w0, w1, w3
   9531c:	b9004267 	str	w7, [x19, #64]
   95320:	79419663 	ldrh	w3, [x19, #202]
   95324:	39432667 	ldrb	w7, [x19, #201]
   95328:	2a0420c1 	orr	w1, w6, w4, lsl #8
   9532c:	39434266 	ldrb	w6, [x19, #208]
   95330:	39432264 	ldrb	w4, [x19, #200]
   95334:	2a0320e3 	orr	w3, w7, w3, lsl #8
   95338:	2a0120c1 	orr	w1, w6, w1, lsl #8
   9533c:	2a032083 	orr	w3, w4, w3, lsl #8
   95340:	8b050021 	add	x1, x1, x5
   95344:	8b010000 	add	x0, x0, x1
   95348:	8b050063 	add	x3, x3, x5
   9534c:	eb02001f 	cmp	x0, x2
   95350:	f9003261 	str	x1, [x19, #96]
   95354:	f9002a63 	str	x3, [x19, #80]
   95358:	54ffd428 	b.hi	94ddc <mount_volume+0xac>  // b.pmore
   9535c:	7941b660 	ldrh	w0, [x19, #218]
   95360:	52800014 	mov	w20, #0x0                   	// #0
   95364:	52800016 	mov	w22, #0x0                   	// #0
   95368:	39436662 	ldrb	w2, [x19, #217]
   9536c:	39436261 	ldrb	w1, [x19, #216]
   95370:	2a002040 	orr	w0, w2, w0, lsl #8
   95374:	2a002020 	orr	w0, w1, w0, lsl #8
   95378:	f9002e60 	str	x0, [x19, #88]
   9537c:	d503201f 	nop
   95380:	350002b4 	cbnz	w20, 953d4 <mount_volume+0x6a4>
   95384:	79401664 	ldrh	w4, [x19, #10]
   95388:	aa1303e0 	mov	x0, x19
   9538c:	d2800001 	mov	x1, #0x0                   	// #0
   95390:	6b16009f 	cmp	w4, w22
   95394:	54ffd249 	b.ls	94ddc <mount_volume+0xac>  // b.plast
   95398:	b9404263 	ldr	w3, [x19, #64]
   9539c:	f9402e62 	ldr	x2, [x19, #88]
   953a0:	51000863 	sub	w3, w3, #0x2
   953a4:	51000842 	sub	w2, w2, #0x2
   953a8:	6b03005f 	cmp	w2, w3
   953ac:	54000062 	b.cs	953b8 <mount_volume+0x688>  // b.hs, b.nlast
   953b0:	f9403261 	ldr	x1, [x19, #96]
   953b4:	9ba40441 	umaddl	x1, w2, w4, x1
   953b8:	f9403a62 	ldr	x2, [x19, #112]
   953bc:	8b364021 	add	x1, x1, w22, uxtw
   953c0:	110006d6 	add	w22, w22, #0x1
   953c4:	eb02003f 	cmp	x1, x2
   953c8:	54000060 	b.eq	953d4 <mount_volume+0x6a4>  // b.none
   953cc:	97fff821 	bl	93450 <move_window.part.0>
   953d0:	35fff3e0 	cbnz	w0, 9524c <mount_volume+0x51c>
   953d4:	2a1403e0 	mov	w0, w20
   953d8:	11008294 	add	w20, w20, #0x20
   953dc:	8b000261 	add	x1, x19, x0
   953e0:	12002294 	and	w20, w20, #0x1ff
   953e4:	3941e021 	ldrb	w1, [x1, #120]
   953e8:	7102043f 	cmp	w1, #0x81
   953ec:	54fffca1 	b.ne	95380 <mount_volume+0x650>  // b.any
   953f0:	91005000 	add	x0, x0, #0x14
   953f4:	9101e276 	add	x22, x19, #0x78
   953f8:	8b0002c1 	add	x1, x22, x0
   953fc:	38606ac0 	ldrb	w0, [x22, x0]
   95400:	79400434 	ldrh	w20, [x1, #2]
   95404:	39400421 	ldrb	w1, [x1, #1]
   95408:	2a142034 	orr	w20, w1, w20, lsl #8
   9540c:	2a142014 	orr	w20, w0, w20, lsl #8
   95410:	7100069f 	cmp	w20, #0x1
   95414:	54ffce49 	b.ls	94ddc <mount_volume+0xac>  // b.plast
   95418:	b9404260 	ldr	w0, [x19, #64]
   9541c:	6b14001f 	cmp	w0, w20
   95420:	54ffcde9 	b.ls	94ddc <mount_volume+0xac>  // b.plast
   95424:	79401660 	ldrh	w0, [x19, #10]
   95428:	51000a81 	sub	w1, w20, #0x2
   9542c:	f9403262 	ldr	x2, [x19, #96]
   95430:	1b017c00 	mul	w0, w0, w1
   95434:	8b020000 	add	x0, x0, x2
   95438:	f9003660 	str	x0, [x19, #104]
   9543c:	14000003 	b	95448 <mount_volume+0x718>
   95440:	6b00029f 	cmp	w20, w0
   95444:	54ffccc1 	b.ne	94ddc <mount_volume+0xac>  // b.any
   95448:	f9402a63 	ldr	x3, [x19, #80]
   9544c:	53077e81 	lsr	w1, w20, #7
   95450:	aa1303e0 	mov	x0, x19
   95454:	f9403a62 	ldr	x2, [x19, #112]
   95458:	8b030021 	add	x1, x1, x3
   9545c:	eb02003f 	cmp	x1, x2
   95460:	54000060 	b.eq	9546c <mount_volume+0x73c>  // b.none
   95464:	97fff7fb 	bl	93450 <move_window.part.0>
   95468:	35ffef20 	cbnz	w0, 9524c <mount_volume+0x51c>
   9546c:	d37e1a81 	ubfiz	x1, x20, #2, #7
   95470:	531e1a80 	ubfiz	w0, w20, #2, #7
   95474:	8b0102c1 	add	x1, x22, x1
   95478:	38604ac2 	ldrb	w2, [x22, w0, uxtw]
   9547c:	11000694 	add	w20, w20, #0x1
   95480:	79400420 	ldrh	w0, [x1, #2]
   95484:	39400421 	ldrb	w1, [x1, #1]
   95488:	2a002020 	orr	w0, w1, w0, lsl #8
   9548c:	2a002040 	orr	w0, w2, w0, lsl #8
   95490:	3100041f 	cmn	w0, #0x1
   95494:	54fffd61 	b.ne	95440 <mount_volume+0x710>  // b.any
   95498:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   9549c:	52800082 	mov	w2, #0x4                   	// #4
   954a0:	f9001660 	str	x0, [x19, #40]
   954a4:	17fffeda 	b	9500c <mount_volume+0x2dc>
   954a8:	f94023f9 	ldr	x25, [sp, #64]
   954ac:	17ffff68 	b	9524c <mount_volume+0x51c>
   954b0:	f94023f9 	ldr	x25, [sp, #64]
   954b4:	17fffe7c 	b	94ea4 <mount_volume+0x174>
   954b8:	39428e62 	ldrb	w2, [x19, #163]
   954bc:	b9004264 	str	w4, [x19, #64]
   954c0:	39428a63 	ldrb	w3, [x19, #162]
   954c4:	a9049a65 	stp	x5, x6, [x19, #72]
   954c8:	f9003268 	str	x8, [x19, #96]
   954cc:	2a022062 	orr	w2, w3, w2, lsl #8
   954d0:	2a020021 	orr	w1, w1, w2
   954d4:	72003c3f 	tst	w1, #0xffff
   954d8:	54ffc821 	b.ne	94ddc <mount_volume+0xac>  // b.any
   954dc:	79414e62 	ldrh	w2, [x19, #166]
   954e0:	531e7481 	lsl	w1, w4, #2
   954e4:	1107fc21 	add	w1, w1, #0x1ff
   954e8:	39429663 	ldrb	w3, [x19, #165]
   954ec:	6b41241f 	cmp	w0, w1, lsr #9
   954f0:	39429261 	ldrb	w1, [x19, #164]
   954f4:	2a022060 	orr	w0, w3, w2, lsl #8
   954f8:	2a002020 	orr	w0, w1, w0, lsl #8
   954fc:	f9002e60 	str	x0, [x19, #88]
   95500:	54ffc6e3 	b.cc	94ddc <mount_volume+0xac>  // b.lo, b.ul, b.last
   95504:	3942a660 	ldrb	w0, [x19, #169]
   95508:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   9550c:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   95510:	3942a261 	ldrb	w1, [x19, #168]
   95514:	39001263 	strb	w3, [x19, #4]
   95518:	f9001662 	str	x2, [x19, #40]
   9551c:	2a002020 	orr	w0, w1, w0, lsl #8
   95520:	13003c00 	sxth	w0, w0
   95524:	7100041f 	cmp	w0, #0x1
   95528:	54000060 	b.eq	95534 <mount_volume+0x804>  // b.none
   9552c:	52800062 	mov	w2, #0x3                   	// #3
   95530:	17fffeb7 	b	9500c <mount_volume+0x2dc>
   95534:	910004a1 	add	x1, x5, #0x1
   95538:	aa1303e0 	mov	x0, x19
   9553c:	97fff7c5 	bl	93450 <move_window.part.0>
   95540:	35ffff60 	cbnz	w0, 9552c <mount_volume+0x7fc>
   95544:	3949de60 	ldrb	w0, [x19, #631]
   95548:	128ab541 	mov	w1, #0xffffaa55            	// #-21931
   9554c:	3900127f 	strb	wzr, [x19, #4]
   95550:	3949da62 	ldrb	w2, [x19, #630]
   95554:	2a002040 	orr	w0, w2, w0, lsl #8
   95558:	6b20a03f 	cmp	w1, w0, sxth
   9555c:	54fffe81 	b.ne	9552c <mount_volume+0x7fc>  // b.any
   95560:	7940f660 	ldrh	w0, [x19, #122]
   95564:	528a4a41 	mov	w1, #0x5252                	// #21074
   95568:	72a82c21 	movk	w1, #0x4161, lsl #16
   9556c:	3941e663 	ldrb	w3, [x19, #121]
   95570:	3941e262 	ldrb	w2, [x19, #120]
   95574:	2a002060 	orr	w0, w3, w0, lsl #8
   95578:	2a002040 	orr	w0, w2, w0, lsl #8
   9557c:	6b01001f 	cmp	w0, w1
   95580:	54fffd61 	b.ne	9552c <mount_volume+0x7fc>  // b.any
   95584:	7944be60 	ldrh	w0, [x19, #606]
   95588:	528e4e41 	mov	w1, #0x7272                	// #29298
   9558c:	72ac2821 	movk	w1, #0x6141, lsl #16
   95590:	39497663 	ldrb	w3, [x19, #605]
   95594:	39497262 	ldrb	w2, [x19, #604]
   95598:	2a002060 	orr	w0, w3, w0, lsl #8
   9559c:	2a002040 	orr	w0, w2, w0, lsl #8
   955a0:	6b01001f 	cmp	w0, w1
   955a4:	54fffc41 	b.ne	9552c <mount_volume+0x7fc>  // b.any
   955a8:	39498663 	ldrb	w3, [x19, #609]
   955ac:	52800062 	mov	w2, #0x3                   	// #3
   955b0:	7944c661 	ldrh	w1, [x19, #610]
   955b4:	7944ce60 	ldrh	w0, [x19, #614]
   955b8:	39499665 	ldrb	w5, [x19, #613]
   955bc:	2a012061 	orr	w1, w3, w1, lsl #8
   955c0:	39498264 	ldrb	w4, [x19, #608]
   955c4:	39499263 	ldrb	w3, [x19, #612]
   955c8:	2a0020a0 	orr	w0, w5, w0, lsl #8
   955cc:	2a012081 	orr	w1, w4, w1, lsl #8
   955d0:	2a002060 	orr	w0, w3, w0, lsl #8
   955d4:	29050660 	stp	w0, w1, [x19, #40]
   955d8:	17fffe8d 	b	9500c <mount_volume+0x2dc>
   955dc:	34ffc007 	cbz	w7, 94ddc <mount_volume+0xac>
   955e0:	8b2340c3 	add	x3, x6, w3, uxtw
   955e4:	531f7884 	lsl	w4, w4, #1
   955e8:	52800042 	mov	w2, #0x2                   	// #2
   955ec:	f9002e63 	str	x3, [x19, #88]
   955f0:	17fffe7f 	b	94fec <mount_volume+0x2bc>
   955f4:	39400023 	ldrb	w3, [x1]
   955f8:	17fffeb4 	b	950c8 <mount_volume+0x398>
   955fc:	d503201f 	nop

0000000000095600 <dir_read.constprop.0>:
   95600:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95604:	910003fd 	mov	x29, sp
   95608:	a9025bf5 	stp	x21, x22, [sp, #32]
   9560c:	b00000f5 	adrp	x21, b2000 <vtable for CPartition>
   95610:	910362b5 	add	x21, x21, #0xd8
   95614:	910336b6 	add	x22, x21, #0xcd
   95618:	a90363f7 	stp	x23, x24, [sp, #48]
   9561c:	52801ff7 	mov	w23, #0xff                  	// #255
   95620:	a90153f3 	stp	x19, x20, [sp, #16]
   95624:	aa0003f3 	mov	x19, x0
   95628:	2a1703f4 	mov	w20, w23
   9562c:	f9400018 	ldr	x24, [x0]
   95630:	52800080 	mov	w0, #0x4                   	// #4
   95634:	d503201f 	nop
   95638:	f9401e61 	ldr	x1, [x19, #56]
   9563c:	b4000bc1 	cbz	x1, 957b4 <dir_read.constprop.0+0x1b4>
   95640:	f9403b00 	ldr	x0, [x24, #112]
   95644:	eb01001f 	cmp	x0, x1
   95648:	54000080 	b.eq	95658 <dir_read.constprop.0+0x58>  // b.none
   9564c:	aa1803e0 	mov	x0, x24
   95650:	97fff780 	bl	93450 <move_window.part.0>
   95654:	350002c0 	cbnz	w0, 956ac <dir_read.constprop.0+0xac>
   95658:	f9402262 	ldr	x2, [x19, #64]
   9565c:	39400040 	ldrb	w0, [x2]
   95660:	34000b80 	cbz	w0, 957d0 <dir_read.constprop.0+0x1d0>
   95664:	39400301 	ldrb	w1, [x24]
   95668:	7100103f 	cmp	w1, #0x4
   9566c:	54000860 	b.eq	95778 <dir_read.constprop.0+0x178>  // b.none
   95670:	39402c41 	ldrb	w1, [x2, #11]
   95674:	7103941f 	cmp	w0, #0xe5
   95678:	528005c3 	mov	w3, #0x2e                  	// #46
   9567c:	7a431004 	ccmp	w0, w3, #0x4, ne  // ne = any
   95680:	12001421 	and	w1, w1, #0x3f
   95684:	39002a61 	strb	w1, [x19, #10]
   95688:	54000080 	b.eq	95698 <dir_read.constprop.0+0x98>  // b.none
   9568c:	121a7823 	and	w3, w1, #0xffffffdf
   95690:	7100207f 	cmp	w3, #0x8
   95694:	54000181 	b.ne	956c4 <dir_read.constprop.0+0xc4>  // b.any
   95698:	52801ff4 	mov	w20, #0xff                  	// #255
   9569c:	52800001 	mov	w1, #0x0                   	// #0
   956a0:	aa1303e0 	mov	x0, x19
   956a4:	97fffb97 	bl	94500 <dir_next>
   956a8:	34fffc80 	cbz	w0, 95638 <dir_read.constprop.0+0x38>
   956ac:	f9001e7f 	str	xzr, [x19, #56]
   956b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   956b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   956b8:	a94363f7 	ldp	x23, x24, [sp, #48]
   956bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   956c0:	d65f03c0 	ret
   956c4:	71003c3f 	cmp	w1, #0xf
   956c8:	54000961 	b.ne	957f4 <dir_read.constprop.0+0x1f4>  // b.any
   956cc:	363006e0 	tbz	w0, #6, 957a8 <dir_read.constprop.0+0x1a8>
   956d0:	b9403261 	ldr	w1, [x19, #48]
   956d4:	12197800 	and	w0, w0, #0xffffffbf
   956d8:	12001c14 	and	w20, w0, #0xff
   956dc:	39403457 	ldrb	w23, [x2, #13]
   956e0:	b9005661 	str	w1, [x19, #84]
   956e4:	39403440 	ldrb	w0, [x2, #13]
   956e8:	6b17001f 	cmp	w0, w23
   956ec:	54fffd61 	b.ne	95698 <dir_read.constprop.0+0x98>  // b.any
   956f0:	39406c40 	ldrb	w0, [x2, #27]
   956f4:	39406841 	ldrb	w1, [x2, #26]
   956f8:	2a002020 	orr	w0, w1, w0, lsl #8
   956fc:	72003c1f 	tst	w0, #0xffff
   95700:	54fffcc1 	b.ne	95698 <dir_read.constprop.0+0x98>  // b.any
   95704:	39400043 	ldrb	w3, [x2]
   95708:	528001a4 	mov	w4, #0xd                   	// #13
   9570c:	52800020 	mov	w0, #0x1                   	// #1
   95710:	2a0003e6 	mov	w6, w0
   95714:	910302a1 	add	x1, x21, #0xc0
   95718:	529fffe8 	mov	w8, #0xffff                	// #65535
   9571c:	f9400b07 	ldr	x7, [x24, #16]
   95720:	12197863 	and	w3, w3, #0xffffffbf
   95724:	51000463 	sub	w3, w3, #0x1
   95728:	1b047c63 	mul	w3, w3, w4
   9572c:	14000009 	b	95750 <dir_read.constprop.0+0x150>
   95730:	54fffb48 	b.hi	95698 <dir_read.constprop.0+0x98>  // b.pmore
   95734:	2a0003e6 	mov	w6, w0
   95738:	782358e0 	strh	w0, [x7, w3, uxtw #1]
   9573c:	11000463 	add	w3, w3, #0x1
   95740:	91000421 	add	x1, x1, #0x1
   95744:	eb0102df 	cmp	x22, x1
   95748:	54000480 	b.eq	957d8 <dir_read.constprop.0+0x1d8>  // b.none
   9574c:	39400020 	ldrb	w0, [x1]
   95750:	92401c05 	and	x5, x0, #0xff
   95754:	8b200040 	add	x0, x2, w0, uxtb
   95758:	7103fc7f 	cmp	w3, #0xff
   9575c:	39400404 	ldrb	w4, [x0, #1]
   95760:	38656840 	ldrb	w0, [x2, x5]
   95764:	33185c80 	bfi	w0, w4, #8, #24
   95768:	35fffe46 	cbnz	w6, 95730 <dir_read.constprop.0+0x130>
   9576c:	6b08001f 	cmp	w0, w8
   95770:	54fffe80 	b.eq	95740 <dir_read.constprop.0+0x140>  // b.none
   95774:	17ffffc9 	b	95698 <dir_read.constprop.0+0x98>
   95778:	7102141f 	cmp	w0, #0x85
   9577c:	54fff901 	b.ne	9569c <dir_read.constprop.0+0x9c>  // b.any
   95780:	b9403261 	ldr	w1, [x19, #48]
   95784:	aa1303e0 	mov	x0, x19
   95788:	b9005661 	str	w1, [x19, #84]
   9578c:	97fffbc5 	bl	946a0 <load_xdir>
   95790:	35fff8e0 	cbnz	w0, 956ac <dir_read.constprop.0+0xac>
   95794:	f9400f01 	ldr	x1, [x24, #24]
   95798:	39401021 	ldrb	w1, [x1, #4]
   9579c:	12001421 	and	w1, w1, #0x3f
   957a0:	39002a61 	strb	w1, [x19, #10]
   957a4:	17ffffc3 	b	956b0 <dir_read.constprop.0+0xb0>
   957a8:	6b14001f 	cmp	w0, w20
   957ac:	54fff761 	b.ne	95698 <dir_read.constprop.0+0x98>  // b.any
   957b0:	17ffffcd 	b	956e4 <dir_read.constprop.0+0xe4>
   957b4:	35fff7c0 	cbnz	w0, 956ac <dir_read.constprop.0+0xac>
   957b8:	52800000 	mov	w0, #0x0                   	// #0
   957bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   957c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   957c4:	a94363f7 	ldp	x23, x24, [sp, #48]
   957c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   957cc:	d65f03c0 	ret
   957d0:	52800080 	mov	w0, #0x4                   	// #4
   957d4:	17ffffb6 	b	956ac <dir_read.constprop.0+0xac>
   957d8:	39400040 	ldrb	w0, [x2]
   957dc:	f27a001f 	tst	x0, #0x40
   957e0:	7a4018c4 	ccmp	w6, #0x0, #0x4, ne  // ne = any
   957e4:	54000281 	b.ne	95834 <dir_read.constprop.0+0x234>  // b.any
   957e8:	51000680 	sub	w0, w20, #0x1
   957ec:	12001c14 	and	w20, w0, #0xff
   957f0:	17ffffab 	b	9569c <dir_read.constprop.0+0x9c>
   957f4:	35000194 	cbnz	w20, 95824 <dir_read.constprop.0+0x224>
   957f8:	91002c43 	add	x3, x2, #0xb
   957fc:	d503201f 	nop
   95800:	38401441 	ldrb	w1, [x2], #1
   95804:	53190280 	ubfiz	w0, w20, #7, #1
   95808:	2a540400 	orr	w0, w0, w20, lsr #1
   9580c:	0b200020 	add	w0, w1, w0, uxtb
   95810:	12001c14 	and	w20, w0, #0xff
   95814:	eb03005f 	cmp	x2, x3
   95818:	54ffff41 	b.ne	95800 <dir_read.constprop.0+0x200>  // b.any
   9581c:	6b17029f 	cmp	w20, w23
   95820:	54fffcc0 	b.eq	957b8 <dir_read.constprop.0+0x1b8>  // b.none
   95824:	12800001 	mov	w1, #0xffffffff            	// #-1
   95828:	52800000 	mov	w0, #0x0                   	// #0
   9582c:	b9005661 	str	w1, [x19, #84]
   95830:	17ffffa0 	b	956b0 <dir_read.constprop.0+0xb0>
   95834:	7103fc7f 	cmp	w3, #0xff
   95838:	54fff308 	b.hi	95698 <dir_read.constprop.0+0x98>  // b.pmore
   9583c:	782358ff 	strh	wzr, [x7, w3, uxtw #1]
   95840:	17ffffea 	b	957e8 <dir_read.constprop.0+0x1e8>
   95844:	d503201f 	nop
   95848:	d503201f 	nop
   9584c:	d503201f 	nop

0000000000095850 <dir_find>:
   95850:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   95854:	52800001 	mov	w1, #0x0                   	// #0
   95858:	910003fd 	mov	x29, sp
   9585c:	a90153f3 	stp	x19, x20, [sp, #16]
   95860:	aa0003f3 	mov	x19, x0
   95864:	a9025bf5 	stp	x21, x22, [sp, #32]
   95868:	f9400015 	ldr	x21, [x0]
   9586c:	97fff8c9 	bl	93b90 <dir_sdi>
   95870:	2a0003f6 	mov	w22, w0
   95874:	350007c0 	cbnz	w0, 9596c <dir_find+0x11c>
   95878:	a90363f7 	stp	x23, x24, [sp, #48]
   9587c:	a9046bf9 	stp	x25, x26, [sp, #64]
   95880:	394002a0 	ldrb	w0, [x21]
   95884:	7100101f 	cmp	w0, #0x4
   95888:	54001420 	b.eq	95b0c <dir_find+0x2bc>  // b.none
   9588c:	12800000 	mov	w0, #0xffffffff            	// #-1
   95890:	b00000f8 	adrp	x24, b2000 <vtable for CPartition>
   95894:	91036318 	add	x24, x24, #0xd8
   95898:	52801ff7 	mov	w23, #0xff                  	// #255
   9589c:	a90573fb 	stp	x27, x28, [sp, #80]
   958a0:	91033719 	add	x25, x24, #0xcd
   958a4:	2a1703fa 	mov	w26, w23
   958a8:	b9005660 	str	w0, [x19, #84]
   958ac:	1400000a 	b	958d4 <dir_find+0x84>
   958b0:	71003c1f 	cmp	w0, #0xf
   958b4:	54000660 	b.eq	95980 <dir_find+0x130>  // b.none
   958b8:	12800000 	mov	w0, #0xffffffff            	// #-1
   958bc:	52801ffa 	mov	w26, #0xff                  	// #255
   958c0:	b9005660 	str	w0, [x19, #84]
   958c4:	52800001 	mov	w1, #0x0                   	// #0
   958c8:	aa1303e0 	mov	x0, x19
   958cc:	97fffb0d 	bl	94500 <dir_next>
   958d0:	35000d80 	cbnz	w0, 95a80 <dir_find+0x230>
   958d4:	f9401e61 	ldr	x1, [x19, #56]
   958d8:	f9403aa0 	ldr	x0, [x21, #112]
   958dc:	eb00003f 	cmp	x1, x0
   958e0:	54000080 	b.eq	958f0 <dir_find+0xa0>  // b.none
   958e4:	aa1503e0 	mov	x0, x21
   958e8:	97fff6da 	bl	93450 <move_window.part.0>
   958ec:	35000ca0 	cbnz	w0, 95a80 <dir_find+0x230>
   958f0:	f9402274 	ldr	x20, [x19, #64]
   958f4:	3940029b 	ldrb	w27, [x20]
   958f8:	34000f9b 	cbz	w27, 95ae8 <dir_find+0x298>
   958fc:	39402e81 	ldrb	w1, [x20, #11]
   95900:	7103977f 	cmp	w27, #0xe5
   95904:	12001420 	and	w0, w1, #0x3f
   95908:	39002a60 	strb	w0, [x19, #10]
   9590c:	54fffd60 	b.eq	958b8 <dir_find+0x68>  // b.none
   95910:	371ffd01 	tbnz	w1, #3, 958b0 <dir_find+0x60>
   95914:	71003c1f 	cmp	w0, #0xf
   95918:	54000340 	b.eq	95980 <dir_find+0x130>  // b.none
   9591c:	34000c5a 	cbz	w26, 95aa4 <dir_find+0x254>
   95920:	39414e60 	ldrb	w0, [x19, #83]
   95924:	3707fca0 	tbnz	w0, #0, 958b8 <dir_find+0x68>
   95928:	39412262 	ldrb	w2, [x19, #72]
   9592c:	d2800000 	mov	x0, #0x0                   	// #0
   95930:	91012663 	add	x3, x19, #0x49
   95934:	38401681 	ldrb	w1, [x20], #1
   95938:	4b020021 	sub	w1, w1, w2
   9593c:	d503201f 	nop
   95940:	35fffbc1 	cbnz	w1, 958b8 <dir_find+0x68>
   95944:	38606a81 	ldrb	w1, [x20, x0]
   95948:	38606862 	ldrb	w2, [x3, x0]
   9594c:	91000400 	add	x0, x0, #0x1
   95950:	f100281f 	cmp	x0, #0xa
   95954:	4b020021 	sub	w1, w1, w2
   95958:	54ffff41 	b.ne	95940 <dir_find+0xf0>  // b.any
   9595c:	35fffae1 	cbnz	w1, 958b8 <dir_find+0x68>
   95960:	a94363f7 	ldp	x23, x24, [sp, #48]
   95964:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95968:	a94573fb 	ldp	x27, x28, [sp, #80]
   9596c:	2a1603e0 	mov	w0, w22
   95970:	a94153f3 	ldp	x19, x20, [sp, #16]
   95974:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95978:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9597c:	d65f03c0 	ret
   95980:	39414e60 	ldrb	w0, [x19, #83]
   95984:	3737fa00 	tbnz	w0, #6, 958c4 <dir_find+0x74>
   95988:	36300a9b 	tbz	w27, #6, 95ad8 <dir_find+0x288>
   9598c:	b9403260 	ldr	w0, [x19, #48]
   95990:	12197b7b 	and	w27, w27, #0xffffffbf
   95994:	12001f7b 	and	w27, w27, #0xff
   95998:	39403697 	ldrb	w23, [x20, #13]
   9599c:	b9005660 	str	w0, [x19, #84]
   959a0:	39403680 	ldrb	w0, [x20, #13]
   959a4:	52801ffa 	mov	w26, #0xff                  	// #255
   959a8:	6b17001f 	cmp	w0, w23
   959ac:	54fff8c1 	b.ne	958c4 <dir_find+0x74>  // b.any
   959b0:	39406e80 	ldrb	w0, [x20, #27]
   959b4:	39406a81 	ldrb	w1, [x20, #26]
   959b8:	2a002020 	orr	w0, w1, w0, lsl #8
   959bc:	72003c1f 	tst	w0, #0xffff
   959c0:	54fff821 	b.ne	958c4 <dir_find+0x74>  // b.any
   959c4:	39400283 	ldrb	w3, [x20]
   959c8:	528001a1 	mov	w1, #0xd                   	// #13
   959cc:	52800020 	mov	w0, #0x1                   	// #1
   959d0:	2a0003e5 	mov	w5, w0
   959d4:	9103031c 	add	x28, x24, #0xc0
   959d8:	f9400aa2 	ldr	x2, [x21, #16]
   959dc:	12001463 	and	w3, w3, #0x3f
   959e0:	51000463 	sub	w3, w3, #0x1
   959e4:	f90037e2 	str	x2, [sp, #104]
   959e8:	1b017c7a 	mul	w26, w3, w1
   959ec:	14000014 	b	95a3c <dir_find+0x1ec>
   959f0:	540003e8 	b.hi	95a6c <dir_find+0x21c>  // b.pmore
   959f4:	2a0103e0 	mov	w0, w1
   959f8:	b90067e1 	str	w1, [sp, #100]
   959fc:	94001a0d 	bl	9c230 <ff_wtoupper>
   95a00:	2a0003e4 	mov	w4, w0
   95a04:	f94037e0 	ldr	x0, [sp, #104]
   95a08:	b94063e6 	ldr	w6, [sp, #96]
   95a0c:	b90063e4 	str	w4, [sp, #96]
   95a10:	787a5800 	ldrh	w0, [x0, w26, uxtw #1]
   95a14:	2a0603fa 	mov	w26, w6
   95a18:	94001a06 	bl	9c230 <ff_wtoupper>
   95a1c:	294c07e4 	ldp	w4, w1, [sp, #96]
   95a20:	6b00009f 	cmp	w4, w0
   95a24:	2a0103e5 	mov	w5, w1
   95a28:	54000221 	b.ne	95a6c <dir_find+0x21c>  // b.any
   95a2c:	9100079c 	add	x28, x28, #0x1
   95a30:	eb1c033f 	cmp	x25, x28
   95a34:	54000d00 	b.eq	95bd4 <dir_find+0x384>  // b.none
   95a38:	39400380 	ldrb	w0, [x28]
   95a3c:	92401c01 	and	x1, x0, #0xff
   95a40:	8b200280 	add	x0, x20, w0, uxtb
   95a44:	11000746 	add	w6, w26, #0x1
   95a48:	39400400 	ldrb	w0, [x0, #1]
   95a4c:	7103ff5f 	cmp	w26, #0xff
   95a50:	b90063e6 	str	w6, [sp, #96]
   95a54:	38616a81 	ldrb	w1, [x20, x1]
   95a58:	33185c01 	bfi	w1, w0, #8, #24
   95a5c:	35fffca5 	cbnz	w5, 959f0 <dir_find+0x1a0>
   95a60:	529fffe0 	mov	w0, #0xffff                	// #65535
   95a64:	6b00003f 	cmp	w1, w0
   95a68:	54fffe20 	b.eq	95a2c <dir_find+0x1dc>  // b.none
   95a6c:	52801ffa 	mov	w26, #0xff                  	// #255
   95a70:	52800001 	mov	w1, #0x0                   	// #0
   95a74:	aa1303e0 	mov	x0, x19
   95a78:	97fffaa2 	bl	94500 <dir_next>
   95a7c:	34fff2c0 	cbz	w0, 958d4 <dir_find+0x84>
   95a80:	2a0003f6 	mov	w22, w0
   95a84:	a94153f3 	ldp	x19, x20, [sp, #16]
   95a88:	2a1603e0 	mov	w0, w22
   95a8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95a90:	a94363f7 	ldp	x23, x24, [sp, #48]
   95a94:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95a98:	a94573fb 	ldp	x27, x28, [sp, #80]
   95a9c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   95aa0:	d65f03c0 	ret
   95aa4:	91002e83 	add	x3, x20, #0xb
   95aa8:	aa1403e0 	mov	x0, x20
   95aac:	d503201f 	nop
   95ab0:	38401402 	ldrb	w2, [x0], #1
   95ab4:	53190341 	ubfiz	w1, w26, #7, #1
   95ab8:	2a5a0421 	orr	w1, w1, w26, lsr #1
   95abc:	0b210041 	add	w1, w2, w1, uxtb
   95ac0:	12001c3a 	and	w26, w1, #0xff
   95ac4:	eb03001f 	cmp	x0, x3
   95ac8:	54ffff41 	b.ne	95ab0 <dir_find+0x260>  // b.any
   95acc:	6b1a02ff 	cmp	w23, w26
   95ad0:	54fff281 	b.ne	95920 <dir_find+0xd0>  // b.any
   95ad4:	17ffffa3 	b	95960 <dir_find+0x110>
   95ad8:	6b1b035f 	cmp	w26, w27
   95adc:	54fff620 	b.eq	959a0 <dir_find+0x150>  // b.none
   95ae0:	52801ffa 	mov	w26, #0xff                  	// #255
   95ae4:	17ffffe3 	b	95a70 <dir_find+0x220>
   95ae8:	52800096 	mov	w22, #0x4                   	// #4
   95aec:	a94153f3 	ldp	x19, x20, [sp, #16]
   95af0:	2a1603e0 	mov	w0, w22
   95af4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95af8:	a94363f7 	ldp	x23, x24, [sp, #48]
   95afc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95b00:	a94573fb 	ldp	x27, x28, [sp, #80]
   95b04:	a8c77bfd 	ldp	x29, x30, [sp], #112
   95b08:	d65f03c0 	ret
   95b0c:	f9400aa0 	ldr	x0, [x21, #16]
   95b10:	97fff554 	bl	93060 <xname_sum>
   95b14:	12003c1a 	and	w26, w0, #0xffff
   95b18:	aa1303e0 	mov	x0, x19
   95b1c:	97fffeb9 	bl	95600 <dir_read.constprop.0>
   95b20:	35000520 	cbnz	w0, 95bc4 <dir_find+0x374>
   95b24:	f9400ea0 	ldr	x0, [x21, #24]
   95b28:	39409402 	ldrb	w2, [x0, #37]
   95b2c:	39409001 	ldrb	w1, [x0, #36]
   95b30:	33185c41 	bfi	w1, w2, #8, #24
   95b34:	6b01035f 	cmp	w26, w1
   95b38:	54ffff01 	b.ne	95b18 <dir_find+0x2c8>  // b.any
   95b3c:	39408c01 	ldrb	w1, [x0, #35]
   95b40:	34000581 	cbz	w1, 95bf0 <dir_find+0x3a0>
   95b44:	51000421 	sub	w1, w1, #0x1
   95b48:	d2800017 	mov	x23, #0x0                   	// #0
   95b4c:	92401c39 	and	x25, x1, #0xff
   95b50:	52800814 	mov	w20, #0x40                  	// #64
   95b54:	14000002 	b	95b5c <dir_find+0x30c>
   95b58:	f9400ea0 	ldr	x0, [x21, #24]
   95b5c:	11000a81 	add	w1, w20, #0x2
   95b60:	f240129f 	tst	x20, #0x1f
   95b64:	1a940034 	csel	w20, w1, w20, eq  // eq = none
   95b68:	8b344001 	add	x1, x0, w20, uxtw
   95b6c:	38744800 	ldrb	w0, [x0, w20, uxtw]
   95b70:	11000a94 	add	w20, w20, #0x2
   95b74:	39400421 	ldrb	w1, [x1, #1]
   95b78:	33185c20 	bfi	w0, w1, #8, #24
   95b7c:	940019ad 	bl	9c230 <ff_wtoupper>
   95b80:	f9400aa1 	ldr	x1, [x21, #16]
   95b84:	2a0003f8 	mov	w24, w0
   95b88:	78777820 	ldrh	w0, [x1, x23, lsl #1]
   95b8c:	940019a9 	bl	9c230 <ff_wtoupper>
   95b90:	6b00031f 	cmp	w24, w0
   95b94:	110006e1 	add	w1, w23, #0x1
   95b98:	54fffc01 	b.ne	95b18 <dir_find+0x2c8>  // b.any
   95b9c:	eb17033f 	cmp	x25, x23
   95ba0:	910006f7 	add	x23, x23, #0x1
   95ba4:	54fffda1 	b.ne	95b58 <dir_find+0x308>  // b.any
   95ba8:	d37f7c21 	ubfiz	x1, x1, #1, #32
   95bac:	f9400aa0 	ldr	x0, [x21, #16]
   95bb0:	78616800 	ldrh	w0, [x0, x1]
   95bb4:	35fffb20 	cbnz	w0, 95b18 <dir_find+0x2c8>
   95bb8:	a94363f7 	ldp	x23, x24, [sp, #48]
   95bbc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95bc0:	17ffff6b 	b	9596c <dir_find+0x11c>
   95bc4:	2a0003f6 	mov	w22, w0
   95bc8:	a94363f7 	ldp	x23, x24, [sp, #48]
   95bcc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95bd0:	17ffff67 	b	9596c <dir_find+0x11c>
   95bd4:	39400280 	ldrb	w0, [x20]
   95bd8:	f27a001f 	tst	x0, #0x40
   95bdc:	7a4018a4 	ccmp	w5, #0x0, #0x4, ne  // ne = any
   95be0:	540000c1 	b.ne	95bf8 <dir_find+0x3a8>  // b.any
   95be4:	51000761 	sub	w1, w27, #0x1
   95be8:	12001c3a 	and	w26, w1, #0xff
   95bec:	17ffff36 	b	958c4 <dir_find+0x74>
   95bf0:	d2800001 	mov	x1, #0x0                   	// #0
   95bf4:	17ffffee 	b	95bac <dir_find+0x35c>
   95bf8:	f94037e0 	ldr	x0, [sp, #104]
   95bfc:	787a5800 	ldrh	w0, [x0, w26, uxtw #1]
   95c00:	52801ffa 	mov	w26, #0xff                  	// #255
   95c04:	34ffff00 	cbz	w0, 95be4 <dir_find+0x394>
   95c08:	17ffff2f 	b	958c4 <dir_find+0x74>
   95c0c:	d503201f 	nop

0000000000095c10 <follow_path>:
   95c10:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   95c14:	910003fd 	mov	x29, sp
   95c18:	a90153f3 	stp	x19, x20, [sp, #16]
   95c1c:	aa0103f3 	mov	x19, x1
   95c20:	52800b81 	mov	w1, #0x5c                  	// #92
   95c24:	a90363f7 	stp	x23, x24, [sp, #48]
   95c28:	a9046bf9 	stp	x25, x26, [sp, #64]
   95c2c:	aa0003fa 	mov	x26, x0
   95c30:	39c00262 	ldrsb	w2, [x19]
   95c34:	f9400017 	ldr	x23, [x0]
   95c38:	7100bc5f 	cmp	w2, #0x2f
   95c3c:	7a411044 	ccmp	w2, w1, #0x4, ne  // ne = any
   95c40:	54000a81 	b.ne	95d90 <follow_path+0x180>  // b.any
   95c44:	6b01005f 	cmp	w2, w1
   95c48:	528005e0 	mov	w0, #0x2f                  	// #47
   95c4c:	7a401044 	ccmp	w2, w0, #0x4, ne  // ne = any
   95c50:	540000c1 	b.ne	95c68 <follow_path+0x58>  // b.any
   95c54:	d503201f 	nop
   95c58:	38c01e60 	ldrsb	w0, [x19, #1]!
   95c5c:	7100bc1f 	cmp	w0, #0x2f
   95c60:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
   95c64:	54ffffa0 	b.eq	95c58 <follow_path+0x48>  // b.none
   95c68:	b9000f5f 	str	wzr, [x26, #12]
   95c6c:	b9001f5f 	str	wzr, [x26, #28]
   95c70:	394002e0 	ldrb	w0, [x23]
   95c74:	7100101f 	cmp	w0, #0x4
   95c78:	54000980 	b.eq	95da8 <follow_path+0x198>  // b.none
   95c7c:	39400260 	ldrb	w0, [x19]
   95c80:	b00000f8 	adrp	x24, b2000 <vtable for CPartition>
   95c84:	91036318 	add	x24, x24, #0xd8
   95c88:	71007c1f 	cmp	w0, #0x1f
   95c8c:	540024c9 	b.ls	96124 <follow_path+0x514>  // b.plast
   95c90:	a9025bf5 	stp	x21, x22, [sp, #32]
   95c94:	a90573fb 	stp	x27, x28, [sp, #80]
   95c98:	d2800015 	mov	x21, #0x0                   	// #0
   95c9c:	b00000f9 	adrp	x25, b2000 <vtable for CPartition>
   95ca0:	f9400341 	ldr	x1, [x26]
   95ca4:	f9400836 	ldr	x22, [x1, #16]
   95ca8:	91000673 	add	x19, x19, #0x1
   95cac:	2a1503f4 	mov	w20, w21
   95cb0:	35000300 	cbnz	w0, 95d10 <follow_path+0x100>
   95cb4:	52800099 	mov	w25, #0x4                   	// #4
   95cb8:	7100069f 	cmp	w20, #0x1
   95cbc:	54000a60 	b.eq	95e08 <follow_path+0x1f8>  // b.none
   95cc0:	71000a9f 	cmp	w20, #0x2
   95cc4:	540009c0 	b.eq	95dfc <follow_path+0x1ec>  // b.none
   95cc8:	528005c2 	mov	w2, #0x2e                  	// #46
   95ccc:	14000006 	b	95ce4 <follow_path+0xd4>
   95cd0:	78615ac0 	ldrh	w0, [x22, w1, uxtw #1]
   95cd4:	7100801f 	cmp	w0, #0x20
   95cd8:	7a421004 	ccmp	w0, w2, #0x4, ne  // ne = any
   95cdc:	54000d61 	b.ne	95e88 <follow_path+0x278>  // b.any
   95ce0:	2a0103f4 	mov	w20, w1
   95ce4:	51000681 	sub	w1, w20, #0x1
   95ce8:	35ffff54 	cbnz	w20, 95cd0 <follow_path+0xc0>
   95cec:	790002df 	strh	wzr, [x22]
   95cf0:	528000c0 	mov	w0, #0x6                   	// #6
   95cf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   95cf8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95cfc:	a94363f7 	ldp	x23, x24, [sp, #48]
   95d00:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95d04:	a94573fb 	ldp	x27, x28, [sp, #80]
   95d08:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   95d0c:	d65f03c0 	ret
   95d10:	52806a41 	mov	w1, #0x352                 	// #850
   95d14:	94001937 	bl	9c1f0 <ff_oem2uni>
   95d18:	72003c01 	ands	w1, w0, #0xffff
   95d1c:	540002a0 	b.eq	95d70 <follow_path+0x160>  // b.none
   95d20:	7100bc3f 	cmp	w1, #0x2f
   95d24:	7a5f1820 	ccmp	w1, #0x1f, #0x0, ne  // ne = any
   95d28:	54000929 	b.ls	95e4c <follow_path+0x23c>  // b.plast
   95d2c:	7101703f 	cmp	w1, #0x5c
   95d30:	54000940 	b.eq	95e58 <follow_path+0x248>  // b.none
   95d34:	7101fc3f 	cmp	w1, #0x7f
   95d38:	540000e9 	b.ls	95d54 <follow_path+0x144>  // b.plast
   95d3c:	f103febf 	cmp	x21, #0xff
   95d40:	54000180 	b.eq	95d70 <follow_path+0x160>  // b.none
   95d44:	78357ac0 	strh	w0, [x22, x21, lsl #1]
   95d48:	910006b5 	add	x21, x21, #0x1
   95d4c:	39400260 	ldrb	w0, [x19]
   95d50:	17ffffd6 	b	95ca8 <follow_path+0x98>
   95d54:	52800442 	mov	w2, #0x22                  	// #34
   95d58:	9101a323 	add	x3, x25, #0x68
   95d5c:	14000003 	b	95d68 <follow_path+0x158>
   95d60:	38c01c62 	ldrsb	w2, [x3, #1]!
   95d64:	34fffec2 	cbz	w2, 95d3c <follow_path+0x12c>
   95d68:	6b01005f 	cmp	w2, w1
   95d6c:	54ffffa1 	b.ne	95d60 <follow_path+0x150>  // b.any
   95d70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95d74:	528000c0 	mov	w0, #0x6                   	// #6
   95d78:	a94573fb 	ldp	x27, x28, [sp, #80]
   95d7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   95d80:	a94363f7 	ldp	x23, x24, [sp, #48]
   95d84:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95d88:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   95d8c:	d65f03c0 	ret
   95d90:	b94032e0 	ldr	w0, [x23, #48]
   95d94:	b9001f5f 	str	wzr, [x26, #28]
   95d98:	b9000f40 	str	w0, [x26, #12]
   95d9c:	394002e0 	ldrb	w0, [x23]
   95da0:	7100101f 	cmp	w0, #0x4
   95da4:	54fff6c1 	b.ne	95c7c <follow_path+0x6c>  // b.any
   95da8:	b9400f40 	ldr	w0, [x26, #12]
   95dac:	34fff680 	cbz	w0, 95c7c <follow_path+0x6c>
   95db0:	29468ee4 	ldp	w4, w3, [x23, #52]
   95db4:	aa1a03e1 	mov	x1, x26
   95db8:	9101c3e0 	add	x0, sp, #0x70
   95dbc:	b9403ee2 	ldr	w2, [x23, #60]
   95dc0:	29040f44 	stp	w4, w3, [x26, #32]
   95dc4:	b9002b42 	str	w2, [x26, #40]
   95dc8:	97fffac2 	bl	948d0 <load_obj_xdir>
   95dcc:	35fffd80 	cbnz	w0, 95d7c <follow_path+0x16c>
   95dd0:	f9400ee1 	ldr	x1, [x23, #24]
   95dd4:	79407420 	ldrh	w0, [x1, #58]
   95dd8:	3940e423 	ldrb	w3, [x1, #57]
   95ddc:	3940e022 	ldrb	w2, [x1, #56]
   95de0:	2a002060 	orr	w0, w3, w0, lsl #8
   95de4:	2a002040 	orr	w0, w2, w0, lsl #8
   95de8:	f9000b40 	str	x0, [x26, #16]
   95dec:	39408420 	ldrb	w0, [x1, #33]
   95df0:	121f0000 	and	w0, w0, #0x2
   95df4:	39002f40 	strb	w0, [x26, #11]
   95df8:	17ffffa1 	b	95c7c <follow_path+0x6c>
   95dfc:	794006c0 	ldrh	w0, [x22, #2]
   95e00:	7100b81f 	cmp	w0, #0x2e
   95e04:	54fff621 	b.ne	95cc8 <follow_path+0xb8>  // b.any
   95e08:	794002c0 	ldrh	w0, [x22]
   95e0c:	7100b81f 	cmp	w0, #0x2e
   95e10:	54fff5c1 	b.ne	95cc8 <follow_path+0xb8>  // b.any
   95e14:	d2800000 	mov	x0, #0x0                   	// #0
   95e18:	91012344 	add	x4, x26, #0x48
   95e1c:	78357adf 	strh	wzr, [x22, x21, lsl #1]
   95e20:	52800403 	mov	w3, #0x20                  	// #32
   95e24:	528005c2 	mov	w2, #0x2e                  	// #46
   95e28:	6b00029f 	cmp	w20, w0
   95e2c:	1a829061 	csel	w1, w3, w2, ls  // ls = plast
   95e30:	38206881 	strb	w1, [x4, x0]
   95e34:	91000400 	add	x0, x0, #0x1
   95e38:	f1002c1f 	cmp	x0, #0xb
   95e3c:	54ffff61 	b.ne	95e28 <follow_path+0x218>  // b.any
   95e40:	321b0339 	orr	w25, w25, #0x20
   95e44:	39014f59 	strb	w25, [x26, #83]
   95e48:	1400005c 	b	95fb8 <follow_path+0x3a8>
   95e4c:	71007c3f 	cmp	w1, #0x1f
   95e50:	52800099 	mov	w25, #0x4                   	// #4
   95e54:	54fff329 	b.ls	95cb8 <follow_path+0xa8>  // b.plast
   95e58:	39c00260 	ldrsb	w0, [x19]
   95e5c:	52800b81 	mov	w1, #0x5c                  	// #92
   95e60:	528005e2 	mov	w2, #0x2f                  	// #47
   95e64:	6b01001f 	cmp	w0, w1
   95e68:	7a421004 	ccmp	w0, w2, #0x4, ne  // ne = any
   95e6c:	540000a1 	b.ne	95e80 <follow_path+0x270>  // b.any
   95e70:	38c01e60 	ldrsb	w0, [x19, #1]!
   95e74:	7100bc1f 	cmp	w0, #0x2f
   95e78:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
   95e7c:	54ffffa0 	b.eq	95e70 <follow_path+0x260>  // b.none
   95e80:	52800019 	mov	w25, #0x0                   	// #0
   95e84:	17ffff8d 	b	95cb8 <follow_path+0xa8>
   95e88:	78345adf 	strh	wzr, [x22, w20, uxtw #1]
   95e8c:	52800000 	mov	w0, #0x0                   	// #0
   95e90:	aa1603e2 	mov	x2, x22
   95e94:	794002c3 	ldrh	w3, [x22]
   95e98:	52800035 	mov	w21, #0x1                   	// #1
   95e9c:	52800004 	mov	w4, #0x0                   	// #0
   95ea0:	7100807f 	cmp	w3, #0x20
   95ea4:	54000161 	b.ne	95ed0 <follow_path+0x2c0>  // b.any
   95ea8:	2a0003f5 	mov	w21, w0
   95eac:	11000400 	add	w0, w0, #0x1
   95eb0:	d37f7c02 	ubfiz	x2, x0, #1, #32
   95eb4:	78626ac3 	ldrh	w3, [x22, x2]
   95eb8:	8b0202c2 	add	x2, x22, x2
   95ebc:	7100807f 	cmp	w3, #0x20
   95ec0:	54ffff40 	b.eq	95ea8 <follow_path+0x298>  // b.none
   95ec4:	11000ab5 	add	w21, w21, #0x2
   95ec8:	7100001f 	cmp	w0, #0x0
   95ecc:	1a9f07e4 	cset	w4, ne  // ne = any
   95ed0:	7100b87f 	cmp	w3, #0x2e
   95ed4:	32000723 	orr	w3, w25, #0x3
   95ed8:	8b2146c0 	add	x0, x22, w1, uxtw #1
   95edc:	7a401880 	ccmp	w4, #0x0, #0x0, ne  // ne = any
   95ee0:	12001c63 	and	w3, w3, #0xff
   95ee4:	1a991079 	csel	w25, w3, w25, ne  // ne = any
   95ee8:	14000002 	b	95ef0 <follow_path+0x2e0>
   95eec:	51000421 	sub	w1, w1, #0x1
   95ef0:	79400003 	ldrh	w3, [x0]
   95ef4:	2a1403e4 	mov	w4, w20
   95ef8:	d1000800 	sub	x0, x0, #0x2
   95efc:	2a0103f4 	mov	w20, w1
   95f00:	7100b87f 	cmp	w3, #0x2e
   95f04:	54001240 	b.eq	9614c <follow_path+0x53c>  // b.none
   95f08:	35ffff21 	cbnz	w1, 95eec <follow_path+0x2dc>
   95f0c:	91012340 	add	x0, x26, #0x48
   95f10:	91014f43 	add	x3, x26, #0x53
   95f14:	52800401 	mov	w1, #0x20                  	// #32
   95f18:	38001401 	strb	w1, [x0], #1
   95f1c:	eb03001f 	cmp	x0, x3
   95f20:	54ffffc1 	b.ne	95f18 <follow_path+0x308>  // b.any
   95f24:	79400040 	ldrh	w0, [x2]
   95f28:	340006e0 	cbz	w0, 96004 <follow_path+0x3f4>
   95f2c:	52800003 	mov	w3, #0x0                   	// #0
   95f30:	52800102 	mov	w2, #0x8                   	// #8
   95f34:	5280001b 	mov	w27, #0x0                   	// #0
   95f38:	b00000e5 	adrp	x5, b2000 <vtable for CPartition>
   95f3c:	7100801f 	cmp	w0, #0x20
   95f40:	54000860 	b.eq	9604c <follow_path+0x43c>  // b.none
   95f44:	7100b81f 	cmp	w0, #0x2e
   95f48:	7a550284 	ccmp	w20, w21, #0x4, eq  // eq = none
   95f4c:	54000801 	b.ne	9604c <follow_path+0x43c>  // b.any
   95f50:	6b02037f 	cmp	w27, w2
   95f54:	7a553284 	ccmp	w20, w21, #0x4, cc  // cc = lo, ul, last
   95f58:	54000d01 	b.ne	960f8 <follow_path+0x4e8>  // b.any
   95f5c:	71002c5f 	cmp	w2, #0xb
   95f60:	540016e0 	b.eq	9623c <follow_path+0x62c>  // b.none
   95f64:	6b15029f 	cmp	w20, w21
   95f68:	540011e0 	b.eq	961a4 <follow_path+0x594>  // b.none
   95f6c:	32000739 	orr	w25, w25, #0x3
   95f70:	12001f39 	and	w25, w25, #0xff
   95f74:	54001182 	b.cs	961a4 <follow_path+0x594>  // b.hs, b.nlast
   95f78:	39412340 	ldrb	w0, [x26, #72]
   95f7c:	7103941f 	cmp	w0, #0xe5
   95f80:	54000061 	b.ne	95f8c <follow_path+0x37c>  // b.any
   95f84:	528000a0 	mov	w0, #0x5                   	// #5
   95f88:	39012340 	strb	w0, [x26, #72]
   95f8c:	7100205f 	cmp	w2, #0x8
   95f90:	540012c0 	b.eq	961e8 <follow_path+0x5d8>  // b.none
   95f94:	121e0460 	and	w0, w3, #0xc
   95f98:	7100301f 	cmp	w0, #0xc
   95f9c:	54000080 	b.eq	95fac <follow_path+0x39c>  // b.none
   95fa0:	12000460 	and	w0, w3, #0x3
   95fa4:	71000c1f 	cmp	w0, #0x3
   95fa8:	540003c1 	b.ne	96020 <follow_path+0x410>  // b.any
   95fac:	321f0339 	orr	w25, w25, #0x2
   95fb0:	12001f39 	and	w25, w25, #0xff
   95fb4:	39014f59 	strb	w25, [x26, #83]
   95fb8:	aa1a03e0 	mov	x0, x26
   95fbc:	97fffe25 	bl	95850 <dir_find>
   95fc0:	39414f41 	ldrb	w1, [x26, #83]
   95fc4:	340006a0 	cbz	w0, 96098 <follow_path+0x488>
   95fc8:	7100101f 	cmp	w0, #0x4
   95fcc:	54001321 	b.ne	96230 <follow_path+0x620>  // b.any
   95fd0:	121e0022 	and	w2, w1, #0x4
   95fd4:	36281541 	tbz	w1, #5, 9627c <follow_path+0x66c>
   95fd8:	340005c2 	cbz	w2, 96090 <follow_path+0x480>
   95fdc:	12800fe1 	mov	w1, #0xffffff80            	// #-128
   95fe0:	52800000 	mov	w0, #0x0                   	// #0
   95fe4:	39014f41 	strb	w1, [x26, #83]
   95fe8:	a94153f3 	ldp	x19, x20, [sp, #16]
   95fec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95ff0:	a94363f7 	ldp	x23, x24, [sp, #48]
   95ff4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95ff8:	a94573fb 	ldp	x27, x28, [sp, #80]
   95ffc:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96000:	d65f03c0 	ret
   96004:	39412340 	ldrb	w0, [x26, #72]
   96008:	7103941f 	cmp	w0, #0xe5
   9600c:	54fffd41 	b.ne	95fb4 <follow_path+0x3a4>  // b.any
   96010:	528000a0 	mov	w0, #0x5                   	// #5
   96014:	52800003 	mov	w3, #0x0                   	// #0
   96018:	39012340 	strb	w0, [x26, #72]
   9601c:	d503201f 	nop
   96020:	121f0320 	and	w0, w25, #0x2
   96024:	35fffc80 	cbnz	w0, 95fb4 <follow_path+0x3a4>
   96028:	321c0320 	orr	w0, w25, #0x10
   9602c:	f240007f 	tst	x3, #0x1
   96030:	12001c00 	and	w0, w0, #0xff
   96034:	1a991019 	csel	w25, w0, w25, ne  // ne = any
   96038:	f27e007f 	tst	x3, #0x4
   9603c:	321d0320 	orr	w0, w25, #0x8
   96040:	12001c00 	and	w0, w0, #0xff
   96044:	1a991019 	csel	w25, w0, w25, ne  // ne = any
   96048:	17ffffdb 	b	95fb4 <follow_path+0x3a4>
   9604c:	32000739 	orr	w25, w25, #0x3
   96050:	12001f39 	and	w25, w25, #0xff
   96054:	78755ac0 	ldrh	w0, [x22, w21, uxtw #1]
   96058:	110006b5 	add	w21, w21, #0x1
   9605c:	35fff700 	cbnz	w0, 95f3c <follow_path+0x32c>
   96060:	17ffffc6 	b	95f78 <follow_path+0x368>
   96064:	f9400b42 	ldr	x2, [x26, #16]
   96068:	aa1a03e1 	mov	x1, x26
   9606c:	39402f40 	ldrb	w0, [x26, #11]
   96070:	b9400f44 	ldr	w4, [x26, #12]
   96074:	12185c42 	and	w2, w2, #0xffffff00
   96078:	b9405743 	ldr	w3, [x26, #84]
   9607c:	2a000042 	orr	w2, w2, w0
   96080:	f9400ee0 	ldr	x0, [x23, #24]
   96084:	29040b44 	stp	w4, w2, [x26, #32]
   96088:	b9002b43 	str	w3, [x26, #40]
   9608c:	97fff419 	bl	930f0 <init_alloc_info.isra.0>
   96090:	39400260 	ldrb	w0, [x19]
   96094:	17ffff01 	b	95c98 <follow_path+0x88>
   96098:	37100cc1 	tbnz	w1, #2, 96230 <follow_path+0x620>
   9609c:	39402b40 	ldrb	w0, [x26, #10]
   960a0:	36200fa0 	tbz	w0, #4, 96294 <follow_path+0x684>
   960a4:	394002e2 	ldrb	w2, [x23]
   960a8:	7100105f 	cmp	w2, #0x4
   960ac:	54fffdc0 	b.eq	96064 <follow_path+0x454>  // b.none
   960b0:	b9403341 	ldr	w1, [x26, #48]
   960b4:	9101e2e0 	add	x0, x23, #0x78
   960b8:	71000c5f 	cmp	w2, #0x3
   960bc:	92402021 	and	x1, x1, #0x1ff
   960c0:	8b010000 	add	x0, x0, x1
   960c4:	39406c02 	ldrb	w2, [x0, #27]
   960c8:	39406801 	ldrb	w1, [x0, #26]
   960cc:	33185c41 	bfi	w1, w2, #8, #24
   960d0:	54000080 	b.eq	960e0 <follow_path+0x4d0>  // b.none
   960d4:	b9000f41 	str	w1, [x26, #12]
   960d8:	39400260 	ldrb	w0, [x19]
   960dc:	17fffeef 	b	95c98 <follow_path+0x88>
   960e0:	39405402 	ldrb	w2, [x0, #21]
   960e4:	39405000 	ldrb	w0, [x0, #20]
   960e8:	33185c40 	bfi	w0, w2, #8, #24
   960ec:	2a004021 	orr	w1, w1, w0, lsl #16
   960f0:	b9000f41 	str	w1, [x26, #12]
   960f4:	17fffff9 	b	960d8 <follow_path+0x4c8>
   960f8:	7101fc1f 	cmp	w0, #0x7f
   960fc:	540002c8 	b.hi	96154 <follow_path+0x544>  // b.pmore
   96100:	52800561 	mov	w1, #0x2b                  	// #43
   96104:	9101e0a4 	add	x4, x5, #0x78
   96108:	14000003 	b	96114 <follow_path+0x504>
   9610c:	38c01c81 	ldrsb	w1, [x4, #1]!
   96110:	34000821 	cbz	w1, 96214 <follow_path+0x604>
   96114:	6b01001f 	cmp	w0, w1
   96118:	54ffffa1 	b.ne	9610c <follow_path+0x4fc>  // b.any
   9611c:	2a1903fc 	mov	w28, w25
   96120:	1400001a 	b	96188 <follow_path+0x578>
   96124:	12800fe2 	mov	w2, #0xffffff80            	// #-128
   96128:	aa1a03e0 	mov	x0, x26
   9612c:	52800001 	mov	w1, #0x0                   	// #0
   96130:	39014f42 	strb	w2, [x26, #83]
   96134:	97fff697 	bl	93b90 <dir_sdi>
   96138:	a94153f3 	ldp	x19, x20, [sp, #16]
   9613c:	a94363f7 	ldp	x23, x24, [sp, #48]
   96140:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96144:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96148:	d65f03c0 	ret
   9614c:	2a0403f4 	mov	w20, w4
   96150:	17ffff6f 	b	95f0c <follow_path+0x2fc>
   96154:	52806a41 	mov	w1, #0x352                 	// #850
   96158:	290d0fe2 	stp	w2, w3, [sp, #104]
   9615c:	321f033c 	orr	w28, w25, #0x2
   96160:	9400180c 	bl	9c190 <ff_uni2oem>
   96164:	2a0003e1 	mov	w1, w0
   96168:	294d0fe2 	ldp	w2, w3, [sp, #104]
   9616c:	12001f9c 	and	w28, w28, #0xff
   96170:	12003c00 	and	w0, w0, #0xffff
   96174:	900000e5 	adrp	x5, b2000 <vtable for CPartition>
   96178:	36380201 	tbz	w1, #7, 961b8 <follow_path+0x5a8>
   9617c:	12001800 	and	w0, w0, #0x7f
   96180:	3860cb00 	ldrb	w0, [x24, w0, sxtw]
   96184:	35000900 	cbnz	w0, 962a4 <follow_path+0x694>
   96188:	32000799 	orr	w25, w28, #0x3
   9618c:	52800be0 	mov	w0, #0x5f                  	// #95
   96190:	12001f39 	and	w25, w25, #0xff
   96194:	8b3b4341 	add	x1, x26, w27, uxtw
   96198:	1100077b 	add	w27, w27, #0x1
   9619c:	39012020 	strb	w0, [x1, #72]
   961a0:	17ffffad 	b	96054 <follow_path+0x444>
   961a4:	531e1463 	ubfiz	w3, w3, #2, #6
   961a8:	2a1403f5 	mov	w21, w20
   961ac:	52800162 	mov	w2, #0xb                   	// #11
   961b0:	5280011b 	mov	w27, #0x8                   	// #8
   961b4:	17ffffa8 	b	96054 <follow_path+0x444>
   961b8:	7103fc1f 	cmp	w0, #0xff
   961bc:	54fffe49 	b.ls	96184 <follow_path+0x574>  // b.plast
   961c0:	51000441 	sub	w1, w2, #0x1
   961c4:	6b1b003f 	cmp	w1, w27
   961c8:	540001e9 	b.ls	96204 <follow_path+0x5f4>  // b.plast
   961cc:	53087c04 	lsr	w4, w0, #8
   961d0:	8b3b4341 	add	x1, x26, w27, uxtw
   961d4:	2a1c03f9 	mov	w25, w28
   961d8:	12001c00 	and	w0, w0, #0xff
   961dc:	1100077b 	add	w27, w27, #0x1
   961e0:	39012024 	strb	w4, [x1, #72]
   961e4:	17ffffec 	b	96194 <follow_path+0x584>
   961e8:	531e1463 	ubfiz	w3, w3, #2, #6
   961ec:	121e0460 	and	w0, w3, #0xc
   961f0:	7100301f 	cmp	w0, #0xc
   961f4:	54ffedc0 	b.eq	95fac <follow_path+0x39c>  // b.none
   961f8:	121f0320 	and	w0, w25, #0x2
   961fc:	34fff160 	cbz	w0, 96028 <follow_path+0x418>
   96200:	17ffff6d 	b	95fb4 <follow_path+0x3a4>
   96204:	32000739 	orr	w25, w25, #0x3
   96208:	2a0203fb 	mov	w27, w2
   9620c:	12001f39 	and	w25, w25, #0xff
   96210:	17ffff91 	b	96054 <follow_path+0x444>
   96214:	51010401 	sub	w1, w0, #0x41
   96218:	12003c21 	and	w1, w1, #0xffff
   9621c:	7100643f 	cmp	w1, #0x19
   96220:	540001e8 	b.hi	9625c <follow_path+0x64c>  // b.pmore
   96224:	321f0063 	orr	w3, w3, #0x2
   96228:	12001c00 	and	w0, w0, #0xff
   9622c:	17ffffda 	b	96194 <follow_path+0x584>
   96230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96234:	a94573fb 	ldp	x27, x28, [sp, #80]
   96238:	17fffed1 	b	95d7c <follow_path+0x16c>
   9623c:	39412340 	ldrb	w0, [x26, #72]
   96240:	32000739 	orr	w25, w25, #0x3
   96244:	12001f39 	and	w25, w25, #0xff
   96248:	7103941f 	cmp	w0, #0xe5
   9624c:	54ffea41 	b.ne	95f94 <follow_path+0x384>  // b.any
   96250:	528000a0 	mov	w0, #0x5                   	// #5
   96254:	39012340 	strb	w0, [x26, #72]
   96258:	17ffff4f 	b	95f94 <follow_path+0x384>
   9625c:	51018401 	sub	w1, w0, #0x61
   96260:	12003c21 	and	w1, w1, #0xffff
   96264:	7100643f 	cmp	w1, #0x19
   96268:	54000068 	b.hi	96274 <follow_path+0x664>  // b.pmore
   9626c:	51008000 	sub	w0, w0, #0x20
   96270:	32000063 	orr	w3, w3, #0x1
   96274:	12001c00 	and	w0, w0, #0xff
   96278:	17ffffc7 	b	96194 <follow_path+0x584>
   9627c:	7100005f 	cmp	w2, #0x0
   96280:	528000a1 	mov	w1, #0x5                   	// #5
   96284:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   96288:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9628c:	a94573fb 	ldp	x27, x28, [sp, #80]
   96290:	17fffebb 	b	95d7c <follow_path+0x16c>
   96294:	528000a0 	mov	w0, #0x5                   	// #5
   96298:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9629c:	a94573fb 	ldp	x27, x28, [sp, #80]
   962a0:	17fffeb7 	b	95d7c <follow_path+0x16c>
   962a4:	2a1c03f9 	mov	w25, w28
   962a8:	17ffff96 	b	96100 <follow_path+0x4f0>
   962ac:	d503201f 	nop

00000000000962b0 <dir_register>:
   962b0:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   962b4:	910003fd 	mov	x29, sp
   962b8:	52801401 	mov	w1, #0xa0                  	// #160
   962bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   962c0:	a90363f7 	stp	x23, x24, [sp, #48]
   962c4:	528000d8 	mov	w24, #0x6                   	// #6
   962c8:	39414c16 	ldrb	w22, [x0, #83]
   962cc:	6a0102d6 	ands	w22, w22, w1
   962d0:	54000d61 	b.ne	9647c <dir_register+0x1cc>  // b.any
   962d4:	a90153f3 	stp	x19, x20, [sp, #16]
   962d8:	aa0003f3 	mov	x19, x0
   962dc:	f9400014 	ldr	x20, [x0]
   962e0:	a9046bf9 	stp	x25, x26, [sp, #64]
   962e4:	52800019 	mov	w25, #0x0                   	// #0
   962e8:	f9400a81 	ldr	x1, [x20, #16]
   962ec:	79400020 	ldrh	w0, [x1]
   962f0:	340000a0 	cbz	w0, 96304 <dir_register+0x54>
   962f4:	d503201f 	nop
   962f8:	11000739 	add	w25, w25, #0x1
   962fc:	78795820 	ldrh	w0, [x1, w25, uxtw #1]
   96300:	35ffffc0 	cbnz	w0, 962f8 <dir_register+0x48>
   96304:	39400280 	ldrb	w0, [x20]
   96308:	7100101f 	cmp	w0, #0x4
   9630c:	540011a0 	b.eq	96540 <dir_register+0x290>  // b.none
   96310:	a90573fb 	stp	x27, x28, [sp, #80]
   96314:	9101227c 	add	x28, x19, #0x48
   96318:	9101c3e0 	add	x0, sp, #0x70
   9631c:	aa1c03e1 	mov	x1, x28
   96320:	52800182 	mov	w2, #0xc                   	// #12
   96324:	97fff36b 	bl	930d0 <mem_cpy.part.0>
   96328:	3941efe0 	ldrb	w0, [sp, #123]
   9632c:	36000ba0 	tbz	w0, #0, 964a0 <dir_register+0x1f0>
   96330:	52800803 	mov	w3, #0x40                  	// #64
   96334:	9101c3e1 	add	x1, sp, #0x70
   96338:	52800162 	mov	w2, #0xb                   	// #11
   9633c:	aa1c03e0 	mov	x0, x28
   96340:	39014e63 	strb	w3, [x19, #83]
   96344:	5280003a 	mov	w26, #0x1                   	// #1
   96348:	52820435 	mov	w21, #0x1021                	// #4129
   9634c:	72a00035 	movk	w21, #0x1, lsl #16
   96350:	9101a3fb 	add	x27, sp, #0x68
   96354:	97fff35f 	bl	930d0 <mem_cpy.part.0>
   96358:	52800fd7 	mov	w23, #0x7e                  	// #126
   9635c:	2a1a03e1 	mov	w1, w26
   96360:	528000e4 	mov	w4, #0x7                   	// #7
   96364:	d503201f 	nop
   96368:	12000c23 	and	w3, w1, #0xf
   9636c:	51000482 	sub	w2, w4, #0x1
   96370:	1100c060 	add	w0, w3, #0x30
   96374:	1100dc63 	add	w3, w3, #0x37
   96378:	7100e41f 	cmp	w0, #0x39
   9637c:	1a808060 	csel	w0, w3, w0, hi  // hi = pmore
   96380:	38244b60 	strb	w0, [x27, w4, uxtw]
   96384:	71003c3f 	cmp	w1, #0xf
   96388:	2a0203e4 	mov	w4, w2
   9638c:	53047c21 	lsr	w1, w1, #4
   96390:	54fffec8 	b.hi	96368 <dir_register+0xb8>  // b.pmore
   96394:	38224b77 	strb	w23, [x27, w2, uxtw]
   96398:	34001b02 	cbz	w2, 966f8 <dir_register+0x448>
   9639c:	aa1c03e3 	mov	x3, x28
   963a0:	52800000 	mov	w0, #0x0                   	// #0
   963a4:	14000003 	b	963b0 <dir_register+0x100>
   963a8:	6b00005f 	cmp	w2, w0
   963ac:	54000c60 	b.eq	96538 <dir_register+0x288>  // b.none
   963b0:	39400064 	ldrb	w4, [x3]
   963b4:	2a0003e1 	mov	w1, w0
   963b8:	91000463 	add	x3, x3, #0x1
   963bc:	11000400 	add	w0, w0, #0x1
   963c0:	7100809f 	cmp	w4, #0x20
   963c4:	54ffff21 	b.ne	963a8 <dir_register+0xf8>  // b.any
   963c8:	71001c5f 	cmp	w2, #0x7
   963cc:	11000420 	add	w0, w1, #0x1
   963d0:	52800403 	mov	w3, #0x20                  	// #32
   963d4:	54000068 	b.hi	963e0 <dir_register+0x130>  // b.pmore
   963d8:	38624b63 	ldrb	w3, [x27, w2, uxtw]
   963dc:	11000442 	add	w2, w2, #0x1
   963e0:	71001c1f 	cmp	w0, #0x7
   963e4:	38214b83 	strb	w3, [x28, w1, uxtw]
   963e8:	2a0003e1 	mov	w1, w0
   963ec:	54fffee9 	b.ls	963c8 <dir_register+0x118>  // b.plast
   963f0:	aa1303e0 	mov	x0, x19
   963f4:	97fffd17 	bl	95850 <dir_find>
   963f8:	2a0003f8 	mov	w24, w0
   963fc:	350004a0 	cbnz	w0, 96490 <dir_register+0x1e0>
   96400:	1100075a 	add	w26, w26, #0x1
   96404:	7101935f 	cmp	w26, #0x64
   96408:	54002700 	b.eq	968e8 <dir_register+0x638>  // b.none
   9640c:	f9400a85 	ldr	x5, [x20, #16]
   96410:	9101c3e1 	add	x1, sp, #0x70
   96414:	52800162 	mov	w2, #0xb                   	// #11
   96418:	aa1c03e0 	mov	x0, x28
   9641c:	97fff32d 	bl	930d0 <mem_cpy.part.0>
   96420:	7100175f 	cmp	w26, #0x5
   96424:	2a1a03e1 	mov	w1, w26
   96428:	54fff9c9 	b.ls	96360 <dir_register+0xb0>  // b.plast
   9642c:	794000a2 	ldrh	w2, [x5]
   96430:	34fff982 	cbz	w2, 96360 <dir_register+0xb0>
   96434:	d503201f 	nop
   96438:	910008a5 	add	x5, x5, #0x2
   9643c:	52800200 	mov	w0, #0x10                  	// #16
   96440:	12000043 	and	w3, w2, #0x1
   96444:	53017c42 	lsr	w2, w2, #1
   96448:	0b010461 	add	w1, w3, w1, lsl #1
   9644c:	f270003f 	tst	x1, #0x10000
   96450:	4a150023 	eor	w3, w1, w21
   96454:	1a811061 	csel	w1, w3, w1, ne  // ne = any
   96458:	71000400 	subs	w0, w0, #0x1
   9645c:	54ffff21 	b.ne	96440 <dir_register+0x190>  // b.any
   96460:	794000a2 	ldrh	w2, [x5]
   96464:	35fffea2 	cbnz	w2, 96438 <dir_register+0x188>
   96468:	17ffffbe 	b	96360 <dir_register+0xb0>
   9646c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96470:	2a0003f8 	mov	w24, w0
   96474:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96478:	a94573fb 	ldp	x27, x28, [sp, #80]
   9647c:	2a1803e0 	mov	w0, w24
   96480:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96484:	a94363f7 	ldp	x23, x24, [sp, #48]
   96488:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   9648c:	d65f03c0 	ret
   96490:	7100101f 	cmp	w0, #0x4
   96494:	54001221 	b.ne	966d8 <dir_register+0x428>  // b.any
   96498:	3941efe0 	ldrb	w0, [sp, #123]
   9649c:	39014e60 	strb	w0, [x19, #83]
   964a0:	37080f80 	tbnz	w0, #1, 96690 <dir_register+0x3e0>
   964a4:	52800021 	mov	w1, #0x1                   	// #1
   964a8:	aa1303e0 	mov	x0, x19
   964ac:	97fff921 	bl	94930 <dir_alloc>
   964b0:	2a0003f8 	mov	w24, w0
   964b4:	35001120 	cbnz	w0, 966d8 <dir_register+0x428>
   964b8:	f9401e61 	ldr	x1, [x19, #56]
   964bc:	f9403a80 	ldr	x0, [x20, #112]
   964c0:	eb00003f 	cmp	x1, x0
   964c4:	540000a0 	b.eq	964d8 <dir_register+0x228>  // b.none
   964c8:	aa1403e0 	mov	x0, x20
   964cc:	97fff3e1 	bl	93450 <move_window.part.0>
   964d0:	2a0003f8 	mov	w24, w0
   964d4:	35001020 	cbnz	w0, 966d8 <dir_register+0x428>
   964d8:	f9402260 	ldr	x0, [x19, #64]
   964dc:	91008001 	add	x1, x0, #0x20
   964e0:	3800141f 	strb	wzr, [x0], #1
   964e4:	eb01001f 	cmp	x0, x1
   964e8:	54ffffc1 	b.ne	964e0 <dir_register+0x230>  // b.any
   964ec:	aa1c03e1 	mov	x1, x28
   964f0:	52800162 	mov	w2, #0xb                   	// #11
   964f4:	f9402260 	ldr	x0, [x19, #64]
   964f8:	97fff2f6 	bl	930d0 <mem_cpy.part.0>
   964fc:	39414e60 	ldrb	w0, [x19, #83]
   96500:	52800021 	mov	w1, #0x1                   	// #1
   96504:	52800018 	mov	w24, #0x0                   	// #0
   96508:	f9402262 	ldr	x2, [x19, #64]
   9650c:	121d0400 	and	w0, w0, #0x18
   96510:	39003040 	strb	w0, [x2, #12]
   96514:	2a1803e0 	mov	w0, w24
   96518:	39000e81 	strb	w1, [x20, #3]
   9651c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96520:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96524:	a94363f7 	ldp	x23, x24, [sp, #48]
   96528:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9652c:	a94573fb 	ldp	x27, x28, [sp, #80]
   96530:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96534:	d65f03c0 	ret
   96538:	2a0203e1 	mov	w1, w2
   9653c:	17ffffa3 	b	963c8 <dir_register+0x118>
   96540:	11003b35 	add	w21, w25, #0xe
   96544:	52911139 	mov	w25, #0x8889                	// #34953
   96548:	72b11119 	movk	w25, #0x8888, lsl #16
   9654c:	aa1303e0 	mov	x0, x19
   96550:	9bb97eb5 	umull	x21, w21, w25
   96554:	d363feb5 	lsr	x21, x21, #35
   96558:	11000aa1 	add	w1, w21, #0x2
   9655c:	97fff8f5 	bl	94930 <dir_alloc>
   96560:	2a0003f8 	mov	w24, w0
   96564:	35000fc0 	cbnz	w0, 9675c <dir_register+0x4ac>
   96568:	b9403262 	ldr	w2, [x19, #48]
   9656c:	110006a0 	add	w0, w21, #0x1
   96570:	39402e61 	ldrb	w1, [x19, #11]
   96574:	4b001440 	sub	w0, w2, w0, lsl #5
   96578:	b9005660 	str	w0, [x19, #84]
   9657c:	361001e1 	tbz	w1, #2, 965b8 <dir_register+0x308>
   96580:	121d7820 	and	w0, w1, #0xfffffffb
   96584:	12001c00 	and	w0, w0, #0xff
   96588:	71000c1f 	cmp	w0, #0x3
   9658c:	39002e60 	strb	w0, [x19, #11]
   96590:	54001a20 	b.eq	968d4 <dir_register+0x624>  // b.none
   96594:	b9403662 	ldr	w2, [x19, #52]
   96598:	12800003 	mov	w3, #0xffffffff            	// #-1
   9659c:	91007261 	add	x1, x19, #0x1c
   965a0:	aa1303e0 	mov	x0, x19
   965a4:	97fff6ef 	bl	94160 <fill_last_frag.isra.0>
   965a8:	2a0003f8 	mov	w24, w0
   965ac:	35000d80 	cbnz	w0, 9675c <dir_register+0x4ac>
   965b0:	b9400e60 	ldr	w0, [x19, #12]
   965b4:	35000a60 	cbnz	w0, 96700 <dir_register+0x450>
   965b8:	a9414e80 	ldp	x0, x19, [x20, #16]
   965bc:	91010262 	add	x2, x19, #0x40
   965c0:	aa1303e1 	mov	x1, x19
   965c4:	d503201f 	nop
   965c8:	3800143f 	strb	wzr, [x1], #1
   965cc:	eb02003f 	cmp	x1, x2
   965d0:	54ffffc1 	b.ne	965c8 <dir_register+0x318>  // b.any
   965d4:	12800f44 	mov	w4, #0xffffff85            	// #-123
   965d8:	128007e3 	mov	w3, #0xffffffc0            	// #-64
   965dc:	52800008 	mov	w8, #0x0                   	// #0
   965e0:	52800009 	mov	w9, #0x0                   	// #0
   965e4:	52800022 	mov	w2, #0x1                   	// #1
   965e8:	52800801 	mov	w1, #0x40                  	// #64
   965ec:	39000264 	strb	w4, [x19]
   965f0:	d2800007 	mov	x7, #0x0                   	// #0
   965f4:	128007ca 	mov	w10, #0xffffffc1            	// #-63
   965f8:	39008263 	strb	w3, [x19, #32]
   965fc:	d503201f 	nop
   96600:	11000423 	add	w3, w1, #0x1
   96604:	38214a6a 	strb	w10, [x19, w1, uxtw]
   96608:	11000821 	add	w1, w1, #0x2
   9660c:	38234a7f 	strb	wzr, [x19, w3, uxtw]
   96610:	1400000f 	b	9664c <dir_register+0x39c>
   96614:	78646802 	ldrh	w2, [x0, x4]
   96618:	11000505 	add	w5, w8, #0x1
   9661c:	12001c44 	and	w4, w2, #0xff
   96620:	53087c43 	lsr	w3, w2, #8
   96624:	340001c2 	cbz	w2, 9665c <dir_register+0x3ac>
   96628:	12001ca8 	and	w8, w5, #0xff
   9662c:	92401ca7 	and	x7, x5, #0xff
   96630:	8b250406 	add	x6, x0, w5, uxtb #1
   96634:	8b214265 	add	x5, x19, w1, uxtw
   96638:	38214a64 	strb	w4, [x19, w1, uxtw]
   9663c:	11000821 	add	w1, w1, #0x2
   96640:	72001038 	ands	w24, w1, #0x1f
   96644:	390004a3 	strb	w3, [x5, #1]
   96648:	54000180 	b.eq	96678 <dir_register+0x3c8>  // b.none
   9664c:	d37ff8e4 	lsl	x4, x7, #1
   96650:	52800003 	mov	w3, #0x0                   	// #0
   96654:	8b040006 	add	x6, x0, x4
   96658:	35fffde2 	cbnz	w2, 96614 <dir_register+0x364>
   9665c:	52800004 	mov	w4, #0x0                   	// #0
   96660:	8b214265 	add	x5, x19, w1, uxtw
   96664:	38214a64 	strb	w4, [x19, w1, uxtw]
   96668:	11000821 	add	w1, w1, #0x2
   9666c:	72001038 	ands	w24, w1, #0x1f
   96670:	390004a3 	strb	w3, [x5, #1]
   96674:	54fffec1 	b.ne	9664c <dir_register+0x39c>  // b.any
   96678:	11000523 	add	w3, w9, #0x1
   9667c:	794000c4 	ldrh	w4, [x6]
   96680:	12001c63 	and	w3, w3, #0xff
   96684:	340007a4 	cbz	w4, 96778 <dir_register+0x4c8>
   96688:	2a0303e9 	mov	w9, w3
   9668c:	17ffffdd 	b	96600 <dir_register+0x350>
   96690:	11003339 	add	w25, w25, #0xc
   96694:	529d89fa 	mov	w26, #0xec4f                	// #60495
   96698:	72a9d89a 	movk	w26, #0x4ec4, lsl #16
   9669c:	aa1303e0 	mov	x0, x19
   966a0:	9bba7f3a 	umull	x26, w25, w26
   966a4:	d362ff5a 	lsr	x26, x26, #34
   966a8:	11000741 	add	w1, w26, #0x1
   966ac:	97fff8a1 	bl	94930 <dir_alloc>
   966b0:	2a0003f8 	mov	w24, w0
   966b4:	35000120 	cbnz	w0, 966d8 <dir_register+0x428>
   966b8:	7100333f 	cmp	w25, #0xc
   966bc:	54ffefe9 	b.ls	964b8 <dir_register+0x208>  // b.plast
   966c0:	b9403261 	ldr	w1, [x19, #48]
   966c4:	aa1303e0 	mov	x0, x19
   966c8:	4b1a1421 	sub	w1, w1, w26, lsl #5
   966cc:	97fff531 	bl	93b90 <dir_sdi>
   966d0:	2a0003f8 	mov	w24, w0
   966d4:	34000620 	cbz	w0, 96798 <dir_register+0x4e8>
   966d8:	2a1803e0 	mov	w0, w24
   966dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   966e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   966e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   966e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   966ec:	a94573fb 	ldp	x27, x28, [sp, #80]
   966f0:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   966f4:	d65f03c0 	ret
   966f8:	52800001 	mov	w1, #0x0                   	// #0
   966fc:	17ffff33 	b	963c8 <dir_register+0x118>
   96700:	aa1303e1 	mov	x1, x19
   96704:	9101c3e0 	add	x0, sp, #0x70
   96708:	97fff872 	bl	948d0 <load_obj_xdir>
   9670c:	2a0003f8 	mov	w24, w0
   96710:	35000260 	cbnz	w0, 9675c <dir_register+0x4ac>
   96714:	79401681 	ldrh	w1, [x20, #10]
   96718:	52804004 	mov	w4, #0x200                 	// #512
   9671c:	9101c3e0 	add	x0, sp, #0x70
   96720:	f9400a63 	ldr	x3, [x19, #16]
   96724:	f9400e82 	ldr	x2, [x20, #24]
   96728:	9ba40c21 	umaddl	x1, w1, w4, x3
   9672c:	f9000a61 	str	x1, [x19, #16]
   96730:	f9001c41 	str	x1, [x2, #56]
   96734:	f9400a62 	ldr	x2, [x19, #16]
   96738:	f9400e81 	ldr	x1, [x20, #24]
   9673c:	f9001422 	str	x2, [x1, #40]
   96740:	39402e61 	ldrb	w1, [x19, #11]
   96744:	f9400e82 	ldr	x2, [x20, #24]
   96748:	32000021 	orr	w1, w1, #0x1
   9674c:	39008441 	strb	w1, [x2, #33]
   96750:	97fff8b0 	bl	94a10 <store_xdir>
   96754:	2a0003f8 	mov	w24, w0
   96758:	34fff300 	cbz	w0, 965b8 <dir_register+0x308>
   9675c:	2a1803e0 	mov	w0, w24
   96760:	a94153f3 	ldp	x19, x20, [sp, #16]
   96764:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96768:	a94363f7 	ldp	x23, x24, [sp, #48]
   9676c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96770:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96774:	d65f03c0 	ret
   96778:	11000929 	add	w9, w9, #0x2
   9677c:	39008e68 	strb	w8, [x19, #35]
   96780:	39000669 	strb	w9, [x19, #1]
   96784:	97fff237 	bl	93060 <xname_sum>
   96788:	79004a60 	strh	w0, [x19, #36]
   9678c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96790:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96794:	17ffff3a 	b	9647c <dir_register+0x1cc>
   96798:	91014e63 	add	x3, x19, #0x53
   9679c:	aa1c03e1 	mov	x1, x28
   967a0:	38401422 	ldrb	w2, [x1], #1
   967a4:	531902c0 	ubfiz	w0, w22, #7, #1
   967a8:	2a560416 	orr	w22, w0, w22, lsr #1
   967ac:	0b360056 	add	w22, w2, w22, uxtb
   967b0:	12001ed6 	and	w22, w22, #0xff
   967b4:	eb03003f 	cmp	x1, x3
   967b8:	54ffff41 	b.ne	967a0 <dir_register+0x4f0>  // b.any
   967bc:	900000f7 	adrp	x23, b2000 <vtable for CPartition>
   967c0:	910362f7 	add	x23, x23, #0xd8
   967c4:	910302f7 	add	x23, x23, #0xc0
   967c8:	528001f5 	mov	w21, #0xf                   	// #15
   967cc:	d503201f 	nop
   967d0:	f9401e61 	ldr	x1, [x19, #56]
   967d4:	f9403a80 	ldr	x0, [x20, #112]
   967d8:	eb00003f 	cmp	x1, x0
   967dc:	54000080 	b.eq	967ec <dir_register+0x53c>  // b.none
   967e0:	aa1403e0 	mov	x0, x20
   967e4:	97fff31b 	bl	93450 <move_window.part.0>
   967e8:	35ffe420 	cbnz	w0, 9646c <dir_register+0x1bc>
   967ec:	f9402265 	ldr	x5, [x19, #64]
   967f0:	12001f42 	and	w2, w26, #0xff
   967f4:	528001a0 	mov	w0, #0xd                   	// #13
   967f8:	51000442 	sub	w2, w2, #0x1
   967fc:	12001f4a 	and	w10, w26, #0xff
   96800:	52800001 	mov	w1, #0x0                   	// #0
   96804:	52800023 	mov	w3, #0x1                   	// #1
   96808:	f9400a87 	ldr	x7, [x20, #16]
   9680c:	1b007c42 	mul	w2, w2, w0
   96810:	529fffe8 	mov	w8, #0xffff                	// #65535
   96814:	52800000 	mov	w0, #0x0                   	// #0
   96818:	12800009 	mov	w9, #0xffffffff            	// #-1
   9681c:	7800b0b5 	sturh	w21, [x5, #11]
   96820:	390034b6 	strb	w22, [x5, #13]
   96824:	790034bf 	strh	wzr, [x5, #26]
   96828:	14000009 	b	9684c <dir_register+0x59c>
   9682c:	54000360 	b.eq	96898 <dir_register+0x5e8>  // b.none
   96830:	38644ae2 	ldrb	w2, [x23, w4, uxtw]
   96834:	529fffe0 	mov	w0, #0xffff                	// #65535
   96838:	782268a9 	strh	w9, [x5, x2]
   9683c:	7100343f 	cmp	w1, #0xd
   96840:	2a0603e2 	mov	w2, w6
   96844:	54000200 	b.eq	96884 <dir_register+0x5d4>  // b.none
   96848:	38614ae3 	ldrb	w3, [x23, w1, uxtw]
   9684c:	6b08001f 	cmp	w0, w8
   96850:	92401c63 	and	x3, x3, #0xff
   96854:	11000424 	add	w4, w1, #0x1
   96858:	54000360 	b.eq	968c4 <dir_register+0x614>  // b.none
   9685c:	786258e0 	ldrh	w0, [x7, w2, uxtw #1]
   96860:	7100349f 	cmp	w4, #0xd
   96864:	11000446 	add	w6, w2, #0x1
   96868:	11000821 	add	w1, w1, #0x2
   9686c:	782368a0 	strh	w0, [x5, x3]
   96870:	34fffde0 	cbz	w0, 9682c <dir_register+0x57c>
   96874:	2a0403e1 	mov	w1, w4
   96878:	2a0603e2 	mov	w2, w6
   9687c:	7100343f 	cmp	w1, #0xd
   96880:	54fffe41 	b.ne	96848 <dir_register+0x598>  // b.any
   96884:	529fffe1 	mov	w1, #0xffff                	// #65535
   96888:	6b01001f 	cmp	w0, w1
   9688c:	54000060 	b.eq	96898 <dir_register+0x5e8>  // b.none
   96890:	786658e0 	ldrh	w0, [x7, w6, uxtw #1]
   96894:	35000040 	cbnz	w0, 9689c <dir_register+0x5ec>
   96898:	321a014a 	orr	w10, w10, #0x40
   9689c:	52800022 	mov	w2, #0x1                   	// #1
   968a0:	390000aa 	strb	w10, [x5]
   968a4:	52800001 	mov	w1, #0x0                   	// #0
   968a8:	aa1303e0 	mov	x0, x19
   968ac:	39000e82 	strb	w2, [x20, #3]
   968b0:	97fff714 	bl	94500 <dir_next>
   968b4:	35ffddc0 	cbnz	w0, 9646c <dir_register+0x1bc>
   968b8:	7100075a 	subs	w26, w26, #0x1
   968bc:	54fff8a1 	b.ne	967d0 <dir_register+0x520>  // b.any
   968c0:	17fffefe 	b	964b8 <dir_register+0x208>
   968c4:	2a0403e1 	mov	w1, w4
   968c8:	2a0203e6 	mov	w6, w2
   968cc:	782368a9 	strh	w9, [x5, x3]
   968d0:	17ffffdb 	b	9683c <dir_register+0x58c>
   968d4:	aa1303e0 	mov	x0, x19
   968d8:	97fff8e2 	bl	94c60 <fill_first_frag.part.0>
   968dc:	2a0003f8 	mov	w24, w0
   968e0:	34ffe5a0 	cbz	w0, 96594 <dir_register+0x2e4>
   968e4:	17ffff9e 	b	9675c <dir_register+0x4ac>
   968e8:	528000f8 	mov	w24, #0x7                   	// #7
   968ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   968f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   968f4:	a94573fb 	ldp	x27, x28, [sp, #80]
   968f8:	17fffee1 	b	9647c <dir_register+0x1cc>
   968fc:	d503201f 	nop

0000000000096900 <validate>:
   96900:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96904:	910003fd 	mov	x29, sp
   96908:	a90153f3 	stp	x19, x20, [sp, #16]
   9690c:	aa0103f4 	mov	x20, x1
   96910:	b4000140 	cbz	x0, 96938 <validate+0x38>
   96914:	aa0003f3 	mov	x19, x0
   96918:	f9400000 	ldr	x0, [x0]
   9691c:	b40000e0 	cbz	x0, 96938 <validate+0x38>
   96920:	39400001 	ldrb	w1, [x0]
   96924:	340000a1 	cbz	w1, 96938 <validate+0x38>
   96928:	79401262 	ldrh	w2, [x19, #8]
   9692c:	79400c01 	ldrh	w1, [x0, #6]
   96930:	6b01005f 	cmp	w2, w1
   96934:	540000e0 	b.eq	96950 <validate+0x50>  // b.none
   96938:	52800120 	mov	w0, #0x9                   	// #9
   9693c:	d2800001 	mov	x1, #0x0                   	// #0
   96940:	f9000281 	str	x1, [x20]
   96944:	a94153f3 	ldp	x19, x20, [sp, #16]
   96948:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9694c:	d65f03c0 	ret
   96950:	f9401000 	ldr	x0, [x0, #32]
   96954:	94001593 	bl	9bfa0 <ff_req_grant>
   96958:	34000140 	cbz	w0, 96980 <validate+0x80>
   9695c:	f9400260 	ldr	x0, [x19]
   96960:	39400400 	ldrb	w0, [x0, #1]
   96964:	94001493 	bl	9bbb0 <disk_status>
   96968:	36000120 	tbz	w0, #0, 9698c <validate+0x8c>
   9696c:	f9400260 	ldr	x0, [x19]
   96970:	b4fffe40 	cbz	x0, 96938 <validate+0x38>
   96974:	f9401000 	ldr	x0, [x0, #32]
   96978:	9400159e 	bl	9bff0 <ff_rel_grant>
   9697c:	17ffffef 	b	96938 <validate+0x38>
   96980:	528001e0 	mov	w0, #0xf                   	// #15
   96984:	d2800001 	mov	x1, #0x0                   	// #0
   96988:	17ffffee 	b	96940 <validate+0x40>
   9698c:	52800000 	mov	w0, #0x0                   	// #0
   96990:	f9400261 	ldr	x1, [x19]
   96994:	17ffffeb 	b	96940 <validate+0x40>
   96998:	d503201f 	nop
   9699c:	d503201f 	nop

00000000000969a0 <f_mount>:
   969a0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   969a4:	910003fd 	mov	x29, sp
   969a8:	a90403e1 	stp	x1, x0, [sp, #64]
   969ac:	910163e0 	add	x0, sp, #0x58
   969b0:	a90153f3 	stp	x19, x20, [sp, #16]
   969b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   969b8:	12001c56 	and	w22, w2, #0xff
   969bc:	f9002fe1 	str	x1, [sp, #88]
   969c0:	97fff05c 	bl	92b30 <get_ldnumber>
   969c4:	37f80700 	tbnz	w0, #31, 96aa4 <f_mount+0x104>
   969c8:	2a0003f4 	mov	w20, w0
   969cc:	90000113 	adrp	x19, b6000 <s_OldInfo+0x68>
   969d0:	91392273 	add	x19, x19, #0xe48
   969d4:	f9001bf7 	str	x23, [sp, #48]
   969d8:	93407e97 	sxtw	x23, w20
   969dc:	91002260 	add	x0, x19, #0x8
   969e0:	f8777815 	ldr	x21, [x0, x23, lsl #3]
   969e4:	b40000b5 	cbz	x21, 969f8 <f_mount+0x58>
   969e8:	f94012a0 	ldr	x0, [x21, #32]
   969ec:	94001561 	bl	9bf70 <ff_del_syncobj>
   969f0:	340004c0 	cbz	w0, 96a88 <f_mount+0xe8>
   969f4:	390002bf 	strb	wzr, [x21]
   969f8:	f94027e2 	ldr	x2, [sp, #72]
   969fc:	b40000e2 	cbz	x2, 96a18 <f_mount+0x78>
   96a00:	aa0203e1 	mov	x1, x2
   96a04:	2a1403e0 	mov	w0, w20
   96a08:	3802043f 	strb	wzr, [x1], #32
   96a0c:	94001549 	bl	9bf30 <ff_cre_syncobj>
   96a10:	340003c0 	cbz	w0, 96a88 <f_mount+0xe8>
   96a14:	f94027e2 	ldr	x2, [sp, #72]
   96a18:	91002273 	add	x19, x19, #0x8
   96a1c:	52800014 	mov	w20, #0x0                   	// #0
   96a20:	f8377a62 	str	x2, [x19, x23, lsl #3]
   96a24:	350000f6 	cbnz	w22, 96a40 <f_mount+0xa0>
   96a28:	2a1403e0 	mov	w0, w20
   96a2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96a30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96a34:	f9401bf7 	ldr	x23, [sp, #48]
   96a38:	a8c67bfd 	ldp	x29, x30, [sp], #96
   96a3c:	d65f03c0 	ret
   96a40:	910123e1 	add	x1, sp, #0x48
   96a44:	52800002 	mov	w2, #0x0                   	// #0
   96a48:	910103e0 	add	x0, sp, #0x40
   96a4c:	97fff8b9 	bl	94d30 <mount_volume>
   96a50:	f94027e1 	ldr	x1, [sp, #72]
   96a54:	2a0003f4 	mov	w20, w0
   96a58:	f100003f 	cmp	x1, #0x0
   96a5c:	7a4c1804 	ccmp	w0, #0xc, #0x4, ne  // ne = any
   96a60:	54fffe40 	b.eq	96a28 <f_mount+0x88>  // b.none
   96a64:	aa0103e0 	mov	x0, x1
   96a68:	2a1403e1 	mov	w1, w20
   96a6c:	97fff8a9 	bl	94d10 <unlock_fs.part.0>
   96a70:	2a1403e0 	mov	w0, w20
   96a74:	a94153f3 	ldp	x19, x20, [sp, #16]
   96a78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96a7c:	f9401bf7 	ldr	x23, [sp, #48]
   96a80:	a8c67bfd 	ldp	x29, x30, [sp], #96
   96a84:	d65f03c0 	ret
   96a88:	52800054 	mov	w20, #0x2                   	// #2
   96a8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96a90:	2a1403e0 	mov	w0, w20
   96a94:	a94153f3 	ldp	x19, x20, [sp, #16]
   96a98:	f9401bf7 	ldr	x23, [sp, #48]
   96a9c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   96aa0:	d65f03c0 	ret
   96aa4:	52800174 	mov	w20, #0xb                   	// #11
   96aa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96aac:	2a1403e0 	mov	w0, w20
   96ab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   96ab4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   96ab8:	d65f03c0 	ret
   96abc:	d503201f 	nop

0000000000096ac0 <f_open>:
   96ac0:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   96ac4:	910003fd 	mov	x29, sp
   96ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   96acc:	f9002fe1 	str	x1, [sp, #88]
   96ad0:	b40008c0 	cbz	x0, 96be8 <f_open+0x128>
   96ad4:	a9025bf5 	stp	x21, x22, [sp, #32]
   96ad8:	12001c56 	and	w22, w2, #0xff
   96adc:	aa0003f3 	mov	x19, x0
   96ae0:	120016d5 	and	w21, w22, #0x3f
   96ae4:	9101a3e1 	add	x1, sp, #0x68
   96ae8:	2a1503e2 	mov	w2, w21
   96aec:	910163e0 	add	x0, sp, #0x58
   96af0:	97fff890 	bl	94d30 <mount_volume>
   96af4:	2a0003f4 	mov	w20, w0
   96af8:	34000280 	cbz	w0, 96b48 <f_open+0x88>
   96afc:	7100301f 	cmp	w0, #0xc
   96b00:	1a9f07f5 	cset	w21, ne  // ne = any
   96b04:	f900027f 	str	xzr, [x19]
   96b08:	f94037e0 	ldr	x0, [sp, #104]
   96b0c:	f100001f 	cmp	x0, #0x0
   96b10:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   96b14:	54000100 	b.eq	96b34 <f_open+0x74>  // b.none
   96b18:	2a1403e1 	mov	w1, w20
   96b1c:	97fff87d 	bl	94d10 <unlock_fs.part.0>
   96b20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96b24:	2a1403e0 	mov	w0, w20
   96b28:	a94153f3 	ldp	x19, x20, [sp, #16]
   96b2c:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96b30:	d65f03c0 	ret
   96b34:	2a1403e0 	mov	w0, w20
   96b38:	a94153f3 	ldp	x19, x20, [sp, #16]
   96b3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96b40:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96b44:	d65f03c0 	ret
   96b48:	f94037e1 	ldr	x1, [sp, #104]
   96b4c:	52808c00 	mov	w0, #0x460                 	// #1120
   96b50:	a90363f7 	stp	x23, x24, [sp, #48]
   96b54:	f9003be1 	str	x1, [sp, #112]
   96b58:	94001536 	bl	9c030 <ff_memalloc>
   96b5c:	aa0003f7 	mov	x23, x0
   96b60:	b40004e0 	cbz	x0, 96bfc <f_open+0x13c>
   96b64:	f94037e3 	ldr	x3, [sp, #104]
   96b68:	91080002 	add	x2, x0, #0x200
   96b6c:	9101c3e0 	add	x0, sp, #0x70
   96b70:	f9402fe1 	ldr	x1, [sp, #88]
   96b74:	a9010877 	stp	x23, x2, [x3, #16]
   96b78:	97fffc26 	bl	95c10 <follow_path>
   96b7c:	2a0003e2 	mov	w2, w0
   96b80:	350001e0 	cbnz	w0, 96bbc <f_open+0xfc>
   96b84:	39c30fe0 	ldrsb	w0, [sp, #195]
   96b88:	37f81620 	tbnz	w0, #31, 96e4c <f_open+0x38c>
   96b8c:	721e0adf 	tst	w22, #0x1c
   96b90:	3941ebe0 	ldrb	w0, [sp, #122]
   96b94:	54000441 	b.ne	96c1c <f_open+0x15c>  // b.any
   96b98:	37201b40 	tbnz	w0, #4, 96f00 <f_open+0x440>
   96b9c:	36081796 	tbz	w22, #1, 96e8c <f_open+0x3cc>
   96ba0:	36001760 	tbz	w0, #0, 96e8c <f_open+0x3cc>
   96ba4:	aa1703e0 	mov	x0, x23
   96ba8:	52800035 	mov	w21, #0x1                   	// #1
   96bac:	94001525 	bl	9c040 <ff_memfree>
   96bb0:	528000f4 	mov	w20, #0x7                   	// #7
   96bb4:	a94363f7 	ldp	x23, x24, [sp, #48]
   96bb8:	17ffffd3 	b	96b04 <f_open+0x44>
   96bbc:	721e0adf 	tst	w22, #0x1c
   96bc0:	54000060 	b.eq	96bcc <f_open+0x10c>  // b.none
   96bc4:	7100101f 	cmp	w0, #0x4
   96bc8:	540003e0 	b.eq	96c44 <f_open+0x184>  // b.none
   96bcc:	7100305f 	cmp	w2, #0xc
   96bd0:	1a9f07f5 	cset	w21, ne  // ne = any
   96bd4:	aa1703e0 	mov	x0, x23
   96bd8:	2a0203f4 	mov	w20, w2
   96bdc:	94001519 	bl	9c040 <ff_memfree>
   96be0:	a94363f7 	ldp	x23, x24, [sp, #48]
   96be4:	17ffffc8 	b	96b04 <f_open+0x44>
   96be8:	52800134 	mov	w20, #0x9                   	// #9
   96bec:	2a1403e0 	mov	w0, w20
   96bf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   96bf4:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   96bf8:	d65f03c0 	ret
   96bfc:	f94037e0 	ldr	x0, [sp, #104]
   96c00:	52800234 	mov	w20, #0x11                  	// #17
   96c04:	b40001a0 	cbz	x0, 96c38 <f_open+0x178>
   96c08:	f9401000 	ldr	x0, [x0, #32]
   96c0c:	940014f9 	bl	9bff0 <ff_rel_grant>
   96c10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96c14:	a94363f7 	ldp	x23, x24, [sp, #48]
   96c18:	17ffffc3 	b	96b24 <f_open+0x64>
   96c1c:	52800221 	mov	w1, #0x11                  	// #17
   96c20:	6a01001f 	tst	w0, w1
   96c24:	54001401 	b.ne	96ea4 <f_open+0x3e4>  // b.any
   96c28:	36101376 	tbz	w22, #2, 96e94 <f_open+0x3d4>
   96c2c:	52800035 	mov	w21, #0x1                   	// #1
   96c30:	52800102 	mov	w2, #0x8                   	// #8
   96c34:	17ffffe8 	b	96bd4 <f_open+0x114>
   96c38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96c3c:	a94363f7 	ldp	x23, x24, [sp, #48]
   96c40:	17ffffb9 	b	96b24 <f_open+0x64>
   96c44:	9101c3e0 	add	x0, sp, #0x70
   96c48:	321d02b5 	orr	w21, w21, #0x8
   96c4c:	97fffd99 	bl	962b0 <dir_register>
   96c50:	2a0003e2 	mov	w2, w0
   96c54:	12001eb5 	and	w21, w21, #0xff
   96c58:	35fffba0 	cbnz	w0, 96bcc <f_open+0x10c>
   96c5c:	f94037e4 	ldr	x4, [sp, #104]
   96c60:	39400080 	ldrb	w0, [x4]
   96c64:	7100101f 	cmp	w0, #0x4
   96c68:	54001640 	b.eq	96f30 <f_open+0x470>  // b.none
   96c6c:	f9405bf8 	ldr	x24, [sp, #176]
   96c70:	71000c1f 	cmp	w0, #0x3
   96c74:	39406b16 	ldrb	w22, [x24, #26]
   96c78:	39406f00 	ldrb	w0, [x24, #27]
   96c7c:	33185c16 	bfi	w22, w0, #8, #24
   96c80:	540000a1 	b.ne	96c94 <f_open+0x1d4>  // b.any
   96c84:	39405701 	ldrb	w1, [x24, #21]
   96c88:	39405300 	ldrb	w0, [x24, #20]
   96c8c:	33185c20 	bfi	w0, w1, #8, #24
   96c90:	2a0042d6 	orr	w22, w22, w0, lsl #16
   96c94:	940014ef 	bl	9c050 <get_fattime>
   96c98:	b800e300 	stur	w0, [x24, #14]
   96c9c:	52800401 	mov	w1, #0x20                  	// #32
   96ca0:	f9405be0 	ldr	x0, [sp, #176]
   96ca4:	f94037e3 	ldr	x3, [sp, #104]
   96ca8:	39002c01 	strb	w1, [x0, #11]
   96cac:	f9405be0 	ldr	x0, [sp, #176]
   96cb0:	7900341f 	strh	wzr, [x0, #26]
   96cb4:	39400061 	ldrb	w1, [x3]
   96cb8:	71000c3f 	cmp	w1, #0x3
   96cbc:	54000041 	b.ne	96cc4 <f_open+0x204>  // b.any
   96cc0:	7900281f 	strh	wzr, [x0, #20]
   96cc4:	f9405be1 	ldr	x1, [sp, #176]
   96cc8:	52800020 	mov	w0, #0x1                   	// #1
   96ccc:	b9001c3f 	str	wzr, [x1, #28]
   96cd0:	39000c60 	strb	w0, [x3, #3]
   96cd4:	340002b6 	cbz	w22, 96d28 <f_open+0x268>
   96cd8:	52800002 	mov	w2, #0x0                   	// #0
   96cdc:	9101c3e0 	add	x0, sp, #0x70
   96ce0:	f9403878 	ldr	x24, [x3, #112]
   96ce4:	2a1603e1 	mov	w1, w22
   96ce8:	97fff48e 	bl	93f20 <remove_chain>
   96cec:	2a0003e2 	mov	w2, w0
   96cf0:	35fff6e0 	cbnz	w0, 96bcc <f_open+0x10c>
   96cf4:	f94037e3 	ldr	x3, [sp, #104]
   96cf8:	510006d6 	sub	w22, w22, #0x1
   96cfc:	f9403860 	ldr	x0, [x3, #112]
   96d00:	eb00031f 	cmp	x24, x0
   96d04:	54001920 	b.eq	97028 <f_open+0x568>  // b.none
   96d08:	aa1803e1 	mov	x1, x24
   96d0c:	aa0303e0 	mov	x0, x3
   96d10:	97fff1d0 	bl	93450 <move_window.part.0>
   96d14:	f94037e4 	ldr	x4, [sp, #104]
   96d18:	2a0003e2 	mov	w2, w0
   96d1c:	b9002896 	str	w22, [x4, #40]
   96d20:	aa0403e3 	mov	x3, x4
   96d24:	35fff542 	cbnz	w2, 96bcc <f_open+0x10c>
   96d28:	321a02a0 	orr	w0, w21, #0x40
   96d2c:	f27d02bf 	tst	x21, #0x8
   96d30:	12001c00 	and	w0, w0, #0xff
   96d34:	1a951015 	csel	w21, w0, w21, ne  // ne = any
   96d38:	f9403861 	ldr	x1, [x3, #112]
   96d3c:	f9405be0 	ldr	x0, [sp, #176]
   96d40:	a9050261 	stp	x1, x0, [x19, #80]
   96d44:	39400061 	ldrb	w1, [x3]
   96d48:	7100103f 	cmp	w1, #0x4
   96d4c:	54000860 	b.eq	96e58 <f_open+0x398>  // b.none
   96d50:	39406c02 	ldrb	w2, [x0, #27]
   96d54:	71000c3f 	cmp	w1, #0x3
   96d58:	39406801 	ldrb	w1, [x0, #26]
   96d5c:	33185c41 	bfi	w1, w2, #8, #24
   96d60:	540000a1 	b.ne	96d74 <f_open+0x2b4>  // b.any
   96d64:	39405404 	ldrb	w4, [x0, #21]
   96d68:	39405002 	ldrb	w2, [x0, #20]
   96d6c:	33185c82 	bfi	w2, w4, #8, #24
   96d70:	2a024021 	orr	w1, w1, w2, lsl #16
   96d74:	b9000e61 	str	w1, [x19, #12]
   96d78:	79403c01 	ldrh	w1, [x0, #30]
   96d7c:	39407404 	ldrb	w4, [x0, #29]
   96d80:	39407002 	ldrb	w2, [x0, #28]
   96d84:	2a012080 	orr	w0, w4, w1, lsl #8
   96d88:	2a002040 	orr	w0, w2, w0, lsl #8
   96d8c:	f9000a60 	str	x0, [x19, #16]
   96d90:	79400c62 	ldrh	w2, [x3, #6]
   96d94:	91018276 	add	x22, x19, #0x60
   96d98:	91098260 	add	x0, x19, #0x260
   96d9c:	aa1603e1 	mov	x1, x22
   96da0:	f9000263 	str	x3, [x19]
   96da4:	3900c275 	strb	w21, [x19, #48]
   96da8:	3900c67f 	strb	wzr, [x19, #49]
   96dac:	f9001e7f 	str	xzr, [x19, #56]
   96db0:	79001262 	strh	w2, [x19, #8]
   96db4:	f900267f 	str	xzr, [x19, #72]
   96db8:	3800143f 	strb	wzr, [x1], #1
   96dbc:	eb00003f 	cmp	x1, x0
   96dc0:	54ffffc1 	b.ne	96db8 <f_open+0x2f8>  // b.any
   96dc4:	36280375 	tbz	w21, #5, 96e30 <f_open+0x370>
   96dc8:	f9400a75 	ldr	x21, [x19, #16]
   96dcc:	b4000335 	cbz	x21, 96e30 <f_open+0x370>
   96dd0:	a9046bf9 	stp	x25, x26, [sp, #64]
   96dd4:	79401479 	ldrh	w25, [x3, #10]
   96dd8:	f9001e75 	str	x21, [x19, #56]
   96ddc:	b9400e61 	ldr	w1, [x19, #12]
   96de0:	d3773f38 	ubfiz	x24, x25, #9, #16
   96de4:	eb1802bf 	cmp	x21, x24
   96de8:	54000649 	b.ls	96eb0 <f_open+0x3f0>  // b.plast
   96dec:	5280401a 	mov	w26, #0x200                 	// #512
   96df0:	14000006 	b	96e08 <f_open+0x348>
   96df4:	3100041f 	cmn	w0, #0x1
   96df8:	9bbad735 	umsubl	x21, w25, w26, x21
   96dfc:	54000240 	b.eq	96e44 <f_open+0x384>  // b.none
   96e00:	eb1802bf 	cmp	x21, x24
   96e04:	54000569 	b.ls	96eb0 <f_open+0x3f0>  // b.plast
   96e08:	aa1303e0 	mov	x0, x19
   96e0c:	97fff2c9 	bl	93930 <get_fat>
   96e10:	7100041f 	cmp	w0, #0x1
   96e14:	2a0003e1 	mov	w1, w0
   96e18:	54fffee8 	b.hi	96df4 <f_open+0x334>  // b.pmore
   96e1c:	52800042 	mov	w2, #0x2                   	// #2
   96e20:	52800035 	mov	w21, #0x1                   	// #1
   96e24:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96e28:	b9004261 	str	w1, [x19, #64]
   96e2c:	17ffff6a 	b	96bd4 <f_open+0x114>
   96e30:	aa1703e0 	mov	x0, x23
   96e34:	52800035 	mov	w21, #0x1                   	// #1
   96e38:	94001482 	bl	9c040 <ff_memfree>
   96e3c:	a94363f7 	ldp	x23, x24, [sp, #48]
   96e40:	17ffff32 	b	96b08 <f_open+0x48>
   96e44:	52800022 	mov	w2, #0x1                   	// #1
   96e48:	17fffff6 	b	96e20 <f_open+0x360>
   96e4c:	52800035 	mov	w21, #0x1                   	// #1
   96e50:	528000c2 	mov	w2, #0x6                   	// #6
   96e54:	17ffff60 	b	96bd4 <f_open+0x114>
   96e58:	f94043e2 	ldr	x2, [sp, #128]
   96e5c:	aa1303e1 	mov	x1, x19
   96e60:	3941efe0 	ldrb	w0, [sp, #123]
   96e64:	b9407fe5 	ldr	w5, [sp, #124]
   96e68:	12185c42 	and	w2, w2, #0xffffff00
   96e6c:	b940c7e4 	ldr	w4, [sp, #196]
   96e70:	2a000042 	orr	w2, w2, w0
   96e74:	f9400c60 	ldr	x0, [x3, #24]
   96e78:	29040a65 	stp	w5, w2, [x19, #32]
   96e7c:	b9002a64 	str	w4, [x19, #40]
   96e80:	97fff09c 	bl	930f0 <init_alloc_info.isra.0>
   96e84:	f94037e3 	ldr	x3, [sp, #104]
   96e88:	17ffffc2 	b	96d90 <f_open+0x2d0>
   96e8c:	f94037e3 	ldr	x3, [sp, #104]
   96e90:	17ffffa6 	b	96d28 <f_open+0x268>
   96e94:	f94037e4 	ldr	x4, [sp, #104]
   96e98:	aa0403e3 	mov	x3, x4
   96e9c:	361ff4f6 	tbz	w22, #3, 96d38 <f_open+0x278>
   96ea0:	17ffff70 	b	96c60 <f_open+0x1a0>
   96ea4:	52800035 	mov	w21, #0x1                   	// #1
   96ea8:	528000e2 	mov	w2, #0x7                   	// #7
   96eac:	17ffff4a 	b	96bd4 <f_open+0x114>
   96eb0:	f24022bf 	tst	x21, #0x1ff
   96eb4:	b9004261 	str	w1, [x19, #64]
   96eb8:	54000300 	b.eq	96f18 <f_open+0x458>  // b.none
   96ebc:	f94037e4 	ldr	x4, [sp, #104]
   96ec0:	51000821 	sub	w1, w1, #0x2
   96ec4:	b9404080 	ldr	w0, [x4, #64]
   96ec8:	51000800 	sub	w0, w0, #0x2
   96ecc:	6b00003f 	cmp	w1, w0
   96ed0:	540000a2 	b.cs	96ee4 <f_open+0x424>  // b.hs, b.nlast
   96ed4:	79401482 	ldrh	w2, [x4, #10]
   96ed8:	f9403080 	ldr	x0, [x4, #96]
   96edc:	9ba20021 	umaddl	x1, w1, w2, x0
   96ee0:	b5000861 	cbnz	x1, 96fec <f_open+0x52c>
   96ee4:	aa1703e0 	mov	x0, x23
   96ee8:	52800035 	mov	w21, #0x1                   	// #1
   96eec:	94001455 	bl	9c040 <ff_memfree>
   96ef0:	52800054 	mov	w20, #0x2                   	// #2
   96ef4:	a94363f7 	ldp	x23, x24, [sp, #48]
   96ef8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96efc:	17ffff02 	b	96b04 <f_open+0x44>
   96f00:	aa1703e0 	mov	x0, x23
   96f04:	52800035 	mov	w21, #0x1                   	// #1
   96f08:	9400144e 	bl	9c040 <ff_memfree>
   96f0c:	52800094 	mov	w20, #0x4                   	// #4
   96f10:	a94363f7 	ldp	x23, x24, [sp, #48]
   96f14:	17fffefc 	b	96b04 <f_open+0x44>
   96f18:	aa1703e0 	mov	x0, x23
   96f1c:	94001449 	bl	9c040 <ff_memfree>
   96f20:	52800035 	mov	w21, #0x1                   	// #1
   96f24:	a94363f7 	ldp	x23, x24, [sp, #48]
   96f28:	a9446bf9 	ldp	x25, x26, [sp, #64]
   96f2c:	17fffef7 	b	96b08 <f_open+0x48>
   96f30:	aa1303e1 	mov	x1, x19
   96f34:	f9400c80 	ldr	x0, [x4, #24]
   96f38:	f9000264 	str	x4, [x19]
   96f3c:	97fff06d 	bl	930f0 <init_alloc_info.isra.0>
   96f40:	f94037e0 	ldr	x0, [sp, #104]
   96f44:	f9400c01 	ldr	x1, [x0, #24]
   96f48:	91000820 	add	x0, x1, #0x2
   96f4c:	91008021 	add	x1, x1, #0x20
   96f50:	3800141f 	strb	wzr, [x0], #1
   96f54:	eb01001f 	cmp	x0, x1
   96f58:	54ffffc1 	b.ne	96f50 <f_open+0x490>  // b.any
   96f5c:	f94037e0 	ldr	x0, [sp, #104]
   96f60:	f9400c01 	ldr	x1, [x0, #24]
   96f64:	91009820 	add	x0, x1, #0x26
   96f68:	91010021 	add	x1, x1, #0x40
   96f6c:	d503201f 	nop
   96f70:	3800141f 	strb	wzr, [x0], #1
   96f74:	eb01001f 	cmp	x0, x1
   96f78:	54ffffc1 	b.ne	96f70 <f_open+0x4b0>  // b.any
   96f7c:	f94037e0 	ldr	x0, [sp, #104]
   96f80:	52800401 	mov	w1, #0x20                  	// #32
   96f84:	f9400c00 	ldr	x0, [x0, #24]
   96f88:	39001001 	strb	w1, [x0, #4]
   96f8c:	f94037e0 	ldr	x0, [sp, #104]
   96f90:	f9400c16 	ldr	x22, [x0, #24]
   96f94:	9400142f 	bl	9c050 <get_fattime>
   96f98:	f94037e1 	ldr	x1, [sp, #104]
   96f9c:	2a0003e3 	mov	w3, w0
   96fa0:	52800022 	mov	w2, #0x1                   	// #1
   96fa4:	9101c3e0 	add	x0, sp, #0x70
   96fa8:	b9000ac3 	str	w3, [x22, #8]
   96fac:	f9400c21 	ldr	x1, [x1, #24]
   96fb0:	39008422 	strb	w2, [x1, #33]
   96fb4:	97fff697 	bl	94a10 <store_xdir>
   96fb8:	2a0003e2 	mov	w2, w0
   96fbc:	35ffe080 	cbnz	w0, 96bcc <f_open+0x10c>
   96fc0:	b9400e61 	ldr	w1, [x19, #12]
   96fc4:	34fff641 	cbz	w1, 96e8c <f_open+0x3cc>
   96fc8:	52800002 	mov	w2, #0x0                   	// #0
   96fcc:	aa1303e0 	mov	x0, x19
   96fd0:	97fff3d4 	bl	93f20 <remove_chain>
   96fd4:	b9400e61 	ldr	w1, [x19, #12]
   96fd8:	2a0003e2 	mov	w2, w0
   96fdc:	f94037e4 	ldr	x4, [sp, #104]
   96fe0:	51000421 	sub	w1, w1, #0x1
   96fe4:	b9002881 	str	w1, [x4, #40]
   96fe8:	17ffff4e 	b	96d20 <f_open+0x260>
   96fec:	8b552422 	add	x2, x1, x21, lsr #9
   96ff0:	52800023 	mov	w3, #0x1                   	// #1
   96ff4:	aa1603e1 	mov	x1, x22
   96ff8:	f9002662 	str	x2, [x19, #72]
   96ffc:	39400480 	ldrb	w0, [x4, #1]
   97000:	94001310 	bl	9bc40 <disk_read>
   97004:	2a0003f4 	mov	w20, w0
   97008:	aa1703e0 	mov	x0, x23
   9700c:	34fff894 	cbz	w20, 96f1c <f_open+0x45c>
   97010:	52800034 	mov	w20, #0x1                   	// #1
   97014:	9400140b 	bl	9c040 <ff_memfree>
   97018:	2a1403f5 	mov	w21, w20
   9701c:	a94363f7 	ldp	x23, x24, [sp, #48]
   97020:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97024:	17fffeb8 	b	96b04 <f_open+0x44>
   97028:	b9002876 	str	w22, [x3, #40]
   9702c:	17ffff3f 	b	96d28 <f_open+0x268>

0000000000097030 <f_read>:
   97030:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   97034:	910003fd 	mov	x29, sp
   97038:	a90153f3 	stp	x19, x20, [sp, #16]
   9703c:	2a0203f4 	mov	w20, w2
   97040:	aa0003f3 	mov	x19, x0
   97044:	a9025bf5 	stp	x21, x22, [sp, #32]
   97048:	aa0103f6 	mov	x22, x1
   9704c:	9101a3e1 	add	x1, sp, #0x68
   97050:	aa0303f5 	mov	x21, x3
   97054:	a9046bf9 	stp	x25, x26, [sp, #64]
   97058:	b900007f 	str	wzr, [x3]
   9705c:	97fffe29 	bl	96900 <validate>
   97060:	35000a00 	cbnz	w0, 971a0 <f_read+0x170>
   97064:	3940c679 	ldrb	w25, [x19, #49]
   97068:	350009f9 	cbnz	w25, 971a4 <f_read+0x174>
   9706c:	3940c260 	ldrb	w0, [x19, #48]
   97070:	36001200 	tbz	w0, #0, 972b0 <f_read+0x280>
   97074:	f9400a60 	ldr	x0, [x19, #16]
   97078:	f9401e64 	ldr	x4, [x19, #56]
   9707c:	cb040000 	sub	x0, x0, x4
   97080:	eb34401f 	cmp	x0, w20, uxtw
   97084:	1a802294 	csel	w20, w20, w0, cs  // cs = hs, nlast
   97088:	34000794 	cbz	w20, 97178 <f_read+0x148>
   9708c:	a90363f7 	stp	x23, x24, [sp, #48]
   97090:	52804018 	mov	w24, #0x200                 	// #512
   97094:	91018277 	add	x23, x19, #0x60
   97098:	a90573fb 	stp	x27, x28, [sp, #80]
   9709c:	f2402081 	ands	x1, x4, #0x1ff
   970a0:	54000441 	b.ne	97128 <f_read+0xf8>  // b.any
   970a4:	f94037e3 	ldr	x3, [sp, #104]
   970a8:	d349fc9b 	lsr	x27, x4, #9
   970ac:	79401461 	ldrh	w1, [x3, #10]
   970b0:	51000420 	sub	w0, w1, #0x1
   970b4:	6a1b001b 	ands	w27, w0, w27
   970b8:	540008e0 	b.eq	971d4 <f_read+0x1a4>  // b.none
   970bc:	b9404260 	ldr	w0, [x19, #64]
   970c0:	b9404061 	ldr	w1, [x3, #64]
   970c4:	51000800 	sub	w0, w0, #0x2
   970c8:	51000821 	sub	w1, w1, #0x2
   970cc:	6b01001f 	cmp	w0, w1
   970d0:	540009a2 	b.cs	97204 <f_read+0x1d4>  // b.hs, b.nlast
   970d4:	79401461 	ldrh	w1, [x3, #10]
   970d8:	f9403062 	ldr	x2, [x3, #96]
   970dc:	9ba10800 	umaddl	x0, w0, w1, x2
   970e0:	b4000920 	cbz	x0, 97204 <f_read+0x1d4>
   970e4:	7107fe9f 	cmp	w20, #0x1ff
   970e8:	8b3b401a 	add	x26, x0, w27, uxtw
   970ec:	54000a68 	b.hi	97238 <f_read+0x208>  // b.pmore
   970f0:	f9402662 	ldr	x2, [x19, #72]
   970f4:	eb1a005f 	cmp	x2, x26
   970f8:	54000120 	b.eq	9711c <f_read+0xec>  // b.none
   970fc:	39c0c261 	ldrsb	w1, [x19, #48]
   97100:	39400460 	ldrb	w0, [x3, #1]
   97104:	37f80e61 	tbnz	w1, #31, 972d0 <f_read+0x2a0>
   97108:	52800023 	mov	w3, #0x1                   	// #1
   9710c:	aa1a03e2 	mov	x2, x26
   97110:	aa1703e1 	mov	x1, x23
   97114:	940012cb 	bl	9bc40 <disk_read>
   97118:	35000ae0 	cbnz	w0, 97274 <f_read+0x244>
   9711c:	f9401e64 	ldr	x4, [x19, #56]
   97120:	f900267a 	str	x26, [x19, #72]
   97124:	92402081 	and	x1, x4, #0x1ff
   97128:	12002084 	and	w4, w4, #0x1ff
   9712c:	8b0102e1 	add	x1, x23, x1
   97130:	4b040304 	sub	w4, w24, w4
   97134:	aa1603e0 	mov	x0, x22
   97138:	6b14009f 	cmp	w4, w20
   9713c:	1a94909c 	csel	w28, w4, w20, ls  // ls = plast
   97140:	2a1c03e2 	mov	w2, w28
   97144:	97ffefe3 	bl	930d0 <mem_cpy.part.0>
   97148:	b94002a2 	ldr	w2, [x21]
   9714c:	2a1c03e4 	mov	w4, w28
   97150:	6b1c0294 	subs	w20, w20, w28
   97154:	8b0402d6 	add	x22, x22, x4
   97158:	f9401e60 	ldr	x0, [x19, #56]
   9715c:	0b1c0042 	add	w2, w2, w28
   97160:	8b000084 	add	x4, x4, x0
   97164:	b90002a2 	str	w2, [x21]
   97168:	f9001e64 	str	x4, [x19, #56]
   9716c:	54fff981 	b.ne	9709c <f_read+0x6c>  // b.any
   97170:	a94363f7 	ldp	x23, x24, [sp, #48]
   97174:	a94573fb 	ldp	x27, x28, [sp, #80]
   97178:	f94037e0 	ldr	x0, [sp, #104]
   9717c:	b4000060 	cbz	x0, 97188 <f_read+0x158>
   97180:	f9401000 	ldr	x0, [x0, #32]
   97184:	9400139b 	bl	9bff0 <ff_rel_grant>
   97188:	2a1903e0 	mov	w0, w25
   9718c:	a94153f3 	ldp	x19, x20, [sp, #16]
   97190:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97194:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97198:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9719c:	d65f03c0 	ret
   971a0:	2a0003f9 	mov	w25, w0
   971a4:	f94037e0 	ldr	x0, [sp, #104]
   971a8:	f100001f 	cmp	x0, #0x0
   971ac:	7a4c1b24 	ccmp	w25, #0xc, #0x4, ne  // ne = any
   971b0:	54fffec0 	b.eq	97188 <f_read+0x158>  // b.none
   971b4:	2a1903e1 	mov	w1, w25
   971b8:	97fff6d6 	bl	94d10 <unlock_fs.part.0>
   971bc:	2a1903e0 	mov	w0, w25
   971c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   971c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   971c8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   971cc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   971d0:	d65f03c0 	ret
   971d4:	b5000644 	cbnz	x4, 9729c <f_read+0x26c>
   971d8:	b9400e60 	ldr	w0, [x19, #12]
   971dc:	7100041f 	cmp	w0, #0x1
   971e0:	54000a09 	b.ls	97320 <f_read+0x2f0>  // b.plast
   971e4:	3100041f 	cmn	w0, #0x1
   971e8:	54000aa0 	b.eq	9733c <f_read+0x30c>  // b.none
   971ec:	b9404061 	ldr	w1, [x3, #64]
   971f0:	b9004260 	str	w0, [x19, #64]
   971f4:	51000800 	sub	w0, w0, #0x2
   971f8:	51000821 	sub	w1, w1, #0x2
   971fc:	6b01001f 	cmp	w0, w1
   97200:	54fff6a3 	b.cc	970d4 <f_read+0xa4>  // b.lo, b.ul, b.last
   97204:	52800040 	mov	w0, #0x2                   	// #2
   97208:	52800059 	mov	w25, #0x2                   	// #2
   9720c:	3900c660 	strb	w0, [x19, #49]
   97210:	f9401060 	ldr	x0, [x3, #32]
   97214:	94001377 	bl	9bff0 <ff_rel_grant>
   97218:	a94153f3 	ldp	x19, x20, [sp, #16]
   9721c:	2a1903e0 	mov	w0, w25
   97220:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97224:	a94363f7 	ldp	x23, x24, [sp, #48]
   97228:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9722c:	a94573fb 	ldp	x27, x28, [sp, #80]
   97230:	a8c77bfd 	ldp	x29, x30, [sp], #112
   97234:	d65f03c0 	ret
   97238:	53097e9c 	lsr	w28, w20, #9
   9723c:	4b1b0024 	sub	w4, w1, w27
   97240:	39400460 	ldrb	w0, [x3, #1]
   97244:	0b1c037b 	add	w27, w27, w28
   97248:	aa1a03e2 	mov	x2, x26
   9724c:	6b01037f 	cmp	w27, w1
   97250:	aa1603e1 	mov	x1, x22
   97254:	1a84939c 	csel	w28, w28, w4, ls  // ls = plast
   97258:	2a1c03e3 	mov	w3, w28
   9725c:	94001279 	bl	9bc40 <disk_read>
   97260:	350000a0 	cbnz	w0, 97274 <f_read+0x244>
   97264:	39c0c260 	ldrsb	w0, [x19, #48]
   97268:	37f80480 	tbnz	w0, #31, 972f8 <f_read+0x2c8>
   9726c:	53175b9c 	lsl	w28, w28, #9
   97270:	17ffffb6 	b	97148 <f_read+0x118>
   97274:	52800021 	mov	w1, #0x1                   	// #1
   97278:	f94037e0 	ldr	x0, [sp, #104]
   9727c:	3900c661 	strb	w1, [x19, #49]
   97280:	b4000200 	cbz	x0, 972c0 <f_read+0x290>
   97284:	f9401000 	ldr	x0, [x0, #32]
   97288:	52800039 	mov	w25, #0x1                   	// #1
   9728c:	94001359 	bl	9bff0 <ff_rel_grant>
   97290:	a94363f7 	ldp	x23, x24, [sp, #48]
   97294:	a94573fb 	ldp	x27, x28, [sp, #80]
   97298:	17ffffbc 	b	97188 <f_read+0x158>
   9729c:	b9404261 	ldr	w1, [x19, #64]
   972a0:	aa1303e0 	mov	x0, x19
   972a4:	97fff1a3 	bl	93930 <get_fat>
   972a8:	f94037e3 	ldr	x3, [sp, #104]
   972ac:	17ffffcc 	b	971dc <f_read+0x1ac>
   972b0:	f94037e0 	ldr	x0, [sp, #104]
   972b4:	528000f9 	mov	w25, #0x7                   	// #7
   972b8:	b4fff680 	cbz	x0, 97188 <f_read+0x158>
   972bc:	17ffffb1 	b	97180 <f_read+0x150>
   972c0:	52800039 	mov	w25, #0x1                   	// #1
   972c4:	a94363f7 	ldp	x23, x24, [sp, #48]
   972c8:	a94573fb 	ldp	x27, x28, [sp, #80]
   972cc:	17ffffaf 	b	97188 <f_read+0x158>
   972d0:	52800023 	mov	w3, #0x1                   	// #1
   972d4:	aa1703e1 	mov	x1, x23
   972d8:	940012a2 	bl	9bd60 <disk_write>
   972dc:	35fffcc0 	cbnz	w0, 97274 <f_read+0x244>
   972e0:	3940c260 	ldrb	w0, [x19, #48]
   972e4:	f94037e1 	ldr	x1, [sp, #104]
   972e8:	12001800 	and	w0, w0, #0x7f
   972ec:	3900c260 	strb	w0, [x19, #48]
   972f0:	39400420 	ldrb	w0, [x1, #1]
   972f4:	17ffff85 	b	97108 <f_read+0xd8>
   972f8:	f9402660 	ldr	x0, [x19, #72]
   972fc:	cb1a0000 	sub	x0, x0, x26
   97300:	eb3c401f 	cmp	x0, w28, uxtw
   97304:	54fffb42 	b.cs	9726c <f_read+0x23c>  // b.hs, b.nlast
   97308:	8b0026c0 	add	x0, x22, x0, lsl #9
   9730c:	52804002 	mov	w2, #0x200                 	// #512
   97310:	aa1703e1 	mov	x1, x23
   97314:	53175b9c 	lsl	w28, w28, #9
   97318:	97ffef6e 	bl	930d0 <mem_cpy.part.0>
   9731c:	17ffff8b 	b	97148 <f_read+0x118>
   97320:	52800040 	mov	w0, #0x2                   	// #2
   97324:	52800059 	mov	w25, #0x2                   	// #2
   97328:	3900c660 	strb	w0, [x19, #49]
   9732c:	b5fff723 	cbnz	x3, 97210 <f_read+0x1e0>
   97330:	a94363f7 	ldp	x23, x24, [sp, #48]
   97334:	a94573fb 	ldp	x27, x28, [sp, #80]
   97338:	17ffff94 	b	97188 <f_read+0x158>
   9733c:	52800020 	mov	w0, #0x1                   	// #1
   97340:	3900c660 	strb	w0, [x19, #49]
   97344:	b4fffbe3 	cbz	x3, 972c0 <f_read+0x290>
   97348:	f9401060 	ldr	x0, [x3, #32]
   9734c:	52800039 	mov	w25, #0x1                   	// #1
   97350:	94001328 	bl	9bff0 <ff_rel_grant>
   97354:	a94363f7 	ldp	x23, x24, [sp, #48]
   97358:	a94573fb 	ldp	x27, x28, [sp, #80]
   9735c:	17ffff8b 	b	97188 <f_read+0x158>

0000000000097360 <f_write>:
   97360:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   97364:	910003fd 	mov	x29, sp
   97368:	a90153f3 	stp	x19, x20, [sp, #16]
   9736c:	aa0003f3 	mov	x19, x0
   97370:	a9025bf5 	stp	x21, x22, [sp, #32]
   97374:	aa0103f6 	mov	x22, x1
   97378:	9101a3e1 	add	x1, sp, #0x68
   9737c:	aa0303f5 	mov	x21, x3
   97380:	a9046bf9 	stp	x25, x26, [sp, #64]
   97384:	2a0203f9 	mov	w25, w2
   97388:	b900007f 	str	wzr, [x3]
   9738c:	97fffd5d 	bl	96900 <validate>
   97390:	35000c60 	cbnz	w0, 9751c <f_write+0x1bc>
   97394:	3940c674 	ldrb	w20, [x19, #49]
   97398:	f94037e0 	ldr	x0, [sp, #104]
   9739c:	35000c54 	cbnz	w20, 97524 <f_write+0x1c4>
   973a0:	3940c262 	ldrb	w2, [x19, #48]
   973a4:	36081682 	tbz	w2, #1, 97674 <f_write+0x314>
   973a8:	39400001 	ldrb	w1, [x0]
   973ac:	7100103f 	cmp	w1, #0x4
   973b0:	540000a0 	b.eq	973c4 <f_write+0x64>  // b.none
   973b4:	f9401e61 	ldr	x1, [x19, #56]
   973b8:	0b010323 	add	w3, w25, w1
   973bc:	6b01007f 	cmp	w3, w1
   973c0:	5a812339 	csinv	w25, w25, w1, cs  // cs = hs, nlast
   973c4:	34001859 	cbz	w25, 976cc <f_write+0x36c>
   973c8:	f9401e64 	ldr	x4, [x19, #56]
   973cc:	a90363f7 	stp	x23, x24, [sp, #48]
   973d0:	52804018 	mov	w24, #0x200                 	// #512
   973d4:	91018277 	add	x23, x19, #0x60
   973d8:	a90573fb 	stp	x27, x28, [sp, #80]
   973dc:	f2402080 	ands	x0, x4, #0x1ff
   973e0:	54000521 	b.ne	97484 <f_write+0x124>  // b.any
   973e4:	f94037e0 	ldr	x0, [sp, #104]
   973e8:	d349fc81 	lsr	x1, x4, #9
   973ec:	79401402 	ldrh	w2, [x0, #10]
   973f0:	51000442 	sub	w2, w2, #0x1
   973f4:	6a01005c 	ands	w28, w2, w1
   973f8:	54000161 	b.ne	97424 <f_write+0xc4>  // b.any
   973fc:	b5001324 	cbnz	x4, 97660 <f_write+0x300>
   97400:	b9400e61 	ldr	w1, [x19, #12]
   97404:	34000fe1 	cbz	w1, 97600 <f_write+0x2a0>
   97408:	7100043f 	cmp	w1, #0x1
   9740c:	54001660 	b.eq	976d8 <f_write+0x378>  // b.none
   97410:	3100043f 	cmn	w1, #0x1
   97414:	54001180 	b.eq	97644 <f_write+0x2e4>  // b.none
   97418:	b9400e62 	ldr	w2, [x19, #12]
   9741c:	b9004261 	str	w1, [x19, #64]
   97420:	34000d42 	cbz	w2, 975c8 <f_write+0x268>
   97424:	39c0c261 	ldrsb	w1, [x19, #48]
   97428:	37f80d61 	tbnz	w1, #31, 975d4 <f_write+0x274>
   9742c:	b9404001 	ldr	w1, [x0, #64]
   97430:	b9404262 	ldr	w2, [x19, #64]
   97434:	51000821 	sub	w1, w1, #0x2
   97438:	51000842 	sub	w2, w2, #0x2
   9743c:	6b01005f 	cmp	w2, w1
   97440:	54000882 	b.cs	97550 <f_write+0x1f0>  // b.hs, b.nlast
   97444:	79401403 	ldrh	w3, [x0, #10]
   97448:	f9403001 	ldr	x1, [x0, #96]
   9744c:	9ba30442 	umaddl	x2, w2, w3, x1
   97450:	b4000802 	cbz	x2, 97550 <f_write+0x1f0>
   97454:	7107ff3f 	cmp	w25, #0x1ff
   97458:	8b3c405a 	add	x26, x2, w28, uxtw
   9745c:	54000948 	b.hi	97584 <f_write+0x224>  // b.pmore
   97460:	f9402661 	ldr	x1, [x19, #72]
   97464:	f9401e64 	ldr	x4, [x19, #56]
   97468:	eb1a003f 	cmp	x1, x26
   9746c:	54000080 	b.eq	9747c <f_write+0x11c>  // b.none
   97470:	f9400a61 	ldr	x1, [x19, #16]
   97474:	eb04003f 	cmp	x1, x4
   97478:	540011a8 	b.hi	976ac <f_write+0x34c>  // b.pmore
   9747c:	92402080 	and	x0, x4, #0x1ff
   97480:	f900267a 	str	x26, [x19, #72]
   97484:	12002084 	and	w4, w4, #0x1ff
   97488:	8b0002e0 	add	x0, x23, x0
   9748c:	4b040304 	sub	w4, w24, w4
   97490:	aa1603e1 	mov	x1, x22
   97494:	6b19009f 	cmp	w4, w25
   97498:	1a99909b 	csel	w27, w4, w25, ls  // ls = plast
   9749c:	2a1b03e2 	mov	w2, w27
   974a0:	97ffef0c 	bl	930d0 <mem_cpy.part.0>
   974a4:	3940c260 	ldrb	w0, [x19, #48]
   974a8:	32196000 	orr	w0, w0, #0xffffff80
   974ac:	3900c260 	strb	w0, [x19, #48]
   974b0:	b94002a1 	ldr	w1, [x21]
   974b4:	2a1b03e4 	mov	w4, w27
   974b8:	8b0402d6 	add	x22, x22, x4
   974bc:	f9401e62 	ldr	x2, [x19, #56]
   974c0:	f9400a60 	ldr	x0, [x19, #16]
   974c4:	0b1b0021 	add	w1, w1, w27
   974c8:	8b020084 	add	x4, x4, x2
   974cc:	b90002a1 	str	w1, [x21]
   974d0:	eb04001f 	cmp	x0, x4
   974d4:	9a842000 	csel	x0, x0, x4, cs  // cs = hs, nlast
   974d8:	f9000a60 	str	x0, [x19, #16]
   974dc:	6b1b0339 	subs	w25, w25, w27
   974e0:	f9001e64 	str	x4, [x19, #56]
   974e4:	54fff7c1 	b.ne	973dc <f_write+0x7c>  // b.any
   974e8:	3940c261 	ldrb	w1, [x19, #48]
   974ec:	f94037e0 	ldr	x0, [sp, #104]
   974f0:	321a0021 	orr	w1, w1, #0x40
   974f4:	3900c261 	strb	w1, [x19, #48]
   974f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   974fc:	a94573fb 	ldp	x27, x28, [sp, #80]
   97500:	b5000be0 	cbnz	x0, 9767c <f_write+0x31c>
   97504:	2a1403e0 	mov	w0, w20
   97508:	a94153f3 	ldp	x19, x20, [sp, #16]
   9750c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97510:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97514:	a8c77bfd 	ldp	x29, x30, [sp], #112
   97518:	d65f03c0 	ret
   9751c:	2a0003f4 	mov	w20, w0
   97520:	f94037e0 	ldr	x0, [sp, #104]
   97524:	f100001f 	cmp	x0, #0x0
   97528:	7a4c1a84 	ccmp	w20, #0xc, #0x4, ne  // ne = any
   9752c:	54fffec0 	b.eq	97504 <f_write+0x1a4>  // b.none
   97530:	2a1403e1 	mov	w1, w20
   97534:	97fff5f7 	bl	94d10 <unlock_fs.part.0>
   97538:	2a1403e0 	mov	w0, w20
   9753c:	a94153f3 	ldp	x19, x20, [sp, #16]
   97540:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97544:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97548:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9754c:	d65f03c0 	ret
   97550:	52800041 	mov	w1, #0x2                   	// #2
   97554:	52800054 	mov	w20, #0x2                   	// #2
   97558:	3900c661 	strb	w1, [x19, #49]
   9755c:	f9401000 	ldr	x0, [x0, #32]
   97560:	940012a4 	bl	9bff0 <ff_rel_grant>
   97564:	2a1403e0 	mov	w0, w20
   97568:	a94153f3 	ldp	x19, x20, [sp, #16]
   9756c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97570:	a94363f7 	ldp	x23, x24, [sp, #48]
   97574:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97578:	a94573fb 	ldp	x27, x28, [sp, #80]
   9757c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   97580:	d65f03c0 	ret
   97584:	53097f3b 	lsr	w27, w25, #9
   97588:	4b1c0064 	sub	w4, w3, w28
   9758c:	39400400 	ldrb	w0, [x0, #1]
   97590:	0b1b0381 	add	w1, w28, w27
   97594:	aa1a03e2 	mov	x2, x26
   97598:	6b03003f 	cmp	w1, w3
   9759c:	aa1603e1 	mov	x1, x22
   975a0:	1a84937b 	csel	w27, w27, w4, ls  // ls = plast
   975a4:	2a1b03e3 	mov	w3, w27
   975a8:	940011ee 	bl	9bd60 <disk_write>
   975ac:	35000380 	cbnz	w0, 9761c <f_write+0x2bc>
   975b0:	f9402662 	ldr	x2, [x19, #72]
   975b4:	cb1a0042 	sub	x2, x2, x26
   975b8:	eb3b405f 	cmp	x2, w27, uxtw
   975bc:	54000663 	b.cc	97688 <f_write+0x328>  // b.lo, b.ul, b.last
   975c0:	53175b7b 	lsl	w27, w27, #9
   975c4:	17ffffbb 	b	974b0 <f_write+0x150>
   975c8:	b9000e61 	str	w1, [x19, #12]
   975cc:	39c0c261 	ldrsb	w1, [x19, #48]
   975d0:	36fff2e1 	tbz	w1, #31, 9742c <f_write+0xcc>
   975d4:	39400400 	ldrb	w0, [x0, #1]
   975d8:	52800023 	mov	w3, #0x1                   	// #1
   975dc:	aa1703e1 	mov	x1, x23
   975e0:	f9402662 	ldr	x2, [x19, #72]
   975e4:	940011df 	bl	9bd60 <disk_write>
   975e8:	350001a0 	cbnz	w0, 9761c <f_write+0x2bc>
   975ec:	3940c261 	ldrb	w1, [x19, #48]
   975f0:	f94037e0 	ldr	x0, [sp, #104]
   975f4:	12001821 	and	w1, w1, #0x7f
   975f8:	3900c261 	strb	w1, [x19, #48]
   975fc:	17ffff8c 	b	9742c <f_write+0xcc>
   97600:	aa1303e0 	mov	x0, x19
   97604:	97fff2ff 	bl	94200 <create_chain>
   97608:	2a0003e1 	mov	w1, w0
   9760c:	f94037e0 	ldr	x0, [sp, #104]
   97610:	35ffefc1 	cbnz	w1, 97408 <f_write+0xa8>
   97614:	3940c261 	ldrb	w1, [x19, #48]
   97618:	17ffffb6 	b	974f0 <f_write+0x190>
   9761c:	52800021 	mov	w1, #0x1                   	// #1
   97620:	f94037e0 	ldr	x0, [sp, #104]
   97624:	3900c661 	strb	w1, [x19, #49]
   97628:	b4000140 	cbz	x0, 97650 <f_write+0x2f0>
   9762c:	f9401000 	ldr	x0, [x0, #32]
   97630:	52800034 	mov	w20, #0x1                   	// #1
   97634:	9400126f 	bl	9bff0 <ff_rel_grant>
   97638:	a94363f7 	ldp	x23, x24, [sp, #48]
   9763c:	a94573fb 	ldp	x27, x28, [sp, #80]
   97640:	17ffffb1 	b	97504 <f_write+0x1a4>
   97644:	52800021 	mov	w1, #0x1                   	// #1
   97648:	3900c661 	strb	w1, [x19, #49]
   9764c:	b5ffff00 	cbnz	x0, 9762c <f_write+0x2cc>
   97650:	52800034 	mov	w20, #0x1                   	// #1
   97654:	a94363f7 	ldp	x23, x24, [sp, #48]
   97658:	a94573fb 	ldp	x27, x28, [sp, #80]
   9765c:	17ffffaa 	b	97504 <f_write+0x1a4>
   97660:	b9404261 	ldr	w1, [x19, #64]
   97664:	aa1303e0 	mov	x0, x19
   97668:	97fff2e6 	bl	94200 <create_chain>
   9766c:	2a0003e1 	mov	w1, w0
   97670:	17ffffe7 	b	9760c <f_write+0x2ac>
   97674:	528000f4 	mov	w20, #0x7                   	// #7
   97678:	b4fff460 	cbz	x0, 97504 <f_write+0x1a4>
   9767c:	f9401000 	ldr	x0, [x0, #32]
   97680:	9400125c 	bl	9bff0 <ff_rel_grant>
   97684:	17ffffa0 	b	97504 <f_write+0x1a4>
   97688:	8b0226c1 	add	x1, x22, x2, lsl #9
   9768c:	aa1703e0 	mov	x0, x23
   97690:	52804002 	mov	w2, #0x200                 	// #512
   97694:	97ffee8f 	bl	930d0 <mem_cpy.part.0>
   97698:	3940c260 	ldrb	w0, [x19, #48]
   9769c:	53175b7b 	lsl	w27, w27, #9
   976a0:	12001800 	and	w0, w0, #0x7f
   976a4:	3900c260 	strb	w0, [x19, #48]
   976a8:	17ffff82 	b	974b0 <f_write+0x150>
   976ac:	39400400 	ldrb	w0, [x0, #1]
   976b0:	52800023 	mov	w3, #0x1                   	// #1
   976b4:	aa1a03e2 	mov	x2, x26
   976b8:	aa1703e1 	mov	x1, x23
   976bc:	94001161 	bl	9bc40 <disk_read>
   976c0:	35fffae0 	cbnz	w0, 9761c <f_write+0x2bc>
   976c4:	f9401e64 	ldr	x4, [x19, #56]
   976c8:	17ffff6d 	b	9747c <f_write+0x11c>
   976cc:	321a0042 	orr	w2, w2, #0x40
   976d0:	3900c262 	strb	w2, [x19, #48]
   976d4:	17ffffea 	b	9767c <f_write+0x31c>
   976d8:	52800041 	mov	w1, #0x2                   	// #2
   976dc:	52800054 	mov	w20, #0x2                   	// #2
   976e0:	3900c661 	strb	w1, [x19, #49]
   976e4:	b4fff400 	cbz	x0, 97564 <f_write+0x204>
   976e8:	17ffff9d 	b	9755c <f_write+0x1fc>
   976ec:	d503201f 	nop

00000000000976f0 <putc_bfd>:
   976f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   976f4:	910003fd 	mov	x29, sp
   976f8:	a90153f3 	stp	x19, x20, [sp, #16]
   976fc:	aa0003f3 	mov	x19, x0
   97700:	b9400800 	ldr	w0, [x0, #8]
   97704:	37f80180 	tbnz	w0, #31, 97734 <putc_bfd+0x44>
   97708:	13001c21 	sxtb	w1, w1
   9770c:	b9400e74 	ldr	w20, [x19, #12]
   97710:	f90013f5 	str	x21, [sp, #32]
   97714:	11000415 	add	w21, w0, #0x1
   97718:	8b20c260 	add	x0, x19, w0, sxtw
   9771c:	7100eebf 	cmp	w21, #0x3b
   97720:	39004001 	strb	w1, [x0, #16]
   97724:	540000ec 	b.gt	97740 <putc_bfd+0x50>
   97728:	11000694 	add	w20, w20, #0x1
   9772c:	29015275 	stp	w21, w20, [x19, #8]
   97730:	f94013f5 	ldr	x21, [sp, #32]
   97734:	a94153f3 	ldp	x19, x20, [sp, #16]
   97738:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9773c:	d65f03c0 	ret
   97740:	aa1303e1 	mov	x1, x19
   97744:	2a1503e2 	mov	w2, w21
   97748:	9100f3e3 	add	x3, sp, #0x3c
   9774c:	f8410420 	ldr	x0, [x1], #16
   97750:	97ffff04 	bl	97360 <f_write>
   97754:	b9403fe0 	ldr	w0, [sp, #60]
   97758:	6b15001f 	cmp	w0, w21
   9775c:	5a9f03f5 	csetm	w21, ne  // ne = any
   97760:	17fffff2 	b	97728 <putc_bfd+0x38>
   97764:	d503201f 	nop
   97768:	d503201f 	nop
   9776c:	d503201f 	nop

0000000000097770 <putc_flush>:
   97770:	b9400802 	ldr	w2, [x0, #8]
   97774:	37f802c2 	tbnz	w2, #31, 977cc <putc_flush+0x5c>
   97778:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9777c:	aa0003e1 	mov	x1, x0
   97780:	910003fd 	mov	x29, sp
   97784:	9100b3e3 	add	x3, sp, #0x2c
   97788:	f9000bf3 	str	x19, [sp, #16]
   9778c:	aa0003f3 	mov	x19, x0
   97790:	f8410420 	ldr	x0, [x1], #16
   97794:	97fffef3 	bl	97360 <f_write>
   97798:	35000120 	cbnz	w0, 977bc <putc_flush+0x4c>
   9779c:	b9400a61 	ldr	w1, [x19, #8]
   977a0:	b9402fe0 	ldr	w0, [sp, #44]
   977a4:	6b00003f 	cmp	w1, w0
   977a8:	540000a1 	b.ne	977bc <putc_flush+0x4c>  // b.any
   977ac:	b9400e60 	ldr	w0, [x19, #12]
   977b0:	f9400bf3 	ldr	x19, [sp, #16]
   977b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   977b8:	d65f03c0 	ret
   977bc:	12800000 	mov	w0, #0xffffffff            	// #-1
   977c0:	f9400bf3 	ldr	x19, [sp, #16]
   977c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   977c8:	d65f03c0 	ret
   977cc:	12800000 	mov	w0, #0xffffffff            	// #-1
   977d0:	d65f03c0 	ret
   977d4:	d503201f 	nop
   977d8:	d503201f 	nop
   977dc:	d503201f 	nop

00000000000977e0 <f_sync>:
   977e0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   977e4:	910003fd 	mov	x29, sp
   977e8:	9100e3e1 	add	x1, sp, #0x38
   977ec:	a90153f3 	stp	x19, x20, [sp, #16]
   977f0:	aa0003f4 	mov	x20, x0
   977f4:	97fffc43 	bl	96900 <validate>
   977f8:	2a0003f3 	mov	w19, w0
   977fc:	340001a0 	cbz	w0, 97830 <f_sync+0x50>
   97800:	7100301f 	cmp	w0, #0xc
   97804:	1a9f07e1 	cset	w1, ne  // ne = any
   97808:	f9401fe0 	ldr	x0, [sp, #56]
   9780c:	f100001f 	cmp	x0, #0x0
   97810:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
   97814:	54000060 	b.eq	97820 <f_sync+0x40>  // b.none
   97818:	2a1303e1 	mov	w1, w19
   9781c:	97fff53d 	bl	94d10 <unlock_fs.part.0>
   97820:	2a1303e0 	mov	w0, w19
   97824:	a94153f3 	ldp	x19, x20, [sp, #16]
   97828:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9782c:	d65f03c0 	ret
   97830:	3940c280 	ldrb	w0, [x20, #48]
   97834:	36300620 	tbz	w0, #6, 978f8 <f_sync+0x118>
   97838:	37380640 	tbnz	w0, #7, 97900 <f_sync+0x120>
   9783c:	a9025bf5 	stp	x21, x22, [sp, #32]
   97840:	94001204 	bl	9c050 <get_fattime>
   97844:	f9401fe2 	ldr	x2, [sp, #56]
   97848:	2a0003f5 	mov	w21, w0
   9784c:	39400041 	ldrb	w1, [x2]
   97850:	7100103f 	cmp	w1, #0x4
   97854:	540006e0 	b.eq	97930 <f_sync+0x150>  // b.none
   97858:	f9402a81 	ldr	x1, [x20, #80]
   9785c:	f9403840 	ldr	x0, [x2, #112]
   97860:	eb00003f 	cmp	x1, x0
   97864:	540000c0 	b.eq	9787c <f_sync+0x9c>  // b.none
   97868:	aa0203e0 	mov	x0, x2
   9786c:	97ffeef9 	bl	93450 <move_window.part.0>
   97870:	2a0003f3 	mov	w19, w0
   97874:	35000720 	cbnz	w0, 97958 <f_sync+0x178>
   97878:	f9401fe2 	ldr	x2, [sp, #56]
   9787c:	f9402e81 	ldr	x1, [x20, #88]
   97880:	39402c20 	ldrb	w0, [x1, #11]
   97884:	321b0000 	orr	w0, w0, #0x20
   97888:	39002c20 	strb	w0, [x1, #11]
   9788c:	79401a84 	ldrh	w4, [x20, #12]
   97890:	f9400283 	ldr	x3, [x20]
   97894:	b9400e80 	ldr	w0, [x20, #12]
   97898:	79003424 	strh	w4, [x1, #26]
   9789c:	39400063 	ldrb	w3, [x3]
   978a0:	71000c7f 	cmp	w3, #0x3
   978a4:	540000a1 	b.ne	978b8 <f_sync+0xd8>  // b.any
   978a8:	53107c00 	lsr	w0, w0, #16
   978ac:	53087c03 	lsr	w3, w0, #8
   978b0:	39005020 	strb	w0, [x1, #20]
   978b4:	39005423 	strb	w3, [x1, #21]
   978b8:	b9401284 	ldr	w4, [x20, #16]
   978bc:	52800023 	mov	w3, #0x1                   	// #1
   978c0:	aa0203e0 	mov	x0, x2
   978c4:	7900243f 	strh	wzr, [x1, #18]
   978c8:	b8016035 	stur	w21, [x1, #22]
   978cc:	b9001c24 	str	w4, [x1, #28]
   978d0:	39000c43 	strb	w3, [x2, #3]
   978d4:	97ffeea3 	bl	93360 <sync_fs>
   978d8:	3940c282 	ldrb	w2, [x20, #48]
   978dc:	7100301f 	cmp	w0, #0xc
   978e0:	2a0003f3 	mov	w19, w0
   978e4:	1a9f07e1 	cset	w1, ne  // ne = any
   978e8:	12197842 	and	w2, w2, #0xffffffbf
   978ec:	3900c282 	strb	w2, [x20, #48]
   978f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   978f4:	17ffffc5 	b	97808 <f_sync+0x28>
   978f8:	52800021 	mov	w1, #0x1                   	// #1
   978fc:	17ffffc3 	b	97808 <f_sync+0x28>
   97900:	f9401fe0 	ldr	x0, [sp, #56]
   97904:	52800023 	mov	w3, #0x1                   	// #1
   97908:	91018281 	add	x1, x20, #0x60
   9790c:	f9402682 	ldr	x2, [x20, #72]
   97910:	39400400 	ldrb	w0, [x0, #1]
   97914:	94001113 	bl	9bd60 <disk_write>
   97918:	35000560 	cbnz	w0, 979c4 <f_sync+0x1e4>
   9791c:	a9025bf5 	stp	x21, x22, [sp, #32]
   97920:	3940c280 	ldrb	w0, [x20, #48]
   97924:	12001800 	and	w0, w0, #0x7f
   97928:	3900c280 	strb	w0, [x20, #48]
   9792c:	17ffffc5 	b	97840 <f_sync+0x60>
   97930:	39402e80 	ldrb	w0, [x20, #11]
   97934:	71000c1f 	cmp	w0, #0x3
   97938:	54000180 	b.eq	97968 <f_sync+0x188>  // b.none
   9793c:	b9404282 	ldr	w2, [x20, #64]
   97940:	12800003 	mov	w3, #0xffffffff            	// #-1
   97944:	91007281 	add	x1, x20, #0x1c
   97948:	aa1403e0 	mov	x0, x20
   9794c:	97fff205 	bl	94160 <fill_last_frag.isra.0>
   97950:	2a0003f3 	mov	w19, w0
   97954:	34000140 	cbz	w0, 9797c <f_sync+0x19c>
   97958:	7100327f 	cmp	w19, #0xc
   9795c:	1a9f07e1 	cset	w1, ne  // ne = any
   97960:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97964:	17ffffa9 	b	97808 <f_sync+0x28>
   97968:	aa1403e0 	mov	x0, x20
   9796c:	97fff4bd 	bl	94c60 <fill_first_frag.part.0>
   97970:	2a0003f3 	mov	w19, w0
   97974:	34fffe40 	cbz	w0, 9793c <f_sync+0x15c>
   97978:	17fffff8 	b	97958 <f_sync+0x178>
   9797c:	52808c00 	mov	w0, #0x460                 	// #1120
   97980:	940011ac 	bl	9c030 <ff_memalloc>
   97984:	aa0003f6 	mov	x22, x0
   97988:	b4000720 	cbz	x0, 97a6c <f_sync+0x28c>
   9798c:	f9401fe3 	ldr	x3, [sp, #56]
   97990:	91080002 	add	x2, x0, #0x200
   97994:	aa1403e1 	mov	x1, x20
   97998:	910103e0 	add	x0, sp, #0x40
   9799c:	a9010876 	stp	x22, x2, [x3, #16]
   979a0:	97fff3cc 	bl	948d0 <load_obj_xdir>
   979a4:	2a0003f3 	mov	w19, w0
   979a8:	340001a0 	cbz	w0, 979dc <f_sync+0x1fc>
   979ac:	aa1603e0 	mov	x0, x22
   979b0:	940011a4 	bl	9c040 <ff_memfree>
   979b4:	7100327f 	cmp	w19, #0xc
   979b8:	1a9f07e1 	cset	w1, ne  // ne = any
   979bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   979c0:	17ffff92 	b	97808 <f_sync+0x28>
   979c4:	f9401fe0 	ldr	x0, [sp, #56]
   979c8:	52800033 	mov	w19, #0x1                   	// #1
   979cc:	b4fff2a0 	cbz	x0, 97820 <f_sync+0x40>
   979d0:	f9401000 	ldr	x0, [x0, #32]
   979d4:	94001187 	bl	9bff0 <ff_rel_grant>
   979d8:	17ffff92 	b	97820 <f_sync+0x40>
   979dc:	f9401fe1 	ldr	x1, [sp, #56]
   979e0:	910103e0 	add	x0, sp, #0x40
   979e4:	f9400c22 	ldr	x2, [x1, #24]
   979e8:	39401041 	ldrb	w1, [x2, #4]
   979ec:	321b0021 	orr	w1, w1, #0x20
   979f0:	39001041 	strb	w1, [x2, #4]
   979f4:	f9401fe1 	ldr	x1, [sp, #56]
   979f8:	39402e82 	ldrb	w2, [x20, #11]
   979fc:	f9400c23 	ldr	x3, [x1, #24]
   97a00:	32000042 	orr	w2, w2, #0x1
   97a04:	39008462 	strb	w2, [x3, #33]
   97a08:	b9400e83 	ldr	w3, [x20, #12]
   97a0c:	f9400c22 	ldr	x2, [x1, #24]
   97a10:	b9003443 	str	w3, [x2, #52]
   97a14:	f9400a83 	ldr	x3, [x20, #16]
   97a18:	f9400c22 	ldr	x2, [x1, #24]
   97a1c:	f9001c43 	str	x3, [x2, #56]
   97a20:	f9400a83 	ldr	x3, [x20, #16]
   97a24:	f9400c22 	ldr	x2, [x1, #24]
   97a28:	f9001443 	str	x3, [x2, #40]
   97a2c:	f9400c22 	ldr	x2, [x1, #24]
   97a30:	b9000c55 	str	w21, [x2, #12]
   97a34:	f9400c22 	ldr	x2, [x1, #24]
   97a38:	3900545f 	strb	wzr, [x2, #21]
   97a3c:	f9400c21 	ldr	x1, [x1, #24]
   97a40:	b900103f 	str	wzr, [x1, #16]
   97a44:	97fff3f3 	bl	94a10 <store_xdir>
   97a48:	2a0003f3 	mov	w19, w0
   97a4c:	35fffb00 	cbnz	w0, 979ac <f_sync+0x1cc>
   97a50:	f9401fe0 	ldr	x0, [sp, #56]
   97a54:	97ffee43 	bl	93360 <sync_fs>
   97a58:	2a0003f3 	mov	w19, w0
   97a5c:	3940c280 	ldrb	w0, [x20, #48]
   97a60:	12197800 	and	w0, w0, #0xffffffbf
   97a64:	3900c280 	strb	w0, [x20, #48]
   97a68:	17ffffd1 	b	979ac <f_sync+0x1cc>
   97a6c:	f9401fe0 	ldr	x0, [sp, #56]
   97a70:	b4000060 	cbz	x0, 97a7c <f_sync+0x29c>
   97a74:	f9401000 	ldr	x0, [x0, #32]
   97a78:	9400115e 	bl	9bff0 <ff_rel_grant>
   97a7c:	52800233 	mov	w19, #0x11                  	// #17
   97a80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97a84:	17ffff67 	b	97820 <f_sync+0x40>
   97a88:	d503201f 	nop
   97a8c:	d503201f 	nop

0000000000097a90 <f_close>:
   97a90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97a94:	910003fd 	mov	x29, sp
   97a98:	a90153f3 	stp	x19, x20, [sp, #16]
   97a9c:	aa0003f4 	mov	x20, x0
   97aa0:	97ffff50 	bl	977e0 <f_sync>
   97aa4:	2a0003f3 	mov	w19, w0
   97aa8:	340000a0 	cbz	w0, 97abc <f_close+0x2c>
   97aac:	2a1303e0 	mov	w0, w19
   97ab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   97ab4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97ab8:	d65f03c0 	ret
   97abc:	9100a3e1 	add	x1, sp, #0x28
   97ac0:	aa1403e0 	mov	x0, x20
   97ac4:	97fffb8f 	bl	96900 <validate>
   97ac8:	2a0003f3 	mov	w19, w0
   97acc:	35ffff00 	cbnz	w0, 97aac <f_close+0x1c>
   97ad0:	f900029f 	str	xzr, [x20]
   97ad4:	f94017e0 	ldr	x0, [sp, #40]
   97ad8:	b4fffea0 	cbz	x0, 97aac <f_close+0x1c>
   97adc:	f9401000 	ldr	x0, [x0, #32]
   97ae0:	94001144 	bl	9bff0 <ff_rel_grant>
   97ae4:	17fffff2 	b	97aac <f_close+0x1c>
   97ae8:	d503201f 	nop
   97aec:	d503201f 	nop

0000000000097af0 <f_chdrive>:
   97af0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97af4:	910003fd 	mov	x29, sp
   97af8:	f9000fe0 	str	x0, [sp, #24]
   97afc:	910063e0 	add	x0, sp, #0x18
   97b00:	97ffec0c 	bl	92b30 <get_ldnumber>
   97b04:	37f800e0 	tbnz	w0, #31, 97b20 <f_chdrive+0x30>
   97b08:	2a0003e1 	mov	w1, w0
   97b0c:	f00000e2 	adrp	x2, b6000 <s_OldInfo+0x68>
   97b10:	52800000 	mov	w0, #0x0                   	// #0
   97b14:	39392041 	strb	w1, [x2, #3656]
   97b18:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97b1c:	d65f03c0 	ret
   97b20:	52800160 	mov	w0, #0xb                   	// #11
   97b24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97b28:	d65f03c0 	ret
   97b2c:	d503201f 	nop

0000000000097b30 <f_chdir>:
   97b30:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   97b34:	910003fd 	mov	x29, sp
   97b38:	52800002 	mov	w2, #0x0                   	// #0
   97b3c:	9100e3e1 	add	x1, sp, #0x38
   97b40:	f90017e0 	str	x0, [sp, #40]
   97b44:	9100a3e0 	add	x0, sp, #0x28
   97b48:	a90153f3 	stp	x19, x20, [sp, #16]
   97b4c:	97fff479 	bl	94d30 <mount_volume>
   97b50:	340001c0 	cbz	w0, 97b88 <f_chdir+0x58>
   97b54:	2a0003f3 	mov	w19, w0
   97b58:	7100301f 	cmp	w0, #0xc
   97b5c:	1a9f07e1 	cset	w1, ne  // ne = any
   97b60:	f9401fe0 	ldr	x0, [sp, #56]
   97b64:	f100001f 	cmp	x0, #0x0
   97b68:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
   97b6c:	54000060 	b.eq	97b78 <f_chdir+0x48>  // b.none
   97b70:	2a1303e1 	mov	w1, w19
   97b74:	97fff467 	bl	94d10 <unlock_fs.part.0>
   97b78:	2a1303e0 	mov	w0, w19
   97b7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   97b80:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   97b84:	d65f03c0 	ret
   97b88:	f9401fe1 	ldr	x1, [sp, #56]
   97b8c:	52808c00 	mov	w0, #0x460                 	// #1120
   97b90:	f90023e1 	str	x1, [sp, #64]
   97b94:	94001127 	bl	9c030 <ff_memalloc>
   97b98:	aa0003f4 	mov	x20, x0
   97b9c:	b4000520 	cbz	x0, 97c40 <f_chdir+0x110>
   97ba0:	f9401fe3 	ldr	x3, [sp, #56]
   97ba4:	91080002 	add	x2, x0, #0x200
   97ba8:	910103e0 	add	x0, sp, #0x40
   97bac:	f94017e1 	ldr	x1, [sp, #40]
   97bb0:	a9010874 	stp	x20, x2, [x3, #16]
   97bb4:	97fff817 	bl	95c10 <follow_path>
   97bb8:	2a0003f3 	mov	w19, w0
   97bbc:	35000300 	cbnz	w0, 97c1c <f_chdir+0xec>
   97bc0:	39c24fe0 	ldrsb	w0, [sp, #147]
   97bc4:	37f804a0 	tbnz	w0, #31, 97c58 <f_chdir+0x128>
   97bc8:	39412be0 	ldrb	w0, [sp, #74]
   97bcc:	362005a0 	tbz	w0, #4, 97c80 <f_chdir+0x150>
   97bd0:	f9401fe1 	ldr	x1, [sp, #56]
   97bd4:	39400020 	ldrb	w0, [x1]
   97bd8:	7100101f 	cmp	w0, #0x4
   97bdc:	540006c0 	b.eq	97cb4 <f_chdir+0x184>  // b.none
   97be0:	f94043e3 	ldr	x3, [sp, #128]
   97be4:	71000c1f 	cmp	w0, #0x3
   97be8:	39406862 	ldrb	w2, [x3, #26]
   97bec:	39406c60 	ldrb	w0, [x3, #27]
   97bf0:	33185c02 	bfi	w2, w0, #8, #24
   97bf4:	540000a1 	b.ne	97c08 <f_chdir+0xd8>  // b.any
   97bf8:	39405464 	ldrb	w4, [x3, #21]
   97bfc:	39405060 	ldrb	w0, [x3, #20]
   97c00:	33185c80 	bfi	w0, w4, #8, #24
   97c04:	2a004042 	orr	w2, w2, w0, lsl #16
   97c08:	aa1403e0 	mov	x0, x20
   97c0c:	b9003022 	str	w2, [x1, #48]
   97c10:	9400110c 	bl	9c040 <ff_memfree>
   97c14:	52800021 	mov	w1, #0x1                   	// #1
   97c18:	17ffffd2 	b	97b60 <f_chdir+0x30>
   97c1c:	aa1403e0 	mov	x0, x20
   97c20:	94001108 	bl	9c040 <ff_memfree>
   97c24:	7100327f 	cmp	w19, #0xc
   97c28:	1a9f07e1 	cset	w1, ne  // ne = any
   97c2c:	7100127f 	cmp	w19, #0x4
   97c30:	54fff981 	b.ne	97b60 <f_chdir+0x30>  // b.any
   97c34:	52800021 	mov	w1, #0x1                   	// #1
   97c38:	528000b3 	mov	w19, #0x5                   	// #5
   97c3c:	17ffffc9 	b	97b60 <f_chdir+0x30>
   97c40:	f9401fe0 	ldr	x0, [sp, #56]
   97c44:	52800233 	mov	w19, #0x11                  	// #17
   97c48:	b4fff980 	cbz	x0, 97b78 <f_chdir+0x48>
   97c4c:	f9401000 	ldr	x0, [x0, #32]
   97c50:	940010e8 	bl	9bff0 <ff_rel_grant>
   97c54:	17ffffc9 	b	97b78 <f_chdir+0x48>
   97c58:	f9401fe1 	ldr	x1, [sp, #56]
   97c5c:	b9404fe2 	ldr	w2, [sp, #76]
   97c60:	39400020 	ldrb	w0, [x1]
   97c64:	b9003022 	str	w2, [x1, #48]
   97c68:	7100101f 	cmp	w0, #0x4
   97c6c:	54000140 	b.eq	97c94 <f_chdir+0x164>  // b.none
   97c70:	aa1403e0 	mov	x0, x20
   97c74:	940010f3 	bl	9c040 <ff_memfree>
   97c78:	52800021 	mov	w1, #0x1                   	// #1
   97c7c:	17ffffb9 	b	97b60 <f_chdir+0x30>
   97c80:	aa1403e0 	mov	x0, x20
   97c84:	528000b3 	mov	w19, #0x5                   	// #5
   97c88:	940010ee 	bl	9c040 <ff_memfree>
   97c8c:	52800021 	mov	w1, #0x1                   	// #1
   97c90:	17ffffb4 	b	97b60 <f_chdir+0x30>
   97c94:	b94063e3 	ldr	w3, [sp, #96]
   97c98:	aa1403e0 	mov	x0, x20
   97c9c:	f84643e2 	ldur	x2, [sp, #100]
   97ca0:	b9003423 	str	w3, [x1, #52]
   97ca4:	f9001c22 	str	x2, [x1, #56]
   97ca8:	940010e6 	bl	9c040 <ff_memfree>
   97cac:	52800021 	mov	w1, #0x1                   	// #1
   97cb0:	17ffffac 	b	97b60 <f_chdir+0x30>
   97cb4:	f9400c24 	ldr	x4, [x1, #24]
   97cb8:	aa1403e0 	mov	x0, x20
   97cbc:	f9402be3 	ldr	x3, [sp, #80]
   97cc0:	39412fe5 	ldrb	w5, [sp, #75]
   97cc4:	79406c82 	ldrh	w2, [x4, #54]
   97cc8:	12185c63 	and	w3, w3, #0xffffff00
   97ccc:	3940d486 	ldrb	w6, [x4, #53]
   97cd0:	2a050063 	orr	w3, w3, w5
   97cd4:	3940d085 	ldrb	w5, [x4, #52]
   97cd8:	b9003823 	str	w3, [x1, #56]
   97cdc:	b9404fe4 	ldr	w4, [sp, #76]
   97ce0:	2a0220c2 	orr	w2, w6, w2, lsl #8
   97ce4:	b94097e3 	ldr	w3, [sp, #148]
   97ce8:	2a0220a2 	orr	w2, w5, w2, lsl #8
   97cec:	29061022 	stp	w2, w4, [x1, #48]
   97cf0:	b9003c23 	str	w3, [x1, #60]
   97cf4:	940010d3 	bl	9c040 <ff_memfree>
   97cf8:	52800021 	mov	w1, #0x1                   	// #1
   97cfc:	17ffff99 	b	97b60 <f_chdir+0x30>

0000000000097d00 <f_lseek>:
   97d00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97d04:	910003fd 	mov	x29, sp
   97d08:	a90153f3 	stp	x19, x20, [sp, #16]
   97d0c:	aa0103f4 	mov	x20, x1
   97d10:	9100e3e1 	add	x1, sp, #0x38
   97d14:	aa0003f3 	mov	x19, x0
   97d18:	a9025bf5 	stp	x21, x22, [sp, #32]
   97d1c:	97fffaf9 	bl	96900 <validate>
   97d20:	340001c0 	cbz	w0, 97d58 <f_lseek+0x58>
   97d24:	f9401fe4 	ldr	x4, [sp, #56]
   97d28:	2a0003f5 	mov	w21, w0
   97d2c:	f100009f 	cmp	x4, #0x0
   97d30:	7a4c1aa4 	ccmp	w21, #0xc, #0x4, ne  // ne = any
   97d34:	54000080 	b.eq	97d44 <f_lseek+0x44>  // b.none
   97d38:	aa0403e0 	mov	x0, x4
   97d3c:	2a1503e1 	mov	w1, w21
   97d40:	97fff3f4 	bl	94d10 <unlock_fs.part.0>
   97d44:	2a1503e0 	mov	w0, w21
   97d48:	a94153f3 	ldp	x19, x20, [sp, #16]
   97d4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97d50:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97d54:	d65f03c0 	ret
   97d58:	3940c675 	ldrb	w21, [x19, #49]
   97d5c:	f9401fe4 	ldr	x4, [sp, #56]
   97d60:	35fffe75 	cbnz	w21, 97d2c <f_lseek+0x2c>
   97d64:	39400080 	ldrb	w0, [x4]
   97d68:	7100101f 	cmp	w0, #0x4
   97d6c:	54000ca0 	b.eq	97f00 <f_lseek+0x200>  // b.none
   97d70:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   97d74:	eb00029f 	cmp	x20, x0
   97d78:	9a809294 	csel	x20, x20, x0, ls  // ls = plast
   97d7c:	f9400a60 	ldr	x0, [x19, #16]
   97d80:	eb14001f 	cmp	x0, x20
   97d84:	54000082 	b.cs	97d94 <f_lseek+0x94>  // b.hs, b.nlast
   97d88:	3940c261 	ldrb	w1, [x19, #48]
   97d8c:	f27f003f 	tst	x1, #0x2
   97d90:	9a801294 	csel	x20, x20, x0, ne  // ne = any
   97d94:	f9401e62 	ldr	x2, [x19, #56]
   97d98:	f9001e7f 	str	xzr, [x19, #56]
   97d9c:	b4000a34 	cbz	x20, 97ee0 <f_lseek+0x1e0>
   97da0:	79401496 	ldrh	w22, [x4, #10]
   97da4:	53175ad6 	lsl	w22, w22, #9
   97da8:	b40005e2 	cbz	x2, 97e64 <f_lseek+0x164>
   97dac:	2a1603e1 	mov	w1, w22
   97db0:	d1000443 	sub	x3, x2, #0x1
   97db4:	d1000680 	sub	x0, x20, #0x1
   97db8:	9ac10862 	udiv	x2, x3, x1
   97dbc:	9ac10800 	udiv	x0, x0, x1
   97dc0:	eb02001f 	cmp	x0, x2
   97dc4:	54000503 	b.cc	97e64 <f_lseek+0x164>  // b.lo, b.ul, b.last
   97dc8:	510006c2 	sub	w2, w22, #0x1
   97dcc:	b9404261 	ldr	w1, [x19, #64]
   97dd0:	8a220063 	bic	x3, x3, x2
   97dd4:	cb030294 	sub	x20, x20, x3
   97dd8:	f9001e63 	str	x3, [x19, #56]
   97ddc:	340004e1 	cbz	w1, 97e78 <f_lseek+0x178>
   97de0:	eb36429f 	cmp	x20, w22, uxtw
   97de4:	540002e8 	b.hi	97e40 <f_lseek+0x140>  // b.pmore
   97de8:	14000070 	b	97fa8 <f_lseek+0x2a8>
   97dec:	f9400a64 	ldr	x4, [x19, #16]
   97df0:	321a0063 	orr	w3, w3, #0x40
   97df4:	eb04005f 	cmp	x2, x4
   97df8:	54000069 	b.ls	97e04 <f_lseek+0x104>  // b.plast
   97dfc:	f9000a62 	str	x2, [x19, #16]
   97e00:	3900c263 	strb	w3, [x19, #48]
   97e04:	97fff0ff 	bl	94200 <create_chain>
   97e08:	2a0003e1 	mov	w1, w0
   97e0c:	340011e0 	cbz	w0, 98048 <f_lseek+0x348>
   97e10:	3100043f 	cmn	w1, #0x1
   97e14:	f9401fe4 	ldr	x4, [sp, #56]
   97e18:	54000f40 	b.eq	98000 <f_lseek+0x300>  // b.none
   97e1c:	7100043f 	cmp	w1, #0x1
   97e20:	54000fe9 	b.ls	9801c <f_lseek+0x31c>  // b.plast
   97e24:	b9404080 	ldr	w0, [x4, #64]
   97e28:	6b01001f 	cmp	w0, w1
   97e2c:	54001029 	b.ls	98030 <f_lseek+0x330>  // b.plast
   97e30:	eb1402df 	cmp	x22, x20
   97e34:	b9004261 	str	w1, [x19, #64]
   97e38:	f9401e63 	ldr	x3, [x19, #56]
   97e3c:	54000ba2 	b.cs	97fb0 <f_lseek+0x2b0>  // b.hs, b.nlast
   97e40:	8b0302c2 	add	x2, x22, x3
   97e44:	aa1303e0 	mov	x0, x19
   97e48:	3940c263 	ldrb	w3, [x19, #48]
   97e4c:	cb160294 	sub	x20, x20, x22
   97e50:	f9001e62 	str	x2, [x19, #56]
   97e54:	370ffcc3 	tbnz	w3, #1, 97dec <f_lseek+0xec>
   97e58:	97ffeeb6 	bl	93930 <get_fat>
   97e5c:	2a0003e1 	mov	w1, w0
   97e60:	17ffffec 	b	97e10 <f_lseek+0x110>
   97e64:	b9400e61 	ldr	w1, [x19, #12]
   97e68:	d2800003 	mov	x3, #0x0                   	// #0
   97e6c:	34000601 	cbz	w1, 97f2c <f_lseek+0x22c>
   97e70:	b9004261 	str	w1, [x19, #64]
   97e74:	35fffb61 	cbnz	w1, 97de0 <f_lseek+0xe0>
   97e78:	f9401fe4 	ldr	x4, [sp, #56]
   97e7c:	d2800016 	mov	x22, #0x0                   	// #0
   97e80:	f9400a60 	ldr	x0, [x19, #16]
   97e84:	eb03001f 	cmp	x0, x3
   97e88:	540000a2 	b.cs	97e9c <f_lseek+0x19c>  // b.hs, b.nlast
   97e8c:	3940c260 	ldrb	w0, [x19, #48]
   97e90:	f9000a63 	str	x3, [x19, #16]
   97e94:	321a0000 	orr	w0, w0, #0x40
   97e98:	3900c260 	strb	w0, [x19, #48]
   97e9c:	f240207f 	tst	x3, #0x1ff
   97ea0:	54000200 	b.eq	97ee0 <f_lseek+0x1e0>  // b.none
   97ea4:	f9402662 	ldr	x2, [x19, #72]
   97ea8:	eb16005f 	cmp	x2, x22
   97eac:	540001a0 	b.eq	97ee0 <f_lseek+0x1e0>  // b.none
   97eb0:	39c0c261 	ldrsb	w1, [x19, #48]
   97eb4:	91018274 	add	x20, x19, #0x60
   97eb8:	39400480 	ldrb	w0, [x4, #1]
   97ebc:	37f804e1 	tbnz	w1, #31, 97f58 <f_lseek+0x258>
   97ec0:	aa1403e1 	mov	x1, x20
   97ec4:	52800023 	mov	w3, #0x1                   	// #1
   97ec8:	aa1603e2 	mov	x2, x22
   97ecc:	94000f5d 	bl	9bc40 <disk_read>
   97ed0:	350004c0 	cbnz	w0, 97f68 <f_lseek+0x268>
   97ed4:	f9401fe4 	ldr	x4, [sp, #56]
   97ed8:	f9002676 	str	x22, [x19, #72]
   97edc:	d503201f 	nop
   97ee0:	b4fff324 	cbz	x4, 97d44 <f_lseek+0x44>
   97ee4:	f9401080 	ldr	x0, [x4, #32]
   97ee8:	94001042 	bl	9bff0 <ff_rel_grant>
   97eec:	a94153f3 	ldp	x19, x20, [sp, #16]
   97ef0:	2a1503e0 	mov	w0, w21
   97ef4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97ef8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97efc:	d65f03c0 	ret
   97f00:	b9404262 	ldr	w2, [x19, #64]
   97f04:	12800003 	mov	w3, #0xffffffff            	// #-1
   97f08:	91007261 	add	x1, x19, #0x1c
   97f0c:	aa1303e0 	mov	x0, x19
   97f10:	97fff094 	bl	94160 <fill_last_frag.isra.0>
   97f14:	f9401fe4 	ldr	x4, [sp, #56]
   97f18:	35000b00 	cbnz	w0, 98078 <f_lseek+0x378>
   97f1c:	39400080 	ldrb	w0, [x4]
   97f20:	7100101f 	cmp	w0, #0x4
   97f24:	54fff2c0 	b.eq	97d7c <f_lseek+0x7c>  // b.none
   97f28:	17ffff92 	b	97d70 <f_lseek+0x70>
   97f2c:	aa1303e0 	mov	x0, x19
   97f30:	97fff0b4 	bl	94200 <create_chain>
   97f34:	7100041f 	cmp	w0, #0x1
   97f38:	2a0003e1 	mov	w1, w0
   97f3c:	540008e0 	b.eq	98058 <f_lseek+0x358>  // b.none
   97f40:	3100041f 	cmn	w0, #0x1
   97f44:	54000120 	b.eq	97f68 <f_lseek+0x268>  // b.none
   97f48:	b9000e60 	str	w0, [x19, #12]
   97f4c:	b9004261 	str	w1, [x19, #64]
   97f50:	f9401e63 	ldr	x3, [x19, #56]
   97f54:	17ffffc8 	b	97e74 <f_lseek+0x174>
   97f58:	52800023 	mov	w3, #0x1                   	// #1
   97f5c:	aa1403e1 	mov	x1, x20
   97f60:	94000f80 	bl	9bd60 <disk_write>
   97f64:	34000160 	cbz	w0, 97f90 <f_lseek+0x290>
   97f68:	52800021 	mov	w1, #0x1                   	// #1
   97f6c:	f9401fe0 	ldr	x0, [sp, #56]
   97f70:	3900c661 	strb	w1, [x19, #49]
   97f74:	b40000a0 	cbz	x0, 97f88 <f_lseek+0x288>
   97f78:	f9401000 	ldr	x0, [x0, #32]
   97f7c:	52800035 	mov	w21, #0x1                   	// #1
   97f80:	9400101c 	bl	9bff0 <ff_rel_grant>
   97f84:	17ffff70 	b	97d44 <f_lseek+0x44>
   97f88:	52800035 	mov	w21, #0x1                   	// #1
   97f8c:	17ffff6e 	b	97d44 <f_lseek+0x44>
   97f90:	3940c260 	ldrb	w0, [x19, #48]
   97f94:	f9401fe1 	ldr	x1, [sp, #56]
   97f98:	12001800 	and	w0, w0, #0x7f
   97f9c:	3900c260 	strb	w0, [x19, #48]
   97fa0:	39400420 	ldrb	w0, [x1, #1]
   97fa4:	17ffffc7 	b	97ec0 <f_lseek+0x1c0>
   97fa8:	f9401fe4 	ldr	x4, [sp, #56]
   97fac:	d503201f 	nop
   97fb0:	8b140063 	add	x3, x3, x20
   97fb4:	f2402296 	ands	x22, x20, #0x1ff
   97fb8:	f9001e63 	str	x3, [x19, #56]
   97fbc:	54fff620 	b.eq	97e80 <f_lseek+0x180>  // b.none
   97fc0:	b9404080 	ldr	w0, [x4, #64]
   97fc4:	51000822 	sub	w2, w1, #0x2
   97fc8:	51000800 	sub	w0, w0, #0x2
   97fcc:	6b00005f 	cmp	w2, w0
   97fd0:	540000c2 	b.cs	97fe8 <f_lseek+0x2e8>  // b.hs, b.nlast
   97fd4:	79401481 	ldrh	w1, [x4, #10]
   97fd8:	f9403080 	ldr	x0, [x4, #96]
   97fdc:	9ba10042 	umaddl	x2, w2, w1, x0
   97fe0:	8b542456 	add	x22, x2, x20, lsr #9
   97fe4:	b5fff4e2 	cbnz	x2, 97e80 <f_lseek+0x180>
   97fe8:	52800040 	mov	w0, #0x2                   	// #2
   97fec:	52800055 	mov	w21, #0x2                   	// #2
   97ff0:	3900c660 	strb	w0, [x19, #49]
   97ff4:	f9401080 	ldr	x0, [x4, #32]
   97ff8:	94000ffe 	bl	9bff0 <ff_rel_grant>
   97ffc:	17ffff52 	b	97d44 <f_lseek+0x44>
   98000:	52800020 	mov	w0, #0x1                   	// #1
   98004:	3900c660 	strb	w0, [x19, #49]
   98008:	b4fffc04 	cbz	x4, 97f88 <f_lseek+0x288>
   9800c:	f9401080 	ldr	x0, [x4, #32]
   98010:	52800035 	mov	w21, #0x1                   	// #1
   98014:	94000ff7 	bl	9bff0 <ff_rel_grant>
   98018:	17ffff4b 	b	97d44 <f_lseek+0x44>
   9801c:	52800040 	mov	w0, #0x2                   	// #2
   98020:	3900c660 	strb	w0, [x19, #49]
   98024:	b50000a4 	cbnz	x4, 98038 <f_lseek+0x338>
   98028:	52800055 	mov	w21, #0x2                   	// #2
   9802c:	17ffff46 	b	97d44 <f_lseek+0x44>
   98030:	52800040 	mov	w0, #0x2                   	// #2
   98034:	3900c660 	strb	w0, [x19, #49]
   98038:	f9401080 	ldr	x0, [x4, #32]
   9803c:	52800055 	mov	w21, #0x2                   	// #2
   98040:	94000fec 	bl	9bff0 <ff_rel_grant>
   98044:	17ffff40 	b	97d44 <f_lseek+0x44>
   98048:	d2800016 	mov	x22, #0x0                   	// #0
   9804c:	f9401e63 	ldr	x3, [x19, #56]
   98050:	f9401fe4 	ldr	x4, [sp, #56]
   98054:	17ffff8b 	b	97e80 <f_lseek+0x180>
   98058:	52800041 	mov	w1, #0x2                   	// #2
   9805c:	f9401fe0 	ldr	x0, [sp, #56]
   98060:	3900c661 	strb	w1, [x19, #49]
   98064:	b4fffe20 	cbz	x0, 98028 <f_lseek+0x328>
   98068:	f9401000 	ldr	x0, [x0, #32]
   9806c:	52800055 	mov	w21, #0x2                   	// #2
   98070:	94000fe0 	bl	9bff0 <ff_rel_grant>
   98074:	17ffff34 	b	97d44 <f_lseek+0x44>
   98078:	2a0003f5 	mov	w21, w0
   9807c:	17ffff2c 	b	97d2c <f_lseek+0x2c>

0000000000098080 <f_opendir>:
   98080:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   98084:	910003fd 	mov	x29, sp
   98088:	a90153f3 	stp	x19, x20, [sp, #16]
   9808c:	f9001fe1 	str	x1, [sp, #56]
   98090:	b4000920 	cbz	x0, 981b4 <f_opendir+0x134>
   98094:	aa0003f4 	mov	x20, x0
   98098:	52800002 	mov	w2, #0x0                   	// #0
   9809c:	910123e1 	add	x1, sp, #0x48
   980a0:	9100e3e0 	add	x0, sp, #0x38
   980a4:	97fff323 	bl	94d30 <mount_volume>
   980a8:	2a0003f3 	mov	w19, w0
   980ac:	340001c0 	cbz	w0, 980e4 <f_opendir+0x64>
   980b0:	7100301f 	cmp	w0, #0xc
   980b4:	1a9f07e1 	cset	w1, ne  // ne = any
   980b8:	f900029f 	str	xzr, [x20]
   980bc:	f94027e0 	ldr	x0, [sp, #72]
   980c0:	f100001f 	cmp	x0, #0x0
   980c4:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
   980c8:	54000060 	b.eq	980d4 <f_opendir+0x54>  // b.none
   980cc:	2a1303e1 	mov	w1, w19
   980d0:	97fff310 	bl	94d10 <unlock_fs.part.0>
   980d4:	2a1303e0 	mov	w0, w19
   980d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   980dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   980e0:	d65f03c0 	ret
   980e4:	f94027e1 	ldr	x1, [sp, #72]
   980e8:	52808c00 	mov	w0, #0x460                 	// #1120
   980ec:	f90013f5 	str	x21, [sp, #32]
   980f0:	f9000281 	str	x1, [x20]
   980f4:	94000fcf 	bl	9c030 <ff_memalloc>
   980f8:	aa0003f5 	mov	x21, x0
   980fc:	b4000660 	cbz	x0, 981c8 <f_opendir+0x148>
   98100:	f94027e3 	ldr	x3, [sp, #72]
   98104:	91080002 	add	x2, x0, #0x200
   98108:	aa1403e0 	mov	x0, x20
   9810c:	f9401fe1 	ldr	x1, [sp, #56]
   98110:	a9010875 	stp	x21, x2, [x3, #16]
   98114:	97fff6bf 	bl	95c10 <follow_path>
   98118:	2a0003f3 	mov	w19, w0
   9811c:	350003c0 	cbnz	w0, 98194 <f_opendir+0x114>
   98120:	39c14e80 	ldrsb	w0, [x20, #83]
   98124:	37f80900 	tbnz	w0, #31, 98244 <f_opendir+0x1c4>
   98128:	39402a80 	ldrb	w0, [x20, #10]
   9812c:	362005c0 	tbz	w0, #4, 981e4 <f_opendir+0x164>
   98130:	f94027e0 	ldr	x0, [sp, #72]
   98134:	39400001 	ldrb	w1, [x0]
   98138:	7100103f 	cmp	w1, #0x4
   9813c:	540006e0 	b.eq	98218 <f_opendir+0x198>  // b.none
   98140:	f9402282 	ldr	x2, [x20, #64]
   98144:	71000c3f 	cmp	w1, #0x3
   98148:	39406c43 	ldrb	w3, [x2, #27]
   9814c:	39406841 	ldrb	w1, [x2, #26]
   98150:	33185c61 	bfi	w1, w3, #8, #24
   98154:	54000580 	b.eq	98204 <f_opendir+0x184>  // b.none
   98158:	b9000e81 	str	w1, [x20, #12]
   9815c:	79400c02 	ldrh	w2, [x0, #6]
   98160:	52800001 	mov	w1, #0x0                   	// #0
   98164:	aa1403e0 	mov	x0, x20
   98168:	79001282 	strh	w2, [x20, #8]
   9816c:	97ffee89 	bl	93b90 <dir_sdi>
   98170:	2a0003f3 	mov	w19, w0
   98174:	aa1503e0 	mov	x0, x21
   98178:	94000fb2 	bl	9c040 <ff_memfree>
   9817c:	7100127f 	cmp	w19, #0x4
   98180:	52800021 	mov	w1, #0x1                   	// #1
   98184:	54000120 	b.eq	981a8 <f_opendir+0x128>  // b.none
   98188:	35000633 	cbnz	w19, 9824c <f_opendir+0x1cc>
   9818c:	f94013f5 	ldr	x21, [sp, #32]
   98190:	17ffffcb 	b	980bc <f_opendir+0x3c>
   98194:	aa1503e0 	mov	x0, x21
   98198:	94000faa 	bl	9c040 <ff_memfree>
   9819c:	7100127f 	cmp	w19, #0x4
   981a0:	52800021 	mov	w1, #0x1                   	// #1
   981a4:	54000541 	b.ne	9824c <f_opendir+0x1cc>  // b.any
   981a8:	528000b3 	mov	w19, #0x5                   	// #5
   981ac:	f94013f5 	ldr	x21, [sp, #32]
   981b0:	17ffffc2 	b	980b8 <f_opendir+0x38>
   981b4:	52800133 	mov	w19, #0x9                   	// #9
   981b8:	2a1303e0 	mov	w0, w19
   981bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   981c0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   981c4:	d65f03c0 	ret
   981c8:	f94027e0 	ldr	x0, [sp, #72]
   981cc:	52800233 	mov	w19, #0x11                  	// #17
   981d0:	b4000160 	cbz	x0, 981fc <f_opendir+0x17c>
   981d4:	f9401000 	ldr	x0, [x0, #32]
   981d8:	94000f86 	bl	9bff0 <ff_rel_grant>
   981dc:	f94013f5 	ldr	x21, [sp, #32]
   981e0:	17ffffbd 	b	980d4 <f_opendir+0x54>
   981e4:	aa1503e0 	mov	x0, x21
   981e8:	528000b3 	mov	w19, #0x5                   	// #5
   981ec:	94000f95 	bl	9c040 <ff_memfree>
   981f0:	52800021 	mov	w1, #0x1                   	// #1
   981f4:	f94013f5 	ldr	x21, [sp, #32]
   981f8:	17ffffb0 	b	980b8 <f_opendir+0x38>
   981fc:	f94013f5 	ldr	x21, [sp, #32]
   98200:	17ffffb5 	b	980d4 <f_opendir+0x54>
   98204:	39405443 	ldrb	w3, [x2, #21]
   98208:	39405042 	ldrb	w2, [x2, #20]
   9820c:	33185c62 	bfi	w2, w3, #8, #24
   98210:	2a024021 	orr	w1, w1, w2, lsl #16
   98214:	17ffffd1 	b	98158 <f_opendir+0xd8>
   98218:	f9400a82 	ldr	x2, [x20, #16]
   9821c:	aa1403e1 	mov	x1, x20
   98220:	39402e85 	ldrb	w5, [x20, #11]
   98224:	b9400e84 	ldr	w4, [x20, #12]
   98228:	12185c42 	and	w2, w2, #0xffffff00
   9822c:	b9405683 	ldr	w3, [x20, #84]
   98230:	2a050042 	orr	w2, w2, w5
   98234:	f9400c00 	ldr	x0, [x0, #24]
   98238:	29040a84 	stp	w4, w2, [x20, #32]
   9823c:	b9002a83 	str	w3, [x20, #40]
   98240:	97ffebac 	bl	930f0 <init_alloc_info.isra.0>
   98244:	f94027e0 	ldr	x0, [sp, #72]
   98248:	17ffffc5 	b	9815c <f_opendir+0xdc>
   9824c:	7100327f 	cmp	w19, #0xc
   98250:	1a9f07e1 	cset	w1, ne  // ne = any
   98254:	f94013f5 	ldr	x21, [sp, #32]
   98258:	17ffff98 	b	980b8 <f_opendir+0x38>
   9825c:	d503201f 	nop

0000000000098260 <f_closedir>:
   98260:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98264:	910003fd 	mov	x29, sp
   98268:	9100a3e1 	add	x1, sp, #0x28
   9826c:	a90153f3 	stp	x19, x20, [sp, #16]
   98270:	aa0003f4 	mov	x20, x0
   98274:	97fff9a3 	bl	96900 <validate>
   98278:	2a0003f3 	mov	w19, w0
   9827c:	350000c0 	cbnz	w0, 98294 <f_closedir+0x34>
   98280:	f900029f 	str	xzr, [x20]
   98284:	f94017e0 	ldr	x0, [sp, #40]
   98288:	b4000060 	cbz	x0, 98294 <f_closedir+0x34>
   9828c:	f9401000 	ldr	x0, [x0, #32]
   98290:	94000f58 	bl	9bff0 <ff_rel_grant>
   98294:	2a1303e0 	mov	w0, w19
   98298:	a94153f3 	ldp	x19, x20, [sp, #16]
   9829c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   982a0:	d65f03c0 	ret
   982a4:	d503201f 	nop
   982a8:	d503201f 	nop
   982ac:	d503201f 	nop

00000000000982b0 <f_readdir>:
   982b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   982b4:	910003fd 	mov	x29, sp
   982b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   982bc:	aa0103f6 	mov	x22, x1
   982c0:	9100e3e1 	add	x1, sp, #0x38
   982c4:	aa0003f5 	mov	x21, x0
   982c8:	a90153f3 	stp	x19, x20, [sp, #16]
   982cc:	97fff98d 	bl	96900 <validate>
   982d0:	35000520 	cbnz	w0, 98374 <f_readdir+0xc4>
   982d4:	b40004b6 	cbz	x22, 98368 <f_readdir+0xb8>
   982d8:	52808c00 	mov	w0, #0x460                 	// #1120
   982dc:	94000f55 	bl	9c030 <ff_memalloc>
   982e0:	aa0003f4 	mov	x20, x0
   982e4:	b4000640 	cbz	x0, 983ac <f_readdir+0xfc>
   982e8:	f9401fe2 	ldr	x2, [sp, #56]
   982ec:	91080001 	add	x1, x0, #0x200
   982f0:	aa1503e0 	mov	x0, x21
   982f4:	a9010454 	stp	x20, x1, [x2, #16]
   982f8:	97fff4c2 	bl	95600 <dir_read.constprop.0>
   982fc:	721d7813 	ands	w19, w0, #0xfffffffb
   98300:	540004e1 	b.ne	9839c <f_readdir+0xec>  // b.any
   98304:	aa1503e0 	mov	x0, x21
   98308:	aa1603e1 	mov	x1, x22
   9830c:	97ffea71 	bl	92cd0 <get_fileinfo>
   98310:	aa1503e0 	mov	x0, x21
   98314:	52800001 	mov	w1, #0x0                   	// #0
   98318:	97fff07a 	bl	94500 <dir_next>
   9831c:	7100101f 	cmp	w0, #0x4
   98320:	52800035 	mov	w21, #0x1                   	// #1
   98324:	54000080 	b.eq	98334 <f_readdir+0x84>  // b.none
   98328:	2a0003f3 	mov	w19, w0
   9832c:	7100301f 	cmp	w0, #0xc
   98330:	1a9f07f5 	cset	w21, ne  // ne = any
   98334:	aa1403e0 	mov	x0, x20
   98338:	94000f42 	bl	9c040 <ff_memfree>
   9833c:	f9401fe0 	ldr	x0, [sp, #56]
   98340:	f100001f 	cmp	x0, #0x0
   98344:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   98348:	54000060 	b.eq	98354 <f_readdir+0xa4>  // b.none
   9834c:	2a1303e1 	mov	w1, w19
   98350:	97fff270 	bl	94d10 <unlock_fs.part.0>
   98354:	2a1303e0 	mov	w0, w19
   98358:	a94153f3 	ldp	x19, x20, [sp, #16]
   9835c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98360:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98364:	d65f03c0 	ret
   98368:	aa1503e0 	mov	x0, x21
   9836c:	52800001 	mov	w1, #0x0                   	// #0
   98370:	97ffee08 	bl	93b90 <dir_sdi>
   98374:	7100301f 	cmp	w0, #0xc
   98378:	2a0003f3 	mov	w19, w0
   9837c:	f9401fe0 	ldr	x0, [sp, #56]
   98380:	1a9f07f5 	cset	w21, ne  // ne = any
   98384:	f100001f 	cmp	x0, #0x0
   98388:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   9838c:	54fffe40 	b.eq	98354 <f_readdir+0xa4>  // b.none
   98390:	2a1303e1 	mov	w1, w19
   98394:	97fff25f 	bl	94d10 <unlock_fs.part.0>
   98398:	17ffffef 	b	98354 <f_readdir+0xa4>
   9839c:	7100301f 	cmp	w0, #0xc
   983a0:	2a0003f3 	mov	w19, w0
   983a4:	1a9f07f5 	cset	w21, ne  // ne = any
   983a8:	17ffffe3 	b	98334 <f_readdir+0x84>
   983ac:	f9401fe0 	ldr	x0, [sp, #56]
   983b0:	52800233 	mov	w19, #0x11                  	// #17
   983b4:	b4fffd00 	cbz	x0, 98354 <f_readdir+0xa4>
   983b8:	f9401000 	ldr	x0, [x0, #32]
   983bc:	94000f0d 	bl	9bff0 <ff_rel_grant>
   983c0:	17ffffe5 	b	98354 <f_readdir+0xa4>
   983c4:	d503201f 	nop
   983c8:	d503201f 	nop
   983cc:	d503201f 	nop

00000000000983d0 <f_findnext>:
   983d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   983d4:	910003fd 	mov	x29, sp
   983d8:	f100003f 	cmp	x1, #0x0
   983dc:	a90153f3 	stp	x19, x20, [sp, #16]
   983e0:	aa0103f3 	mov	x19, x1
   983e4:	aa0003f4 	mov	x20, x0
   983e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   983ec:	91006836 	add	x22, x1, #0x1a
   983f0:	1a9f17f5 	cset	w21, eq  // eq = none
   983f4:	f9001bf7 	str	x23, [sp, #48]
   983f8:	91003437 	add	x23, x1, #0xd
   983fc:	1400000d 	b	98430 <f_findnext+0x60>
   98400:	39c06a60 	ldrsb	w0, [x19, #26]
   98404:	34000320 	cbz	w0, 98468 <f_findnext+0x98>
   98408:	f9402e87 	ldr	x7, [x20, #88]
   9840c:	aa0703e0 	mov	x0, x7
   98410:	97ffe958 	bl	92970 <pattern_matching>
   98414:	52800003 	mov	w3, #0x0                   	// #0
   98418:	52800002 	mov	w2, #0x0                   	// #0
   9841c:	aa1703e1 	mov	x1, x23
   98420:	35000240 	cbnz	w0, 98468 <f_findnext+0x98>
   98424:	aa0703e0 	mov	x0, x7
   98428:	97ffe952 	bl	92970 <pattern_matching>
   9842c:	350001e0 	cbnz	w0, 98468 <f_findnext+0x98>
   98430:	aa1303e1 	mov	x1, x19
   98434:	aa1403e0 	mov	x0, x20
   98438:	97ffff9e 	bl	982b0 <f_readdir>
   9843c:	7100001f 	cmp	w0, #0x0
   98440:	52800003 	mov	w3, #0x0                   	// #0
   98444:	7a400aa0 	ccmp	w21, #0x0, #0x0, eq  // eq = none
   98448:	52800002 	mov	w2, #0x0                   	// #0
   9844c:	aa1603e1 	mov	x1, x22
   98450:	54fffd80 	b.eq	98400 <f_findnext+0x30>  // b.none
   98454:	a94153f3 	ldp	x19, x20, [sp, #16]
   98458:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9845c:	f9401bf7 	ldr	x23, [sp, #48]
   98460:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98464:	d65f03c0 	ret
   98468:	52800000 	mov	w0, #0x0                   	// #0
   9846c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98470:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98474:	f9401bf7 	ldr	x23, [sp, #48]
   98478:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9847c:	d65f03c0 	ret

0000000000098480 <f_findfirst>:
   98480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98484:	910003fd 	mov	x29, sp
   98488:	a90153f3 	stp	x19, x20, [sp, #16]
   9848c:	aa0103f4 	mov	x20, x1
   98490:	aa0203e1 	mov	x1, x2
   98494:	aa0003f3 	mov	x19, x0
   98498:	f9002c03 	str	x3, [x0, #88]
   9849c:	97fffef9 	bl	98080 <f_opendir>
   984a0:	34000080 	cbz	w0, 984b0 <f_findfirst+0x30>
   984a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   984a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   984ac:	d65f03c0 	ret
   984b0:	aa1403e1 	mov	x1, x20
   984b4:	aa1303e0 	mov	x0, x19
   984b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   984bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   984c0:	17ffffc4 	b	983d0 <f_findnext>
   984c4:	d503201f 	nop
   984c8:	d503201f 	nop
   984cc:	d503201f 	nop

00000000000984d0 <f_stat>:
   984d0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   984d4:	910003fd 	mov	x29, sp
   984d8:	52800002 	mov	w2, #0x0                   	// #0
   984dc:	a9025bf5 	stp	x21, x22, [sp, #32]
   984e0:	aa0103f5 	mov	x21, x1
   984e4:	910103e1 	add	x1, sp, #0x40
   984e8:	f9001fe0 	str	x0, [sp, #56]
   984ec:	9100e3e0 	add	x0, sp, #0x38
   984f0:	a90153f3 	stp	x19, x20, [sp, #16]
   984f4:	97fff20f 	bl	94d30 <mount_volume>
   984f8:	340001e0 	cbz	w0, 98534 <f_stat+0x64>
   984fc:	2a0003f3 	mov	w19, w0
   98500:	7100301f 	cmp	w0, #0xc
   98504:	1a9f07f6 	cset	w22, ne  // ne = any
   98508:	f94023e0 	ldr	x0, [sp, #64]
   9850c:	f100001f 	cmp	x0, #0x0
   98510:	7a401ac4 	ccmp	w22, #0x0, #0x4, ne  // ne = any
   98514:	54000060 	b.eq	98520 <f_stat+0x50>  // b.none
   98518:	2a1303e1 	mov	w1, w19
   9851c:	97fff1fd 	bl	94d10 <unlock_fs.part.0>
   98520:	2a1303e0 	mov	w0, w19
   98524:	a94153f3 	ldp	x19, x20, [sp, #16]
   98528:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9852c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   98530:	d65f03c0 	ret
   98534:	52808c00 	mov	w0, #0x460                 	// #1120
   98538:	94000ebe 	bl	9c030 <ff_memalloc>
   9853c:	aa0003f4 	mov	x20, x0
   98540:	b40002a0 	cbz	x0, 98594 <f_stat+0xc4>
   98544:	a9438fe1 	ldp	x1, x3, [sp, #56]
   98548:	91080002 	add	x2, x0, #0x200
   9854c:	910103e0 	add	x0, sp, #0x40
   98550:	a9010874 	stp	x20, x2, [x3, #16]
   98554:	97fff5af 	bl	95c10 <follow_path>
   98558:	2a0003f3 	mov	w19, w0
   9855c:	35000120 	cbnz	w0, 98580 <f_stat+0xb0>
   98560:	39c24fe0 	ldrsb	w0, [sp, #147]
   98564:	52800036 	mov	w22, #0x1                   	// #1
   98568:	37f80220 	tbnz	w0, #31, 985ac <f_stat+0xdc>
   9856c:	b40000f5 	cbz	x21, 98588 <f_stat+0xb8>
   98570:	aa1503e1 	mov	x1, x21
   98574:	910103e0 	add	x0, sp, #0x40
   98578:	97ffe9d6 	bl	92cd0 <get_fileinfo>
   9857c:	14000003 	b	98588 <f_stat+0xb8>
   98580:	7100301f 	cmp	w0, #0xc
   98584:	1a9f07f6 	cset	w22, ne  // ne = any
   98588:	aa1403e0 	mov	x0, x20
   9858c:	94000ead 	bl	9c040 <ff_memfree>
   98590:	17ffffde 	b	98508 <f_stat+0x38>
   98594:	f94023e0 	ldr	x0, [sp, #64]
   98598:	52800233 	mov	w19, #0x11                  	// #17
   9859c:	b4fffc20 	cbz	x0, 98520 <f_stat+0x50>
   985a0:	f9401000 	ldr	x0, [x0, #32]
   985a4:	94000e93 	bl	9bff0 <ff_rel_grant>
   985a8:	17ffffde 	b	98520 <f_stat+0x50>
   985ac:	528000d3 	mov	w19, #0x6                   	// #6
   985b0:	17fffff6 	b	98588 <f_stat+0xb8>
   985b4:	d503201f 	nop
   985b8:	d503201f 	nop
   985bc:	d503201f 	nop

00000000000985c0 <f_getfree>:
   985c0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   985c4:	910003fd 	mov	x29, sp
   985c8:	a90153f3 	stp	x19, x20, [sp, #16]
   985cc:	aa0203f4 	mov	x20, x2
   985d0:	52800002 	mov	w2, #0x0                   	// #0
   985d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   985d8:	aa0103f5 	mov	x21, x1
   985dc:	910163e1 	add	x1, sp, #0x58
   985e0:	f90027e0 	str	x0, [sp, #72]
   985e4:	910123e0 	add	x0, sp, #0x48
   985e8:	97fff1d2 	bl	94d30 <mount_volume>
   985ec:	2a0003f3 	mov	w19, w0
   985f0:	34000180 	cbz	w0, 98620 <f_getfree+0x60>
   985f4:	7100301f 	cmp	w0, #0xc
   985f8:	f9402fe0 	ldr	x0, [sp, #88]
   985fc:	1a9f07e2 	cset	w2, ne  // ne = any
   98600:	f100001f 	cmp	x0, #0x0
   98604:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
   98608:	540001c1 	b.ne	98640 <f_getfree+0x80>  // b.any
   9860c:	2a1303e0 	mov	w0, w19
   98610:	a94153f3 	ldp	x19, x20, [sp, #16]
   98614:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98618:	a8c97bfd 	ldp	x29, x30, [sp], #144
   9861c:	d65f03c0 	ret
   98620:	f9402fe0 	ldr	x0, [sp, #88]
   98624:	b9404002 	ldr	w2, [x0, #64]
   98628:	b9402c01 	ldr	w1, [x0, #44]
   9862c:	f9000280 	str	x0, [x20]
   98630:	51000843 	sub	w3, w2, #0x2
   98634:	6b03003f 	cmp	w1, w3
   98638:	54000128 	b.hi	9865c <f_getfree+0x9c>  // b.pmore
   9863c:	b90002a1 	str	w1, [x21]
   98640:	2a1303e1 	mov	w1, w19
   98644:	97fff1b3 	bl	94d10 <unlock_fs.part.0>
   98648:	2a1303e0 	mov	w0, w19
   9864c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98650:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98654:	a8c97bfd 	ldp	x29, x30, [sp], #144
   98658:	d65f03c0 	ret
   9865c:	39400001 	ldrb	w1, [x0]
   98660:	7100043f 	cmp	w1, #0x1
   98664:	54000560 	b.eq	98710 <f_getfree+0x150>  // b.none
   98668:	7100103f 	cmp	w1, #0x4
   9866c:	f9001bf7 	str	x23, [sp, #48]
   98670:	540008c0 	b.eq	98788 <f_getfree+0x1c8>  // b.none
   98674:	f9402801 	ldr	x1, [x0, #80]
   98678:	2a0203f3 	mov	w19, w2
   9867c:	52800016 	mov	w22, #0x0                   	// #0
   98680:	52800014 	mov	w20, #0x0                   	// #0
   98684:	d503201f 	nop
   98688:	35000136 	cbnz	w22, 986ac <f_getfree+0xec>
   9868c:	f9403802 	ldr	x2, [x0, #112]
   98690:	91000437 	add	x23, x1, #0x1
   98694:	eb02003f 	cmp	x1, x2
   98698:	54000740 	b.eq	98780 <f_getfree+0x1c0>  // b.none
   9869c:	97ffeb6d 	bl	93450 <move_window.part.0>
   986a0:	aa1703e1 	mov	x1, x23
   986a4:	35000b40 	cbnz	w0, 9880c <f_getfree+0x24c>
   986a8:	f9402fe0 	ldr	x0, [sp, #88]
   986ac:	9101e003 	add	x3, x0, #0x78
   986b0:	2a1603e2 	mov	w2, w22
   986b4:	39400005 	ldrb	w5, [x0]
   986b8:	8b020062 	add	x2, x3, x2
   986bc:	110012c4 	add	w4, w22, #0x4
   986c0:	38764866 	ldrb	w6, [x3, w22, uxtw]
   986c4:	39400443 	ldrb	w3, [x2, #1]
   986c8:	710008bf 	cmp	w5, #0x2
   986cc:	54000500 	b.eq	9876c <f_getfree+0x1ac>  // b.none
   986d0:	79400442 	ldrh	w2, [x2, #2]
   986d4:	2a022062 	orr	w2, w3, w2, lsl #8
   986d8:	2a0220c2 	orr	w2, w6, w2, lsl #8
   986dc:	f2406c5f 	tst	x2, #0xfffffff
   986e0:	1a941694 	cinc	w20, w20, eq  // eq = none
   986e4:	71000673 	subs	w19, w19, #0x1
   986e8:	12002096 	and	w22, w4, #0x1ff
   986ec:	54fffce1 	b.ne	98688 <f_getfree+0xc8>  // b.any
   986f0:	f9401bf7 	ldr	x23, [sp, #48]
   986f4:	52800022 	mov	w2, #0x1                   	// #1
   986f8:	b90002b4 	str	w20, [x21]
   986fc:	39401001 	ldrb	w1, [x0, #4]
   98700:	b9002c14 	str	w20, [x0, #44]
   98704:	32000021 	orr	w1, w1, #0x1
   98708:	39001001 	strb	w1, [x0, #4]
   9870c:	17ffffbd 	b	98600 <f_getfree+0x40>
   98710:	52800014 	mov	w20, #0x0                   	// #0
   98714:	52800056 	mov	w22, #0x2                   	// #2
   98718:	f90033e0 	str	x0, [sp, #96]
   9871c:	14000009 	b	98740 <f_getfree+0x180>
   98720:	7100041f 	cmp	w0, #0x1
   98724:	54000800 	b.eq	98824 <f_getfree+0x264>  // b.none
   98728:	7100001f 	cmp	w0, #0x0
   9872c:	f9402fe0 	ldr	x0, [sp, #88]
   98730:	1a941694 	cinc	w20, w20, eq  // eq = none
   98734:	b9404001 	ldr	w1, [x0, #64]
   98738:	6b16003f 	cmp	w1, w22
   9873c:	540007a9 	b.ls	98830 <f_getfree+0x270>  // b.plast
   98740:	2a1603e1 	mov	w1, w22
   98744:	910183e0 	add	x0, sp, #0x60
   98748:	97ffec7a 	bl	93930 <get_fat>
   9874c:	3100041f 	cmn	w0, #0x1
   98750:	110006d6 	add	w22, w22, #0x1
   98754:	2a0003e2 	mov	w2, w0
   98758:	54fffe41 	b.ne	98720 <f_getfree+0x160>  // b.any
   9875c:	52800033 	mov	w19, #0x1                   	// #1
   98760:	f9402fe0 	ldr	x0, [sp, #88]
   98764:	2a1303e2 	mov	w2, w19
   98768:	17ffffe4 	b	986f8 <f_getfree+0x138>
   9876c:	2a0320c2 	orr	w2, w6, w3, lsl #8
   98770:	11000ac4 	add	w4, w22, #0x2
   98774:	7100005f 	cmp	w2, #0x0
   98778:	1a941694 	cinc	w20, w20, eq  // eq = none
   9877c:	17ffffda 	b	986e4 <f_getfree+0x124>
   98780:	aa1703e1 	mov	x1, x23
   98784:	17ffffca 	b	986ac <f_getfree+0xec>
   98788:	f9403401 	ldr	x1, [x0, #104]
   9878c:	2a0303f3 	mov	w19, w3
   98790:	52800016 	mov	w22, #0x0                   	// #0
   98794:	52800014 	mov	w20, #0x0                   	// #0
   98798:	35000136 	cbnz	w22, 987bc <f_getfree+0x1fc>
   9879c:	f9403802 	ldr	x2, [x0, #112]
   987a0:	91000437 	add	x23, x1, #0x1
   987a4:	eb02003f 	cmp	x1, x2
   987a8:	540002e0 	b.eq	98804 <f_getfree+0x244>  // b.none
   987ac:	97ffeb29 	bl	93450 <move_window.part.0>
   987b0:	350002e0 	cbnz	w0, 9880c <f_getfree+0x24c>
   987b4:	f9402fe0 	ldr	x0, [sp, #88]
   987b8:	aa1703e1 	mov	x1, x23
   987bc:	2a1603e2 	mov	w2, w22
   987c0:	8b020002 	add	x2, x0, x2
   987c4:	3941e043 	ldrb	w3, [x2, #120]
   987c8:	34fff953 	cbz	w19, 986f0 <f_getfree+0x130>
   987cc:	2a1303e2 	mov	w2, w19
   987d0:	f240007f 	tst	x3, #0x1
   987d4:	11001c45 	add	w5, w2, #0x7
   987d8:	1a941694 	cinc	w20, w20, eq  // eq = none
   987dc:	71000444 	subs	w4, w2, #0x1
   987e0:	53017c63 	lsr	w3, w3, #1
   987e4:	7a5310a4 	ccmp	w5, w19, #0x4, ne  // ne = any
   987e8:	2a0403e2 	mov	w2, w4
   987ec:	54ffff21 	b.ne	987d0 <f_getfree+0x210>  // b.any
   987f0:	110006d6 	add	w22, w22, #0x1
   987f4:	120022d6 	and	w22, w22, #0x1ff
   987f8:	34000204 	cbz	w4, 98838 <f_getfree+0x278>
   987fc:	2a0403f3 	mov	w19, w4
   98800:	17ffffe6 	b	98798 <f_getfree+0x1d8>
   98804:	aa1703e1 	mov	x1, x23
   98808:	17ffffed 	b	987bc <f_getfree+0x1fc>
   9880c:	7100301f 	cmp	w0, #0xc
   98810:	2a0003f3 	mov	w19, w0
   98814:	1a9f07e2 	cset	w2, ne  // ne = any
   98818:	f9401bf7 	ldr	x23, [sp, #48]
   9881c:	f9402fe0 	ldr	x0, [sp, #88]
   98820:	17ffffb6 	b	986f8 <f_getfree+0x138>
   98824:	52800053 	mov	w19, #0x2                   	// #2
   98828:	f9402fe0 	ldr	x0, [sp, #88]
   9882c:	17ffffb3 	b	986f8 <f_getfree+0x138>
   98830:	52800022 	mov	w2, #0x1                   	// #1
   98834:	17ffffb1 	b	986f8 <f_getfree+0x138>
   98838:	52800013 	mov	w19, #0x0                   	// #0
   9883c:	52800022 	mov	w2, #0x1                   	// #1
   98840:	f9401bf7 	ldr	x23, [sp, #48]
   98844:	17ffffad 	b	986f8 <f_getfree+0x138>
   98848:	d503201f 	nop
   9884c:	d503201f 	nop

0000000000098850 <f_truncate>:
   98850:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98854:	910003fd 	mov	x29, sp
   98858:	9100a3e1 	add	x1, sp, #0x28
   9885c:	a90153f3 	stp	x19, x20, [sp, #16]
   98860:	aa0003f4 	mov	x20, x0
   98864:	97fff827 	bl	96900 <validate>
   98868:	350003e0 	cbnz	w0, 988e4 <f_truncate+0x94>
   9886c:	3940c693 	ldrb	w19, [x20, #49]
   98870:	350003d3 	cbnz	w19, 988e8 <f_truncate+0x98>
   98874:	3940c280 	ldrb	w0, [x20, #48]
   98878:	36080500 	tbz	w0, #1, 98918 <f_truncate+0xc8>
   9887c:	f9400a81 	ldr	x1, [x20, #16]
   98880:	f9401e80 	ldr	x0, [x20, #56]
   98884:	eb01001f 	cmp	x0, x1
   98888:	54000442 	b.cs	98910 <f_truncate+0xc0>  // b.hs, b.nlast
   9888c:	b5000520 	cbnz	x0, 98930 <f_truncate+0xe0>
   98890:	b9400e81 	ldr	w1, [x20, #12]
   98894:	52800002 	mov	w2, #0x0                   	// #0
   98898:	aa1403e0 	mov	x0, x20
   9889c:	97ffeda1 	bl	93f20 <remove_chain>
   988a0:	b9000e9f 	str	wzr, [x20, #12]
   988a4:	2a0003e1 	mov	w1, w0
   988a8:	3940c282 	ldrb	w2, [x20, #48]
   988ac:	f9401e83 	ldr	x3, [x20, #56]
   988b0:	f94017e0 	ldr	x0, [sp, #40]
   988b4:	321a0042 	orr	w2, w2, #0x40
   988b8:	f9000a83 	str	x3, [x20, #16]
   988bc:	3900c282 	strb	w2, [x20, #48]
   988c0:	350008c1 	cbnz	w1, 989d8 <f_truncate+0x188>
   988c4:	373805a2 	tbnz	w2, #7, 98978 <f_truncate+0x128>
   988c8:	b4000060 	cbz	x0, 988d4 <f_truncate+0x84>
   988cc:	52800001 	mov	w1, #0x0                   	// #0
   988d0:	97fff110 	bl	94d10 <unlock_fs.part.0>
   988d4:	2a1303e0 	mov	w0, w19
   988d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   988dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   988e0:	d65f03c0 	ret
   988e4:	2a0003f3 	mov	w19, w0
   988e8:	f94017e0 	ldr	x0, [sp, #40]
   988ec:	f100001f 	cmp	x0, #0x0
   988f0:	7a4c1a64 	ccmp	w19, #0xc, #0x4, ne  // ne = any
   988f4:	54ffff00 	b.eq	988d4 <f_truncate+0x84>  // b.none
   988f8:	2a1303e1 	mov	w1, w19
   988fc:	97fff105 	bl	94d10 <unlock_fs.part.0>
   98900:	2a1303e0 	mov	w0, w19
   98904:	a94153f3 	ldp	x19, x20, [sp, #16]
   98908:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9890c:	d65f03c0 	ret
   98910:	f94017e0 	ldr	x0, [sp, #40]
   98914:	17ffffed 	b	988c8 <f_truncate+0x78>
   98918:	f94017e0 	ldr	x0, [sp, #40]
   9891c:	528000f3 	mov	w19, #0x7                   	// #7
   98920:	b4fffda0 	cbz	x0, 988d4 <f_truncate+0x84>
   98924:	f9401000 	ldr	x0, [x0, #32]
   98928:	94000db2 	bl	9bff0 <ff_rel_grant>
   9892c:	17ffffea 	b	988d4 <f_truncate+0x84>
   98930:	b9404281 	ldr	w1, [x20, #64]
   98934:	aa1403e0 	mov	x0, x20
   98938:	97ffebfe 	bl	93930 <get_fat>
   9893c:	3100041f 	cmn	w0, #0x1
   98940:	2a0003e1 	mov	w1, w0
   98944:	54000540 	b.eq	989ec <f_truncate+0x19c>  // b.none
   98948:	7100041f 	cmp	w0, #0x1
   9894c:	f94017e0 	ldr	x0, [sp, #40]
   98950:	540002a0 	b.eq	989a4 <f_truncate+0x154>  // b.none
   98954:	b9404002 	ldr	w2, [x0, #64]
   98958:	6b01005f 	cmp	w2, w1
   9895c:	54000508 	b.hi	989fc <f_truncate+0x1ac>  // b.pmore
   98960:	3940c281 	ldrb	w1, [x20, #48]
   98964:	f9401e82 	ldr	x2, [x20, #56]
   98968:	321a0021 	orr	w1, w1, #0x40
   9896c:	f9000a82 	str	x2, [x20, #16]
   98970:	3900c281 	strb	w1, [x20, #48]
   98974:	363ffac1 	tbz	w1, #7, 988cc <f_truncate+0x7c>
   98978:	39400400 	ldrb	w0, [x0, #1]
   9897c:	52800023 	mov	w3, #0x1                   	// #1
   98980:	91018281 	add	x1, x20, #0x60
   98984:	f9402682 	ldr	x2, [x20, #72]
   98988:	94000cf6 	bl	9bd60 <disk_write>
   9898c:	35000420 	cbnz	w0, 98a10 <f_truncate+0x1c0>
   98990:	3940c281 	ldrb	w1, [x20, #48]
   98994:	f94017e0 	ldr	x0, [sp, #40]
   98998:	12001821 	and	w1, w1, #0x7f
   9899c:	3900c281 	strb	w1, [x20, #48]
   989a0:	17ffffca 	b	988c8 <f_truncate+0x78>
   989a4:	52800042 	mov	w2, #0x2                   	// #2
   989a8:	2a0203f3 	mov	w19, w2
   989ac:	3940c283 	ldrb	w3, [x20, #48]
   989b0:	52800021 	mov	w1, #0x1                   	// #1
   989b4:	f9401e84 	ldr	x4, [x20, #56]
   989b8:	321a0063 	orr	w3, w3, #0x40
   989bc:	f9000a84 	str	x4, [x20, #16]
   989c0:	3900c283 	strb	w3, [x20, #48]
   989c4:	f100001f 	cmp	x0, #0x0
   989c8:	3900c682 	strb	w2, [x20, #49]
   989cc:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
   989d0:	54fff820 	b.eq	988d4 <f_truncate+0x84>  // b.none
   989d4:	17ffffc9 	b	988f8 <f_truncate+0xa8>
   989d8:	12001c22 	and	w2, w1, #0xff
   989dc:	2a0103f3 	mov	w19, w1
   989e0:	7100303f 	cmp	w1, #0xc
   989e4:	1a9f07e1 	cset	w1, ne  // ne = any
   989e8:	17fffff7 	b	989c4 <f_truncate+0x174>
   989ec:	52800022 	mov	w2, #0x1                   	// #1
   989f0:	f94017e0 	ldr	x0, [sp, #40]
   989f4:	2a0203f3 	mov	w19, w2
   989f8:	17ffffed 	b	989ac <f_truncate+0x15c>
   989fc:	b9404282 	ldr	w2, [x20, #64]
   98a00:	aa1403e0 	mov	x0, x20
   98a04:	97ffed47 	bl	93f20 <remove_chain>
   98a08:	2a0003e1 	mov	w1, w0
   98a0c:	17ffffa7 	b	988a8 <f_truncate+0x58>
   98a10:	52800021 	mov	w1, #0x1                   	// #1
   98a14:	f94017e0 	ldr	x0, [sp, #40]
   98a18:	2a0103e2 	mov	w2, w1
   98a1c:	2a0103f3 	mov	w19, w1
   98a20:	17ffffe9 	b	989c4 <f_truncate+0x174>
   98a24:	d503201f 	nop
   98a28:	d503201f 	nop
   98a2c:	d503201f 	nop

0000000000098a30 <f_unlink>:
   98a30:	a9ac7bfd 	stp	x29, x30, [sp, #-320]!
   98a34:	910003fd 	mov	x29, sp
   98a38:	52800042 	mov	w2, #0x2                   	// #2
   98a3c:	910123e1 	add	x1, sp, #0x48
   98a40:	f9001fe0 	str	x0, [sp, #56]
   98a44:	9100e3e0 	add	x0, sp, #0x38
   98a48:	a90153f3 	stp	x19, x20, [sp, #16]
   98a4c:	f90013f5 	str	x21, [sp, #32]
   98a50:	97fff0b8 	bl	94d30 <mount_volume>
   98a54:	340001e0 	cbz	w0, 98a90 <f_unlink+0x60>
   98a58:	2a0003f3 	mov	w19, w0
   98a5c:	7100301f 	cmp	w0, #0xc
   98a60:	1a9f07f5 	cset	w21, ne  // ne = any
   98a64:	f94027e0 	ldr	x0, [sp, #72]
   98a68:	f100001f 	cmp	x0, #0x0
   98a6c:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   98a70:	54000060 	b.eq	98a7c <f_unlink+0x4c>  // b.none
   98a74:	2a1303e1 	mov	w1, w19
   98a78:	97fff0a6 	bl	94d10 <unlock_fs.part.0>
   98a7c:	2a1303e0 	mov	w0, w19
   98a80:	a94153f3 	ldp	x19, x20, [sp, #16]
   98a84:	f94013f5 	ldr	x21, [sp, #32]
   98a88:	a8d47bfd 	ldp	x29, x30, [sp], #320
   98a8c:	d65f03c0 	ret
   98a90:	f94027e1 	ldr	x1, [sp, #72]
   98a94:	52808c00 	mov	w0, #0x460                 	// #1120
   98a98:	f90043e1 	str	x1, [sp, #128]
   98a9c:	94000d65 	bl	9c030 <ff_memalloc>
   98aa0:	aa0003f4 	mov	x20, x0
   98aa4:	b40008a0 	cbz	x0, 98bb8 <f_unlink+0x188>
   98aa8:	f94027e3 	ldr	x3, [sp, #72]
   98aac:	91080002 	add	x2, x0, #0x200
   98ab0:	910203e0 	add	x0, sp, #0x80
   98ab4:	f9401fe1 	ldr	x1, [sp, #56]
   98ab8:	a9010874 	stp	x20, x2, [x3, #16]
   98abc:	97fff455 	bl	95c10 <follow_path>
   98ac0:	2a0003f3 	mov	w19, w0
   98ac4:	350006a0 	cbnz	w0, 98b98 <f_unlink+0x168>
   98ac8:	39434fe0 	ldrb	w0, [sp, #211]
   98acc:	37280700 	tbnz	w0, #5, 98bac <f_unlink+0x17c>
   98ad0:	373806e0 	tbnz	w0, #7, 98bac <f_unlink+0x17c>
   98ad4:	39422be0 	ldrb	w0, [sp, #138]
   98ad8:	370007c0 	tbnz	w0, #0, 98bd0 <f_unlink+0x1a0>
   98adc:	f94027e2 	ldr	x2, [sp, #72]
   98ae0:	f9002be2 	str	x2, [sp, #80]
   98ae4:	39400043 	ldrb	w3, [x2]
   98ae8:	7100107f 	cmp	w3, #0x4
   98aec:	540008e0 	b.eq	98c08 <f_unlink+0x1d8>  // b.none
   98af0:	f94063e1 	ldr	x1, [sp, #192]
   98af4:	71000c7f 	cmp	w3, #0x3
   98af8:	39406c22 	ldrb	w2, [x1, #27]
   98afc:	39406835 	ldrb	w21, [x1, #26]
   98b00:	33185c55 	bfi	w21, w2, #8, #24
   98b04:	54000780 	b.eq	98bf4 <f_unlink+0x1c4>  // b.none
   98b08:	36200340 	tbz	w0, #4, 98b70 <f_unlink+0x140>
   98b0c:	f94027e0 	ldr	x0, [sp, #72]
   98b10:	b9403001 	ldr	w1, [x0, #48]
   98b14:	6b15003f 	cmp	w1, w21
   98b18:	540005c0 	b.eq	98bd0 <f_unlink+0x1a0>  // b.none
   98b1c:	f90073e0 	str	x0, [sp, #224]
   98b20:	b900eff5 	str	w21, [sp, #236]
   98b24:	39400000 	ldrb	w0, [x0]
   98b28:	7100101f 	cmp	w0, #0x4
   98b2c:	540000a1 	b.ne	98b40 <f_unlink+0x110>  // b.any
   98b30:	39416fe1 	ldrb	w1, [sp, #91]
   98b34:	f94033e0 	ldr	x0, [sp, #96]
   98b38:	3903afe1 	strb	w1, [sp, #235]
   98b3c:	f9007be0 	str	x0, [sp, #240]
   98b40:	52800001 	mov	w1, #0x0                   	// #0
   98b44:	910383e0 	add	x0, sp, #0xe0
   98b48:	97ffec12 	bl	93b90 <dir_sdi>
   98b4c:	2a0003f3 	mov	w19, w0
   98b50:	35000240 	cbnz	w0, 98b98 <f_unlink+0x168>
   98b54:	910383e0 	add	x0, sp, #0xe0
   98b58:	97fff2aa 	bl	95600 <dir_read.constprop.0>
   98b5c:	2a0003f3 	mov	w19, w0
   98b60:	34000380 	cbz	w0, 98bd0 <f_unlink+0x1a0>
   98b64:	7100101f 	cmp	w0, #0x4
   98b68:	54000181 	b.ne	98b98 <f_unlink+0x168>  // b.any
   98b6c:	d503201f 	nop
   98b70:	910203e0 	add	x0, sp, #0x80
   98b74:	97ffeffb 	bl	94b60 <dir_remove>
   98b78:	7100001f 	cmp	w0, #0x0
   98b7c:	2a0003f3 	mov	w19, w0
   98b80:	7a400aa4 	ccmp	w21, #0x0, #0x4, eq  // eq = none
   98b84:	540002c1 	b.ne	98bdc <f_unlink+0x1ac>  // b.any
   98b88:	35000093 	cbnz	w19, 98b98 <f_unlink+0x168>
   98b8c:	f94027e0 	ldr	x0, [sp, #72]
   98b90:	97ffe9f4 	bl	93360 <sync_fs>
   98b94:	2a0003f3 	mov	w19, w0
   98b98:	7100327f 	cmp	w19, #0xc
   98b9c:	1a9f07f5 	cset	w21, ne  // ne = any
   98ba0:	aa1403e0 	mov	x0, x20
   98ba4:	94000d27 	bl	9c040 <ff_memfree>
   98ba8:	17ffffaf 	b	98a64 <f_unlink+0x34>
   98bac:	52800035 	mov	w21, #0x1                   	// #1
   98bb0:	528000d3 	mov	w19, #0x6                   	// #6
   98bb4:	17fffffb 	b	98ba0 <f_unlink+0x170>
   98bb8:	f94027e0 	ldr	x0, [sp, #72]
   98bbc:	52800233 	mov	w19, #0x11                  	// #17
   98bc0:	b4fff5e0 	cbz	x0, 98a7c <f_unlink+0x4c>
   98bc4:	f9401000 	ldr	x0, [x0, #32]
   98bc8:	94000d0a 	bl	9bff0 <ff_rel_grant>
   98bcc:	17ffffac 	b	98a7c <f_unlink+0x4c>
   98bd0:	52800035 	mov	w21, #0x1                   	// #1
   98bd4:	528000f3 	mov	w19, #0x7                   	// #7
   98bd8:	17fffff2 	b	98ba0 <f_unlink+0x170>
   98bdc:	2a1503e1 	mov	w1, w21
   98be0:	52800002 	mov	w2, #0x0                   	// #0
   98be4:	910143e0 	add	x0, sp, #0x50
   98be8:	97ffecce 	bl	93f20 <remove_chain>
   98bec:	2a0003f3 	mov	w19, w0
   98bf0:	17ffffe6 	b	98b88 <f_unlink+0x158>
   98bf4:	39405422 	ldrb	w2, [x1, #21]
   98bf8:	39405021 	ldrb	w1, [x1, #20]
   98bfc:	33185c41 	bfi	w1, w2, #8, #24
   98c00:	2a0142b5 	orr	w21, w21, w1, lsl #16
   98c04:	17ffffc1 	b	98b08 <f_unlink+0xd8>
   98c08:	910143e1 	add	x1, sp, #0x50
   98c0c:	f9400c40 	ldr	x0, [x2, #24]
   98c10:	97ffe938 	bl	930f0 <init_alloc_info.isra.0>
   98c14:	39422be0 	ldrb	w0, [sp, #138]
   98c18:	b9405ff5 	ldr	w21, [sp, #92]
   98c1c:	17ffffbb 	b	98b08 <f_unlink+0xd8>

0000000000098c20 <f_mkdir>:
   98c20:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   98c24:	910003fd 	mov	x29, sp
   98c28:	52800042 	mov	w2, #0x2                   	// #2
   98c2c:	910123e1 	add	x1, sp, #0x48
   98c30:	f9001fe0 	str	x0, [sp, #56]
   98c34:	9100e3e0 	add	x0, sp, #0x38
   98c38:	a90153f3 	stp	x19, x20, [sp, #16]
   98c3c:	a9025bf5 	stp	x21, x22, [sp, #32]
   98c40:	97fff03c 	bl	94d30 <mount_volume>
   98c44:	340001e0 	cbz	w0, 98c80 <f_mkdir+0x60>
   98c48:	2a0003f3 	mov	w19, w0
   98c4c:	7100301f 	cmp	w0, #0xc
   98c50:	1a9f07f5 	cset	w21, ne  // ne = any
   98c54:	f94027e0 	ldr	x0, [sp, #72]
   98c58:	f100001f 	cmp	x0, #0x0
   98c5c:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   98c60:	54000060 	b.eq	98c6c <f_mkdir+0x4c>  // b.none
   98c64:	2a1303e1 	mov	w1, w19
   98c68:	97fff02a 	bl	94d10 <unlock_fs.part.0>
   98c6c:	2a1303e0 	mov	w0, w19
   98c70:	a94153f3 	ldp	x19, x20, [sp, #16]
   98c74:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98c78:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   98c7c:	d65f03c0 	ret
   98c80:	f94027e1 	ldr	x1, [sp, #72]
   98c84:	52808c00 	mov	w0, #0x460                 	// #1120
   98c88:	f90043e1 	str	x1, [sp, #128]
   98c8c:	94000ce9 	bl	9c030 <ff_memalloc>
   98c90:	aa0003f4 	mov	x20, x0
   98c94:	b4000260 	cbz	x0, 98ce0 <f_mkdir+0xc0>
   98c98:	f94027e3 	ldr	x3, [sp, #72]
   98c9c:	91080002 	add	x2, x0, #0x200
   98ca0:	910203e0 	add	x0, sp, #0x80
   98ca4:	f9401fe1 	ldr	x1, [sp, #56]
   98ca8:	a9010874 	stp	x20, x2, [x3, #16]
   98cac:	97fff3d9 	bl	95c10 <follow_path>
   98cb0:	2a0003f3 	mov	w19, w0
   98cb4:	34000100 	cbz	w0, 98cd4 <f_mkdir+0xb4>
   98cb8:	7100101f 	cmp	w0, #0x4
   98cbc:	540001e0 	b.eq	98cf8 <f_mkdir+0xd8>  // b.none
   98cc0:	7100327f 	cmp	w19, #0xc
   98cc4:	1a9f07f5 	cset	w21, ne  // ne = any
   98cc8:	aa1403e0 	mov	x0, x20
   98ccc:	94000cdd 	bl	9c040 <ff_memfree>
   98cd0:	17ffffe1 	b	98c54 <f_mkdir+0x34>
   98cd4:	52800035 	mov	w21, #0x1                   	// #1
   98cd8:	52800113 	mov	w19, #0x8                   	// #8
   98cdc:	17fffffb 	b	98cc8 <f_mkdir+0xa8>
   98ce0:	f94027e0 	ldr	x0, [sp, #72]
   98ce4:	52800233 	mov	w19, #0x11                  	// #17
   98ce8:	b4fffc20 	cbz	x0, 98c6c <f_mkdir+0x4c>
   98cec:	f9401000 	ldr	x0, [x0, #32]
   98cf0:	94000cc0 	bl	9bff0 <ff_rel_grant>
   98cf4:	17ffffde 	b	98c6c <f_mkdir+0x4c>
   98cf8:	39434fe0 	ldrb	w0, [sp, #211]
   98cfc:	36280080 	tbz	w0, #5, 98d0c <f_mkdir+0xec>
   98d00:	52800035 	mov	w21, #0x1                   	// #1
   98d04:	528000d3 	mov	w19, #0x6                   	// #6
   98d08:	17fffff0 	b	98cc8 <f_mkdir+0xa8>
   98d0c:	f94027e2 	ldr	x2, [sp, #72]
   98d10:	52800001 	mov	w1, #0x0                   	// #0
   98d14:	910143e0 	add	x0, sp, #0x50
   98d18:	f9002be2 	str	x2, [sp, #80]
   98d1c:	97ffed39 	bl	94200 <create_chain>
   98d20:	2a0003f6 	mov	w22, w0
   98d24:	35000120 	cbnz	w0, 98d48 <f_mkdir+0x128>
   98d28:	52800035 	mov	w21, #0x1                   	// #1
   98d2c:	528000f3 	mov	w19, #0x7                   	// #7
   98d30:	94000cc8 	bl	9c050 <get_fattime>
   98d34:	2a1603e1 	mov	w1, w22
   98d38:	910143e0 	add	x0, sp, #0x50
   98d3c:	52800002 	mov	w2, #0x0                   	// #0
   98d40:	97ffec78 	bl	93f20 <remove_chain>
   98d44:	17ffffe1 	b	98cc8 <f_mkdir+0xa8>
   98d48:	7100041f 	cmp	w0, #0x1
   98d4c:	54000aa0 	b.eq	98ea0 <f_mkdir+0x280>  // b.none
   98d50:	3100041f 	cmn	w0, #0x1
   98d54:	540009e0 	b.eq	98e90 <f_mkdir+0x270>  // b.none
   98d58:	94000cbe 	bl	9c050 <get_fattime>
   98d5c:	2a0003f5 	mov	w21, w0
   98d60:	2a1603e1 	mov	w1, w22
   98d64:	f94027e0 	ldr	x0, [sp, #72]
   98d68:	97ffe91a 	bl	931d0 <dir_clear>
   98d6c:	2a0003f3 	mov	w19, w0
   98d70:	35000a00 	cbnz	w0, 98eb0 <f_mkdir+0x290>
   98d74:	f94027e0 	ldr	x0, [sp, #72]
   98d78:	39400001 	ldrb	w1, [x0]
   98d7c:	7100103f 	cmp	w1, #0x4
   98d80:	54000500 	b.eq	98e20 <f_mkdir+0x200>  // b.none
   98d84:	9101e001 	add	x1, x0, #0x78
   98d88:	52800402 	mov	w2, #0x20                  	// #32
   98d8c:	91020c00 	add	x0, x0, #0x83
   98d90:	38001422 	strb	w2, [x1], #1
   98d94:	eb00003f 	cmp	x1, x0
   98d98:	54ffffc1 	b.ne	98d90 <f_mkdir+0x170>  // b.any
   98d9c:	f94027e0 	ldr	x0, [sp, #72]
   98da0:	528005c4 	mov	w4, #0x2e                  	// #46
   98da4:	52800203 	mov	w3, #0x10                  	// #16
   98da8:	39400002 	ldrb	w2, [x0]
   98dac:	9101e001 	add	x1, x0, #0x78
   98db0:	3901e004 	strb	w4, [x0, #120]
   98db4:	39020c03 	strb	w3, [x0, #131]
   98db8:	b808e015 	stur	w21, [x0, #142]
   98dbc:	79012416 	strh	w22, [x0, #146]
   98dc0:	71000c5f 	cmp	w2, #0x3
   98dc4:	540000a1 	b.ne	98dd8 <f_mkdir+0x1b8>  // b.any
   98dc8:	1ac326c2 	lsr	w2, w22, w3
   98dcc:	53087c43 	lsr	w3, w2, #8
   98dd0:	39023002 	strb	w2, [x0, #140]
   98dd4:	39023403 	strb	w3, [x0, #141]
   98dd8:	91026000 	add	x0, x0, #0x98
   98ddc:	52800402 	mov	w2, #0x20                  	// #32
   98de0:	97ffe8bc 	bl	930d0 <mem_cpy.part.0>
   98de4:	f94027e0 	ldr	x0, [sp, #72]
   98de8:	528005c1 	mov	w1, #0x2e                  	// #46
   98dec:	79411be2 	ldrh	w2, [sp, #140]
   98df0:	b9408fe3 	ldr	w3, [sp, #140]
   98df4:	39026401 	strb	w1, [x0, #153]
   98df8:	39400001 	ldrb	w1, [x0]
   98dfc:	79016402 	strh	w2, [x0, #178]
   98e00:	71000c3f 	cmp	w1, #0x3
   98e04:	540000a1 	b.ne	98e18 <f_mkdir+0x1f8>  // b.any
   98e08:	53107c63 	lsr	w3, w3, #16
   98e0c:	53087c61 	lsr	w1, w3, #8
   98e10:	3902b003 	strb	w3, [x0, #172]
   98e14:	3902b401 	strb	w1, [x0, #173]
   98e18:	52800021 	mov	w1, #0x1                   	// #1
   98e1c:	39000c01 	strb	w1, [x0, #3]
   98e20:	910203e0 	add	x0, sp, #0x80
   98e24:	97fff523 	bl	962b0 <dir_register>
   98e28:	2a0003f3 	mov	w19, w0
   98e2c:	35000420 	cbnz	w0, 98eb0 <f_mkdir+0x290>
   98e30:	f94027e1 	ldr	x1, [sp, #72]
   98e34:	39400020 	ldrb	w0, [x1]
   98e38:	7100101f 	cmp	w0, #0x4
   98e3c:	54000400 	b.eq	98ebc <f_mkdir+0x29c>  // b.none
   98e40:	f94063e0 	ldr	x0, [sp, #192]
   98e44:	b8016015 	stur	w21, [x0, #22]
   98e48:	f94063e0 	ldr	x0, [sp, #192]
   98e4c:	79003416 	strh	w22, [x0, #26]
   98e50:	39400022 	ldrb	w2, [x1]
   98e54:	71000c5f 	cmp	w2, #0x3
   98e58:	540000a1 	b.ne	98e6c <f_mkdir+0x24c>  // b.any
   98e5c:	53107ed6 	lsr	w22, w22, #16
   98e60:	53087ec2 	lsr	w2, w22, #8
   98e64:	39005016 	strb	w22, [x0, #20]
   98e68:	39005402 	strb	w2, [x0, #21]
   98e6c:	f94063e2 	ldr	x2, [sp, #192]
   98e70:	52800203 	mov	w3, #0x10                  	// #16
   98e74:	52800020 	mov	w0, #0x1                   	// #1
   98e78:	39002c43 	strb	w3, [x2, #11]
   98e7c:	39000c20 	strb	w0, [x1, #3]
   98e80:	aa0103e0 	mov	x0, x1
   98e84:	97ffe937 	bl	93360 <sync_fs>
   98e88:	2a0003f3 	mov	w19, w0
   98e8c:	17ffff8d 	b	98cc0 <f_mkdir+0xa0>
   98e90:	52800035 	mov	w21, #0x1                   	// #1
   98e94:	2a1503f3 	mov	w19, w21
   98e98:	94000c6e 	bl	9c050 <get_fattime>
   98e9c:	17ffffa6 	b	98d34 <f_mkdir+0x114>
   98ea0:	2a1603f5 	mov	w21, w22
   98ea4:	52800053 	mov	w19, #0x2                   	// #2
   98ea8:	94000c6a 	bl	9c050 <get_fattime>
   98eac:	17ffffa2 	b	98d34 <f_mkdir+0x114>
   98eb0:	7100327f 	cmp	w19, #0xc
   98eb4:	1a9f07f5 	cset	w21, ne  // ne = any
   98eb8:	17ffff9f 	b	98d34 <f_mkdir+0x114>
   98ebc:	f9400c22 	ldr	x2, [x1, #24]
   98ec0:	52800065 	mov	w5, #0x3                   	// #3
   98ec4:	52800204 	mov	w4, #0x10                  	// #16
   98ec8:	910203e0 	add	x0, sp, #0x80
   98ecc:	b9000c55 	str	w21, [x2, #12]
   98ed0:	f9400c22 	ldr	x2, [x1, #24]
   98ed4:	b9003456 	str	w22, [x2, #52]
   98ed8:	79401422 	ldrh	w2, [x1, #10]
   98edc:	f9400c23 	ldr	x3, [x1, #24]
   98ee0:	531f7847 	lsl	w7, w2, #1
   98ee4:	53077c46 	lsr	w6, w2, #7
   98ee8:	530f7c42 	lsr	w2, w2, #15
   98eec:	3900e07f 	strb	wzr, [x3, #56]
   98ef0:	3900e467 	strb	w7, [x3, #57]
   98ef4:	3900e866 	strb	w6, [x3, #58]
   98ef8:	3900ec62 	strb	w2, [x3, #59]
   98efc:	79401422 	ldrh	w2, [x1, #10]
   98f00:	f9400c23 	ldr	x3, [x1, #24]
   98f04:	531f7847 	lsl	w7, w2, #1
   98f08:	53077c46 	lsr	w6, w2, #7
   98f0c:	530f7c42 	lsr	w2, w2, #15
   98f10:	3900a07f 	strb	wzr, [x3, #40]
   98f14:	3900a467 	strb	w7, [x3, #41]
   98f18:	3900a866 	strb	w6, [x3, #42]
   98f1c:	3900ac62 	strb	w2, [x3, #43]
   98f20:	f9400c22 	ldr	x2, [x1, #24]
   98f24:	39008445 	strb	w5, [x2, #33]
   98f28:	f9400c21 	ldr	x1, [x1, #24]
   98f2c:	39001024 	strb	w4, [x1, #4]
   98f30:	97ffeeb8 	bl	94a10 <store_xdir>
   98f34:	2a0003f3 	mov	w19, w0
   98f38:	35ffec40 	cbnz	w0, 98cc0 <f_mkdir+0xa0>
   98f3c:	f94027e1 	ldr	x1, [sp, #72]
   98f40:	17ffffd0 	b	98e80 <f_mkdir+0x260>
   98f44:	d503201f 	nop
   98f48:	d503201f 	nop
   98f4c:	d503201f 	nop

0000000000098f50 <f_rename>:
   98f50:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
   98f54:	910003fd 	mov	x29, sp
   98f58:	a90303e1 	stp	x1, x0, [sp, #48]
   98f5c:	9100c3e0 	add	x0, sp, #0x30
   98f60:	a90153f3 	stp	x19, x20, [sp, #16]
   98f64:	a9025bf5 	stp	x21, x22, [sp, #32]
   98f68:	97ffe6f2 	bl	92b30 <get_ldnumber>
   98f6c:	52800042 	mov	w2, #0x2                   	// #2
   98f70:	910123e1 	add	x1, sp, #0x48
   98f74:	9100e3e0 	add	x0, sp, #0x38
   98f78:	97ffef6e 	bl	94d30 <mount_volume>
   98f7c:	340001e0 	cbz	w0, 98fb8 <f_rename+0x68>
   98f80:	2a0003f3 	mov	w19, w0
   98f84:	7100301f 	cmp	w0, #0xc
   98f88:	1a9f07f5 	cset	w21, ne  // ne = any
   98f8c:	f94027e0 	ldr	x0, [sp, #72]
   98f90:	f100001f 	cmp	x0, #0x0
   98f94:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   98f98:	54000060 	b.eq	98fa4 <f_rename+0x54>  // b.none
   98f9c:	2a1303e1 	mov	w1, w19
   98fa0:	97ffef5c 	bl	94d10 <unlock_fs.part.0>
   98fa4:	2a1303e0 	mov	w0, w19
   98fa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   98fac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98fb0:	a8d57bfd 	ldp	x29, x30, [sp], #336
   98fb4:	d65f03c0 	ret
   98fb8:	f94027e1 	ldr	x1, [sp, #72]
   98fbc:	52808c00 	mov	w0, #0x460                 	// #1120
   98fc0:	f9004be1 	str	x1, [sp, #144]
   98fc4:	94000c1b 	bl	9c030 <ff_memalloc>
   98fc8:	aa0003f4 	mov	x20, x0
   98fcc:	b4000cc0 	cbz	x0, 99164 <f_rename+0x214>
   98fd0:	f94027e3 	ldr	x3, [sp, #72]
   98fd4:	91080002 	add	x2, x0, #0x200
   98fd8:	910243e0 	add	x0, sp, #0x90
   98fdc:	f9401fe1 	ldr	x1, [sp, #56]
   98fe0:	a9010874 	stp	x20, x2, [x3, #16]
   98fe4:	97fff30b 	bl	95c10 <follow_path>
   98fe8:	2a0003f3 	mov	w19, w0
   98fec:	35000b20 	cbnz	w0, 99150 <f_rename+0x200>
   98ff0:	39438fe0 	ldrb	w0, [sp, #227]
   98ff4:	52801401 	mov	w1, #0xa0                  	// #160
   98ff8:	6a00003f 	tst	w1, w0
   98ffc:	54000080 	b.eq	9900c <f_rename+0xbc>  // b.none
   99000:	52800035 	mov	w21, #0x1                   	// #1
   99004:	528000d3 	mov	w19, #0x6                   	// #6
   99008:	14000054 	b	99158 <f_rename+0x208>
   9900c:	f94027e0 	ldr	x0, [sp, #72]
   99010:	910143f6 	add	x22, sp, #0x50
   99014:	39400001 	ldrb	w1, [x0]
   99018:	7100103f 	cmp	w1, #0x4
   9901c:	54000be0 	b.eq	99198 <f_rename+0x248>  // b.none
   99020:	f9406be1 	ldr	x1, [sp, #208]
   99024:	52800402 	mov	w2, #0x20                  	// #32
   99028:	aa1603e0 	mov	x0, x22
   9902c:	97ffe829 	bl	930d0 <mem_cpy.part.0>
   99030:	9103c3f5 	add	x21, sp, #0xf0
   99034:	52800c02 	mov	w2, #0x60                  	// #96
   99038:	aa1503e0 	mov	x0, x21
   9903c:	910243e1 	add	x1, sp, #0x90
   99040:	97ffe824 	bl	930d0 <mem_cpy.part.0>
   99044:	f9401be1 	ldr	x1, [sp, #48]
   99048:	97fff2f2 	bl	95c10 <follow_path>
   9904c:	2a0003f3 	mov	w19, w0
   99050:	34000960 	cbz	w0, 9917c <f_rename+0x22c>
   99054:	7100101f 	cmp	w0, #0x4
   99058:	540007c1 	b.ne	99150 <f_rename+0x200>  // b.any
   9905c:	aa1503e0 	mov	x0, x21
   99060:	97fff494 	bl	962b0 <dir_register>
   99064:	2a0003f3 	mov	w19, w0
   99068:	35000740 	cbnz	w0, 99150 <f_rename+0x200>
   9906c:	f9409be5 	ldr	x5, [sp, #304]
   99070:	910036c1 	add	x1, x22, #0xd
   99074:	52800262 	mov	w2, #0x13                  	// #19
   99078:	910034a0 	add	x0, x5, #0xd
   9907c:	97ffe815 	bl	930d0 <mem_cpy.part.0>
   99080:	39416fe2 	ldrb	w2, [sp, #91]
   99084:	52800023 	mov	w3, #0x1                   	// #1
   99088:	f94027e0 	ldr	x0, [sp, #72]
   9908c:	f27c005f 	tst	x2, #0x10
   99090:	321b0041 	orr	w1, w2, #0x20
   99094:	1a820021 	csel	w1, w1, w2, eq  // eq = none
   99098:	39002ca1 	strb	w1, [x5, #11]
   9909c:	39000c03 	strb	w3, [x0, #3]
   990a0:	39402ca1 	ldrb	w1, [x5, #11]
   990a4:	36200461 	tbz	w1, #4, 99130 <f_rename+0x1e0>
   990a8:	b9409fe1 	ldr	w1, [sp, #156]
   990ac:	b940ffe2 	ldr	w2, [sp, #252]
   990b0:	6b02003f 	cmp	w1, w2
   990b4:	540003e0 	b.eq	99130 <f_rename+0x1e0>  // b.none
   990b8:	39400004 	ldrb	w4, [x0]
   990bc:	39406ca3 	ldrb	w3, [x5, #27]
   990c0:	394068a1 	ldrb	w1, [x5, #26]
   990c4:	71000c9f 	cmp	w4, #0x3
   990c8:	33185c61 	bfi	w1, w3, #8, #24
   990cc:	540000a1 	b.ne	990e0 <f_rename+0x190>  // b.any
   990d0:	394054a3 	ldrb	w3, [x5, #21]
   990d4:	394050a4 	ldrb	w4, [x5, #20]
   990d8:	2a032083 	orr	w3, w4, w3, lsl #8
   990dc:	2a034021 	orr	w1, w1, w3, lsl #16
   990e0:	b9404003 	ldr	w3, [x0, #64]
   990e4:	51000821 	sub	w1, w1, #0x2
   990e8:	51000863 	sub	w3, w3, #0x2
   990ec:	6b03003f 	cmp	w1, w3
   990f0:	54000ca2 	b.cs	99284 <f_rename+0x334>  // b.hs, b.nlast
   990f4:	79401404 	ldrh	w4, [x0, #10]
   990f8:	f9403003 	ldr	x3, [x0, #96]
   990fc:	9ba40c21 	umaddl	x1, w1, w4, x3
   99100:	b4000c21 	cbz	x1, 99284 <f_rename+0x334>
   99104:	f9403803 	ldr	x3, [x0, #112]
   99108:	eb03003f 	cmp	x1, x3
   9910c:	54000c20 	b.eq	99290 <f_rename+0x340>  // b.none
   99110:	97ffe8d0 	bl	93450 <move_window.part.0>
   99114:	2a0003f3 	mov	w19, w0
   99118:	350001c0 	cbnz	w0, 99150 <f_rename+0x200>
   9911c:	f94027e0 	ldr	x0, [sp, #72]
   99120:	39426402 	ldrb	w2, [x0, #153]
   99124:	aa0003e1 	mov	x1, x0
   99128:	7100b85f 	cmp	w2, #0x2e
   9912c:	54000d20 	b.eq	992d0 <f_rename+0x380>  // b.none
   99130:	910243e0 	add	x0, sp, #0x90
   99134:	97ffee8b 	bl	94b60 <dir_remove>
   99138:	2a0003f3 	mov	w19, w0
   9913c:	350000a0 	cbnz	w0, 99150 <f_rename+0x200>
   99140:	f94027e0 	ldr	x0, [sp, #72]
   99144:	97ffe887 	bl	93360 <sync_fs>
   99148:	2a0003f3 	mov	w19, w0
   9914c:	d503201f 	nop
   99150:	7100327f 	cmp	w19, #0xc
   99154:	1a9f07f5 	cset	w21, ne  // ne = any
   99158:	aa1403e0 	mov	x0, x20
   9915c:	94000bb9 	bl	9c040 <ff_memfree>
   99160:	17ffff8b 	b	98f8c <f_rename+0x3c>
   99164:	f94027e0 	ldr	x0, [sp, #72]
   99168:	52800233 	mov	w19, #0x11                  	// #17
   9916c:	b4fff1c0 	cbz	x0, 98fa4 <f_rename+0x54>
   99170:	f9401000 	ldr	x0, [x0, #32]
   99174:	94000b9f 	bl	9bff0 <ff_rel_grant>
   99178:	17ffff8b 	b	98fa4 <f_rename+0x54>
   9917c:	b9409fe0 	ldr	w0, [sp, #156]
   99180:	b940ffe1 	ldr	w1, [sp, #252]
   99184:	6b00003f 	cmp	w1, w0
   99188:	54000740 	b.eq	99270 <f_rename+0x320>  // b.none
   9918c:	52800035 	mov	w21, #0x1                   	// #1
   99190:	52800113 	mov	w19, #0x8                   	// #8
   99194:	17fffff1 	b	99158 <f_rename+0x208>
   99198:	f9400c01 	ldr	x1, [x0, #24]
   9919c:	52800802 	mov	w2, #0x40                  	// #64
   991a0:	aa1603e0 	mov	x0, x22
   991a4:	97ffe7cb 	bl	930d0 <mem_cpy.part.0>
   991a8:	9103c3f5 	add	x21, sp, #0xf0
   991ac:	52800c02 	mov	w2, #0x60                  	// #96
   991b0:	aa1503e0 	mov	x0, x21
   991b4:	910243e1 	add	x1, sp, #0x90
   991b8:	97ffe7c6 	bl	930d0 <mem_cpy.part.0>
   991bc:	f9401be1 	ldr	x1, [sp, #48]
   991c0:	97fff294 	bl	95c10 <follow_path>
   991c4:	2a0003f3 	mov	w19, w0
   991c8:	350004e0 	cbnz	w0, 99264 <f_rename+0x314>
   991cc:	b9409fe0 	ldr	w0, [sp, #156]
   991d0:	b940ffe1 	ldr	w1, [sp, #252]
   991d4:	6b00003f 	cmp	w1, w0
   991d8:	54fffda1 	b.ne	9918c <f_rename+0x23c>  // b.any
   991dc:	b940c3e0 	ldr	w0, [sp, #192]
   991e0:	b94123e1 	ldr	w1, [sp, #288]
   991e4:	6b00003f 	cmp	w1, w0
   991e8:	54fffd21 	b.ne	9918c <f_rename+0x23c>  // b.any
   991ec:	aa1503e0 	mov	x0, x21
   991f0:	97fff430 	bl	962b0 <dir_register>
   991f4:	2a0003f3 	mov	w19, w0
   991f8:	35fffac0 	cbnz	w0, 99150 <f_rename+0x200>
   991fc:	f94027e0 	ldr	x0, [sp, #72]
   99200:	aa1603e1 	mov	x1, x22
   99204:	52800802 	mov	w2, #0x40                  	// #64
   99208:	f9400c00 	ldr	x0, [x0, #24]
   9920c:	39400407 	ldrb	w7, [x0, #1]
   99210:	39408c06 	ldrb	w6, [x0, #35]
   99214:	79404805 	ldrh	w5, [x0, #36]
   99218:	97ffe7ae 	bl	930d0 <mem_cpy.part.0>
   9921c:	f94027e0 	ldr	x0, [sp, #72]
   99220:	f9400c00 	ldr	x0, [x0, #24]
   99224:	39000407 	strb	w7, [x0, #1]
   99228:	f94027e0 	ldr	x0, [sp, #72]
   9922c:	f9400c01 	ldr	x1, [x0, #24]
   99230:	39008c26 	strb	w6, [x1, #35]
   99234:	f9400c01 	ldr	x1, [x0, #24]
   99238:	79004825 	strh	w5, [x1, #36]
   9923c:	f9400c01 	ldr	x1, [x0, #24]
   99240:	39401020 	ldrb	w0, [x1, #4]
   99244:	37200060 	tbnz	w0, #4, 99250 <f_rename+0x300>
   99248:	321b0000 	orr	w0, w0, #0x20
   9924c:	39001020 	strb	w0, [x1, #4]
   99250:	aa1503e0 	mov	x0, x21
   99254:	97ffedef 	bl	94a10 <store_xdir>
   99258:	2a0003f3 	mov	w19, w0
   9925c:	34fff6a0 	cbz	w0, 99130 <f_rename+0x1e0>
   99260:	17ffffbc 	b	99150 <f_rename+0x200>
   99264:	7100101f 	cmp	w0, #0x4
   99268:	54fff741 	b.ne	99150 <f_rename+0x200>  // b.any
   9926c:	17ffffe0 	b	991ec <f_rename+0x29c>
   99270:	b940c3e0 	ldr	w0, [sp, #192]
   99274:	b94123e1 	ldr	w1, [sp, #288]
   99278:	6b00003f 	cmp	w1, w0
   9927c:	54fff881 	b.ne	9918c <f_rename+0x23c>  // b.any
   99280:	17ffff77 	b	9905c <f_rename+0x10c>
   99284:	52800035 	mov	w21, #0x1                   	// #1
   99288:	52800053 	mov	w19, #0x2                   	// #2
   9928c:	17ffffb3 	b	99158 <f_rename+0x208>
   99290:	39426401 	ldrb	w1, [x0, #153]
   99294:	7100b83f 	cmp	w1, #0x2e
   99298:	54fff4c1 	b.ne	99130 <f_rename+0x1e0>  // b.any
   9929c:	f94027e1 	ldr	x1, [sp, #72]
   992a0:	7941fbe3 	ldrh	w3, [sp, #252]
   992a4:	79016403 	strh	w3, [x0, #178]
   992a8:	39400023 	ldrb	w3, [x1]
   992ac:	71000c7f 	cmp	w3, #0x3
   992b0:	540000a1 	b.ne	992c4 <f_rename+0x374>  // b.any
   992b4:	53107c42 	lsr	w2, w2, #16
   992b8:	53087c43 	lsr	w3, w2, #8
   992bc:	3902b002 	strb	w2, [x0, #172]
   992c0:	3902b403 	strb	w3, [x0, #173]
   992c4:	52800020 	mov	w0, #0x1                   	// #1
   992c8:	39000c20 	strb	w0, [x1, #3]
   992cc:	17ffff99 	b	99130 <f_rename+0x1e0>
   992d0:	b940ffe2 	ldr	w2, [sp, #252]
   992d4:	17fffff3 	b	992a0 <f_rename+0x350>
   992d8:	d503201f 	nop
   992dc:	d503201f 	nop

00000000000992e0 <f_chmod>:
   992e0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   992e4:	910003fd 	mov	x29, sp
   992e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   992ec:	12001c35 	and	w21, w1, #0xff
   992f0:	12001c56 	and	w22, w2, #0xff
   992f4:	910123e1 	add	x1, sp, #0x48
   992f8:	52800042 	mov	w2, #0x2                   	// #2
   992fc:	f9001fe0 	str	x0, [sp, #56]
   99300:	9100e3e0 	add	x0, sp, #0x38
   99304:	a90153f3 	stp	x19, x20, [sp, #16]
   99308:	97ffee8a 	bl	94d30 <mount_volume>
   9930c:	340001e0 	cbz	w0, 99348 <f_chmod+0x68>
   99310:	2a0003f3 	mov	w19, w0
   99314:	7100301f 	cmp	w0, #0xc
   99318:	1a9f07f5 	cset	w21, ne  // ne = any
   9931c:	f94027e0 	ldr	x0, [sp, #72]
   99320:	f100001f 	cmp	x0, #0x0
   99324:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   99328:	54000060 	b.eq	99334 <f_chmod+0x54>  // b.none
   9932c:	2a1303e1 	mov	w1, w19
   99330:	97ffee78 	bl	94d10 <unlock_fs.part.0>
   99334:	2a1303e0 	mov	w0, w19
   99338:	a94153f3 	ldp	x19, x20, [sp, #16]
   9933c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99340:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   99344:	d65f03c0 	ret
   99348:	f94027e1 	ldr	x1, [sp, #72]
   9934c:	52808c00 	mov	w0, #0x460                 	// #1120
   99350:	f9002be1 	str	x1, [sp, #80]
   99354:	94000b37 	bl	9c030 <ff_memalloc>
   99358:	aa0003f4 	mov	x20, x0
   9935c:	b40004c0 	cbz	x0, 993f4 <f_chmod+0x114>
   99360:	f94027e3 	ldr	x3, [sp, #72]
   99364:	91080002 	add	x2, x0, #0x200
   99368:	910143e0 	add	x0, sp, #0x50
   9936c:	f9401fe1 	ldr	x1, [sp, #56]
   99370:	a9010874 	stp	x20, x2, [x3, #16]
   99374:	97fff227 	bl	95c10 <follow_path>
   99378:	2a0003f3 	mov	w19, w0
   9937c:	35000320 	cbnz	w0, 993e0 <f_chmod+0x100>
   99380:	39428fe0 	ldrb	w0, [sp, #163]
   99384:	52801401 	mov	w1, #0xa0                  	// #160
   99388:	6a00003f 	tst	w1, w0
   9938c:	54000080 	b.eq	9939c <f_chmod+0xbc>  // b.none
   99390:	52800035 	mov	w21, #0x1                   	// #1
   99394:	528000d3 	mov	w19, #0x6                   	// #6
   99398:	14000014 	b	993e8 <f_chmod+0x108>
   9939c:	f94027e0 	ldr	x0, [sp, #72]
   993a0:	528004e1 	mov	w1, #0x27                  	// #39
   993a4:	0a0102c1 	and	w1, w22, w1
   993a8:	39400002 	ldrb	w2, [x0]
   993ac:	7100105f 	cmp	w2, #0x4
   993b0:	540002e0 	b.eq	9940c <f_chmod+0x12c>  // b.none
   993b4:	f9404be4 	ldr	x4, [sp, #144]
   993b8:	52800025 	mov	w5, #0x1                   	// #1
   993bc:	39402c83 	ldrb	w3, [x4, #11]
   993c0:	4a150062 	eor	w2, w3, w21
   993c4:	0a020021 	and	w1, w1, w2
   993c8:	4a010061 	eor	w1, w3, w1
   993cc:	39002c81 	strb	w1, [x4, #11]
   993d0:	39000c05 	strb	w5, [x0, #3]
   993d4:	97ffe7e3 	bl	93360 <sync_fs>
   993d8:	2a0003f3 	mov	w19, w0
   993dc:	d503201f 	nop
   993e0:	7100327f 	cmp	w19, #0xc
   993e4:	1a9f07f5 	cset	w21, ne  // ne = any
   993e8:	aa1403e0 	mov	x0, x20
   993ec:	94000b15 	bl	9c040 <ff_memfree>
   993f0:	17ffffcb 	b	9931c <f_chmod+0x3c>
   993f4:	f94027e0 	ldr	x0, [sp, #72]
   993f8:	52800233 	mov	w19, #0x11                  	// #17
   993fc:	b4fff9c0 	cbz	x0, 99334 <f_chmod+0x54>
   99400:	f9401000 	ldr	x0, [x0, #32]
   99404:	94000afb 	bl	9bff0 <ff_rel_grant>
   99408:	17ffffcb 	b	99334 <f_chmod+0x54>
   9940c:	f9400c04 	ldr	x4, [x0, #24]
   99410:	910143e0 	add	x0, sp, #0x50
   99414:	39401083 	ldrb	w3, [x4, #4]
   99418:	4a150062 	eor	w2, w3, w21
   9941c:	0a020021 	and	w1, w1, w2
   99420:	4a010061 	eor	w1, w3, w1
   99424:	39001081 	strb	w1, [x4, #4]
   99428:	97ffed7a 	bl	94a10 <store_xdir>
   9942c:	2a0003f3 	mov	w19, w0
   99430:	35fffd80 	cbnz	w0, 993e0 <f_chmod+0x100>
   99434:	f94027e0 	ldr	x0, [sp, #72]
   99438:	17ffffe7 	b	993d4 <f_chmod+0xf4>
   9943c:	d503201f 	nop

0000000000099440 <f_utime>:
   99440:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   99444:	910003fd 	mov	x29, sp
   99448:	52800042 	mov	w2, #0x2                   	// #2
   9944c:	f90013f5 	str	x21, [sp, #32]
   99450:	aa0103f5 	mov	x21, x1
   99454:	910123e1 	add	x1, sp, #0x48
   99458:	f9001fe0 	str	x0, [sp, #56]
   9945c:	9100e3e0 	add	x0, sp, #0x38
   99460:	a90153f3 	stp	x19, x20, [sp, #16]
   99464:	97ffee33 	bl	94d30 <mount_volume>
   99468:	340001e0 	cbz	w0, 994a4 <f_utime+0x64>
   9946c:	2a0003f3 	mov	w19, w0
   99470:	7100301f 	cmp	w0, #0xc
   99474:	1a9f07f5 	cset	w21, ne  // ne = any
   99478:	f94027e0 	ldr	x0, [sp, #72]
   9947c:	f100001f 	cmp	x0, #0x0
   99480:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
   99484:	54000060 	b.eq	99490 <f_utime+0x50>  // b.none
   99488:	2a1303e1 	mov	w1, w19
   9948c:	97ffee21 	bl	94d10 <unlock_fs.part.0>
   99490:	2a1303e0 	mov	w0, w19
   99494:	a94153f3 	ldp	x19, x20, [sp, #16]
   99498:	f94013f5 	ldr	x21, [sp, #32]
   9949c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   994a0:	d65f03c0 	ret
   994a4:	f94027e1 	ldr	x1, [sp, #72]
   994a8:	52808c00 	mov	w0, #0x460                 	// #1120
   994ac:	f9002be1 	str	x1, [sp, #80]
   994b0:	94000ae0 	bl	9c030 <ff_memalloc>
   994b4:	aa0003f4 	mov	x20, x0
   994b8:	b40004a0 	cbz	x0, 9954c <f_utime+0x10c>
   994bc:	f94027e3 	ldr	x3, [sp, #72]
   994c0:	91080002 	add	x2, x0, #0x200
   994c4:	910143e0 	add	x0, sp, #0x50
   994c8:	f9401fe1 	ldr	x1, [sp, #56]
   994cc:	a9010874 	stp	x20, x2, [x3, #16]
   994d0:	97fff1d0 	bl	95c10 <follow_path>
   994d4:	2a0003f3 	mov	w19, w0
   994d8:	35000300 	cbnz	w0, 99538 <f_utime+0xf8>
   994dc:	39428fe0 	ldrb	w0, [sp, #163]
   994e0:	52801401 	mov	w1, #0xa0                  	// #160
   994e4:	6a00003f 	tst	w1, w0
   994e8:	54000080 	b.eq	994f8 <f_utime+0xb8>  // b.none
   994ec:	52800035 	mov	w21, #0x1                   	// #1
   994f0:	528000d3 	mov	w19, #0x6                   	// #6
   994f4:	14000013 	b	99540 <f_utime+0x100>
   994f8:	f94027e0 	ldr	x0, [sp, #72]
   994fc:	794016a1 	ldrh	w1, [x21, #10]
   99500:	794012a3 	ldrh	w3, [x21, #8]
   99504:	39400002 	ldrb	w2, [x0]
   99508:	12001c24 	and	w4, w1, #0xff
   9950c:	d3483c21 	ubfx	x1, x1, #8, #8
   99510:	7100105f 	cmp	w2, #0x4
   99514:	54000280 	b.eq	99564 <f_utime+0x124>  // b.none
   99518:	f9404be2 	ldr	x2, [sp, #144]
   9951c:	52800025 	mov	w5, #0x1                   	// #1
   99520:	39005844 	strb	w4, [x2, #22]
   99524:	39005c41 	strb	w1, [x2, #23]
   99528:	79003043 	strh	w3, [x2, #24]
   9952c:	39000c05 	strb	w5, [x0, #3]
   99530:	97ffe78c 	bl	93360 <sync_fs>
   99534:	2a0003f3 	mov	w19, w0
   99538:	7100327f 	cmp	w19, #0xc
   9953c:	1a9f07f5 	cset	w21, ne  // ne = any
   99540:	aa1403e0 	mov	x0, x20
   99544:	94000abf 	bl	9c040 <ff_memfree>
   99548:	17ffffcc 	b	99478 <f_utime+0x38>
   9954c:	f94027e0 	ldr	x0, [sp, #72]
   99550:	52800233 	mov	w19, #0x11                  	// #17
   99554:	b4fff9e0 	cbz	x0, 99490 <f_utime+0x50>
   99558:	f9401000 	ldr	x0, [x0, #32]
   9955c:	94000aa5 	bl	9bff0 <ff_rel_grant>
   99560:	17ffffcc 	b	99490 <f_utime+0x50>
   99564:	f9400c02 	ldr	x2, [x0, #24]
   99568:	910143e0 	add	x0, sp, #0x50
   9956c:	39003044 	strb	w4, [x2, #12]
   99570:	39003441 	strb	w1, [x2, #13]
   99574:	79001c43 	strh	w3, [x2, #14]
   99578:	97ffed26 	bl	94a10 <store_xdir>
   9957c:	2a0003f3 	mov	w19, w0
   99580:	35fffdc0 	cbnz	w0, 99538 <f_utime+0xf8>
   99584:	f94027e0 	ldr	x0, [sp, #72]
   99588:	17ffffea 	b	99530 <f_utime+0xf0>
   9958c:	d503201f 	nop

0000000000099590 <f_expand>:
   99590:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   99594:	910003fd 	mov	x29, sp
   99598:	a9025bf5 	stp	x21, x22, [sp, #32]
   9959c:	aa0103f5 	mov	x21, x1
   995a0:	9101a3e1 	add	x1, sp, #0x68
   995a4:	a90153f3 	stp	x19, x20, [sp, #16]
   995a8:	a9046bf9 	stp	x25, x26, [sp, #64]
   995ac:	12001c5a 	and	w26, w2, #0xff
   995b0:	a90573fb 	stp	x27, x28, [sp, #80]
   995b4:	aa0003fc 	mov	x28, x0
   995b8:	97fff4d2 	bl	96900 <validate>
   995bc:	35000700 	cbnz	w0, 9969c <f_expand+0x10c>
   995c0:	3940c794 	ldrb	w20, [x28, #49]
   995c4:	f94037e0 	ldr	x0, [sp, #104]
   995c8:	350006f4 	cbnz	w20, 996a4 <f_expand+0x114>
   995cc:	b4000855 	cbz	x21, 996d4 <f_expand+0x144>
   995d0:	f9400b81 	ldr	x1, [x28, #16]
   995d4:	b5000801 	cbnz	x1, 996d4 <f_expand+0x144>
   995d8:	3940c381 	ldrb	w1, [x28, #48]
   995dc:	360807c1 	tbz	w1, #1, 996d4 <f_expand+0x144>
   995e0:	39400002 	ldrb	w2, [x0]
   995e4:	b2407fe1 	mov	x1, #0xffffffff            	// #4294967295
   995e8:	7100105f 	cmp	w2, #0x4
   995ec:	fa4112a0 	ccmp	x21, x1, #0x0, ne  // ne = any
   995f0:	54000e48 	b.hi	997b8 <f_expand+0x228>  // b.pmore
   995f4:	79401401 	ldrh	w1, [x0, #10]
   995f8:	a90363f7 	stp	x23, x24, [sp, #48]
   995fc:	b9402817 	ldr	w23, [x0, #40]
   99600:	53175836 	lsl	w22, w1, #9
   99604:	510006c3 	sub	w3, w22, #0x1
   99608:	ea15007f 	tst	x3, x21
   9960c:	9ad60ab6 	udiv	x22, x21, x22
   99610:	1a9606d6 	cinc	w22, w22, ne  // ne = any
   99614:	710006ff 	cmp	w23, #0x1
   99618:	54000749 	b.ls	99700 <f_expand+0x170>  // b.plast
   9961c:	b9404003 	ldr	w3, [x0, #64]
   99620:	52800041 	mov	w1, #0x2                   	// #2
   99624:	6b17007f 	cmp	w3, w23
   99628:	1a8182f7 	csel	w23, w23, w1, hi  // hi = pmore
   9962c:	7100105f 	cmp	w2, #0x4
   99630:	54000d40 	b.eq	997d8 <f_expand+0x248>  // b.none
   99634:	5280001b 	mov	w27, #0x0                   	// #0
   99638:	2a1703f9 	mov	w25, w23
   9963c:	2a1703f3 	mov	w19, w23
   99640:	52800058 	mov	w24, #0x2                   	// #2
   99644:	14000004 	b	99654 <f_expand+0xc4>
   99648:	54000600 	b.eq	99708 <f_expand+0x178>  // b.none
   9964c:	6b17027f 	cmp	w19, w23
   99650:	54000c00 	b.eq	997d0 <f_expand+0x240>  // b.none
   99654:	2a1303e1 	mov	w1, w19
   99658:	aa1c03e0 	mov	x0, x28
   9965c:	97ffe8b5 	bl	93930 <get_fat>
   99660:	f94037e3 	ldr	x3, [sp, #104]
   99664:	11000673 	add	w19, w19, #0x1
   99668:	1100077b 	add	w27, w27, #0x1
   9966c:	b9404061 	ldr	w1, [x3, #64]
   99670:	6b13003f 	cmp	w1, w19
   99674:	1a988273 	csel	w19, w19, w24, hi  // hi = pmore
   99678:	7100041f 	cmp	w0, #0x1
   9967c:	540008c0 	b.eq	99794 <f_expand+0x204>  // b.none
   99680:	3100041f 	cmn	w0, #0x1
   99684:	54000a20 	b.eq	997c8 <f_expand+0x238>  // b.none
   99688:	6b1b02df 	cmp	w22, w27
   9968c:	34fffde0 	cbz	w0, 99648 <f_expand+0xb8>
   99690:	5280001b 	mov	w27, #0x0                   	// #0
   99694:	2a1303f9 	mov	w25, w19
   99698:	17ffffed 	b	9964c <f_expand+0xbc>
   9969c:	2a0003f4 	mov	w20, w0
   996a0:	f94037e0 	ldr	x0, [sp, #104]
   996a4:	f100001f 	cmp	x0, #0x0
   996a8:	7a4c1a84 	ccmp	w20, #0xc, #0x4, ne  // ne = any
   996ac:	54000060 	b.eq	996b8 <f_expand+0x128>  // b.none
   996b0:	2a1403e1 	mov	w1, w20
   996b4:	97ffed97 	bl	94d10 <unlock_fs.part.0>
   996b8:	2a1403e0 	mov	w0, w20
   996bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   996c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   996c4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   996c8:	a94573fb 	ldp	x27, x28, [sp, #80]
   996cc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   996d0:	d65f03c0 	ret
   996d4:	528000f4 	mov	w20, #0x7                   	// #7
   996d8:	b4ffff00 	cbz	x0, 996b8 <f_expand+0x128>
   996dc:	f9401000 	ldr	x0, [x0, #32]
   996e0:	94000a44 	bl	9bff0 <ff_rel_grant>
   996e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   996e8:	2a1403e0 	mov	w0, w20
   996ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   996f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   996f4:	a94573fb 	ldp	x27, x28, [sp, #80]
   996f8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   996fc:	d65f03c0 	ret
   99700:	52800057 	mov	w23, #0x2                   	// #2
   99704:	17ffffca 	b	9962c <f_expand+0x9c>
   99708:	3400053a 	cbz	w26, 997ac <f_expand+0x21c>
   9970c:	2a1903f3 	mov	w19, w25
   99710:	2a1603f7 	mov	w23, w22
   99714:	12800018 	mov	w24, #0xffffffff            	// #-1
   99718:	34000bb6 	cbz	w22, 9988c <f_expand+0x2fc>
   9971c:	710006ff 	cmp	w23, #0x1
   99720:	1a930702 	csinc	w2, w24, w19, eq  // eq = none
   99724:	2a1303e1 	mov	w1, w19
   99728:	7100067f 	cmp	w19, #0x1
   9972c:	aa0303e0 	mov	x0, x3
   99730:	1100067a 	add	w26, w19, #0x1
   99734:	54000229 	b.ls	99778 <f_expand+0x1e8>  // b.plast
   99738:	b9404064 	ldr	w4, [x3, #64]
   9973c:	6b13009f 	cmp	w4, w19
   99740:	540002a9 	b.ls	99794 <f_expand+0x204>  // b.plast
   99744:	97ffe96f 	bl	93d00 <put_fat.part.0>
   99748:	710006f7 	subs	w23, w23, #0x1
   9974c:	35000a40 	cbnz	w0, 99894 <f_expand+0x304>
   99750:	f94037e3 	ldr	x3, [sp, #104]
   99754:	54000680 	b.eq	99824 <f_expand+0x294>  // b.none
   99758:	2a1a03f3 	mov	w19, w26
   9975c:	710006ff 	cmp	w23, #0x1
   99760:	1a930702 	csinc	w2, w24, w19, eq  // eq = none
   99764:	7100067f 	cmp	w19, #0x1
   99768:	2a1303e1 	mov	w1, w19
   9976c:	aa0303e0 	mov	x0, x3
   99770:	1100067a 	add	w26, w19, #0x1
   99774:	54fffe28 	b.hi	99738 <f_expand+0x1a8>  // b.pmore
   99778:	52800020 	mov	w0, #0x1                   	// #1
   9977c:	52800054 	mov	w20, #0x2                   	// #2
   99780:	f100007f 	cmp	x3, #0x0
   99784:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
   99788:	54000081 	b.ne	99798 <f_expand+0x208>  // b.any
   9978c:	a94363f7 	ldp	x23, x24, [sp, #48]
   99790:	17ffffca 	b	996b8 <f_expand+0x128>
   99794:	52800054 	mov	w20, #0x2                   	// #2
   99798:	aa0303e0 	mov	x0, x3
   9979c:	2a1403e1 	mov	w1, w20
   997a0:	97ffed5c 	bl	94d10 <unlock_fs.part.0>
   997a4:	a94363f7 	ldp	x23, x24, [sp, #48]
   997a8:	17ffffc4 	b	996b8 <f_expand+0x128>
   997ac:	51000720 	sub	w0, w25, #0x1
   997b0:	b9002860 	str	w0, [x3, #40]
   997b4:	17fffff9 	b	99798 <f_expand+0x208>
   997b8:	f9401000 	ldr	x0, [x0, #32]
   997bc:	528000f4 	mov	w20, #0x7                   	// #7
   997c0:	94000a0c 	bl	9bff0 <ff_rel_grant>
   997c4:	17ffffbd 	b	996b8 <f_expand+0x128>
   997c8:	52800034 	mov	w20, #0x1                   	// #1
   997cc:	17fffff3 	b	99798 <f_expand+0x208>
   997d0:	528000f4 	mov	w20, #0x7                   	// #7
   997d4:	17fffff1 	b	99798 <f_expand+0x208>
   997d8:	2a1703e1 	mov	w1, w23
   997dc:	2a1603e2 	mov	w2, w22
   997e0:	97ffe7b4 	bl	936b0 <find_bitmap>
   997e4:	2a0003f9 	mov	w25, w0
   997e8:	34000440 	cbz	w0, 99870 <f_expand+0x2e0>
   997ec:	3100041f 	cmn	w0, #0x1
   997f0:	f94037e3 	ldr	x3, [sp, #104]
   997f4:	54000460 	b.eq	99880 <f_expand+0x2f0>  // b.none
   997f8:	51000400 	sub	w0, w0, #0x1
   997fc:	34fffdba 	cbz	w26, 997b0 <f_expand+0x220>
   99800:	aa0303e0 	mov	x0, x3
   99804:	2a1603e2 	mov	w2, w22
   99808:	52800023 	mov	w3, #0x1                   	// #1
   9980c:	2a1903e1 	mov	w1, w25
   99810:	510006d3 	sub	w19, w22, #0x1
   99814:	97ffe7fb 	bl	93800 <change_bitmap>
   99818:	0b190273 	add	w19, w19, w25
   9981c:	350003c0 	cbnz	w0, 99894 <f_expand+0x304>
   99820:	f94037e3 	ldr	x3, [sp, #104]
   99824:	b9404061 	ldr	w1, [x3, #64]
   99828:	b9002873 	str	w19, [x3, #40]
   9982c:	52800042 	mov	w2, #0x2                   	// #2
   99830:	51000821 	sub	w1, w1, #0x2
   99834:	3940c380 	ldrb	w0, [x28, #48]
   99838:	39002f82 	strb	w2, [x28, #11]
   9983c:	321a0000 	orr	w0, w0, #0x40
   99840:	3900c380 	strb	w0, [x28, #48]
   99844:	b9402c60 	ldr	w0, [x3, #44]
   99848:	b9000f99 	str	w25, [x28, #12]
   9984c:	f9000b95 	str	x21, [x28, #16]
   99850:	6b01001f 	cmp	w0, w1
   99854:	54fffa28 	b.hi	99798 <f_expand+0x208>  // b.pmore
   99858:	39401061 	ldrb	w1, [x3, #4]
   9985c:	4b160000 	sub	w0, w0, w22
   99860:	b9002c60 	str	w0, [x3, #44]
   99864:	32000020 	orr	w0, w1, #0x1
   99868:	39001060 	strb	w0, [x3, #4]
   9986c:	17ffffcb 	b	99798 <f_expand+0x208>
   99870:	52800020 	mov	w0, #0x1                   	// #1
   99874:	528000f4 	mov	w20, #0x7                   	// #7
   99878:	f94037e3 	ldr	x3, [sp, #104]
   9987c:	17ffffc1 	b	99780 <f_expand+0x1f0>
   99880:	52800034 	mov	w20, #0x1                   	// #1
   99884:	2a1403e0 	mov	w0, w20
   99888:	17ffffbe 	b	99780 <f_expand+0x1f0>
   9988c:	52800013 	mov	w19, #0x0                   	// #0
   99890:	17ffffe6 	b	99828 <f_expand+0x298>
   99894:	7100301f 	cmp	w0, #0xc
   99898:	2a0003f4 	mov	w20, w0
   9989c:	1a9f07e0 	cset	w0, ne  // ne = any
   998a0:	f94037e3 	ldr	x3, [sp, #104]
   998a4:	17ffffb7 	b	99780 <f_expand+0x1f0>
   998a8:	d503201f 	nop
   998ac:	d503201f 	nop

00000000000998b0 <f_mkfs>:
   998b0:	a9ad7bfd 	stp	x29, x30, [sp, #-304]!
   998b4:	910003fd 	mov	x29, sp
   998b8:	f9007fe0 	str	x0, [sp, #248]
   998bc:	9103e3e0 	add	x0, sp, #0xf8
   998c0:	a90153f3 	stp	x19, x20, [sp, #16]
   998c4:	aa0203f4 	mov	x20, x2
   998c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   998cc:	aa0103f6 	mov	x22, x1
   998d0:	a90363f7 	stp	x23, x24, [sp, #48]
   998d4:	2a0303f8 	mov	w24, w3
   998d8:	97ffe496 	bl	92b30 <get_ldnumber>
   998dc:	37f819a0 	tbnz	w0, #31, 99c10 <f_mkfs+0x360>
   998e0:	b00000e1 	adrp	x1, b6000 <s_OldInfo+0x68>
   998e4:	91392021 	add	x1, x1, #0xe48
   998e8:	91002021 	add	x1, x1, #0x8
   998ec:	f860d821 	ldr	x1, [x1, w0, sxtw #3]
   998f0:	b4000041 	cbz	x1, 998f8 <f_mkfs+0x48>
   998f4:	3900003f 	strb	wzr, [x1]
   998f8:	12001c13 	and	w19, w0, #0xff
   998fc:	b00000c1 	adrp	x1, b2000 <vtable for CPartition>
   99900:	91036021 	add	x1, x1, #0xd8
   99904:	f10002df 	cmp	x22, #0x0
   99908:	91034021 	add	x1, x1, #0xd0
   9990c:	2a1303e0 	mov	w0, w19
   99910:	9a960036 	csel	x22, x1, x22, eq  // eq = none
   99914:	940008b3 	bl	9bbe0 <disk_initialize>
   99918:	52800075 	mov	w21, #0x3                   	// #3
   9991c:	12001c01 	and	w1, w0, #0xff
   99920:	37000960 	tbnz	w0, #0, 99a4c <f_mkfs+0x19c>
   99924:	52800155 	mov	w21, #0xa                   	// #10
   99928:	37100921 	tbnz	w1, #2, 99a4c <f_mkfs+0x19c>
   9992c:	b94006c0 	ldr	w0, [x22, #4]
   99930:	a9046bf9 	stp	x25, x26, [sp, #64]
   99934:	a90573fb 	stp	x27, x28, [sp, #80]
   99938:	b9010fe0 	str	w0, [sp, #268]
   9993c:	34000b20 	cbz	w0, 99aa0 <f_mkfs+0x1f0>
   99940:	51000401 	sub	w1, w0, #0x1
   99944:	528fffe2 	mov	w2, #0x7fff                	// #32767
   99948:	6b02003f 	cmp	w1, w2
   9994c:	540015c9 	b.ls	99c04 <f_mkfs+0x354>  // b.plast
   99950:	52800020 	mov	w0, #0x1                   	// #1
   99954:	b9010fe0 	str	w0, [sp, #268]
   99958:	394006da 	ldrb	w26, [x22, #1]
   9995c:	51000740 	sub	w0, w26, #0x1
   99960:	2a1a03f7 	mov	w23, w26
   99964:	12001c00 	and	w0, w0, #0xff
   99968:	7100041f 	cmp	w0, #0x1
   9996c:	54000069 	b.ls	99978 <f_mkfs+0xc8>  // b.plast
   99970:	52800037 	mov	w23, #0x1                   	// #1
   99974:	2a1703fa 	mov	w26, w23
   99978:	b9400adb 	ldr	w27, [x22, #8]
   9997c:	528fffe0 	mov	w0, #0x7fff                	// #32767
   99980:	51000761 	sub	w1, w27, #0x1
   99984:	6b00003f 	cmp	w1, w0
   99988:	54000888 	b.hi	99a98 <f_mkfs+0x1e8>  // b.pmore
   9998c:	f2400f7f 	tst	x27, #0xf
   99990:	52804000 	mov	w0, #0x200                 	// #512
   99994:	1a80037b 	csel	w27, w27, w0, eq  // eq = none
   99998:	b9400edc 	ldr	w28, [x22, #12]
   9999c:	52a02000 	mov	w0, #0x1000000             	// #16777216
   999a0:	6b00039f 	cmp	w28, w0
   999a4:	54000608 	b.hi	99a64 <f_mkfs+0x1b4>  // b.pmore
   999a8:	51000780 	sub	w0, w28, #0x1
   999ac:	53097f95 	lsr	w21, w28, #9
   999b0:	6a1c001f 	tst	w0, w28
   999b4:	54000581 	b.ne	99a64 <f_mkfs+0x1b4>  // b.any
   999b8:	7107ff1f 	cmp	w24, #0x1ff
   999bc:	540005c9 	b.ls	99a74 <f_mkfs+0x1c4>  // b.plast
   999c0:	394002d9 	ldrb	w25, [x22]
   999c4:	b40015b4 	cbz	x20, 99c78 <f_mkfs+0x3c8>
   999c8:	910443e2 	add	x2, sp, #0x110
   999cc:	52800021 	mov	w1, #0x1                   	// #1
   999d0:	f9008bff 	str	xzr, [sp, #272]
   999d4:	2a1303e0 	mov	w0, w19
   999d8:	aa1403f6 	mov	x22, x20
   999dc:	94000919 	bl	9be40 <disk_ioctl>
   999e0:	350013a0 	cbnz	w0, 99c54 <f_mkfs+0x3a4>
   999e4:	12000f21 	and	w1, w25, #0xf
   999e8:	f9408be3 	ldr	x3, [sp, #272]
   999ec:	b9006be1 	str	w1, [sp, #104]
   999f0:	36180679 	tbz	w25, #3, 99abc <f_mkfs+0x20c>
   999f4:	d2800005 	mov	x5, #0x0                   	// #0
   999f8:	f101fc7f 	cmp	x3, #0x7f
   999fc:	540011e9 	b.ls	99c38 <f_mkfs+0x388>  // b.plast
   99a00:	53097f00 	lsr	w0, w24, #9
   99a04:	b90073e0 	str	w0, [sp, #112]
   99a08:	36100719 	tbz	w25, #2, 99ae8 <f_mkfs+0x238>
   99a0c:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   99a10:	52803fe2 	mov	w2, #0x1ff                 	// #511
   99a14:	72a00022 	movk	w2, #0x1, lsl #16
   99a18:	eb00007f 	cmp	x3, x0
   99a1c:	1a9f97e1 	cset	w1, hi  // hi = pmore
   99a20:	7100003f 	cmp	w1, #0x0
   99a24:	12000b20 	and	w0, w25, #0x7
   99a28:	7a420382 	ccmp	w28, w2, #0x2, eq  // eq = none
   99a2c:	7a449804 	ccmp	w0, #0x4, #0x4, ls  // ls = plast
   99a30:	54001481 	b.ne	99cc0 <f_mkfs+0x410>  // b.any
   99a34:	f13ffc7f 	cmp	x3, #0xfff
   99a38:	54008e08 	b.hi	9abf8 <f_mkfs+0x1348>  // b.pmore
   99a3c:	528001d5 	mov	w21, #0xe                   	// #14
   99a40:	b40087d4 	cbz	x20, 9ab38 <f_mkfs+0x1288>
   99a44:	a9446bf9 	ldp	x25, x26, [sp, #64]
   99a48:	a94573fb 	ldp	x27, x28, [sp, #80]
   99a4c:	2a1503e0 	mov	w0, w21
   99a50:	a94153f3 	ldp	x19, x20, [sp, #16]
   99a54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99a58:	a94363f7 	ldp	x23, x24, [sp, #48]
   99a5c:	a8d37bfd 	ldp	x29, x30, [sp], #304
   99a60:	d65f03c0 	ret
   99a64:	7107ff1f 	cmp	w24, #0x1ff
   99a68:	52800015 	mov	w21, #0x0                   	// #0
   99a6c:	5280001c 	mov	w28, #0x0                   	// #0
   99a70:	54fffa88 	b.hi	999c0 <f_mkfs+0x110>  // b.pmore
   99a74:	52800235 	mov	w21, #0x11                  	// #17
   99a78:	a94153f3 	ldp	x19, x20, [sp, #16]
   99a7c:	2a1503e0 	mov	w0, w21
   99a80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99a84:	a94363f7 	ldp	x23, x24, [sp, #48]
   99a88:	a9446bf9 	ldp	x25, x26, [sp, #64]
   99a8c:	a94573fb 	ldp	x27, x28, [sp, #80]
   99a90:	a8d37bfd 	ldp	x29, x30, [sp], #304
   99a94:	d65f03c0 	ret
   99a98:	5280401b 	mov	w27, #0x200                 	// #512
   99a9c:	17ffffbf 	b	99998 <f_mkfs+0xe8>
   99aa0:	910433e2 	add	x2, sp, #0x10c
   99aa4:	52800061 	mov	w1, #0x3                   	// #3
   99aa8:	2a1303e0 	mov	w0, w19
   99aac:	940008e5 	bl	9be40 <disk_ioctl>
   99ab0:	35fff500 	cbnz	w0, 99950 <f_mkfs+0xa0>
   99ab4:	b9410fe0 	ldr	w0, [sp, #268]
   99ab8:	17ffffa2 	b	99940 <f_mkfs+0x90>
   99abc:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   99ac0:	eb00007f 	cmp	x3, x0
   99ac4:	54000f09 	b.ls	99ca4 <f_mkfs+0x3f4>  // b.plast
   99ac8:	32190020 	orr	w0, w1, #0x80
   99acc:	d1208463 	sub	x3, x3, #0x821
   99ad0:	d2810005 	mov	x5, #0x800                 	// #2048
   99ad4:	b9006be0 	str	w0, [sp, #104]
   99ad8:	53097f00 	lsr	w0, w24, #9
   99adc:	f9008be3 	str	x3, [sp, #272]
   99ae0:	b90073e0 	str	w0, [sp, #112]
   99ae4:	37101339 	tbnz	w25, #2, 99d48 <f_mkfs+0x498>
   99ae8:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   99aec:	eb00007f 	cmp	x3, x0
   99af0:	54000a48 	b.hi	99c38 <f_mkfs+0x388>  // b.pmore
   99af4:	b9406be1 	ldr	w1, [sp, #104]
   99af8:	52803fe0 	mov	w0, #0x1ff                 	// #511
   99afc:	72a00020 	movk	w0, #0x1, lsl #16
   99b00:	6b00039f 	cmp	w28, w0
   99b04:	121f002e 	and	w14, w1, #0x2
   99b08:	12000039 	and	w25, w1, #0x1
   99b0c:	54000de9 	b.ls	99cc8 <f_mkfs+0x418>  // b.plast
   99b10:	3400882e 	cbz	w14, 9ac14 <f_mkfs+0x1364>
   99b14:	2a0303e0 	mov	w0, w3
   99b18:	34008eb9 	cbz	w25, 9acec <f_mkfs+0x143c>
   99b1c:	b9410fef 	ldr	w15, [sp, #268]
   99b20:	52801015 	mov	w21, #0x80                  	// #128
   99b24:	531c6eb0 	lsl	w16, w21, #4
   99b28:	2a1503ed 	mov	w13, w21
   99b2c:	1ad50800 	udiv	w0, w0, w21
   99b30:	713fd41f 	cmp	w0, #0xff5
   99b34:	540038c9 	b.ls	9a24c <f_mkfs+0x99c>  // b.plast
   99b38:	11000800 	add	w0, w0, #0x2
   99b3c:	52800049 	mov	w9, #0x2                   	// #2
   99b40:	531f780b 	lsl	w11, w0, #1
   99b44:	1107fd6b 	add	w11, w11, #0x1ff
   99b48:	d3446b62 	ubfx	x2, x27, #4, #23
   99b4c:	53097d66 	lsr	w6, w11, #9
   99b50:	910004bc 	add	x28, x5, #0x1
   99b54:	8b1c004b 	add	x11, x2, x28
   99b58:	510005e1 	sub	w1, w15, #0x1
   99b5c:	1b177cc2 	mul	w2, w6, w23
   99b60:	4b0f03e0 	neg	w0, w15
   99b64:	d3446b6a 	ubfx	x10, x27, #4, #23
   99b68:	5280002c 	mov	w12, #0x1                   	// #1
   99b6c:	8b0b0042 	add	x2, x2, x11
   99b70:	0b020021 	add	w1, w1, w2
   99b74:	0a000020 	and	w0, w1, w0
   99b78:	4b020000 	sub	w0, w0, w2
   99b7c:	1ad7080b 	udiv	w11, w0, w23
   99b80:	1b178161 	msub	w1, w11, w23, w0
   99b84:	340000a1 	cbz	w1, 99b98 <f_mkfs+0x2e8>
   99b88:	51000400 	sub	w0, w0, #0x1
   99b8c:	910008bc 	add	x28, x5, #0x2
   99b90:	5280004c 	mov	w12, #0x2                   	// #2
   99b94:	1ad7080b 	udiv	w11, w0, w23
   99b98:	0b06016b 	add	w11, w11, w6
   99b9c:	8b100042 	add	x2, x2, x16
   99ba0:	cb050042 	sub	x2, x2, x5
   99ba4:	eb03005f 	cmp	x2, x3
   99ba8:	54000488 	b.hi	99c38 <f_mkfs+0x388>  // b.pmore
   99bac:	1b178d61 	msub	w1, w11, w23, w3
   99bb0:	0b0a0186 	add	w6, w12, w10
   99bb4:	71000d3f 	cmp	w9, #0x3
   99bb8:	2a0303e0 	mov	w0, w3
   99bbc:	4b060021 	sub	w1, w1, w6
   99bc0:	1ad50839 	udiv	w25, w1, w21
   99bc4:	54002040 	b.eq	99fcc <f_mkfs+0x71c>  // b.none
   99bc8:	7100093f 	cmp	w9, #0x2
   99bcc:	54000301 	b.ne	99c2c <f_mkfs+0x37c>  // b.any
   99bd0:	529ffea1 	mov	w1, #0xfff5                	// #65525
   99bd4:	6b01033f 	cmp	w25, w1
   99bd8:	54001ce9 	b.ls	99f74 <f_mkfs+0x6c4>  // b.plast
   99bdc:	35003b0d 	cbnz	w13, 9a33c <f_mkfs+0xa8c>
   99be0:	531f7aad 	lsl	w13, w21, #1
   99be4:	710101bf 	cmp	w13, #0x40
   99be8:	540087e9 	b.ls	9ace4 <f_mkfs+0x1434>  // b.plast
   99bec:	3500842e 	cbnz	w14, 9ac70 <f_mkfs+0x13c0>
   99bf0:	710201bf 	cmp	w13, #0x80
   99bf4:	54000228 	b.hi	99c38 <f_mkfs+0x388>  // b.pmore
   99bf8:	531b6ab0 	lsl	w16, w21, #5
   99bfc:	2a0d03f5 	mov	w21, w13
   99c00:	17ffffcb 	b	99b2c <f_mkfs+0x27c>
   99c04:	6a00003f 	tst	w1, w0
   99c08:	54ffea41 	b.ne	99950 <f_mkfs+0xa0>  // b.any
   99c0c:	17ffff53 	b	99958 <f_mkfs+0xa8>
   99c10:	52800175 	mov	w21, #0xb                   	// #11
   99c14:	a94153f3 	ldp	x19, x20, [sp, #16]
   99c18:	2a1503e0 	mov	w0, w21
   99c1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99c20:	a94363f7 	ldp	x23, x24, [sp, #48]
   99c24:	a8d37bfd 	ldp	x29, x30, [sp], #304
   99c28:	d65f03c0 	ret
   99c2c:	713fd73f 	cmp	w25, #0xff5
   99c30:	5400c489 	b.ls	9b4c0 <f_mkfs+0x1c10>  // b.plast
   99c34:	d503201f 	nop
   99c38:	b4007d54 	cbz	x20, 9abe0 <f_mkfs+0x1330>
   99c3c:	528001d5 	mov	w21, #0xe                   	// #14
   99c40:	a9446bf9 	ldp	x25, x26, [sp, #64]
   99c44:	a94573fb 	ldp	x27, x28, [sp, #80]
   99c48:	17ffff81 	b	99a4c <f_mkfs+0x19c>
   99c4c:	f9403bf4 	ldr	x20, [sp, #112]
   99c50:	b4002f34 	cbz	x20, 9a234 <f_mkfs+0x984>
   99c54:	52800035 	mov	w21, #0x1                   	// #1
   99c58:	a94153f3 	ldp	x19, x20, [sp, #16]
   99c5c:	2a1503e0 	mov	w0, w21
   99c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99c64:	a94363f7 	ldp	x23, x24, [sp, #48]
   99c68:	a9446bf9 	ldp	x25, x26, [sp, #64]
   99c6c:	a94573fb 	ldp	x27, x28, [sp, #80]
   99c70:	a8d37bfd 	ldp	x29, x30, [sp], #304
   99c74:	d65f03c0 	ret
   99c78:	12175b00 	and	w0, w24, #0xfffffe00
   99c7c:	940008ed 	bl	9c030 <ff_memalloc>
   99c80:	aa0003f6 	mov	x22, x0
   99c84:	b4ffef80 	cbz	x0, 99a74 <f_mkfs+0x1c4>
   99c88:	910443e2 	add	x2, sp, #0x110
   99c8c:	52800021 	mov	w1, #0x1                   	// #1
   99c90:	f9008bff 	str	xzr, [sp, #272]
   99c94:	2a1303e0 	mov	w0, w19
   99c98:	9400086a 	bl	9be40 <disk_ioctl>
   99c9c:	34ffea40 	cbz	w0, 999e4 <f_mkfs+0x134>
   99ca0:	14000165 	b	9a234 <f_mkfs+0x984>
   99ca4:	f100fc7f 	cmp	x3, #0x3f
   99ca8:	d2800005 	mov	x5, #0x0                   	// #0
   99cac:	54ffea69 	b.ls	999f8 <f_mkfs+0x148>  // b.plast
   99cb0:	d100fc63 	sub	x3, x3, #0x3f
   99cb4:	d28007e5 	mov	x5, #0x3f                  	// #63
   99cb8:	f9008be3 	str	x3, [sp, #272]
   99cbc:	17ffff4f 	b	999f8 <f_mkfs+0x148>
   99cc0:	121f032e 	and	w14, w25, #0x2
   99cc4:	12000339 	and	w25, w25, #0x1
   99cc8:	34007b4e 	cbz	w14, 9ac30 <f_mkfs+0x1380>
   99ccc:	2a0303e0 	mov	w0, w3
   99cd0:	35007859 	cbnz	w25, 9abd8 <f_mkfs+0x1328>
   99cd4:	2a1503ed 	mov	w13, w21
   99cd8:	2a0d03e6 	mov	w6, w13
   99cdc:	34007cad 	cbz	w13, 9ac70 <f_mkfs+0x13c0>
   99ce0:	1acd0800 	udiv	w0, w0, w13
   99ce4:	129ffea2 	mov	w2, #0xffff000a            	// #-65526
   99ce8:	12be0021 	mov	w1, #0xffeffff             	// #268369919
   99cec:	531e740b 	lsl	w11, w0, #2
   99cf0:	0b020000 	add	w0, w0, w2
   99cf4:	11081d6b 	add	w11, w11, #0x207
   99cf8:	6b01001f 	cmp	w0, w1
   99cfc:	53097d6b 	lsr	w11, w11, #9
   99d00:	54fff9c8 	b.hi	99c38 <f_mkfs+0x388>  // b.pmore
   99d04:	b9410fef 	ldr	w15, [sp, #268]
   99d08:	1b177d62 	mul	w2, w11, w23
   99d0c:	910080a7 	add	x7, x5, #0x20
   99d10:	531c6db0 	lsl	w16, w13, #4
   99d14:	2a0d03f5 	mov	w21, w13
   99d18:	52800069 	mov	w9, #0x3                   	// #3
   99d1c:	2a0603ed 	mov	w13, w6
   99d20:	8b070042 	add	x2, x2, x7
   99d24:	5280000a 	mov	w10, #0x0                   	// #0
   99d28:	510005ec 	sub	w12, w15, #0x1
   99d2c:	4b0f03e0 	neg	w0, w15
   99d30:	0b02018c 	add	w12, w12, w2
   99d34:	0a00018c 	and	w12, w12, w0
   99d38:	4b02018c 	sub	w12, w12, w2
   99d3c:	8b2c40fc 	add	x28, x7, w12, uxtw
   99d40:	1100818c 	add	w12, w12, #0x20
   99d44:	17ffff96 	b	99b9c <f_mkfs+0x2ec>
   99d48:	d2810005 	mov	x5, #0x800                 	// #2048
   99d4c:	34001075 	cbz	w21, 99f58 <f_mkfs+0x6a8>
   99d50:	2a1503e0 	mov	w0, w21
   99d54:	9ac00860 	udiv	x0, x3, x0
   99d58:	b9410fe1 	ldr	w1, [sp, #268]
   99d5c:	910080bc 	add	x28, x5, #0x20
   99d60:	d100043a 	sub	x26, x1, #0x1
   99d64:	cb0103e1 	neg	x1, x1
   99d68:	531e7400 	lsl	w0, w0, #2
   99d6c:	11081c02 	add	w2, w0, #0x207
   99d70:	53097c40 	lsr	w0, w2, #9
   99d74:	8b1c0000 	add	x0, x0, x28
   99d78:	b900cfe2 	str	w2, [sp, #204]
   99d7c:	53097c42 	lsr	w2, w2, #9
   99d80:	8b00035a 	add	x26, x26, x0
   99d84:	8a010340 	and	x0, x26, x1
   99d88:	b900cbe2 	str	w2, [sp, #200]
   99d8c:	f90043e0 	str	x0, [sp, #128]
   99d90:	cb050000 	sub	x0, x0, x5
   99d94:	eb43041f 	cmp	x0, x3, lsr #1
   99d98:	54ffe522 	b.cs	99a3c <f_mkfs+0x18c>  // b.hs, b.nlast
   99d9c:	b94083e1 	ldr	w1, [sp, #128]
   99da0:	0b050060 	add	w0, w3, w5
   99da4:	b900e3e5 	str	w5, [sp, #224]
   99da8:	4b010000 	sub	w0, w0, w1
   99dac:	1ad50800 	udiv	w0, w0, w21
   99db0:	71003c1f 	cmp	w0, #0xf
   99db4:	b900a3e0 	str	w0, [sp, #160]
   99db8:	54ffe429 	b.ls	99a3c <f_mkfs+0x18c>  // b.plast
   99dbc:	b940a3e1 	ldr	w1, [sp, #160]
   99dc0:	321f77e0 	mov	w0, #0x7ffffffe            	// #2147483646
   99dc4:	6b00003f 	cmp	w1, w0
   99dc8:	54ffe3a2 	b.cs	99a3c <f_mkfs+0x18c>  // b.hs, b.nlast
   99dcc:	b940a3e0 	ldr	w0, [sp, #160]
   99dd0:	53175aa1 	lsl	w1, w21, #9
   99dd4:	52800017 	mov	w23, #0x0                   	// #0
   99dd8:	51000422 	sub	w2, w1, #0x1
   99ddc:	52800004 	mov	w4, #0x0                   	// #0
   99de0:	f9004ff4 	str	x20, [sp, #152]
   99de4:	52800019 	mov	w25, #0x0                   	// #0
   99de8:	5280001b 	mov	w27, #0x0                   	// #0
   99dec:	f90057fc 	str	x28, [sp, #168]
   99df0:	291d87e2 	stp	w2, w1, [sp, #236]
   99df4:	5280001a 	mov	w26, #0x0                   	// #0
   99df8:	2a0403fc 	mov	w28, w4
   99dfc:	2a1703f4 	mov	w20, w23
   99e00:	b900b3f5 	str	w21, [sp, #176]
   99e04:	11001c00 	add	w0, w0, #0x7
   99e08:	b900c7f8 	str	w24, [sp, #196]
   99e0c:	f9005fe5 	str	x5, [sp, #184]
   99e10:	b900f7e0 	str	w0, [sp, #244]
   99e14:	53037c00 	lsr	w0, w0, #3
   99e18:	b900ebe0 	str	w0, [sp, #232]
   99e1c:	0b000040 	add	w0, w2, w0
   99e20:	1ac10800 	udiv	w0, w0, w1
   99e24:	12175b01 	and	w1, w24, #0xfffffe00
   99e28:	aa1603f8 	mov	x24, x22
   99e2c:	b9007be1 	str	w1, [sp, #120]
   99e30:	1b007ea2 	mul	w2, w21, w0
   99e34:	b900e7e0 	str	w0, [sp, #228]
   99e38:	b90123e0 	str	w0, [sp, #288]
   99e3c:	f94043e0 	ldr	x0, [sp, #128]
   99e40:	8b000042 	add	x2, x2, x0
   99e44:	aa0203f5 	mov	x21, x2
   99e48:	110006f6 	add	w22, w23, #0x1
   99e4c:	11000ae0 	add	w0, w23, #0x2
   99e50:	8b374303 	add	x3, x24, w23, uxtw
   99e54:	340002fa 	cbz	w26, 99eb0 <f_mkfs+0x600>
   99e58:	7100075f 	cmp	w26, #0x1
   99e5c:	54002420 	b.eq	9a2e0 <f_mkfs+0xa30>  // b.none
   99e60:	d3483e85 	ubfx	x5, x20, #8, #8
   99e64:	39000074 	strb	w20, [x3]
   99e68:	13990739 	ror	w25, w25, #1
   99e6c:	0b342384 	add	w4, w28, w20, uxth
   99e70:	0b340339 	add	w25, w25, w20, uxtb
   99e74:	72003c9c 	ands	w28, w4, #0xffff
   99e78:	13990739 	ror	w25, w25, #1
   99e7c:	38366b05 	strb	w5, [x24, x22]
   99e80:	11000b7b 	add	w27, w27, #0x2
   99e84:	0b050339 	add	w25, w25, w5
   99e88:	540026e0 	b.eq	9a364 <f_mkfs+0xab4>  // b.none
   99e8c:	b9407be1 	ldr	w1, [sp, #120]
   99e90:	6b00003f 	cmp	w1, w0
   99e94:	540070a0 	b.eq	9aca8 <f_mkfs+0x13f8>  // b.none
   99e98:	2a0003f7 	mov	w23, w0
   99e9c:	5280001a 	mov	w26, #0x0                   	// #0
   99ea0:	8b374303 	add	x3, x24, w23, uxtw
   99ea4:	110006f6 	add	w22, w23, #0x1
   99ea8:	11000ae0 	add	w0, w23, #0x2
   99eac:	35fffd7a 	cbnz	w26, 99e58 <f_mkfs+0x5a8>
   99eb0:	2a1c03fa 	mov	w26, w28
   99eb4:	b9008bf7 	str	w23, [sp, #136]
   99eb8:	2a0003f7 	mov	w23, w0
   99ebc:	d503201f 	nop
   99ec0:	13990721 	ror	w1, w25, #1
   99ec4:	2a1a03e0 	mov	w0, w26
   99ec8:	f9006be3 	str	x3, [sp, #208]
   99ecc:	11000b7b 	add	w27, w27, #0x2
   99ed0:	b90093e1 	str	w1, [sp, #144]
   99ed4:	940008d7 	bl	9c230 <ff_wtoupper>
   99ed8:	6b20235f 	cmp	w26, w0, uxth
   99edc:	8b160301 	add	x1, x24, x22
   99ee0:	11000744 	add	w4, w26, #0x1
   99ee4:	f9406be3 	ldr	x3, [sp, #208]
   99ee8:	12003c19 	and	w25, w0, #0xffff
   99eec:	12003c9c 	and	w28, w4, #0xffff
   99ef0:	f9006fe1 	str	x1, [sp, #216]
   99ef4:	54007200 	b.eq	9ad34 <f_mkfs+0x1484>  // b.none
   99ef8:	53087f25 	lsr	w5, w25, #8
   99efc:	39000060 	strb	w0, [x3]
   99f00:	b94093e1 	ldr	w1, [sp, #144]
   99f04:	0b200039 	add	w25, w1, w0, uxtb
   99f08:	13990739 	ror	w25, w25, #1
   99f0c:	38366b05 	strb	w5, [x24, x22]
   99f10:	0b050339 	add	w25, w25, w5
   99f14:	3400699c 	cbz	w28, 9ac44 <f_mkfs+0x1394>
   99f18:	5280001a 	mov	w26, #0x0                   	// #0
   99f1c:	b9407be0 	ldr	w0, [sp, #120]
   99f20:	6b17001f 	cmp	w0, w23
   99f24:	54fff921 	b.ne	99e48 <f_mkfs+0x598>  // b.any
   99f28:	b9408be0 	ldr	w0, [sp, #136]
   99f2c:	aa1503e2 	mov	x2, x21
   99f30:	aa1803e1 	mov	x1, x24
   99f34:	11080416 	add	w22, w0, #0x201
   99f38:	2a1303e0 	mov	w0, w19
   99f3c:	53097ed6 	lsr	w22, w22, #9
   99f40:	2a1603e3 	mov	w3, w22
   99f44:	94000787 	bl	9bd60 <disk_write>
   99f48:	2a0003f7 	mov	w23, w0
   99f4c:	35007840 	cbnz	w0, 9ae54 <f_mkfs+0x15a4>
   99f50:	8b1602b5 	add	x21, x21, x22
   99f54:	17ffffbd 	b	99e48 <f_mkfs+0x598>
   99f58:	52800021 	mov	w1, #0x1                   	// #1
   99f5c:	d2810005 	mov	x5, #0x800                 	// #2048
   99f60:	52800815 	mov	w21, #0x40                  	// #64
   99f64:	34ffef61 	cbz	w1, 99d50 <f_mkfs+0x4a0>
   99f68:	d2802000 	mov	x0, #0x100                 	// #256
   99f6c:	2a0003f5 	mov	w21, w0
   99f70:	17ffff79 	b	99d54 <f_mkfs+0x4a4>
   99f74:	713fd73f 	cmp	w25, #0xff5
   99f78:	54000308 	b.hi	99fd8 <f_mkfs+0x728>  // b.pmore
   99f7c:	35ffe5ed 	cbnz	w13, 99c38 <f_mkfs+0x388>
   99f80:	531f7ab5 	lsl	w21, w21, #1
   99f84:	710202bf 	cmp	w21, #0x80
   99f88:	54ffe588 	b.hi	99c38 <f_mkfs+0x388>  // b.pmore
   99f8c:	35ffdcd5 	cbnz	w21, 99b24 <f_mkfs+0x274>
   99f90:	b00000c2 	adrp	x2, b2000 <vtable for CPartition>
   99f94:	91036042 	add	x2, x2, #0xd8
   99f98:	52800021 	mov	w1, #0x1                   	// #1
   99f9c:	9103c842 	add	x2, x2, #0xf2
   99fa0:	2a0103f5 	mov	w21, w1
   99fa4:	530c7c06 	lsr	w6, w0, #12
   99fa8:	14000004 	b	99fb8 <f_mkfs+0x708>
   99fac:	78402441 	ldrh	w1, [x2], #2
   99fb0:	531f7ab5 	lsl	w21, w21, #1
   99fb4:	34000061 	cbz	w1, 99fc0 <f_mkfs+0x710>
   99fb8:	6b06003f 	cmp	w1, w6
   99fbc:	54ffff89 	b.ls	99fac <f_mkfs+0x6fc>  // b.plast
   99fc0:	531c6eb0 	lsl	w16, w21, #4
   99fc4:	5280000d 	mov	w13, #0x0                   	// #0
   99fc8:	17fffed9 	b	99b2c <f_mkfs+0x27c>
   99fcc:	529ffea1 	mov	w1, #0xfff5                	// #65525
   99fd0:	6b01033f 	cmp	w25, w1
   99fd4:	54005f89 	b.ls	9abc4 <f_mkfs+0x1314>  // b.plast
   99fd8:	910802c6 	add	x6, x22, #0x200
   99fdc:	aa1603e0 	mov	x0, x22
   99fe0:	3800141f 	strb	wzr, [x0], #1
   99fe4:	eb06001f 	cmp	x0, x6
   99fe8:	54ffffc1 	b.ne	99fe0 <f_mkfs+0x730>  // b.any
   99fec:	b00000c1 	adrp	x1, b2000 <vtable for CPartition>
   99ff0:	52800162 	mov	w2, #0xb                   	// #11
   99ff4:	a90797e6 	stp	x6, x5, [sp, #120]
   99ff8:	91020021 	add	x1, x1, #0x80
   99ffc:	aa1603e0 	mov	x0, x22
   9a000:	b9008bea 	str	w10, [sp, #136]
   9a004:	b90093e9 	str	w9, [sp, #144]
   9a008:	b9009beb 	str	w11, [sp, #152]
   9a00c:	97ffe431 	bl	930d0 <mem_cpy.part.0>
   9a010:	b94093e9 	ldr	w9, [sp, #144]
   9a014:	52804002 	mov	w2, #0x200                 	// #512
   9a018:	d29fffe0 	mov	x0, #0xffff                	// #65535
   9a01c:	390036d5 	strb	w21, [x22, #13]
   9a020:	f9408be1 	ldr	x1, [sp, #272]
   9a024:	7800b2c2 	sturh	w2, [x22, #11]
   9a028:	79001ecc 	strh	w12, [x22, #14]
   9a02c:	71000d3f 	cmp	w9, #0x3
   9a030:	1a9f137b 	csel	w27, w27, wzr, ne  // ne = any
   9a034:	390042da 	strb	w26, [x22, #16]
   9a038:	780112db 	sturh	w27, [x22, #17]
   9a03c:	eb00003f 	cmp	x1, x0
   9a040:	b9408bea 	ldr	w10, [sp, #136]
   9a044:	a94797e6 	ldp	x6, x5, [sp, #120]
   9a048:	b9409beb 	ldr	w11, [sp, #152]
   9a04c:	794223e1 	ldrh	w1, [sp, #272]
   9a050:	b94113e0 	ldr	w0, [sp, #272]
   9a054:	54007188 	b.hi	9ae84 <f_mkfs+0x15d4>  // b.pmore
   9a058:	780132c1 	sturh	w1, [x22, #19]
   9a05c:	128000e1 	mov	w1, #0xfffffff8            	// #-8
   9a060:	528007e0 	mov	w0, #0x3f                  	// #63
   9a064:	72a01fe0 	movk	w0, #0xff, lsl #16
   9a068:	71000d3f 	cmp	w9, #0x3
   9a06c:	79003ac5 	strh	w5, [x22, #28]
   9a070:	390056c1 	strb	w1, [x22, #21]
   9a074:	b9001ac0 	str	w0, [x22, #24]
   9a078:	79003edf 	strh	wzr, [x22, #30]
   9a07c:	54007120 	b.eq	9aea0 <f_mkfs+0x15f0>  // b.none
   9a080:	b9007beb 	str	w11, [sp, #120]
   9a084:	b90083e9 	str	w9, [sp, #128]
   9a088:	b9008bea 	str	w10, [sp, #136]
   9a08c:	a9091be5 	stp	x5, x6, [sp, #144]
   9a090:	940007f0 	bl	9c050 <get_fattime>
   9a094:	b9407beb 	ldr	w11, [sp, #120]
   9a098:	2a0003e3 	mov	w3, w0
   9a09c:	5280052c 	mov	w12, #0x29                  	// #41
   9a0a0:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   9a0a4:	52800262 	mov	w2, #0x13                  	// #19
   9a0a8:	900000c1 	adrp	x1, b2000 <vtable for CPartition>
   9a0ac:	9102a021 	add	x1, x1, #0xa8
   9a0b0:	39009acc 	strb	w12, [x22, #38]
   9a0b4:	390092c0 	strb	w0, [x22, #36]
   9a0b8:	9100aec0 	add	x0, x22, #0x2b
   9a0bc:	b80272c3 	stur	w3, [x22, #39]
   9a0c0:	79002ecb 	strh	w11, [x22, #22]
   9a0c4:	b9007beb 	str	w11, [sp, #120]
   9a0c8:	97ffe402 	bl	930d0 <mem_cpy.part.0>
   9a0cc:	f9404be5 	ldr	x5, [sp, #144]
   9a0d0:	128ab54c 	mov	w12, #0xffffaa55            	// #-21931
   9a0d4:	52800023 	mov	w3, #0x1                   	// #1
   9a0d8:	aa1603e1 	mov	x1, x22
   9a0dc:	2a1303e0 	mov	w0, w19
   9a0e0:	7903fecc 	strh	w12, [x22, #510]
   9a0e4:	aa0503e2 	mov	x2, x5
   9a0e8:	9400071e 	bl	9bd60 <disk_write>
   9a0ec:	b9407beb 	ldr	w11, [sp, #120]
   9a0f0:	b94083e9 	ldr	w9, [sp, #128]
   9a0f4:	b9408bea 	ldr	w10, [sp, #136]
   9a0f8:	f9404fe6 	ldr	x6, [sp, #152]
   9a0fc:	350009a0 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9a100:	12175b01 	and	w1, w24, #0xfffffe00
   9a104:	aa1603e0 	mov	x0, x22
   9a108:	51000421 	sub	w1, w1, #0x1
   9a10c:	91000421 	add	x1, x1, #0x1
   9a110:	8b0102c1 	add	x1, x22, x1
   9a114:	d503201f 	nop
   9a118:	3800141f 	strb	wzr, [x0], #1
   9a11c:	eb01001f 	cmp	x0, x1
   9a120:	54ffffc1 	b.ne	9a118 <f_mkfs+0x868>  // b.any
   9a124:	b94073fa 	ldr	w26, [sp, #112]
   9a128:	128000e0 	mov	w0, #0xfffffff8            	// #-8
   9a12c:	7100053f 	cmp	w9, #0x1
   9a130:	321d53f8 	mov	w24, #0xfffff8              	// #16777208
   9a134:	52800019 	mov	w25, #0x0                   	// #0
   9a138:	1a800318 	csel	w24, w24, w0, eq  // eq = none
   9a13c:	2a0b03fb 	mov	w27, w11
   9a140:	53187f18 	lsr	w24, w24, #24
   9a144:	f90043f4 	str	x20, [sp, #128]
   9a148:	2a0903f4 	mov	w20, w9
   9a14c:	b9009bf5 	str	w21, [sp, #152]
   9a150:	aa1c03f5 	mov	x21, x28
   9a154:	aa0603fc 	mov	x28, x6
   9a158:	b9007bf8 	str	w24, [sp, #120]
   9a15c:	b9008bf7 	str	w23, [sp, #136]
   9a160:	b90093ea 	str	w10, [sp, #144]
   9a164:	71000e9f 	cmp	w20, #0x3
   9a168:	54006920 	b.eq	9ae8c <f_mkfs+0x15dc>  // b.none
   9a16c:	128000e0 	mov	w0, #0xfffffff8            	// #-8
   9a170:	790002c0 	strh	w0, [x22]
   9a174:	12800000 	mov	w0, #0xffffffff            	// #-1
   9a178:	39000ac0 	strb	w0, [x22, #2]
   9a17c:	3941e3e0 	ldrb	w0, [sp, #120]
   9a180:	39000ec0 	strb	w0, [x22, #3]
   9a184:	2a1b03f7 	mov	w23, w27
   9a188:	6b1a02ff 	cmp	w23, w26
   9a18c:	aa1503e2 	mov	x2, x21
   9a190:	1a9a92f8 	csel	w24, w23, w26, ls  // ls = plast
   9a194:	aa1603e1 	mov	x1, x22
   9a198:	2a1803e3 	mov	w3, w24
   9a19c:	2a1303e0 	mov	w0, w19
   9a1a0:	940006f0 	bl	9bd60 <disk_write>
   9a1a4:	350066a0 	cbnz	w0, 9ae78 <f_mkfs+0x15c8>
   9a1a8:	aa1603e0 	mov	x0, x22
   9a1ac:	d503201f 	nop
   9a1b0:	3800141f 	strb	wzr, [x0], #1
   9a1b4:	eb1c001f 	cmp	x0, x28
   9a1b8:	54ffffc1 	b.ne	9a1b0 <f_mkfs+0x900>  // b.any
   9a1bc:	6b1802f7 	subs	w23, w23, w24
   9a1c0:	8b3842b5 	add	x21, x21, w24, uxtw
   9a1c4:	54fffe21 	b.ne	9a188 <f_mkfs+0x8d8>  // b.any
   9a1c8:	b9408be0 	ldr	w0, [sp, #136]
   9a1cc:	11000739 	add	w25, w25, #0x1
   9a1d0:	6b00033f 	cmp	w25, w0
   9a1d4:	54fffc81 	b.ne	9a164 <f_mkfs+0x8b4>  // b.any
   9a1d8:	aa1c03e6 	mov	x6, x28
   9a1dc:	71000e9f 	cmp	w20, #0x3
   9a1e0:	b94093ea 	ldr	w10, [sp, #144]
   9a1e4:	aa1503fc 	mov	x28, x21
   9a1e8:	2a1403f9 	mov	w25, w20
   9a1ec:	b9409bf5 	ldr	w21, [sp, #152]
   9a1f0:	aa0603fa 	mov	x26, x6
   9a1f4:	1a8a02b5 	csel	w21, w21, w10, eq  // eq = none
   9a1f8:	b94073f8 	ldr	w24, [sp, #112]
   9a1fc:	f94043f4 	ldr	x20, [sp, #128]
   9a200:	14000002 	b	9a208 <f_mkfs+0x958>
   9a204:	54007260 	b.eq	9b050 <f_mkfs+0x17a0>  // b.none
   9a208:	6b1802bf 	cmp	w21, w24
   9a20c:	aa1c03e2 	mov	x2, x28
   9a210:	1a9892b7 	csel	w23, w21, w24, ls  // ls = plast
   9a214:	aa1603e1 	mov	x1, x22
   9a218:	2a1703e3 	mov	w3, w23
   9a21c:	8b37439c 	add	x28, x28, w23, uxtw
   9a220:	2a1303e0 	mov	w0, w19
   9a224:	940006cf 	bl	9bd60 <disk_write>
   9a228:	6b1702b5 	subs	w21, w21, w23
   9a22c:	34fffec0 	cbz	w0, 9a204 <f_mkfs+0x954>
   9a230:	b5ffd134 	cbnz	x20, 99c54 <f_mkfs+0x3a4>
   9a234:	aa1603e0 	mov	x0, x22
   9a238:	52800035 	mov	w21, #0x1                   	// #1
   9a23c:	94000781 	bl	9c040 <ff_memfree>
   9a240:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9a244:	a94573fb 	ldp	x27, x28, [sp, #80]
   9a248:	17fffe01 	b	99a4c <f_mkfs+0x19c>
   9a24c:	0b000400 	add	w0, w0, w0, lsl #1
   9a250:	52800029 	mov	w9, #0x1                   	// #1
   9a254:	0b09000b 	add	w11, w0, w9
   9a258:	53017d6b 	lsr	w11, w11, #1
   9a25c:	11000d6b 	add	w11, w11, #0x3
   9a260:	17fffe39 	b	99b44 <f_mkfs+0x294>
   9a264:	b94093e0 	ldr	w0, [sp, #144]
   9a268:	0b3a0019 	add	w25, w0, w26, uxtb
   9a26c:	d3485f41 	ubfx	x1, x26, #8, #16
   9a270:	13990739 	ror	w25, w25, #1
   9a274:	71000694 	subs	w20, w20, #0x1
   9a278:	d3483f45 	ubfx	x5, x26, #8, #8
   9a27c:	0b010339 	add	w25, w25, w1
   9a280:	12001f40 	and	w0, w26, #0xff
   9a284:	39000060 	strb	w0, [x3]
   9a288:	54005ec0 	b.eq	9ae60 <f_mkfs+0x15b0>  // b.none
   9a28c:	b9407be0 	ldr	w0, [sp, #120]
   9a290:	5280003a 	mov	w26, #0x1                   	// #1
   9a294:	6b17001f 	cmp	w0, w23
   9a298:	f9406fe0 	ldr	x0, [sp, #216]
   9a29c:	39000005 	strb	w5, [x0]
   9a2a0:	54ffdd41 	b.ne	99e48 <f_mkfs+0x598>  // b.any
   9a2a4:	b9408be0 	ldr	w0, [sp, #136]
   9a2a8:	aa1503e2 	mov	x2, x21
   9a2ac:	aa1803e1 	mov	x1, x24
   9a2b0:	11080416 	add	w22, w0, #0x201
   9a2b4:	2a1303e0 	mov	w0, w19
   9a2b8:	53097ed6 	lsr	w22, w22, #9
   9a2bc:	2a1603e3 	mov	w3, w22
   9a2c0:	940006a8 	bl	9bd60 <disk_write>
   9a2c4:	2a0003f7 	mov	w23, w0
   9a2c8:	35005c60 	cbnz	w0, 9ae54 <f_mkfs+0x15a4>
   9a2cc:	8b1602b5 	add	x21, x21, x22
   9a2d0:	aa1803e3 	mov	x3, x24
   9a2d4:	52800040 	mov	w0, #0x2                   	// #2
   9a2d8:	d2800036 	mov	x22, #0x1                   	// #1
   9a2dc:	d503201f 	nop
   9a2e0:	1399073a 	ror	w26, w25, #1
   9a2e4:	11000789 	add	w9, w28, #0x1
   9a2e8:	0b3c035a 	add	w26, w26, w28, uxtb
   9a2ec:	d3485f99 	ubfx	x25, x28, #8, #16
   9a2f0:	139a075a 	ror	w26, w26, #1
   9a2f4:	71000694 	subs	w20, w20, #0x1
   9a2f8:	0b190359 	add	w25, w26, w25
   9a2fc:	11000b7b 	add	w27, w27, #0x2
   9a300:	12003d3a 	and	w26, w9, #0xffff
   9a304:	d3483f85 	ubfx	x5, x28, #8, #8
   9a308:	12001f84 	and	w4, w28, #0xff
   9a30c:	540001c1 	b.ne	9a344 <f_mkfs+0xa94>  // b.any
   9a310:	39000064 	strb	w4, [x3]
   9a314:	38366b05 	strb	w5, [x24, x22]
   9a318:	34004f1a 	cbz	w26, 9acf8 <f_mkfs+0x1448>
   9a31c:	b9407be1 	ldr	w1, [sp, #120]
   9a320:	6b00003f 	cmp	w1, w0
   9a324:	54005720 	b.eq	9ae08 <f_mkfs+0x1558>  // b.none
   9a328:	2a1a03fc 	mov	w28, w26
   9a32c:	2a0003f7 	mov	w23, w0
   9a330:	5280001a 	mov	w26, #0x0                   	// #0
   9a334:	52800014 	mov	w20, #0x0                   	// #0
   9a338:	17fffec4 	b	99e48 <f_mkfs+0x598>
   9a33c:	35ffccee 	cbnz	w14, 99cd8 <f_mkfs+0x428>
   9a340:	17fffe3e 	b	99c38 <f_mkfs+0x388>
   9a344:	39000064 	strb	w4, [x3]
   9a348:	38366b05 	strb	w5, [x24, x22]
   9a34c:	340000da 	cbz	w26, 9a364 <f_mkfs+0xab4>
   9a350:	2a1a03fc 	mov	w28, w26
   9a354:	5280003a 	mov	w26, #0x1                   	// #1
   9a358:	b9008bf7 	str	w23, [sp, #136]
   9a35c:	2a0003f7 	mov	w23, w0
   9a360:	17fffeef 	b	99f1c <f_mkfs+0x66c>
   9a364:	aa1503e2 	mov	x2, x21
   9a368:	aa1803f6 	mov	x22, x24
   9a36c:	b940b3f5 	ldr	w21, [sp, #176]
   9a370:	110806e3 	add	w3, w23, #0x201
   9a374:	b940c7f8 	ldr	w24, [sp, #196]
   9a378:	f9404ff4 	ldr	x20, [sp, #152]
   9a37c:	f94057fc 	ldr	x28, [sp, #168]
   9a380:	f9405fe5 	ldr	x5, [sp, #184]
   9a384:	f9003fe5 	str	x5, [sp, #120]
   9a388:	53097c63 	lsr	w3, w3, #9
   9a38c:	aa1603e1 	mov	x1, x22
   9a390:	2a1303e0 	mov	w0, w19
   9a394:	94000673 	bl	9bd60 <disk_write>
   9a398:	f9403fe5 	ldr	x5, [sp, #120]
   9a39c:	35fff4a0 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9a3a0:	12175b17 	and	w23, w24, #0xfffffe00
   9a3a4:	b900b3f5 	str	w21, [sp, #176]
   9a3a8:	2a1303f5 	mov	w21, w19
   9a3ac:	295d03e1 	ldp	w1, w0, [sp, #232]
   9a3b0:	510006e7 	sub	w7, w23, #0x1
   9a3b4:	d10006ca 	sub	x10, x22, #0x1
   9a3b8:	910004e7 	add	x7, x7, #0x1
   9a3bc:	12800009 	mov	w9, #0xffffffff            	// #-1
   9a3c0:	a908f3f4 	stp	x20, x28, [sp, #136]
   9a3c4:	8b0702d8 	add	x24, x22, x7
   9a3c8:	aa0a03fc 	mov	x28, x10
   9a3cc:	f94043e2 	ldr	x2, [sp, #128]
   9a3d0:	1107fc2b 	add	w11, w1, #0x1ff
   9a3d4:	0b1b0000 	add	w0, w0, w27
   9a3d8:	b9009bfb 	str	w27, [sp, #152]
   9a3dc:	b940f3e1 	ldr	w1, [sp, #240]
   9a3e0:	53097d6b 	lsr	w11, w11, #9
   9a3e4:	aa1803fb 	mov	x27, x24
   9a3e8:	2a0b03f8 	mov	w24, w11
   9a3ec:	b900abf9 	str	w25, [sp, #168]
   9a3f0:	aa1603f9 	mov	x25, x22
   9a3f4:	b94073f3 	ldr	w19, [sp, #112]
   9a3f8:	2a1703f6 	mov	w22, w23
   9a3fc:	aa0203f7 	mov	x23, x2
   9a400:	f9005fe5 	str	x5, [sp, #184]
   9a404:	1ac10800 	udiv	w0, w0, w1
   9a408:	52800021 	mov	w1, #0x1                   	// #1
   9a40c:	b9012be1 	str	w1, [sp, #296]
   9a410:	b940e7e1 	ldr	w1, [sp, #228]
   9a414:	0b000021 	add	w1, w1, w0
   9a418:	b90127e0 	str	w0, [sp, #292]
   9a41c:	1100043a 	add	w26, w1, #0x1
   9a420:	b900c7e1 	str	w1, [sp, #196]
   9a424:	d503201f 	nop
   9a428:	aa1903e0 	mov	x0, x25
   9a42c:	d503201f 	nop
   9a430:	3800141f 	strb	wzr, [x0], #1
   9a434:	eb1b001f 	cmp	x0, x27
   9a438:	54ffffc1 	b.ne	9a430 <f_mkfs+0xb80>  // b.any
   9a43c:	71001f5f 	cmp	w26, #0x7
   9a440:	54004729 	b.ls	9ad24 <f_mkfs+0x1474>  // b.plast
   9a444:	d2800020 	mov	x0, #0x1                   	// #1
   9a448:	6b0002df 	cmp	w22, w0
   9a44c:	5100235a 	sub	w26, w26, #0x8
   9a450:	1a9f97e2 	cset	w2, hi  // hi = pmore
   9a454:	71001f5f 	cmp	w26, #0x7
   9a458:	1a9f97e1 	cset	w1, hi  // hi = pmore
   9a45c:	38206b89 	strb	w9, [x28, x0]
   9a460:	6a01005f 	tst	w2, w1
   9a464:	2a0003e4 	mov	w4, w0
   9a468:	aa0003e3 	mov	x3, x0
   9a46c:	91000400 	add	x0, x0, #0x1
   9a470:	54fffec1 	b.ne	9a448 <f_mkfs+0xb98>  // b.any
   9a474:	340045da 	cbz	w26, 9ad2c <f_mkfs+0x147c>
   9a478:	6b16009f 	cmp	w4, w22
   9a47c:	54000142 	b.cs	9a4a4 <f_mkfs+0xbf4>  // b.hs, b.nlast
   9a480:	8b030324 	add	x4, x25, x3
   9a484:	39400083 	ldrb	w3, [x4]
   9a488:	52800020 	mov	w0, #0x1                   	// #1
   9a48c:	d503201f 	nop
   9a490:	7100075a 	subs	w26, w26, #0x1
   9a494:	2a000063 	orr	w3, w3, w0
   9a498:	531f1800 	ubfiz	w0, w0, #1, #7
   9a49c:	54ffffa1 	b.ne	9a490 <f_mkfs+0xbe0>  // b.any
   9a4a0:	39000083 	strb	w3, [x4]
   9a4a4:	6b13031f 	cmp	w24, w19
   9a4a8:	aa1703e2 	mov	x2, x23
   9a4ac:	1a939314 	csel	w20, w24, w19, ls  // ls = plast
   9a4b0:	aa1903e1 	mov	x1, x25
   9a4b4:	2a1403e3 	mov	w3, w20
   9a4b8:	b9007be9 	str	w9, [sp, #120]
   9a4bc:	2a1503e0 	mov	w0, w21
   9a4c0:	94000628 	bl	9bd60 <disk_write>
   9a4c4:	b9407be9 	ldr	w9, [sp, #120]
   9a4c8:	35004be0 	cbnz	w0, 9ae44 <f_mkfs+0x1594>
   9a4cc:	6b140318 	subs	w24, w24, w20
   9a4d0:	8b3442f7 	add	x23, x23, w20, uxtw
   9a4d4:	54fffaa1 	b.ne	9a428 <f_mkfs+0xb78>  // b.any
   9a4d8:	2a1503f3 	mov	w19, w21
   9a4dc:	b940b3f5 	ldr	w21, [sp, #176]
   9a4e0:	2a1603f7 	mov	w23, w22
   9a4e4:	aa1b03f4 	mov	x20, x27
   9a4e8:	aa1903f6 	mov	x22, x25
   9a4ec:	f9404bfc 	ldr	x28, [sp, #144]
   9a4f0:	52800009 	mov	w9, #0x0                   	// #0
   9a4f4:	5280000a 	mov	w10, #0x0                   	// #0
   9a4f8:	52800004 	mov	w4, #0x0                   	// #0
   9a4fc:	910483eb 	add	x11, sp, #0x120
   9a500:	b9007bf3 	str	w19, [sp, #120]
   9a504:	b9409bfb 	ldr	w27, [sp, #152]
   9a508:	2a0403fa 	mov	w26, w4
   9a50c:	b940abf9 	ldr	w25, [sp, #168]
   9a510:	b900abf5 	str	w21, [sp, #168]
   9a514:	aa1c03f5 	mov	x21, x28
   9a518:	b940cbec 	ldr	w12, [sp, #200]
   9a51c:	b90093fb 	str	w27, [sp, #144]
   9a520:	2a0a03fb 	mov	w27, w10
   9a524:	b94073fc 	ldr	w28, [sp, #112]
   9a528:	b9009bf9 	str	w25, [sp, #152]
   9a52c:	aa1603f9 	mov	x25, x22
   9a530:	2a1703f6 	mov	w22, w23
   9a534:	f9405fe5 	ldr	x5, [sp, #184]
   9a538:	2a0903f7 	mov	w23, w9
   9a53c:	2a0c03f8 	mov	w24, w12
   9a540:	f9005be5 	str	x5, [sp, #176]
   9a544:	d503201f 	nop
   9a548:	aa1903e0 	mov	x0, x25
   9a54c:	d503201f 	nop
   9a550:	3800141f 	strb	wzr, [x0], #1
   9a554:	eb14001f 	cmp	x0, x20
   9a558:	54ffffc1 	b.ne	9a550 <f_mkfs+0xca0>  // b.any
   9a55c:	52800000 	mov	w0, #0x0                   	// #0
   9a560:	350000db 	cbnz	w27, 9a578 <f_mkfs+0xcc8>
   9a564:	928000e3 	mov	x3, #0xfffffffffffffff8    	// #-8
   9a568:	5280005b 	mov	w27, #0x2                   	// #2
   9a56c:	52800100 	mov	w0, #0x8                   	// #8
   9a570:	f9000323 	str	x3, [x25]
   9a574:	d503201f 	nop
   9a578:	6b16001f 	cmp	w0, w22
   9a57c:	34002e9a 	cbz	w26, 9ab4c <f_mkfs+0x129c>
   9a580:	54002f83 	b.cc	9ab70 <f_mkfs+0x12c0>  // b.lo, b.ul, b.last
   9a584:	6b1c031f 	cmp	w24, w28
   9a588:	3941e3e0 	ldrb	w0, [sp, #120]
   9a58c:	1a9c9313 	csel	w19, w24, w28, ls  // ls = plast
   9a590:	aa1503e2 	mov	x2, x21
   9a594:	aa1903e1 	mov	x1, x25
   9a598:	2a1303e3 	mov	w3, w19
   9a59c:	940005f1 	bl	9bd60 <disk_write>
   9a5a0:	910483eb 	add	x11, sp, #0x120
   9a5a4:	35004500 	cbnz	w0, 9ae44 <f_mkfs+0x1594>
   9a5a8:	6b130318 	subs	w24, w24, w19
   9a5ac:	8b3342b5 	add	x21, x21, w19, uxtw
   9a5b0:	54fffcc1 	b.ne	9a548 <f_mkfs+0xc98>  // b.any
   9a5b4:	aa1903f6 	mov	x22, x25
   9a5b8:	aa1403f8 	mov	x24, x20
   9a5bc:	b9407bf3 	ldr	w19, [sp, #120]
   9a5c0:	aa1903e0 	mov	x0, x25
   9a5c4:	b94093fb 	ldr	w27, [sp, #144]
   9a5c8:	b9409bf9 	ldr	w25, [sp, #152]
   9a5cc:	b940abf5 	ldr	w21, [sp, #168]
   9a5d0:	f94047f4 	ldr	x20, [sp, #136]
   9a5d4:	f9405be5 	ldr	x5, [sp, #176]
   9a5d8:	3800141f 	strb	wzr, [x0], #1
   9a5dc:	eb18001f 	cmp	x0, x24
   9a5e0:	54ffffc1 	b.ne	9a5d8 <f_mkfs+0xd28>  // b.any
   9a5e4:	b940c7e0 	ldr	w0, [sp, #196]
   9a5e8:	12800f84 	mov	w4, #0xffffff83            	// #-125
   9a5ec:	2a1503fc 	mov	w28, w21
   9a5f0:	910802d8 	add	x24, x22, #0x200
   9a5f4:	b90046d9 	str	w25, [x22, #68]
   9a5f8:	3943a3e1 	ldrb	w1, [sp, #232]
   9a5fc:	390002c4 	strb	w4, [x22]
   9a600:	52800044 	mov	w4, #0x2                   	// #2
   9a604:	b940f7e6 	ldr	w6, [sp, #244]
   9a608:	1b007ea2 	mul	w2, w21, w0
   9a60c:	b90036c4 	str	w4, [x22, #52]
   9a610:	12800fa4 	mov	w4, #0xffffff82            	// #-126
   9a614:	b940e7e0 	ldr	w0, [sp, #228]
   9a618:	3900e2c1 	strb	w1, [x22, #56]
   9a61c:	12800fc1 	mov	w1, #0xffffff81            	// #-127
   9a620:	f94043e8 	ldr	x8, [sp, #128]
   9a624:	390082c1 	strb	w1, [x22, #32]
   9a628:	2a0603e1 	mov	w1, w6
   9a62c:	530b7cc7 	lsr	w7, w6, #11
   9a630:	b94073fa 	ldr	w26, [sp, #112]
   9a634:	53137cc6 	lsr	w6, w6, #19
   9a638:	531b7c21 	lsr	w1, w1, #27
   9a63c:	11000800 	add	w0, w0, #0x2
   9a640:	b9005adb 	str	w27, [x22, #88]
   9a644:	aa0503fb 	mov	x27, x5
   9a648:	53107c03 	lsr	w3, w0, #16
   9a64c:	3900e6c7 	strb	w7, [x22, #57]
   9a650:	8b080042 	add	x2, x2, x8
   9a654:	3900eac6 	strb	w6, [x22, #58]
   9a658:	aa0203f9 	mov	x25, x2
   9a65c:	3900eec1 	strb	w1, [x22, #59]
   9a660:	390102c4 	strb	w4, [x22, #64]
   9a664:	7900aac0 	strh	w0, [x22, #84]
   9a668:	39015ac3 	strb	w3, [x22, #86]
   9a66c:	39015edf 	strb	wzr, [x22, #87]
   9a670:	6b1a039f 	cmp	w28, w26
   9a674:	aa1903e2 	mov	x2, x25
   9a678:	1a9a9397 	csel	w23, w28, w26, ls  // ls = plast
   9a67c:	aa1603e1 	mov	x1, x22
   9a680:	2a1703e3 	mov	w3, w23
   9a684:	2a1303e0 	mov	w0, w19
   9a688:	940005b6 	bl	9bd60 <disk_write>
   9a68c:	35ffdd20 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9a690:	aa1803e6 	mov	x6, x24
   9a694:	aa1603e0 	mov	x0, x22
   9a698:	3800141f 	strb	wzr, [x0], #1
   9a69c:	eb18001f 	cmp	x0, x24
   9a6a0:	54ffffc1 	b.ne	9a698 <f_mkfs+0xde8>  // b.any
   9a6a4:	6b17039c 	subs	w28, w28, w23
   9a6a8:	8b374339 	add	x25, x25, w23, uxtw
   9a6ac:	54fffe21 	b.ne	9a670 <f_mkfs+0xdc0>  // b.any
   9a6b0:	b940c7e0 	ldr	w0, [sp, #196]
   9a6b4:	aa1b03e5 	mov	x5, x27
   9a6b8:	53017eb5 	lsr	w21, w21, #1
   9a6bc:	900000da 	adrp	x26, b2000 <vtable for CPartition>
   9a6c0:	9101235a 	add	x26, x26, #0x48
   9a6c4:	f9003bf4 	str	x20, [sp, #112]
   9a6c8:	b94083e1 	ldr	w1, [sp, #128]
   9a6cc:	aa1b03fc 	mov	x28, x27
   9a6d0:	5280005b 	mov	w27, #0x2                   	// #2
   9a6d4:	f90057e5 	str	x5, [sp, #168]
   9a6d8:	b940e3e2 	ldr	w2, [sp, #224]
   9a6dc:	11000800 	add	w0, w0, #0x2
   9a6e0:	b900b3f5 	str	w21, [sp, #176]
   9a6e4:	f9005fe6 	str	x6, [sp, #184]
   9a6e8:	b9008be0 	str	w0, [sp, #136]
   9a6ec:	d3505c00 	ubfx	x0, x0, #16, #8
   9a6f0:	f90043e0 	str	x0, [sp, #128]
   9a6f4:	4b020021 	sub	w1, w1, w2
   9a6f8:	b940cfe0 	ldr	w0, [sp, #204]
   9a6fc:	b9007be1 	str	w1, [sp, #120]
   9a700:	d3516001 	ubfx	x1, x0, #17, #8
   9a704:	53197c00 	lsr	w0, w0, #25
   9a708:	f9004be1 	str	x1, [sp, #144]
   9a70c:	b9009be0 	str	w0, [sp, #152]
   9a710:	aa1603e0 	mov	x0, x22
   9a714:	3800141f 	strb	wzr, [x0], #1
   9a718:	eb18001f 	cmp	x0, x24
   9a71c:	54ffffc1 	b.ne	9a714 <f_mkfs+0xe64>  // b.any
   9a720:	52800162 	mov	w2, #0xb                   	// #11
   9a724:	aa1a03e1 	mov	x1, x26
   9a728:	aa1603e0 	mov	x0, x22
   9a72c:	97ffe269 	bl	930d0 <mem_cpy.part.0>
   9a730:	f9408be0 	ldr	x0, [sp, #272]
   9a734:	b80422df 	stur	wzr, [x22, #66]
   9a738:	794153e1 	ldrh	w1, [sp, #168]
   9a73c:	79008edf 	strh	wzr, [x22, #70]
   9a740:	39015edf 	strb	wzr, [x22, #87]
   9a744:	f90026c0 	str	x0, [x22, #72]
   9a748:	394323e0 	ldrb	w0, [sp, #200]
   9a74c:	790082c1 	strh	w1, [x22, #64]
   9a750:	52800401 	mov	w1, #0x20                  	// #32
   9a754:	39018edf 	strb	wzr, [x22, #99]
   9a758:	b90052c1 	str	w1, [x22, #80]
   9a75c:	390152c0 	strb	w0, [x22, #84]
   9a760:	394243e0 	ldrb	w0, [sp, #144]
   9a764:	390156c0 	strb	w0, [x22, #85]
   9a768:	394263e0 	ldrb	w0, [sp, #152]
   9a76c:	39015ac0 	strb	w0, [x22, #86]
   9a770:	b9407be0 	ldr	w0, [sp, #120]
   9a774:	b9005ac0 	str	w0, [x22, #88]
   9a778:	b940a3e0 	ldr	w0, [sp, #160]
   9a77c:	b9005ec0 	str	w0, [x22, #92]
   9a780:	794113e0 	ldrh	w0, [sp, #136]
   9a784:	7900c2c0 	strh	w0, [x22, #96]
   9a788:	394203e0 	ldrb	w0, [sp, #128]
   9a78c:	39018ac0 	strb	w0, [x22, #98]
   9a790:	94000630 	bl	9c050 <get_fattime>
   9a794:	52802001 	mov	w1, #0x100                 	// #256
   9a798:	b90066c0 	str	w0, [x22, #100]
   9a79c:	b940b3e0 	ldr	w0, [sp, #176]
   9a7a0:	7900d2c1 	strh	w1, [x22, #104]
   9a7a4:	52800121 	mov	w1, #0x9                   	// #9
   9a7a8:	7900dac1 	strh	w1, [x22, #108]
   9a7ac:	34000120 	cbz	w0, 9a7d0 <f_mkfs+0xf20>
   9a7b0:	2a0003e1 	mov	w1, w0
   9a7b4:	52800020 	mov	w0, #0x1                   	// #1
   9a7b8:	11000402 	add	w2, w0, #0x1
   9a7bc:	53017c21 	lsr	w1, w1, #1
   9a7c0:	2a0003e3 	mov	w3, w0
   9a7c4:	12001c40 	and	w0, w2, #0xff
   9a7c8:	35ffff81 	cbnz	w1, 9a7b8 <f_mkfs+0xf08>
   9a7cc:	3901b6c3 	strb	w3, [x22, #109]
   9a7d0:	128fffc0 	mov	w0, #0xffff8001            	// #-32767
   9a7d4:	12802282 	mov	w2, #0xfffffeeb            	// #-277
   9a7d8:	128ab541 	mov	w1, #0xffffaa55            	// #-21931
   9a7dc:	52800017 	mov	w23, #0x0                   	// #0
   9a7e0:	7900dec0 	strh	w0, [x22, #110]
   9a7e4:	d2800000 	mov	x0, #0x0                   	// #0
   9a7e8:	7900f2c2 	strh	w2, [x22, #120]
   9a7ec:	7903fec1 	strh	w1, [x22, #510]
   9a7f0:	7101c01f 	cmp	w0, #0x70
   9a7f4:	5101a801 	sub	w1, w0, #0x6a
   9a7f8:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   9a7fc:	139706e2 	ror	w2, w23, #1
   9a800:	54000069 	b.ls	9a80c <f_mkfs+0xf5c>  // b.plast
   9a804:	38606ad7 	ldrb	w23, [x22, x0]
   9a808:	0b170057 	add	w23, w2, w23
   9a80c:	91000400 	add	x0, x0, #0x1
   9a810:	f108001f 	cmp	x0, #0x200
   9a814:	54fffee1 	b.ne	9a7f0 <f_mkfs+0xf40>  // b.any
   9a818:	52800023 	mov	w3, #0x1                   	// #1
   9a81c:	aa1c03e2 	mov	x2, x28
   9a820:	aa1603e1 	mov	x1, x22
   9a824:	2a1303e0 	mov	w0, w19
   9a828:	9400054e 	bl	9bd60 <disk_write>
   9a82c:	91000795 	add	x21, x28, #0x1
   9a830:	35ffa0e0 	cbnz	w0, 99c4c <f_mkfs+0x39c>
   9a834:	aa1603e0 	mov	x0, x22
   9a838:	3800141f 	strb	wzr, [x0], #1
   9a83c:	eb18001f 	cmp	x0, x24
   9a840:	54ffffc1 	b.ne	9a838 <f_mkfs+0xf88>  // b.any
   9a844:	128ab540 	mov	w0, #0xffffaa55            	// #-21931
   9a848:	91002799 	add	x25, x28, #0x9
   9a84c:	7903fec0 	strh	w0, [x22, #510]
   9a850:	aa1603f4 	mov	x20, x22
   9a854:	aa1603e0 	mov	x0, x22
   9a858:	38401401 	ldrb	w1, [x0], #1
   9a85c:	139706f7 	ror	w23, w23, #1
   9a860:	eb00031f 	cmp	x24, x0
   9a864:	0b0102f7 	add	w23, w23, w1
   9a868:	54ffff81 	b.ne	9a858 <f_mkfs+0xfa8>  // b.any
   9a86c:	aa1503e2 	mov	x2, x21
   9a870:	52800023 	mov	w3, #0x1                   	// #1
   9a874:	aa1603e1 	mov	x1, x22
   9a878:	2a1303e0 	mov	w0, w19
   9a87c:	94000539 	bl	9bd60 <disk_write>
   9a880:	910006b5 	add	x21, x21, #0x1
   9a884:	35ff9e40 	cbnz	w0, 99c4c <f_mkfs+0x39c>
   9a888:	eb1902bf 	cmp	x21, x25
   9a88c:	54fffe21 	b.ne	9a850 <f_mkfs+0xfa0>  // b.any
   9a890:	aa1603e0 	mov	x0, x22
   9a894:	3800141f 	strb	wzr, [x0], #1
   9a898:	eb18001f 	cmp	x0, x24
   9a89c:	54ffffc1 	b.ne	9a894 <f_mkfs+0xfe4>  // b.any
   9a8a0:	91002f9c 	add	x28, x28, #0xb
   9a8a4:	aa1603e0 	mov	x0, x22
   9a8a8:	38401401 	ldrb	w1, [x0], #1
   9a8ac:	139706f7 	ror	w23, w23, #1
   9a8b0:	eb00031f 	cmp	x24, x0
   9a8b4:	0b0102f7 	add	w23, w23, w1
   9a8b8:	54ffff81 	b.ne	9a8a8 <f_mkfs+0xff8>  // b.any
   9a8bc:	aa1903e2 	mov	x2, x25
   9a8c0:	52800023 	mov	w3, #0x1                   	// #1
   9a8c4:	aa1603e1 	mov	x1, x22
   9a8c8:	2a1303e0 	mov	w0, w19
   9a8cc:	94000525 	bl	9bd60 <disk_write>
   9a8d0:	91000722 	add	x2, x25, #0x1
   9a8d4:	35ff9bc0 	cbnz	w0, 99c4c <f_mkfs+0x39c>
   9a8d8:	eb1c005f 	cmp	x2, x28
   9a8dc:	54003941 	b.ne	9b004 <f_mkfs+0x1754>  // b.any
   9a8e0:	d3483ee2 	ubfx	x2, x23, #8, #8
   9a8e4:	d3505ee1 	ubfx	x1, x23, #16, #8
   9a8e8:	53187ee0 	lsr	w0, w23, #24
   9a8ec:	12001ef7 	and	w23, w23, #0xff
   9a8f0:	91001294 	add	x20, x20, #0x4
   9a8f4:	381fc297 	sturb	w23, [x20, #-4]
   9a8f8:	381fd282 	sturb	w2, [x20, #-3]
   9a8fc:	381fe281 	sturb	w1, [x20, #-2]
   9a900:	381ff280 	sturb	w0, [x20, #-1]
   9a904:	eb14031f 	cmp	x24, x20
   9a908:	54ffff41 	b.ne	9a8f0 <f_mkfs+0x1040>  // b.any
   9a90c:	aa1c03e2 	mov	x2, x28
   9a910:	52800023 	mov	w3, #0x1                   	// #1
   9a914:	aa1603e1 	mov	x1, x22
   9a918:	2a1303e0 	mov	w0, w19
   9a91c:	94000511 	bl	9bd60 <disk_write>
   9a920:	91000b3c 	add	x28, x25, #0x2
   9a924:	35ff9940 	cbnz	w0, 99c4c <f_mkfs+0x39c>
   9a928:	7100077f 	cmp	w27, #0x1
   9a92c:	54004d21 	b.ne	9b2d0 <f_mkfs+0x1a20>  // b.any
   9a930:	f9403bf4 	ldr	x20, [sp, #112]
   9a934:	528000f5 	mov	w21, #0x7                   	// #7
   9a938:	f9405fe6 	ldr	x6, [sp, #184]
   9a93c:	f9003be6 	str	x6, [sp, #112]
   9a940:	f94037e0 	ldr	x0, [sp, #104]
   9a944:	37180ea0 	tbnz	w0, #3, 9ab18 <f_mkfs+0x1268>
   9a948:	f9408be3 	ldr	x3, [sp, #272]
   9a94c:	910463e2 	add	x2, sp, #0x118
   9a950:	52800021 	mov	w1, #0x1                   	// #1
   9a954:	2a1303e0 	mov	w0, w19
   9a958:	a9127fe3 	stp	x3, xzr, [sp, #288]
   9a95c:	94000539 	bl	9be40 <disk_ioctl>
   9a960:	2a0003f9 	mov	w25, w0
   9a964:	35ffc660 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9a968:	f9408fe0 	ldr	x0, [sp, #280]
   9a96c:	b2407fe1 	mov	x1, #0xffffffff            	// #4294967295
   9a970:	f9403be6 	ldr	x6, [sp, #112]
   9a974:	eb01001f 	cmp	x0, x1
   9a978:	540038e8 	b.hi	9b094 <f_mkfs+0x17e4>  // b.pmore
   9a97c:	2a0003e7 	mov	w7, w0
   9a980:	528000a1 	mov	w1, #0x5                   	// #5
   9a984:	52800108 	mov	w8, #0x8                   	// #8
   9a988:	529f87c2 	mov	w2, #0xfc3e                	// #64574
   9a98c:	1ac808e3 	udiv	w3, w7, w8
   9a990:	6b02007f 	cmp	w3, w2
   9a994:	540000a9 	b.ls	9a9a8 <f_mkfs+0x10f8>  // b.plast
   9a998:	71000421 	subs	w1, w1, #0x1
   9a99c:	531f1908 	ubfiz	w8, w8, #1, #7
   9a9a0:	54ffff61 	b.ne	9a98c <f_mkfs+0x10dc>  // b.any
   9a9a4:	52801fe8 	mov	w8, #0xff                  	// #255
   9a9a8:	aa1603e1 	mov	x1, x22
   9a9ac:	3800143f 	strb	wzr, [x1], #1
   9a9b0:	eb06003f 	cmp	x1, x6
   9a9b4:	54ffffc1 	b.ne	9a9ac <f_mkfs+0x10fc>  // b.any
   9a9b8:	f100fc1f 	cmp	x0, #0x3f
   9a9bc:	9106fac6 	add	x6, x22, #0x1be
   9a9c0:	540009c9 	b.ls	9aaf8 <f_mkfs+0x1248>  // b.plast
   9a9c4:	52800c8c 	mov	w12, #0x64                  	// #100
   9a9c8:	528820ab 	mov	w11, #0x4105                	// #16645
   9a9cc:	72a0820b 	movk	w11, #0x410, lsl #16
   9a9d0:	910483ea 	add	x10, sp, #0x120
   9a9d4:	1acc080c 	udiv	w12, w0, w12
   9a9d8:	528007e4 	mov	w4, #0x3f                  	// #63
   9a9dc:	1400003d 	b	9aad0 <f_mkfs+0x1220>
   9a9e0:	4b0400e0 	sub	w0, w7, w4
   9a9e4:	2a0703e2 	mov	w2, w7
   9a9e8:	9bab7c81 	umull	x1, w4, w11
   9a9ec:	53087c89 	lsr	w9, w4, #8
   9a9f0:	53107c85 	lsr	w5, w4, #16
   9a9f4:	53187c8e 	lsr	w14, w4, #24
   9a9f8:	390020c4 	strb	w4, [x6, #8]
   9a9fc:	53087c0d 	lsr	w13, w0, #8
   9aa00:	390024c9 	strb	w9, [x6, #9]
   9aa04:	53107c09 	lsr	w9, w0, #16
   9aa08:	11000739 	add	w25, w25, #0x1
   9aa0c:	d360fc23 	lsr	x3, x1, #32
   9aa10:	390028c5 	strb	w5, [x6, #10]
   9aa14:	53187c05 	lsr	w5, w0, #24
   9aa18:	4b030081 	sub	w1, w4, w3
   9aa1c:	390038c9 	strb	w9, [x6, #14]
   9aa20:	9100214a 	add	x10, x10, #0x8
   9aa24:	0b410461 	add	w1, w3, w1, lsr #1
   9aa28:	390030c0 	strb	w0, [x6, #12]
   9aa2c:	910040c6 	add	x6, x6, #0x10
   9aa30:	381ff0c5 	sturb	w5, [x6, #-1]
   9aa34:	53057c21 	lsr	w1, w1, #5
   9aa38:	381f40d5 	sturb	w21, [x6, #-12]
   9aa3c:	531a6423 	lsl	w3, w1, #6
   9aa40:	381fb0ce 	sturb	w14, [x6, #-5]
   9aa44:	1ac80829 	udiv	w9, w1, w8
   9aa48:	4b010063 	sub	w3, w3, w1
   9aa4c:	381fd0cd 	sturb	w13, [x6, #-3]
   9aa50:	4b030083 	sub	w3, w4, w3
   9aa54:	2a0203e4 	mov	w4, w2
   9aa58:	51000442 	sub	w2, w2, #0x1
   9aa5c:	11000463 	add	w3, w3, #0x1
   9aa60:	7100009f 	cmp	w4, #0x0
   9aa64:	9bab7c40 	umull	x0, w2, w11
   9aa68:	7a4410e0 	ccmp	w7, w4, #0x0, ne  // ne = any
   9aa6c:	7a438b22 	ccmp	w25, #0x3, #0x2, hi  // hi = pmore
   9aa70:	d360fc05 	lsr	x5, x0, #32
   9aa74:	4b050040 	sub	w0, w2, w5
   9aa78:	0b4004a0 	add	w0, w5, w0, lsr #1
   9aa7c:	53027d25 	lsr	w5, w9, #2
   9aa80:	1b088521 	msub	w1, w9, w8, w1
   9aa84:	381f30c9 	sturb	w9, [x6, #-13]
   9aa88:	53057c00 	lsr	w0, w0, #5
   9aa8c:	121a64a5 	and	w5, w5, #0xffffffc0
   9aa90:	2a050063 	orr	w3, w3, w5
   9aa94:	531a6409 	lsl	w9, w0, #6
   9aa98:	1ac80805 	udiv	w5, w0, w8
   9aa9c:	4b000129 	sub	w9, w9, w0
   9aaa0:	381f10c1 	sturb	w1, [x6, #-15]
   9aaa4:	4b090041 	sub	w1, w2, w9
   9aaa8:	381f20c3 	sturb	w3, [x6, #-14]
   9aaac:	11000421 	add	w1, w1, #0x1
   9aab0:	53027ca2 	lsr	w2, w5, #2
   9aab4:	1b0880a0 	msub	w0, w5, w8, w0
   9aab8:	381f70c5 	sturb	w5, [x6, #-9]
   9aabc:	121a6442 	and	w2, w2, #0xffffffc0
   9aac0:	2a020021 	orr	w1, w1, w2
   9aac4:	381f50c0 	sturb	w0, [x6, #-11]
   9aac8:	381f60c1 	sturb	w1, [x6, #-10]
   9aacc:	54000168 	b.hi	9aaf8 <f_mkfs+0x1248>  // b.pmore
   9aad0:	f9400141 	ldr	x1, [x10]
   9aad4:	7101903f 	cmp	w1, #0x64
   9aad8:	2a0103e0 	mov	w0, w1
   9aadc:	54000068 	b.hi	9aae8 <f_mkfs+0x1238>  // b.pmore
   9aae0:	1b017d80 	mul	w0, w12, w1
   9aae4:	54002cc0 	b.eq	9b07c <f_mkfs+0x17cc>  // b.none
   9aae8:	2b040002 	adds	w2, w0, w4
   9aaec:	7a4230e0 	ccmp	w7, w2, #0x0, cc  // cc = lo, ul, last
   9aaf0:	54fff783 	b.cc	9a9e0 <f_mkfs+0x1130>  // b.lo, b.ul, b.last
   9aaf4:	35fff7a0 	cbnz	w0, 9a9e8 <f_mkfs+0x1138>
   9aaf8:	128ab544 	mov	w4, #0xffffaa55            	// #-21931
   9aafc:	52800023 	mov	w3, #0x1                   	// #1
   9ab00:	d2800002 	mov	x2, #0x0                   	// #0
   9ab04:	aa1603e1 	mov	x1, x22
   9ab08:	2a1303e0 	mov	w0, w19
   9ab0c:	7903fec4 	strh	w4, [x22, #510]
   9ab10:	94000494 	bl	9bd60 <disk_write>
   9ab14:	35ffb8e0 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9ab18:	2a1303e0 	mov	w0, w19
   9ab1c:	d2800002 	mov	x2, #0x0                   	// #0
   9ab20:	52800001 	mov	w1, #0x0                   	// #0
   9ab24:	940004c7 	bl	9be40 <disk_ioctl>
   9ab28:	2a0003f5 	mov	w21, w0
   9ab2c:	35ffb820 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9ab30:	b5ff78b4 	cbnz	x20, 99a44 <f_mkfs+0x194>
   9ab34:	d503201f 	nop
   9ab38:	aa1603e0 	mov	x0, x22
   9ab3c:	94000541 	bl	9c040 <ff_memfree>
   9ab40:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9ab44:	a94573fb 	ldp	x27, x28, [sp, #80]
   9ab48:	17fffbc1 	b	99a4c <f_mkfs+0x19c>
   9ab4c:	71000aff 	cmp	w23, #0x2
   9ab50:	110006e3 	add	w3, w23, #0x1
   9ab54:	54ffd188 	b.hi	9a584 <f_mkfs+0xcd4>  // b.pmore
   9ab58:	b877597a 	ldr	w26, [x11, w23, uxtw #2]
   9ab5c:	6b16001f 	cmp	w0, w22
   9ab60:	34004ada 	cbz	w26, 9b4b8 <f_mkfs+0x1c08>
   9ab64:	54004aa2 	b.cs	9b4b8 <f_mkfs+0x1c08>  // b.hs, b.nlast
   9ab68:	2a0303f7 	mov	w23, w3
   9ab6c:	17fffe83 	b	9a578 <f_mkfs+0xcc8>
   9ab70:	52801fe1 	mov	w1, #0xff                  	// #255
   9ab74:	7100075f 	cmp	w26, #0x1
   9ab78:	8b204322 	add	x2, x25, w0, uxtw
   9ab7c:	2a0103e4 	mov	w4, w1
   9ab80:	2a0103e3 	mov	w3, w1
   9ab84:	2a0103e5 	mov	w5, w1
   9ab88:	1100077b 	add	w27, w27, #0x1
   9ab8c:	540000a9 	b.ls	9aba0 <f_mkfs+0x12f0>  // b.plast
   9ab90:	12001f65 	and	w5, w27, #0xff
   9ab94:	d3483f63 	ubfx	x3, x27, #8, #8
   9ab98:	d3505f64 	ubfx	x4, x27, #16, #8
   9ab9c:	53187f61 	lsr	w1, w27, #24
   9aba0:	39000443 	strb	w3, [x2, #1]
   9aba4:	2a1703e3 	mov	w3, w23
   9aba8:	11001000 	add	w0, w0, #0x4
   9abac:	5100075a 	sub	w26, w26, #0x1
   9abb0:	2a0303f7 	mov	w23, w3
   9abb4:	39000045 	strb	w5, [x2]
   9abb8:	39000844 	strb	w4, [x2, #2]
   9abbc:	39000c41 	strb	w1, [x2, #3]
   9abc0:	17fffe6e 	b	9a578 <f_mkfs+0xcc8>
   9abc4:	35ff83ad 	cbnz	w13, 99c38 <f_mkfs+0x388>
   9abc8:	710006bf 	cmp	w21, #0x1
   9abcc:	53017ead 	lsr	w13, w21, #1
   9abd0:	54ff8848 	b.hi	99cd8 <f_mkfs+0x428>  // b.pmore
   9abd4:	17fffc19 	b	99c38 <f_mkfs+0x388>
   9abd8:	b9410fef 	ldr	w15, [sp, #268]
   9abdc:	17fffcec 	b	99f8c <f_mkfs+0x6dc>
   9abe0:	aa1603e0 	mov	x0, x22
   9abe4:	528001d5 	mov	w21, #0xe                   	// #14
   9abe8:	94000516 	bl	9c040 <ff_memfree>
   9abec:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9abf0:	a94573fb 	ldp	x27, x28, [sp, #80]
   9abf4:	17fffb96 	b	99a4c <f_mkfs+0x19c>
   9abf8:	35ff8ad5 	cbnz	w21, 99d50 <f_mkfs+0x4a0>
   9abfc:	b2404be0 	mov	x0, #0x7ffff               	// #524287
   9ac00:	52800115 	mov	w21, #0x8                   	// #8
   9ac04:	eb00007f 	cmp	x3, x0
   9ac08:	54ff9ae9 	b.ls	99f64 <f_mkfs+0x6b4>  // b.plast
   9ac0c:	52800815 	mov	w21, #0x40                  	// #64
   9ac10:	17fffcd5 	b	99f64 <f_mkfs+0x6b4>
   9ac14:	34000139 	cbz	w25, 9ac38 <f_mkfs+0x1388>
   9ac18:	52801015 	mov	w21, #0x80                  	// #128
   9ac1c:	b9410fef 	ldr	w15, [sp, #268]
   9ac20:	2a0303e0 	mov	w0, w3
   9ac24:	2a1503ed 	mov	w13, w21
   9ac28:	d2810010 	mov	x16, #0x800                 	// #2048
   9ac2c:	17fffbc0 	b	99b2c <f_mkfs+0x27c>
   9ac30:	2a0303e0 	mov	w0, w3
   9ac34:	35fffd39 	cbnz	w25, 9abd8 <f_mkfs+0x1328>
   9ac38:	52800275 	mov	w21, #0x13                  	// #19
   9ac3c:	b5ff7054 	cbnz	x20, 99a44 <f_mkfs+0x194>
   9ac40:	17ffffbe 	b	9ab38 <f_mkfs+0x1288>
   9ac44:	b9408be0 	ldr	w0, [sp, #136]
   9ac48:	aa1503e2 	mov	x2, x21
   9ac4c:	aa1803f6 	mov	x22, x24
   9ac50:	f9405fe5 	ldr	x5, [sp, #184]
   9ac54:	b940b3f5 	ldr	w21, [sp, #176]
   9ac58:	11080403 	add	w3, w0, #0x201
   9ac5c:	b940c7f8 	ldr	w24, [sp, #196]
   9ac60:	f9003fe5 	str	x5, [sp, #120]
   9ac64:	f9404ff4 	ldr	x20, [sp, #152]
   9ac68:	f94057fc 	ldr	x28, [sp, #168]
   9ac6c:	17fffdc7 	b	9a388 <f_mkfs+0xad8>
   9ac70:	900000c2 	adrp	x2, b2000 <vtable for CPartition>
   9ac74:	91036042 	add	x2, x2, #0xd8
   9ac78:	5280002d 	mov	w13, #0x1                   	// #1
   9ac7c:	91038842 	add	x2, x2, #0xe2
   9ac80:	2a0d03e1 	mov	w1, w13
   9ac84:	53117c07 	lsr	w7, w0, #17
   9ac88:	14000004 	b	9ac98 <f_mkfs+0x13e8>
   9ac8c:	78402441 	ldrh	w1, [x2], #2
   9ac90:	531f79ad 	lsl	w13, w13, #1
   9ac94:	34ff8261 	cbz	w1, 99ce0 <f_mkfs+0x430>
   9ac98:	6b07003f 	cmp	w1, w7
   9ac9c:	52800006 	mov	w6, #0x0                   	// #0
   9aca0:	54ffff69 	b.ls	9ac8c <f_mkfs+0x13dc>  // b.plast
   9aca4:	17fffc0f 	b	99ce0 <f_mkfs+0x430>
   9aca8:	110806e8 	add	w8, w23, #0x201
   9acac:	aa1503e2 	mov	x2, x21
   9acb0:	53097d16 	lsr	w22, w8, #9
   9acb4:	aa1803e1 	mov	x1, x24
   9acb8:	2a1603e3 	mov	w3, w22
   9acbc:	2a1303e0 	mov	w0, w19
   9acc0:	94000428 	bl	9bd60 <disk_write>
   9acc4:	b9008be0 	str	w0, [sp, #136]
   9acc8:	35000c60 	cbnz	w0, 9ae54 <f_mkfs+0x15a4>
   9accc:	8b1602b5 	add	x21, x21, x22
   9acd0:	2a1c03fa 	mov	w26, w28
   9acd4:	aa1803e3 	mov	x3, x24
   9acd8:	52800057 	mov	w23, #0x2                   	// #2
   9acdc:	d2800036 	mov	x22, #0x1                   	// #1
   9ace0:	17fffc78 	b	99ec0 <f_mkfs+0x610>
   9ace4:	2a0d03f5 	mov	w21, w13
   9ace8:	17fffca9 	b	99f8c <f_mkfs+0x6dc>
   9acec:	52801006 	mov	w6, #0x80                  	// #128
   9acf0:	2a0603ed 	mov	w13, w6
   9acf4:	17fffbfb 	b	99ce0 <f_mkfs+0x430>
   9acf8:	aa1503e2 	mov	x2, x21
   9acfc:	aa1803f6 	mov	x22, x24
   9ad00:	b940b3f5 	ldr	w21, [sp, #176]
   9ad04:	2a1703fa 	mov	w26, w23
   9ad08:	b940c7f8 	ldr	w24, [sp, #196]
   9ad0c:	f9404ff4 	ldr	x20, [sp, #152]
   9ad10:	f94057fc 	ldr	x28, [sp, #168]
   9ad14:	f9405fe5 	ldr	x5, [sp, #184]
   9ad18:	11080743 	add	w3, w26, #0x201
   9ad1c:	f9003fe5 	str	x5, [sp, #120]
   9ad20:	17fffd9a 	b	9a388 <f_mkfs+0xad8>
   9ad24:	aa1903e4 	mov	x4, x25
   9ad28:	35ffbafa 	cbnz	w26, 9a484 <f_mkfs+0xbd4>
   9ad2c:	5280001a 	mov	w26, #0x0                   	// #0
   9ad30:	17fffddd 	b	9a4a4 <f_mkfs+0xbf4>
   9ad34:	340016dc 	cbz	w28, 9b00c <f_mkfs+0x175c>
   9ad38:	12800020 	mov	w0, #0xfffffffe            	// #-2
   9ad3c:	52800034 	mov	w20, #0x1                   	// #1
   9ad40:	b900d3f3 	str	w19, [sp, #208]
   9ad44:	4b1a0019 	sub	w25, w0, w26
   9ad48:	2a1403f3 	mov	w19, w20
   9ad4c:	12003f39 	and	w25, w25, #0xffff
   9ad50:	aa0303f4 	mov	x20, x3
   9ad54:	11000b39 	add	w25, w25, #0x2
   9ad58:	14000004 	b	9ad68 <f_mkfs+0x14b8>
   9ad5c:	11000673 	add	w19, w19, #0x1
   9ad60:	6b19027f 	cmp	w19, w25
   9ad64:	540000e0 	b.eq	9ad80 <f_mkfs+0x14d0>  // b.none
   9ad68:	0b130356 	add	w22, w26, w19
   9ad6c:	12003ed6 	and	w22, w22, #0xffff
   9ad70:	2a1603e0 	mov	w0, w22
   9ad74:	9400052f 	bl	9c230 <ff_wtoupper>
   9ad78:	6b0002df 	cmp	w22, w0
   9ad7c:	54ffff00 	b.eq	9ad5c <f_mkfs+0x14ac>  // b.none
   9ad80:	7101fe7f 	cmp	w19, #0x7f
   9ad84:	aa1403e3 	mov	x3, x20
   9ad88:	2a1303f4 	mov	w20, w19
   9ad8c:	b940d3f3 	ldr	w19, [sp, #208]
   9ad90:	54ffa6a9 	b.ls	9a264 <f_mkfs+0x9b4>  // b.plast
   9ad94:	12800000 	mov	w0, #0xffffffff            	// #-1
   9ad98:	b94093e1 	ldr	w1, [sp, #144]
   9ad9c:	39000060 	strb	w0, [x3]
   9ada0:	1103fc39 	add	w25, w1, #0xff
   9ada4:	f9406fe1 	ldr	x1, [sp, #216]
   9ada8:	13990739 	ror	w25, w25, #1
   9adac:	1103ff39 	add	w25, w25, #0xff
   9adb0:	39000020 	strb	w0, [x1]
   9adb4:	34fff49a 	cbz	w26, 9ac44 <f_mkfs+0x1394>
   9adb8:	b9407be0 	ldr	w0, [sp, #120]
   9adbc:	2a1a03fc 	mov	w28, w26
   9adc0:	5280005a 	mov	w26, #0x2                   	// #2
   9adc4:	6b17001f 	cmp	w0, w23
   9adc8:	54ff8401 	b.ne	99e48 <f_mkfs+0x598>  // b.any
   9adcc:	b9408be0 	ldr	w0, [sp, #136]
   9add0:	aa1503e2 	mov	x2, x21
   9add4:	aa1803e1 	mov	x1, x24
   9add8:	11080416 	add	w22, w0, #0x201
   9addc:	2a1303e0 	mov	w0, w19
   9ade0:	53097ed6 	lsr	w22, w22, #9
   9ade4:	2a1603e3 	mov	w3, w22
   9ade8:	940003de 	bl	9bd60 <disk_write>
   9adec:	2a0003f7 	mov	w23, w0
   9adf0:	35000320 	cbnz	w0, 9ae54 <f_mkfs+0x15a4>
   9adf4:	8b1602b5 	add	x21, x21, x22
   9adf8:	2a1a03e0 	mov	w0, w26
   9adfc:	aa1803e3 	mov	x3, x24
   9ae00:	d2800036 	mov	x22, #0x1                   	// #1
   9ae04:	17fffc17 	b	99e60 <f_mkfs+0x5b0>
   9ae08:	110806e8 	add	w8, w23, #0x201
   9ae0c:	aa1503e2 	mov	x2, x21
   9ae10:	53097d16 	lsr	w22, w8, #9
   9ae14:	aa1803e1 	mov	x1, x24
   9ae18:	2a1603e3 	mov	w3, w22
   9ae1c:	2a1303e0 	mov	w0, w19
   9ae20:	940003d0 	bl	9bd60 <disk_write>
   9ae24:	2a0003f4 	mov	w20, w0
   9ae28:	35000160 	cbnz	w0, 9ae54 <f_mkfs+0x15a4>
   9ae2c:	8b1602b5 	add	x21, x21, x22
   9ae30:	aa1803e3 	mov	x3, x24
   9ae34:	b9008bff 	str	wzr, [sp, #136]
   9ae38:	52800057 	mov	w23, #0x2                   	// #2
   9ae3c:	d2800036 	mov	x22, #0x1                   	// #1
   9ae40:	17fffc20 	b	99ec0 <f_mkfs+0x610>
   9ae44:	f94047f4 	ldr	x20, [sp, #136]
   9ae48:	aa1903f6 	mov	x22, x25
   9ae4c:	b5ff7054 	cbnz	x20, 99c54 <f_mkfs+0x3a4>
   9ae50:	17fffcf9 	b	9a234 <f_mkfs+0x984>
   9ae54:	aa1803f6 	mov	x22, x24
   9ae58:	f9404ff4 	ldr	x20, [sp, #152]
   9ae5c:	17fffcf5 	b	9a230 <f_mkfs+0x980>
   9ae60:	f9406fe1 	ldr	x1, [sp, #216]
   9ae64:	2a1703e0 	mov	w0, w23
   9ae68:	2a1c03fa 	mov	w26, w28
   9ae6c:	b9408bf7 	ldr	w23, [sp, #136]
   9ae70:	39000025 	strb	w5, [x1]
   9ae74:	17fffd2a 	b	9a31c <f_mkfs+0xa6c>
   9ae78:	f94043f4 	ldr	x20, [sp, #128]
   9ae7c:	b5ff6ed4 	cbnz	x20, 99c54 <f_mkfs+0x3a4>
   9ae80:	17fffced 	b	9a234 <f_mkfs+0x984>
   9ae84:	b90022c0 	str	w0, [x22, #32]
   9ae88:	17fffc75 	b	9a05c <f_mkfs+0x7ac>
   9ae8c:	928000e0 	mov	x0, #0xfffffffffffffff8    	// #-8
   9ae90:	f90002c0 	str	x0, [x22]
   9ae94:	12be0000 	mov	w0, #0xfffffff             	// #268435455
   9ae98:	b9000ac0 	str	w0, [x22, #8]
   9ae9c:	17fffcba 	b	9a184 <f_mkfs+0x8d4>
   9aea0:	b9007beb 	str	w11, [sp, #120]
   9aea4:	b9008be9 	str	w9, [sp, #136]
   9aea8:	b90093ea 	str	w10, [sp, #144]
   9aeac:	a9099be5 	stp	x5, x6, [sp, #152]
   9aeb0:	94000468 	bl	9c050 <get_fattime>
   9aeb4:	b9407beb 	ldr	w11, [sp, #120]
   9aeb8:	d2800042 	mov	x2, #0x2                   	// #2
   9aebc:	2a0003e3 	mov	w3, w0
   9aec0:	5280052c 	mov	w12, #0x29                  	// #41
   9aec4:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   9aec8:	f2c00022 	movk	x2, #0x1, lsl #32
   9aecc:	f2e000c2 	movk	x2, #0x6, lsl #48
   9aed0:	b80432c3 	stur	w3, [x22, #67]
   9aed4:	900000c1 	adrp	x1, b2000 <vtable for CPartition>
   9aed8:	91024021 	add	x1, x1, #0x90
   9aedc:	390102c0 	strb	w0, [x22, #64]
   9aee0:	91011ec0 	add	x0, x22, #0x47
   9aee4:	f802c2c2 	stur	x2, [x22, #44]
   9aee8:	52800262 	mov	w2, #0x13                  	// #19
   9aeec:	b90026cb 	str	w11, [x22, #36]
   9aef0:	39010acc 	strb	w12, [x22, #66]
   9aef4:	b90083eb 	str	w11, [sp, #128]
   9aef8:	97ffe076 	bl	930d0 <mem_cpy.part.0>
   9aefc:	f9404fe5 	ldr	x5, [sp, #152]
   9af00:	128ab54c 	mov	w12, #0xffffaa55            	// #-21931
   9af04:	52800023 	mov	w3, #0x1                   	// #1
   9af08:	aa1603e1 	mov	x1, x22
   9af0c:	2a1303e0 	mov	w0, w19
   9af10:	7903fecc 	strh	w12, [x22, #510]
   9af14:	aa0503e2 	mov	x2, x5
   9af18:	f9003fe5 	str	x5, [sp, #120]
   9af1c:	94000391 	bl	9bd60 <disk_write>
   9af20:	b94083eb 	ldr	w11, [sp, #128]
   9af24:	b9408be9 	ldr	w9, [sp, #136]
   9af28:	b94093ea 	ldr	w10, [sp, #144]
   9af2c:	f9403fe5 	ldr	x5, [sp, #120]
   9af30:	f94053e6 	ldr	x6, [sp, #160]
   9af34:	35ff97e0 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9af38:	910018a2 	add	x2, x5, #0x6
   9af3c:	52800023 	mov	w3, #0x1                   	// #1
   9af40:	f9003fe5 	str	x5, [sp, #120]
   9af44:	aa1603e1 	mov	x1, x22
   9af48:	2a1303e0 	mov	w0, w19
   9af4c:	b90083eb 	str	w11, [sp, #128]
   9af50:	b9008be9 	str	w9, [sp, #136]
   9af54:	b90093ea 	str	w10, [sp, #144]
   9af58:	f9004fe6 	str	x6, [sp, #152]
   9af5c:	94000381 	bl	9bd60 <disk_write>
   9af60:	b94083eb 	ldr	w11, [sp, #128]
   9af64:	aa1603e0 	mov	x0, x22
   9af68:	b9408be9 	ldr	w9, [sp, #136]
   9af6c:	b94093ea 	ldr	w10, [sp, #144]
   9af70:	f9403fe5 	ldr	x5, [sp, #120]
   9af74:	f9404fe6 	ldr	x6, [sp, #152]
   9af78:	3800141f 	strb	wzr, [x0], #1
   9af7c:	eb06001f 	cmp	x0, x6
   9af80:	54ffffc1 	b.ne	9af78 <f_mkfs+0x16c8>  // b.any
   9af84:	5280004d 	mov	w13, #0x2                   	// #2
   9af88:	128ab54c 	mov	w12, #0xffffaa55            	// #-21931
   9af8c:	a9079be5 	stp	x5, x6, [sp, #120]
   9af90:	51000720 	sub	w0, w25, #0x1
   9af94:	528a4a42 	mov	w2, #0x5252                	// #21074
   9af98:	72a82c22 	movk	w2, #0x4161, lsl #16
   9af9c:	528e4e41 	mov	w1, #0x7272                	// #29298
   9afa0:	72ac2821 	movk	w1, #0x6141, lsl #16
   9afa4:	52800023 	mov	w3, #0x1                   	// #1
   9afa8:	b901eac0 	str	w0, [x22, #488]
   9afac:	2a1303e0 	mov	w0, w19
   9afb0:	b90002c2 	str	w2, [x22]
   9afb4:	91001ca2 	add	x2, x5, #0x7
   9afb8:	b901e6c1 	str	w1, [x22, #484]
   9afbc:	aa1603e1 	mov	x1, x22
   9afc0:	b901eecd 	str	w13, [x22, #492]
   9afc4:	7903fecc 	strh	w12, [x22, #510]
   9afc8:	b9008bea 	str	w10, [sp, #136]
   9afcc:	b90093e9 	str	w9, [sp, #144]
   9afd0:	b9009beb 	str	w11, [sp, #152]
   9afd4:	94000363 	bl	9bd60 <disk_write>
   9afd8:	f9403fe5 	ldr	x5, [sp, #120]
   9afdc:	52800023 	mov	w3, #0x1                   	// #1
   9afe0:	aa1603e1 	mov	x1, x22
   9afe4:	2a1303e0 	mov	w0, w19
   9afe8:	910004a2 	add	x2, x5, #0x1
   9afec:	9400035d 	bl	9bd60 <disk_write>
   9aff0:	b9408bea 	ldr	w10, [sp, #136]
   9aff4:	b94093e9 	ldr	w9, [sp, #144]
   9aff8:	b9409beb 	ldr	w11, [sp, #152]
   9affc:	f94043e6 	ldr	x6, [sp, #128]
   9b000:	17fffc40 	b	9a100 <f_mkfs+0x850>
   9b004:	aa0203f9 	mov	x25, x2
   9b008:	17fffe27 	b	9a8a4 <f_mkfs+0xff4>
   9b00c:	b94093e1 	ldr	w1, [sp, #144]
   9b010:	12800000 	mov	w0, #0xffffffff            	// #-1
   9b014:	aa1503e2 	mov	x2, x21
   9b018:	aa1803f6 	mov	x22, x24
   9b01c:	39000060 	strb	w0, [x3]
   9b020:	b9408bfa 	ldr	w26, [sp, #136]
   9b024:	1103fc39 	add	w25, w1, #0xff
   9b028:	f9406fe1 	ldr	x1, [sp, #216]
   9b02c:	13990739 	ror	w25, w25, #1
   9b030:	b940b3f5 	ldr	w21, [sp, #176]
   9b034:	1103ff39 	add	w25, w25, #0xff
   9b038:	b940c7f8 	ldr	w24, [sp, #196]
   9b03c:	39000020 	strb	w0, [x1]
   9b040:	f9404ff4 	ldr	x20, [sp, #152]
   9b044:	f94057fc 	ldr	x28, [sp, #168]
   9b048:	f9405fe5 	ldr	x5, [sp, #184]
   9b04c:	17ffff33 	b	9ad18 <f_mkfs+0x1468>
   9b050:	71000f3f 	cmp	w25, #0x3
   9b054:	aa1a03e6 	mov	x6, x26
   9b058:	54001440 	b.eq	9b2e0 <f_mkfs+0x1a30>  // b.none
   9b05c:	f9408be1 	ldr	x1, [sp, #272]
   9b060:	d29fffe0 	mov	x0, #0xffff                	// #65535
   9b064:	eb00003f 	cmp	x1, x0
   9b068:	54001388 	b.hi	9b2d8 <f_mkfs+0x1a28>  // b.pmore
   9b06c:	71000b3f 	cmp	w25, #0x2
   9b070:	52800095 	mov	w21, #0x4                   	// #4
   9b074:	1a9f06b5 	csinc	w21, w21, wzr, eq  // eq = none
   9b078:	17fffe31 	b	9a93c <f_mkfs+0x108c>
   9b07c:	2b0400e0 	adds	w0, w7, w4
   9b080:	7a4030e0 	ccmp	w7, w0, #0x0, cc  // cc = lo, ul, last
   9b084:	54ffcae3 	b.cc	9a9e0 <f_mkfs+0x1130>  // b.lo, b.ul, b.last
   9b088:	2a0703e0 	mov	w0, w7
   9b08c:	0b0400e2 	add	w2, w7, w4
   9b090:	17fffe56 	b	9a9e8 <f_mkfs+0x1138>
   9b094:	f90047e6 	str	x6, [sp, #136]
   9b098:	f00000b8 	adrp	x24, b2000 <vtable for CPartition>
   9b09c:	91036318 	add	x24, x24, #0xd8
   9b0a0:	940003ec 	bl	9c050 <get_fattime>
   9b0a4:	f94047e6 	ldr	x6, [sp, #136]
   9b0a8:	2a0003fc 	mov	w28, w0
   9b0ac:	9102c300 	add	x0, x24, #0xb0
   9b0b0:	5290641b 	mov	w27, #0x8320                	// #33568
   9b0b4:	72bdb71b 	movk	w27, #0xedb8, lsl #16
   9b0b8:	f9408fe1 	ldr	x1, [sp, #280]
   9b0bc:	d2800037 	mov	x23, #0x1                   	// #1
   9b0c0:	12800015 	mov	w21, #0xffffffff            	// #-1
   9b0c4:	5280000b 	mov	w11, #0x0                   	// #0
   9b0c8:	d2800458 	mov	x24, #0x22                  	// #34
   9b0cc:	f90043e0 	str	x0, [sp, #128]
   9b0d0:	d100843a 	sub	x26, x1, #0x21
   9b0d4:	d1010c20 	sub	x0, x1, #0x43
   9b0d8:	a90687f4 	stp	x20, x1, [sp, #104]
   9b0dc:	2a1903f4 	mov	w20, w25
   9b0e0:	aa1603f9 	mov	x25, x22
   9b0e4:	aa0603f6 	mov	x22, x6
   9b0e8:	f9003fe0 	str	x0, [sp, #120]
   9b0ec:	72002165 	ands	w5, w11, #0x1ff
   9b0f0:	540003a0 	b.eq	9b164 <f_mkfs+0x18b4>  // b.none
   9b0f4:	b40002b7 	cbz	x23, 9b148 <f_mkfs+0x1898>
   9b0f8:	910483e0 	add	x0, sp, #0x120
   9b0fc:	911fff18 	add	x24, x24, #0x7ff
   9b100:	f8745817 	ldr	x23, [x0, w20, uxtw #3]
   9b104:	9275d318 	and	x24, x24, #0xfffffffffffff800
   9b108:	11000694 	add	w20, w20, #0x1
   9b10c:	f10192ff 	cmp	x23, #0x64
   9b110:	540000e8 	b.hi	9b12c <f_mkfs+0x187c>  // b.pmore
   9b114:	f9403fe0 	ldr	x0, [sp, #120]
   9b118:	9b177c17 	mul	x23, x0, x23
   9b11c:	d2800c80 	mov	x0, #0x64                  	// #100
   9b120:	9ac00af7 	udiv	x23, x23, x0
   9b124:	911ffef7 	add	x23, x23, #0x7ff
   9b128:	9275d2f7 	and	x23, x23, #0xfffffffffffff800
   9b12c:	8b170300 	add	x0, x24, x23
   9b130:	eb00035f 	cmp	x26, x0
   9b134:	54000082 	b.cs	9b144 <f_mkfs+0x1894>  // b.hs, b.nlast
   9b138:	eb18035f 	cmp	x26, x24
   9b13c:	54000c69 	b.ls	9b2c8 <f_mkfs+0x1a18>  // b.plast
   9b140:	cb180357 	sub	x23, x26, x24
   9b144:	b50006d7 	cbnz	x23, 9b21c <f_mkfs+0x196c>
   9b148:	11020165 	add	w5, w11, #0x80
   9b14c:	f24020bf 	tst	x5, #0x1ff
   9b150:	54000140 	b.eq	9b178 <f_mkfs+0x18c8>  // b.none
   9b154:	714010bf 	cmp	w5, #0x4, lsl #12
   9b158:	54000c80 	b.eq	9b2e8 <f_mkfs+0x1a38>  // b.none
   9b15c:	2a0503eb 	mov	w11, w5
   9b160:	17ffffe3 	b	9b0ec <f_mkfs+0x183c>
   9b164:	aa1903e0 	mov	x0, x25
   9b168:	3800141f 	strb	wzr, [x0], #1
   9b16c:	eb16001f 	cmp	x0, x22
   9b170:	54ffffc1 	b.ne	9b168 <f_mkfs+0x18b8>  // b.any
   9b174:	17ffffe0 	b	9b0f4 <f_mkfs+0x1844>
   9b178:	aa1903e4 	mov	x4, x25
   9b17c:	d503201f 	nop
   9b180:	39400083 	ldrb	w3, [x4]
   9b184:	52800102 	mov	w2, #0x8                   	// #8
   9b188:	52800021 	mov	w1, #0x1                   	// #1
   9b18c:	d503201f 	nop
   9b190:	6a01007f 	tst	w3, w1
   9b194:	1a9f07e0 	cset	w0, ne  // ne = any
   9b198:	4a150015 	eor	w21, w0, w21
   9b19c:	f24002bf 	tst	x21, #0x1
   9b1a0:	53017eb5 	lsr	w21, w21, #1
   9b1a4:	531f1821 	ubfiz	w1, w1, #1, #7
   9b1a8:	4a1b02a0 	eor	w0, w21, w27
   9b1ac:	1a951015 	csel	w21, w0, w21, ne  // ne = any
   9b1b0:	71000442 	subs	w2, w2, #0x1
   9b1b4:	54fffee1 	b.ne	9b190 <f_mkfs+0x18e0>  // b.any
   9b1b8:	91000484 	add	x4, x4, #0x1
   9b1bc:	eb0402df 	cmp	x22, x4
   9b1c0:	54fffe01 	b.ne	9b180 <f_mkfs+0x18d0>  // b.any
   9b1c4:	53097d6b 	lsr	w11, w11, #9
   9b1c8:	52800023 	mov	w3, #0x1                   	// #1
   9b1cc:	b90093e5 	str	w5, [sp, #144]
   9b1d0:	11000962 	add	w2, w11, #0x2
   9b1d4:	aa1903e1 	mov	x1, x25
   9b1d8:	92405c42 	and	x2, x2, #0xffffff
   9b1dc:	2a1303e0 	mov	w0, w19
   9b1e0:	b9008beb 	str	w11, [sp, #136]
   9b1e4:	940002df 	bl	9bd60 <disk_write>
   9b1e8:	35000140 	cbnz	w0, 9b210 <f_mkfs+0x1960>
   9b1ec:	b9408beb 	ldr	w11, [sp, #136]
   9b1f0:	52800023 	mov	w3, #0x1                   	// #1
   9b1f4:	aa1903e1 	mov	x1, x25
   9b1f8:	2a1303e0 	mov	w0, w19
   9b1fc:	2a0b03eb 	mov	w11, w11
   9b200:	8b1a0162 	add	x2, x11, x26
   9b204:	940002d7 	bl	9bd60 <disk_write>
   9b208:	b94093e5 	ldr	w5, [sp, #144]
   9b20c:	34fffa40 	cbz	w0, 9b154 <f_mkfs+0x18a4>
   9b210:	aa1903f6 	mov	x22, x25
   9b214:	f94037f4 	ldr	x20, [sp, #104]
   9b218:	17fffc06 	b	9a230 <f_mkfs+0x980>
   9b21c:	2a0503e5 	mov	w5, w5
   9b220:	52800202 	mov	w2, #0x10                  	// #16
   9b224:	f94043e1 	ldr	x1, [sp, #128]
   9b228:	8b050320 	add	x0, x25, x5
   9b22c:	97ffdfa9 	bl	930d0 <mem_cpy.part.0>
   9b230:	910040a4 	add	x4, x5, #0x10
   9b234:	52b46003 	mov	w3, #0xa3000000            	// #-1560281088
   9b238:	8b040324 	add	x4, x25, x4
   9b23c:	7100039f 	cmp	w28, #0x0
   9b240:	1a9f179c 	csinc	w28, w28, wzr, ne  // ne = any
   9b244:	91004087 	add	x7, x4, #0x10
   9b248:	52800101 	mov	w1, #0x8                   	// #8
   9b24c:	d503201f 	nop
   9b250:	72000382 	ands	w2, w28, #0x1
   9b254:	53017f9c 	lsr	w28, w28, #1
   9b258:	4a030382 	eor	w2, w28, w3
   9b25c:	1a9c105c 	csel	w28, w2, w28, ne  // ne = any
   9b260:	71000421 	subs	w1, w1, #0x1
   9b264:	54ffff61 	b.ne	9b250 <f_mkfs+0x19a0>  // b.any
   9b268:	3800149c 	strb	w28, [x4], #1
   9b26c:	eb07009f 	cmp	x4, x7
   9b270:	54fffec1 	b.ne	9b248 <f_mkfs+0x1998>  // b.any
   9b274:	910080a5 	add	x5, x5, #0x20
   9b278:	d348ff04 	lsr	x4, x24, #8
   9b27c:	8b050321 	add	x1, x25, x5
   9b280:	d350ff03 	lsr	x3, x24, #16
   9b284:	d360ff02 	lsr	x2, x24, #32
   9b288:	38256b3f 	strb	wzr, [x25, x5]
   9b28c:	d358ff07 	lsr	x7, x24, #24
   9b290:	d368ff05 	lsr	x5, x24, #40
   9b294:	39000424 	strb	w4, [x1, #1]
   9b298:	d370ff04 	lsr	x4, x24, #48
   9b29c:	39000823 	strb	w3, [x1, #2]
   9b2a0:	d378ff03 	lsr	x3, x24, #56
   9b2a4:	8b170318 	add	x24, x24, x23
   9b2a8:	39001022 	strb	w2, [x1, #4]
   9b2ac:	d1000702 	sub	x2, x24, #0x1
   9b2b0:	39000c27 	strb	w7, [x1, #3]
   9b2b4:	39001425 	strb	w5, [x1, #5]
   9b2b8:	39001824 	strb	w4, [x1, #6]
   9b2bc:	39001c23 	strb	w3, [x1, #7]
   9b2c0:	f9001402 	str	x2, [x0, #40]
   9b2c4:	17ffffa1 	b	9b148 <f_mkfs+0x1898>
   9b2c8:	d2800017 	mov	x23, #0x0                   	// #0
   9b2cc:	17ffff9f 	b	9b148 <f_mkfs+0x1898>
   9b2d0:	5280003b 	mov	w27, #0x1                   	// #1
   9b2d4:	17fffd0f 	b	9a710 <f_mkfs+0xe60>
   9b2d8:	528000d5 	mov	w21, #0x6                   	// #6
   9b2dc:	17fffd98 	b	9a93c <f_mkfs+0x108c>
   9b2e0:	52800195 	mov	w21, #0xc                   	// #12
   9b2e4:	17fffd96 	b	9a93c <f_mkfs+0x108c>
   9b2e8:	f94037f4 	ldr	x20, [sp, #104]
   9b2ec:	aa1903f6 	mov	x22, x25
   9b2f0:	d2800000 	mov	x0, #0x0                   	// #0
   9b2f4:	38206adf 	strb	wzr, [x22, x0]
   9b2f8:	91000400 	add	x0, x0, #0x1
   9b2fc:	f108001f 	cmp	x0, #0x200
   9b300:	54ffffa1 	b.ne	9b2f4 <f_mkfs+0x1a44>  // b.any
   9b304:	f00000b8 	adrp	x24, b2000 <vtable for CPartition>
   9b308:	91036318 	add	x24, x24, #0xd8
   9b30c:	91028301 	add	x1, x24, #0xa0
   9b310:	52800202 	mov	w2, #0x10                  	// #16
   9b314:	aa1603e0 	mov	x0, x22
   9b318:	2a3503f5 	mvn	w21, w21
   9b31c:	97ffdf6d 	bl	930d0 <mem_cpy.part.0>
   9b320:	f9403be0 	ldr	x0, [sp, #112]
   9b324:	d2800446 	mov	x6, #0x22                  	// #34
   9b328:	b21903e3 	mov	x3, #0x8000000080          	// #549755814016
   9b32c:	52800044 	mov	w4, #0x2                   	// #2
   9b330:	9100e2c2 	add	x2, x22, #0x38
   9b334:	b9005ad5 	str	w21, [x22, #88]
   9b338:	f9408fe1 	ldr	x1, [sp, #280]
   9b33c:	910122c8 	add	x8, x22, #0x48
   9b340:	52b46007 	mov	w7, #0xa3000000            	// #-1560281088
   9b344:	7100039f 	cmp	w28, #0x0
   9b348:	b9004ac4 	str	w4, [x22, #72]
   9b34c:	f9002ac3 	str	x3, [x22, #80]
   9b350:	d1008817 	sub	x23, x0, #0x22
   9b354:	d2800020 	mov	x0, #0x1                   	// #1
   9b358:	d1000421 	sub	x1, x1, #0x1
   9b35c:	a902dec6 	stp	x6, x23, [x22, #40]
   9b360:	a90186c0 	stp	x0, x1, [x22, #24]
   9b364:	1a801380 	csel	w0, w28, w0, ne  // ne = any
   9b368:	52800101 	mov	w1, #0x8                   	// #8
   9b36c:	72000003 	ands	w3, w0, #0x1
   9b370:	53017c00 	lsr	w0, w0, #1
   9b374:	4a070003 	eor	w3, w0, w7
   9b378:	1a801060 	csel	w0, w3, w0, ne  // ne = any
   9b37c:	71000421 	subs	w1, w1, #0x1
   9b380:	54ffff61 	b.ne	9b36c <f_mkfs+0x1abc>  // b.any
   9b384:	38001440 	strb	w0, [x2], #1
   9b388:	eb08005f 	cmp	x2, x8
   9b38c:	54fffee1 	b.ne	9b368 <f_mkfs+0x1ab8>  // b.any
   9b390:	52906406 	mov	w6, #0x8320                	// #33568
   9b394:	72bdb706 	movk	w6, #0xedb8, lsl #16
   9b398:	aa1603f5 	mov	x21, x22
   9b39c:	910172d7 	add	x23, x22, #0x5c
   9b3a0:	aa1603e7 	mov	x7, x22
   9b3a4:	12800000 	mov	w0, #0xffffffff            	// #-1
   9b3a8:	394000e4 	ldrb	w4, [x7]
   9b3ac:	52800102 	mov	w2, #0x8                   	// #8
   9b3b0:	52800021 	mov	w1, #0x1                   	// #1
   9b3b4:	d503201f 	nop
   9b3b8:	6a01009f 	tst	w4, w1
   9b3bc:	1a9f07e3 	cset	w3, ne  // ne = any
   9b3c0:	4a000060 	eor	w0, w3, w0
   9b3c4:	f240001f 	tst	x0, #0x1
   9b3c8:	53017c00 	lsr	w0, w0, #1
   9b3cc:	531f1821 	ubfiz	w1, w1, #1, #7
   9b3d0:	4a060003 	eor	w3, w0, w6
   9b3d4:	1a801060 	csel	w0, w3, w0, ne  // ne = any
   9b3d8:	71000442 	subs	w2, w2, #0x1
   9b3dc:	54fffee1 	b.ne	9b3b8 <f_mkfs+0x1b08>  // b.any
   9b3e0:	910004e7 	add	x7, x7, #0x1
   9b3e4:	eb0702ff 	cmp	x23, x7
   9b3e8:	54fffe01 	b.ne	9b3a8 <f_mkfs+0x1af8>  // b.any
   9b3ec:	2a2003e4 	mvn	w4, w0
   9b3f0:	52800023 	mov	w3, #0x1                   	// #1
   9b3f4:	d2800022 	mov	x2, #0x1                   	// #1
   9b3f8:	aa1603e1 	mov	x1, x22
   9b3fc:	2a1303e0 	mov	w0, w19
   9b400:	b90012c4 	str	w4, [x22, #16]
   9b404:	94000257 	bl	9bd60 <disk_write>
   9b408:	35ff7140 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9b40c:	f9408fe2 	ldr	x2, [sp, #280]
   9b410:	d2800021 	mov	x1, #0x1                   	// #1
   9b414:	52906406 	mov	w6, #0x8320                	// #33568
   9b418:	72bdb706 	movk	w6, #0xedb8, lsl #16
   9b41c:	12800000 	mov	w0, #0xffffffff            	// #-1
   9b420:	b90012df 	str	wzr, [x22, #16]
   9b424:	f90026da 	str	x26, [x22, #72]
   9b428:	d1000442 	sub	x2, x2, #0x1
   9b42c:	a90186c2 	stp	x2, x1, [x22, #24]
   9b430:	52800103 	mov	w3, #0x8                   	// #8
   9b434:	52800021 	mov	w1, #0x1                   	// #1
   9b438:	394002a5 	ldrb	w5, [x21]
   9b43c:	d503201f 	nop
   9b440:	6a0100bf 	tst	w5, w1
   9b444:	1a9f07e4 	cset	w4, ne  // ne = any
   9b448:	4a000080 	eor	w0, w4, w0
   9b44c:	f240001f 	tst	x0, #0x1
   9b450:	53017c00 	lsr	w0, w0, #1
   9b454:	531f1821 	ubfiz	w1, w1, #1, #7
   9b458:	4a060004 	eor	w4, w0, w6
   9b45c:	1a801080 	csel	w0, w4, w0, ne  // ne = any
   9b460:	71000463 	subs	w3, w3, #0x1
   9b464:	54fffee1 	b.ne	9b440 <f_mkfs+0x1b90>  // b.any
   9b468:	910006b5 	add	x21, x21, #0x1
   9b46c:	eb1502ff 	cmp	x23, x21
   9b470:	54fffe01 	b.ne	9b430 <f_mkfs+0x1b80>  // b.any
   9b474:	2a2003e4 	mvn	w4, w0
   9b478:	52800023 	mov	w3, #0x1                   	// #1
   9b47c:	aa1603e1 	mov	x1, x22
   9b480:	2a1303e0 	mov	w0, w19
   9b484:	b90012c4 	str	w4, [x22, #16]
   9b488:	94000236 	bl	9bd60 <disk_write>
   9b48c:	35ff6d20 	cbnz	w0, 9a230 <f_mkfs+0x980>
   9b490:	d2800000 	mov	x0, #0x0                   	// #0
   9b494:	38206adf 	strb	wzr, [x22, x0]
   9b498:	91000400 	add	x0, x0, #0x1
   9b49c:	f108001f 	cmp	x0, #0x200
   9b4a0:	54ffffa1 	b.ne	9b494 <f_mkfs+0x1be4>  // b.any
   9b4a4:	91040301 	add	x1, x24, #0x100
   9b4a8:	52800202 	mov	w2, #0x10                  	// #16
   9b4ac:	9106fac0 	add	x0, x22, #0x1be
   9b4b0:	97ffdf08 	bl	930d0 <mem_cpy.part.0>
   9b4b4:	17fffd91 	b	9aaf8 <f_mkfs+0x1248>
   9b4b8:	2a0303f7 	mov	w23, w3
   9b4bc:	17fffc32 	b	9a584 <f_mkfs+0xcd4>
   9b4c0:	52800029 	mov	w9, #0x1                   	// #1
   9b4c4:	17fffac5 	b	99fd8 <f_mkfs+0x728>
   9b4c8:	d503201f 	nop
   9b4cc:	d503201f 	nop

000000000009b4d0 <f_gets>:
   9b4d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9b4d4:	910003fd 	mov	x29, sp
   9b4d8:	a90153f3 	stp	x19, x20, [sp, #16]
   9b4dc:	aa0003f4 	mov	x20, x0
   9b4e0:	52800013 	mov	w19, #0x0                   	// #0
   9b4e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b4e8:	51000436 	sub	w22, w1, #0x1
   9b4ec:	aa0203f5 	mov	x21, x2
   9b4f0:	f9001bf7 	str	x23, [sp, #48]
   9b4f4:	aa0003f7 	mov	x23, x0
   9b4f8:	1400000a 	b	9b520 <f_gets+0x50>
   9b4fc:	97ffeecd 	bl	97030 <f_read>
   9b500:	b9404fe3 	ldr	w3, [sp, #76]
   9b504:	7100047f 	cmp	w3, #0x1
   9b508:	54000181 	b.ne	9b538 <f_gets+0x68>  // b.any
   9b50c:	394123e3 	ldrb	w3, [sp, #72]
   9b510:	11000673 	add	w19, w19, #0x1
   9b514:	7100287f 	cmp	w3, #0xa
   9b518:	38001683 	strb	w3, [x20], #1
   9b51c:	54000200 	b.eq	9b55c <f_gets+0x8c>  // b.none
   9b520:	6b16027f 	cmp	w19, w22
   9b524:	910133e3 	add	x3, sp, #0x4c
   9b528:	52800022 	mov	w2, #0x1                   	// #1
   9b52c:	910123e1 	add	x1, sp, #0x48
   9b530:	aa1503e0 	mov	x0, x21
   9b534:	54fffe4b 	b.lt	9b4fc <f_gets+0x2c>  // b.tstop
   9b538:	7100027f 	cmp	w19, #0x0
   9b53c:	9a9f12f7 	csel	x23, x23, xzr, ne  // ne = any
   9b540:	3900029f 	strb	wzr, [x20]
   9b544:	aa1703e0 	mov	x0, x23
   9b548:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b54c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b550:	f9401bf7 	ldr	x23, [sp, #48]
   9b554:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9b558:	d65f03c0 	ret
   9b55c:	3900029f 	strb	wzr, [x20]
   9b560:	aa1703e0 	mov	x0, x23
   9b564:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b568:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b56c:	f9401bf7 	ldr	x23, [sp, #48]
   9b570:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9b574:	d65f03c0 	ret
   9b578:	d503201f 	nop
   9b57c:	d503201f 	nop

000000000009b580 <f_putc>:
   9b580:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   9b584:	aa0103e3 	mov	x3, x1
   9b588:	910043e2 	add	x2, sp, #0x10
   9b58c:	13001c01 	sxtb	w1, w0
   9b590:	910003fd 	mov	x29, sp
   9b594:	d503201f 	nop
   9b598:	910183e0 	add	x0, sp, #0x60
   9b59c:	3800145f 	strb	wzr, [x2], #1
   9b5a0:	eb00005f 	cmp	x2, x0
   9b5a4:	54ffffa1 	b.ne	9b598 <f_putc+0x18>  // b.any
   9b5a8:	910043e0 	add	x0, sp, #0x10
   9b5ac:	f9000be3 	str	x3, [sp, #16]
   9b5b0:	97fff050 	bl	976f0 <putc_bfd>
   9b5b4:	910043e0 	add	x0, sp, #0x10
   9b5b8:	97fff06e 	bl	97770 <putc_flush>
   9b5bc:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9b5c0:	d65f03c0 	ret
   9b5c4:	d503201f 	nop
   9b5c8:	d503201f 	nop
   9b5cc:	d503201f 	nop

000000000009b5d0 <f_puts>:
   9b5d0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9b5d4:	910003fd 	mov	x29, sp
   9b5d8:	910083e2 	add	x2, sp, #0x20
   9b5dc:	f9000bf3 	str	x19, [sp, #16]
   9b5e0:	aa0003f3 	mov	x19, x0
   9b5e4:	aa0103e0 	mov	x0, x1
   9b5e8:	9101c3e1 	add	x1, sp, #0x70
   9b5ec:	3800145f 	strb	wzr, [x2], #1
   9b5f0:	eb01005f 	cmp	x2, x1
   9b5f4:	54ffffa1 	b.ne	9b5e8 <f_puts+0x18>  // b.any
   9b5f8:	39c00261 	ldrsb	w1, [x19]
   9b5fc:	f90013e0 	str	x0, [sp, #32]
   9b600:	340000c1 	cbz	w1, 9b618 <f_puts+0x48>
   9b604:	d503201f 	nop
   9b608:	910083e0 	add	x0, sp, #0x20
   9b60c:	97fff039 	bl	976f0 <putc_bfd>
   9b610:	38c01e61 	ldrsb	w1, [x19, #1]!
   9b614:	35ffffa1 	cbnz	w1, 9b608 <f_puts+0x38>
   9b618:	910083e0 	add	x0, sp, #0x20
   9b61c:	97fff055 	bl	97770 <putc_flush>
   9b620:	f9400bf3 	ldr	x19, [sp, #16]
   9b624:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9b628:	d65f03c0 	ret
   9b62c:	d503201f 	nop

000000000009b630 <f_printf>:
   9b630:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
   9b634:	910003fd 	mov	x29, sp
   9b638:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b63c:	aa0103f5 	mov	x21, x1
   9b640:	910283e1 	add	x1, sp, #0xa0
   9b644:	a90f0fe2 	stp	x2, x3, [sp, #240]
   9b648:	a91017e4 	stp	x4, x5, [sp, #256]
   9b64c:	a9111fe6 	stp	x6, x7, [sp, #272]
   9b650:	9103c3e2 	add	x2, sp, #0xf0
   9b654:	3800143f 	strb	wzr, [x1], #1
   9b658:	eb02003f 	cmp	x1, x2
   9b65c:	54ffffa1 	b.ne	9b650 <f_printf+0x20>  // b.any
   9b660:	aa0203e4 	mov	x4, x2
   9b664:	910483e1 	add	x1, sp, #0x120
   9b668:	f90053e0 	str	x0, [sp, #160]
   9b66c:	128005e3 	mov	w3, #0xffffffd0            	// #-48
   9b670:	aa1503e2 	mov	x2, x21
   9b674:	a90607e1 	stp	x1, x1, [sp, #96]
   9b678:	38c01441 	ldrsb	w1, [x2], #1
   9b67c:	f9003be4 	str	x4, [sp, #112]
   9b680:	290f7fe3 	stp	w3, wzr, [sp, #120]
   9b684:	34000f81 	cbz	w1, 9b874 <f_printf+0x244>
   9b688:	910203f6 	add	x22, sp, #0x80
   9b68c:	a90363f7 	stp	x23, x24, [sp, #48]
   9b690:	528004f8 	mov	w24, #0x27                  	// #39
   9b694:	528000f7 	mov	w23, #0x7                   	// #7
   9b698:	a90153f3 	stp	x19, x20, [sp, #16]
   9b69c:	a9046bf9 	stp	x25, x26, [sp, #64]
   9b6a0:	a90573fb 	stp	x27, x28, [sp, #80]
   9b6a4:	d503201f 	nop
   9b6a8:	7100943f 	cmp	w1, #0x25
   9b6ac:	540017e1 	b.ne	9b9a8 <f_printf+0x378>  // b.any
   9b6b0:	39c006a0 	ldrsb	w0, [x21, #1]
   9b6b4:	7100c01f 	cmp	w0, #0x30
   9b6b8:	54001a20 	b.eq	9b9fc <f_printf+0x3cc>  // b.none
   9b6bc:	7100b41f 	cmp	w0, #0x2d
   9b6c0:	54001b40 	b.eq	9ba28 <f_printf+0x3f8>  // b.none
   9b6c4:	91000ab5 	add	x21, x21, #0x2
   9b6c8:	52800005 	mov	w5, #0x0                   	// #0
   9b6cc:	7100a81f 	cmp	w0, #0x2a
   9b6d0:	540017a1 	b.ne	9b9c4 <f_printf+0x394>  // b.any
   9b6d4:	b9407be0 	ldr	w0, [sp, #120]
   9b6d8:	f94033e1 	ldr	x1, [sp, #96]
   9b6dc:	37f81980 	tbnz	w0, #31, 9ba0c <f_printf+0x3dc>
   9b6e0:	91002c20 	add	x0, x1, #0xb
   9b6e4:	927df000 	and	x0, x0, #0xfffffffffffffff8
   9b6e8:	f90033e0 	str	x0, [sp, #96]
   9b6ec:	38c016a0 	ldrsb	w0, [x21], #1
   9b6f0:	b9400034 	ldr	w20, [x1]
   9b6f4:	121a7801 	and	w1, w0, #0xffffffdf
   9b6f8:	7101303f 	cmp	w1, #0x4c
   9b6fc:	54000061 	b.ne	9b708 <f_printf+0xd8>  // b.any
   9b700:	38c016a0 	ldrsb	w0, [x21], #1
   9b704:	321e00a5 	orr	w5, w5, #0x4
   9b708:	34000ae0 	cbz	w0, 9b864 <f_printf+0x234>
   9b70c:	12001c03 	and	w3, w0, #0xff
   9b710:	51018461 	sub	w1, w3, #0x61
   9b714:	51008063 	sub	w3, w3, #0x20
   9b718:	12001c21 	and	w1, w1, #0xff
   9b71c:	13001c63 	sxtb	w3, w3
   9b720:	7100683f 	cmp	w1, #0x1a
   9b724:	1a803063 	csel	w3, w3, w0, cc  // cc = lo, ul, last
   9b728:	71013c7f 	cmp	w3, #0x4f
   9b72c:	540018a0 	b.eq	9ba40 <f_printf+0x410>  // b.none
   9b730:	54000ecc 	b.gt	9b908 <f_printf+0x2d8>
   9b734:	71010c7f 	cmp	w3, #0x43
   9b738:	54001880 	b.eq	9ba48 <f_printf+0x418>  // b.none
   9b73c:	7101107f 	cmp	w3, #0x44
   9b740:	54000ca1 	b.ne	9b8d4 <f_printf+0x2a4>  // b.any
   9b744:	b9407be4 	ldr	w4, [sp, #120]
   9b748:	52800141 	mov	w1, #0xa                   	// #10
   9b74c:	f94033e2 	ldr	x2, [sp, #96]
   9b750:	36100b25 	tbz	w5, #2, 9b8b4 <f_printf+0x284>
   9b754:	37f81a24 	tbnz	w4, #31, 9ba98 <f_printf+0x468>
   9b758:	91003c44 	add	x4, x2, #0xf
   9b75c:	927df084 	and	x4, x4, #0xfffffffffffffff8
   9b760:	f90033e4 	str	x4, [sp, #96]
   9b764:	f9400044 	ldr	x4, [x2]
   9b768:	2a0403e2 	mov	w2, w4
   9b76c:	7101107f 	cmp	w3, #0x44
   9b770:	52800009 	mov	w9, #0x0                   	// #0
   9b774:	7a400880 	ccmp	w4, #0x0, #0x0, eq  // eq = none
   9b778:	5400008a 	b.ge	9b788 <f_printf+0x158>  // b.tcont
   9b77c:	4b0203e2 	neg	w2, w2
   9b780:	321d00a5 	orr	w5, w5, #0x8
   9b784:	52800109 	mov	w9, #0x8                   	// #8
   9b788:	7101e01f 	cmp	w0, #0x78
   9b78c:	aa1603e4 	mov	x4, x22
   9b790:	1a970308 	csel	w8, w24, w23, eq  // eq = none
   9b794:	52800006 	mov	w6, #0x0                   	// #0
   9b798:	14000002 	b	9b7a0 <f_printf+0x170>
   9b79c:	2a1903e6 	mov	w6, w25
   9b7a0:	1ac10843 	udiv	w3, w2, w1
   9b7a4:	2a0203e7 	mov	w7, w2
   9b7a8:	110004d9 	add	w25, w6, #0x1
   9b7ac:	1b018860 	msub	w0, w3, w1, w2
   9b7b0:	2a0303e2 	mov	w2, w3
   9b7b4:	0b000113 	add	w19, w8, w0
   9b7b8:	7100241f 	cmp	w0, #0x9
   9b7bc:	12001e73 	and	w19, w19, #0xff
   9b7c0:	12001c00 	and	w0, w0, #0xff
   9b7c4:	1a808273 	csel	w19, w19, w0, hi  // hi = pmore
   9b7c8:	1100c273 	add	w19, w19, #0x30
   9b7cc:	6b0100ff 	cmp	w7, w1
   9b7d0:	13001e73 	sxtb	w19, w19
   9b7d4:	7a5f2b22 	ccmp	w25, #0x1f, #0x2, cs  // cs = hs, nlast
   9b7d8:	38001493 	strb	w19, [x4], #1
   9b7dc:	54fffe09 	b.ls	9b79c <f_printf+0x16c>  // b.plast
   9b7e0:	340000a9 	cbz	w9, 9b7f4 <f_printf+0x1c4>
   9b7e4:	528005a0 	mov	w0, #0x2d                  	// #45
   9b7e8:	528005b3 	mov	w19, #0x2d                  	// #45
   9b7ec:	38394ac0 	strb	w0, [x22, w25, uxtw]
   9b7f0:	110008d9 	add	w25, w6, #0x2
   9b7f4:	f24000bf 	tst	x5, #0x1
   9b7f8:	5280061b 	mov	w27, #0x30                  	// #48
   9b7fc:	52800400 	mov	w0, #0x20                  	// #32
   9b800:	1100073a 	add	w26, w25, #0x1
   9b804:	2a1903fc 	mov	w28, w25
   9b808:	1a80137b 	csel	w27, w27, w0, ne  // ne = any
   9b80c:	360803e5 	tbz	w5, #1, 9b888 <f_printf+0x258>
   9b810:	51000739 	sub	w25, w25, #0x1
   9b814:	14000002 	b	9b81c <f_printf+0x1ec>
   9b818:	38f94ad3 	ldrsb	w19, [x22, w25, uxtw]
   9b81c:	2a1303e1 	mov	w1, w19
   9b820:	910283e0 	add	x0, sp, #0xa0
   9b824:	51000739 	sub	w25, w25, #0x1
   9b828:	97ffefb2 	bl	976f0 <putc_bfd>
   9b82c:	3100073f 	cmn	w25, #0x1
   9b830:	54ffff41 	b.ne	9b818 <f_printf+0x1e8>  // b.any
   9b834:	6b1c029f 	cmp	w20, w28
   9b838:	54000109 	b.ls	9b858 <f_printf+0x228>  // b.plast
   9b83c:	d503201f 	nop
   9b840:	2a1b03e1 	mov	w1, w27
   9b844:	910283e0 	add	x0, sp, #0xa0
   9b848:	97ffefaa 	bl	976f0 <putc_bfd>
   9b84c:	6b1a029f 	cmp	w20, w26
   9b850:	1100075a 	add	w26, w26, #0x1
   9b854:	54ffff68 	b.hi	9b840 <f_printf+0x210>  // b.pmore
   9b858:	aa1503e2 	mov	x2, x21
   9b85c:	38c01441 	ldrsb	w1, [x2], #1
   9b860:	35fff241 	cbnz	w1, 9b6a8 <f_printf+0x78>
   9b864:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b868:	a94363f7 	ldp	x23, x24, [sp, #48]
   9b86c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9b870:	a94573fb 	ldp	x27, x28, [sp, #80]
   9b874:	910283e0 	add	x0, sp, #0xa0
   9b878:	97ffefbe 	bl	97770 <putc_flush>
   9b87c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b880:	a8d27bfd 	ldp	x29, x30, [sp], #288
   9b884:	d65f03c0 	ret
   9b888:	6b14033f 	cmp	w25, w20
   9b88c:	54001882 	b.cs	9bb9c <f_printf+0x56c>  // b.hs, b.nlast
   9b890:	2a1b03e1 	mov	w1, w27
   9b894:	910283e0 	add	x0, sp, #0xa0
   9b898:	97ffef96 	bl	976f0 <putc_bfd>
   9b89c:	6b1a029f 	cmp	w20, w26
   9b8a0:	1100075a 	add	w26, w26, #0x1
   9b8a4:	54ffff61 	b.ne	9b890 <f_printf+0x260>  // b.any
   9b8a8:	1100069c 	add	w28, w20, #0x1
   9b8ac:	11000a9a 	add	w26, w20, #0x2
   9b8b0:	17ffffd8 	b	9b810 <f_printf+0x1e0>
   9b8b4:	37f810e4 	tbnz	w4, #31, 9bad0 <f_printf+0x4a0>
   9b8b8:	91002c41 	add	x1, x2, #0xb
   9b8bc:	927df021 	and	x1, x1, #0xfffffffffffffff8
   9b8c0:	f90033e1 	str	x1, [sp, #96]
   9b8c4:	b9400044 	ldr	w4, [x2]
   9b8c8:	52800141 	mov	w1, #0xa                   	// #10
   9b8cc:	2a0403e2 	mov	w2, w4
   9b8d0:	17ffffa7 	b	9b76c <f_printf+0x13c>
   9b8d4:	7101087f 	cmp	w3, #0x42
   9b8d8:	52800041 	mov	w1, #0x2                   	// #2
   9b8dc:	54000d01 	b.ne	9ba7c <f_printf+0x44c>  // b.any
   9b8e0:	b9407be4 	ldr	w4, [sp, #120]
   9b8e4:	f94033e2 	ldr	x2, [sp, #96]
   9b8e8:	3717f365 	tbnz	w5, #2, 9b754 <f_printf+0x124>
   9b8ec:	37f80e44 	tbnz	w4, #31, 9bab4 <f_printf+0x484>
   9b8f0:	91002c43 	add	x3, x2, #0xb
   9b8f4:	927df063 	and	x3, x3, #0xfffffffffffffff8
   9b8f8:	f90033e3 	str	x3, [sp, #96]
   9b8fc:	b9400042 	ldr	w2, [x2]
   9b900:	52800009 	mov	w9, #0x0                   	// #0
   9b904:	17ffffa1 	b	9b788 <f_printf+0x158>
   9b908:	7101547f 	cmp	w3, #0x55
   9b90c:	54000960 	b.eq	9ba38 <f_printf+0x408>  // b.none
   9b910:	7101607f 	cmp	w3, #0x58
   9b914:	52800201 	mov	w1, #0x10                  	// #16
   9b918:	54fffe40 	b.eq	9b8e0 <f_printf+0x2b0>  // b.none
   9b91c:	71014c7f 	cmp	w3, #0x53
   9b920:	54000ae1 	b.ne	9ba7c <f_printf+0x44c>  // b.any
   9b924:	b9407be1 	ldr	w1, [sp, #120]
   9b928:	f94033e0 	ldr	x0, [sp, #96]
   9b92c:	37f80ee1 	tbnz	w1, #31, 9bb08 <f_printf+0x4d8>
   9b930:	91003c01 	add	x1, x0, #0xf
   9b934:	121f00a5 	and	w5, w5, #0x2
   9b938:	f940001a 	ldr	x26, [x0]
   9b93c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   9b940:	f90033e1 	str	x1, [sp, #96]
   9b944:	39c00341 	ldrsb	w1, [x26]
   9b948:	34000f41 	cbz	w1, 9bb30 <f_printf+0x500>
   9b94c:	52800013 	mov	w19, #0x0                   	// #0
   9b950:	2a1303e2 	mov	w2, w19
   9b954:	11000673 	add	w19, w19, #0x1
   9b958:	38f34b40 	ldrsb	w0, [x26, w19, uxtw]
   9b95c:	35ffffa0 	cbnz	w0, 9b950 <f_printf+0x320>
   9b960:	11000859 	add	w25, w2, #0x2
   9b964:	34001105 	cbz	w5, 9bb84 <f_printf+0x554>
   9b968:	910283e0 	add	x0, sp, #0xa0
   9b96c:	97ffef61 	bl	976f0 <putc_bfd>
   9b970:	38c01f41 	ldrsb	w1, [x26, #1]!
   9b974:	35ffffa1 	cbnz	w1, 9b968 <f_printf+0x338>
   9b978:	6b13029f 	cmp	w20, w19
   9b97c:	54fff6e9 	b.ls	9b858 <f_printf+0x228>  // b.plast
   9b980:	52800401 	mov	w1, #0x20                  	// #32
   9b984:	910283e0 	add	x0, sp, #0xa0
   9b988:	97ffef5a 	bl	976f0 <putc_bfd>
   9b98c:	6b19029f 	cmp	w20, w25
   9b990:	11000739 	add	w25, w25, #0x1
   9b994:	54ffff68 	b.hi	9b980 <f_printf+0x350>  // b.pmore
   9b998:	aa1503e2 	mov	x2, x21
   9b99c:	38c01441 	ldrsb	w1, [x2], #1
   9b9a0:	35ffe841 	cbnz	w1, 9b6a8 <f_printf+0x78>
   9b9a4:	17ffffb0 	b	9b864 <f_printf+0x234>
   9b9a8:	910283e0 	add	x0, sp, #0xa0
   9b9ac:	aa0203f5 	mov	x21, x2
   9b9b0:	97ffef50 	bl	976f0 <putc_bfd>
   9b9b4:	aa1503e2 	mov	x2, x21
   9b9b8:	38c01441 	ldrsb	w1, [x2], #1
   9b9bc:	35ffe761 	cbnz	w1, 9b6a8 <f_printf+0x78>
   9b9c0:	17ffffa9 	b	9b864 <f_printf+0x234>
   9b9c4:	5100c001 	sub	w1, w0, #0x30
   9b9c8:	52800014 	mov	w20, #0x0                   	// #0
   9b9cc:	12001c21 	and	w1, w1, #0xff
   9b9d0:	7100243f 	cmp	w1, #0x9
   9b9d4:	54ffe908 	b.hi	9b6f4 <f_printf+0xc4>  // b.pmore
   9b9d8:	0b140a94 	add	w20, w20, w20, lsl #2
   9b9dc:	0b140414 	add	w20, w0, w20, lsl #1
   9b9e0:	38c016a0 	ldrsb	w0, [x21], #1
   9b9e4:	5100c294 	sub	w20, w20, #0x30
   9b9e8:	5100c001 	sub	w1, w0, #0x30
   9b9ec:	12001c21 	and	w1, w1, #0xff
   9b9f0:	7100243f 	cmp	w1, #0x9
   9b9f4:	54ffff29 	b.ls	9b9d8 <f_printf+0x3a8>  // b.plast
   9b9f8:	17ffff3f 	b	9b6f4 <f_printf+0xc4>
   9b9fc:	39c00aa0 	ldrsb	w0, [x21, #2]
   9ba00:	52800025 	mov	w5, #0x1                   	// #1
   9ba04:	91000eb5 	add	x21, x21, #0x3
   9ba08:	17ffff31 	b	9b6cc <f_printf+0x9c>
   9ba0c:	11002002 	add	w2, w0, #0x8
   9ba10:	7100005f 	cmp	w2, #0x0
   9ba14:	b9007be2 	str	w2, [sp, #120]
   9ba18:	54ffe64c 	b.gt	9b6e0 <f_printf+0xb0>
   9ba1c:	f94037e1 	ldr	x1, [sp, #104]
   9ba20:	8b20c021 	add	x1, x1, w0, sxtw
   9ba24:	17ffff32 	b	9b6ec <f_printf+0xbc>
   9ba28:	39c00aa0 	ldrsb	w0, [x21, #2]
   9ba2c:	52800045 	mov	w5, #0x2                   	// #2
   9ba30:	91000eb5 	add	x21, x21, #0x3
   9ba34:	17ffff26 	b	9b6cc <f_printf+0x9c>
   9ba38:	52800141 	mov	w1, #0xa                   	// #10
   9ba3c:	17ffffa9 	b	9b8e0 <f_printf+0x2b0>
   9ba40:	52800101 	mov	w1, #0x8                   	// #8
   9ba44:	17ffffa7 	b	9b8e0 <f_printf+0x2b0>
   9ba48:	b9407be0 	ldr	w0, [sp, #120]
   9ba4c:	f94033e1 	ldr	x1, [sp, #96]
   9ba50:	37f804e0 	tbnz	w0, #31, 9baec <f_printf+0x4bc>
   9ba54:	91002c20 	add	x0, x1, #0xb
   9ba58:	927df000 	and	x0, x0, #0xfffffffffffffff8
   9ba5c:	f90033e0 	str	x0, [sp, #96]
   9ba60:	39400021 	ldrb	w1, [x1]
   9ba64:	910283e0 	add	x0, sp, #0xa0
   9ba68:	97ffef22 	bl	976f0 <putc_bfd>
   9ba6c:	aa1503e2 	mov	x2, x21
   9ba70:	38c01441 	ldrsb	w1, [x2], #1
   9ba74:	35ffe1a1 	cbnz	w1, 9b6a8 <f_printf+0x78>
   9ba78:	17ffff7b 	b	9b864 <f_printf+0x234>
   9ba7c:	2a0003e1 	mov	w1, w0
   9ba80:	910283e0 	add	x0, sp, #0xa0
   9ba84:	97ffef1b 	bl	976f0 <putc_bfd>
   9ba88:	aa1503e2 	mov	x2, x21
   9ba8c:	38c01441 	ldrsb	w1, [x2], #1
   9ba90:	35ffe0c1 	cbnz	w1, 9b6a8 <f_printf+0x78>
   9ba94:	17ffff74 	b	9b864 <f_printf+0x234>
   9ba98:	11002086 	add	w6, w4, #0x8
   9ba9c:	710000df 	cmp	w6, #0x0
   9baa0:	b9007be6 	str	w6, [sp, #120]
   9baa4:	54ffe5ac 	b.gt	9b758 <f_printf+0x128>
   9baa8:	f94037e2 	ldr	x2, [sp, #104]
   9baac:	8b24c042 	add	x2, x2, w4, sxtw
   9bab0:	17ffff2d 	b	9b764 <f_printf+0x134>
   9bab4:	11002083 	add	w3, w4, #0x8
   9bab8:	7100007f 	cmp	w3, #0x0
   9babc:	b9007be3 	str	w3, [sp, #120]
   9bac0:	54fff18c 	b.gt	9b8f0 <f_printf+0x2c0>
   9bac4:	f94037e2 	ldr	x2, [sp, #104]
   9bac8:	8b24c042 	add	x2, x2, w4, sxtw
   9bacc:	17ffff8c 	b	9b8fc <f_printf+0x2cc>
   9bad0:	11002081 	add	w1, w4, #0x8
   9bad4:	7100003f 	cmp	w1, #0x0
   9bad8:	b9007be1 	str	w1, [sp, #120]
   9badc:	54ffeeec 	b.gt	9b8b8 <f_printf+0x288>
   9bae0:	f94037e2 	ldr	x2, [sp, #104]
   9bae4:	8b24c042 	add	x2, x2, w4, sxtw
   9bae8:	17ffff77 	b	9b8c4 <f_printf+0x294>
   9baec:	11002002 	add	w2, w0, #0x8
   9baf0:	7100005f 	cmp	w2, #0x0
   9baf4:	b9007be2 	str	w2, [sp, #120]
   9baf8:	54fffaec 	b.gt	9ba54 <f_printf+0x424>
   9bafc:	f94037e1 	ldr	x1, [sp, #104]
   9bb00:	8b20c021 	add	x1, x1, w0, sxtw
   9bb04:	17ffffd7 	b	9ba60 <f_printf+0x430>
   9bb08:	11002022 	add	w2, w1, #0x8
   9bb0c:	7100005f 	cmp	w2, #0x0
   9bb10:	b9007be2 	str	w2, [sp, #120]
   9bb14:	54fff0ec 	b.gt	9b930 <f_printf+0x300>
   9bb18:	f94037e0 	ldr	x0, [sp, #104]
   9bb1c:	8b21c000 	add	x0, x0, w1, sxtw
   9bb20:	121f00a5 	and	w5, w5, #0x2
   9bb24:	f940001a 	ldr	x26, [x0]
   9bb28:	39c00341 	ldrsb	w1, [x26]
   9bb2c:	35fff101 	cbnz	w1, 9b94c <f_printf+0x31c>
   9bb30:	52800039 	mov	w25, #0x1                   	// #1
   9bb34:	52800013 	mov	w19, #0x0                   	// #0
   9bb38:	35fff205 	cbnz	w5, 9b978 <f_printf+0x348>
   9bb3c:	34ffe8f4 	cbz	w20, 9b858 <f_printf+0x228>
   9bb40:	2a1903f3 	mov	w19, w25
   9bb44:	d503201f 	nop
   9bb48:	52800401 	mov	w1, #0x20                  	// #32
   9bb4c:	910283e0 	add	x0, sp, #0xa0
   9bb50:	97ffeee8 	bl	976f0 <putc_bfd>
   9bb54:	6b13029f 	cmp	w20, w19
   9bb58:	11000673 	add	w19, w19, #0x1
   9bb5c:	54ffff68 	b.hi	9bb48 <f_printf+0x518>  // b.pmore
   9bb60:	11000720 	add	w0, w25, #0x1
   9bb64:	6b19029f 	cmp	w20, w25
   9bb68:	39c00341 	ldrsb	w1, [x26]
   9bb6c:	4b190293 	sub	w19, w20, w25
   9bb70:	1a9f2273 	csel	w19, w19, wzr, cs  // cs = hs, nlast
   9bb74:	0b000273 	add	w19, w19, w0
   9bb78:	11000679 	add	w25, w19, #0x1
   9bb7c:	35ffef61 	cbnz	w1, 9b968 <f_printf+0x338>
   9bb80:	17ffff7e 	b	9b978 <f_printf+0x348>
   9bb84:	6b13029f 	cmp	w20, w19
   9bb88:	11000c42 	add	w2, w2, #0x3
   9bb8c:	54fffda8 	b.hi	9bb40 <f_printf+0x510>  // b.pmore
   9bb90:	2a1903f3 	mov	w19, w25
   9bb94:	2a0203f9 	mov	w25, w2
   9bb98:	17ffff74 	b	9b968 <f_printf+0x338>
   9bb9c:	2a1a03fc 	mov	w28, w26
   9bba0:	11000b3a 	add	w26, w25, #0x2
   9bba4:	17ffff1b 	b	9b810 <f_printf+0x1e0>
	...

000000000009bbb0 <disk_status>:
   9bbb0:	12001c00 	and	w0, w0, #0xff
   9bbb4:	71000c1f 	cmp	w0, #0x3
   9bbb8:	540000e8 	b.hi	9bbd4 <disk_status+0x24>  // b.pmore
   9bbbc:	f00000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9bbc0:	9139e021 	add	x1, x1, #0xe78
   9bbc4:	f860d820 	ldr	x0, [x1, w0, sxtw #3]
   9bbc8:	f100001f 	cmp	x0, #0x0
   9bbcc:	1a9f17e0 	cset	w0, eq  // eq = none
   9bbd0:	d65f03c0 	ret
   9bbd4:	52800020 	mov	w0, #0x1                   	// #1
   9bbd8:	d65f03c0 	ret
   9bbdc:	d503201f 	nop

000000000009bbe0 <disk_initialize>:
   9bbe0:	12001c00 	and	w0, w0, #0xff
   9bbe4:	71000c1f 	cmp	w0, #0x3
   9bbe8:	54000069 	b.ls	9bbf4 <disk_initialize+0x14>  // b.plast
   9bbec:	52800020 	mov	w0, #0x1                   	// #1
   9bbf0:	d65f03c0 	ret
   9bbf4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9bbf8:	910003fd 	mov	x29, sp
   9bbfc:	f9000bf3 	str	x19, [sp, #16]
   9bc00:	93407c13 	sxtw	x19, w0
   9bc04:	9400056f 	bl	9d1c0 <CDeviceNameService::Get()>
   9bc08:	f00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9bc0c:	91086021 	add	x1, x1, #0x218
   9bc10:	f8737821 	ldr	x1, [x1, x19, lsl #3]
   9bc14:	52800022 	mov	w2, #0x1                   	// #1
   9bc18:	9400052a 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   9bc1c:	f00000c2 	adrp	x2, b6000 <s_OldInfo+0x68>
   9bc20:	9139e042 	add	x2, x2, #0xe78
   9bc24:	aa0003e1 	mov	x1, x0
   9bc28:	f100001f 	cmp	x0, #0x0
   9bc2c:	1a9f17e0 	cset	w0, eq  // eq = none
   9bc30:	f8337841 	str	x1, [x2, x19, lsl #3]
   9bc34:	f9400bf3 	ldr	x19, [sp, #16]
   9bc38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bc3c:	d65f03c0 	ret

000000000009bc40 <disk_read>:
   9bc40:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9bc44:	12001c00 	and	w0, w0, #0xff
   9bc48:	910003fd 	mov	x29, sp
   9bc4c:	71000c1f 	cmp	w0, #0x3
   9bc50:	a9025bf5 	stp	x21, x22, [sp, #32]
   9bc54:	52800096 	mov	w22, #0x4                   	// #4
   9bc58:	540004c8 	b.hi	9bcf0 <disk_read+0xb0>  // b.pmore
   9bc5c:	f00000d6 	adrp	x22, b6000 <s_OldInfo+0x68>
   9bc60:	9139e2d6 	add	x22, x22, #0xe78
   9bc64:	f860dad5 	ldr	x21, [x22, w0, sxtw #3]
   9bc68:	b4000755 	cbz	x21, 9bd50 <disk_read+0x110>
   9bc6c:	f240043f 	tst	x1, #0x3
   9bc70:	a90153f3 	stp	x19, x20, [sp, #16]
   9bc74:	aa0103f3 	mov	x19, x1
   9bc78:	53175874 	lsl	w20, w3, #9
   9bc7c:	a90363f7 	stp	x23, x24, [sp, #48]
   9bc80:	aa0203f7 	mov	x23, x2
   9bc84:	aa0103f8 	mov	x24, x1
   9bc88:	f90023f9 	str	x25, [sp, #64]
   9bc8c:	53175879 	lsl	w25, w3, #9
   9bc90:	54000381 	b.ne	9bd00 <disk_read+0xc0>  // b.any
   9bc94:	f94002a2 	ldr	x2, [x21]
   9bc98:	d377dae1 	lsl	x1, x23, #9
   9bc9c:	aa1503e0 	mov	x0, x21
   9bca0:	52800036 	mov	w22, #0x1                   	// #1
   9bca4:	f9401042 	ldr	x2, [x2, #32]
   9bca8:	d63f0040 	blr	x2
   9bcac:	f94002a3 	ldr	x3, [x21]
   9bcb0:	aa1503e0 	mov	x0, x21
   9bcb4:	aa1803e1 	mov	x1, x24
   9bcb8:	aa1403e2 	mov	x2, x20
   9bcbc:	f9400863 	ldr	x3, [x3, #16]
   9bcc0:	d63f0060 	blr	x3
   9bcc4:	37f80380 	tbnz	w0, #31, 9bd34 <disk_read+0xf4>
   9bcc8:	eb13031f 	cmp	x24, x19
   9bccc:	52800016 	mov	w22, #0x0                   	// #0
   9bcd0:	54000320 	b.eq	9bd34 <disk_read+0xf4>  // b.none
   9bcd4:	aa1403e2 	mov	x2, x20
   9bcd8:	aa1803e1 	mov	x1, x24
   9bcdc:	aa1303e0 	mov	x0, x19
   9bce0:	94002406 	bl	a4cf8 <memcpy>
   9bce4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bce8:	a94363f7 	ldp	x23, x24, [sp, #48]
   9bcec:	f94023f9 	ldr	x25, [sp, #64]
   9bcf0:	2a1603e0 	mov	w0, w22
   9bcf4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bcf8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9bcfc:	d65f03c0 	ret
   9bd00:	b9402ac0 	ldr	w0, [x22, #40]
   9bd04:	f94012d8 	ldr	x24, [x22, #32]
   9bd08:	6b19001f 	cmp	w0, w25
   9bd0c:	54fffc42 	b.cs	9bc94 <disk_read+0x54>  // b.hs, b.nlast
   9bd10:	b4000078 	cbz	x24, 9bd1c <disk_read+0xdc>
   9bd14:	aa1803e0 	mov	x0, x24
   9bd18:	94002672 	bl	a56e0 <operator delete[](void*)>
   9bd1c:	aa1403e0 	mov	x0, x20
   9bd20:	b9002ad9 	str	w25, [x22, #40]
   9bd24:	9400265f 	bl	a56a0 <operator new[](unsigned long)>
   9bd28:	aa0003f8 	mov	x24, x0
   9bd2c:	f90012c0 	str	x0, [x22, #32]
   9bd30:	17ffffd9 	b	9bc94 <disk_read+0x54>
   9bd34:	2a1603e0 	mov	w0, w22
   9bd38:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bd3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bd40:	a94363f7 	ldp	x23, x24, [sp, #48]
   9bd44:	f94023f9 	ldr	x25, [sp, #64]
   9bd48:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9bd4c:	d65f03c0 	ret
   9bd50:	52800076 	mov	w22, #0x3                   	// #3
   9bd54:	17ffffe7 	b	9bcf0 <disk_read+0xb0>
   9bd58:	d503201f 	nop
   9bd5c:	d503201f 	nop

000000000009bd60 <disk_write>:
   9bd60:	12001c00 	and	w0, w0, #0xff
   9bd64:	71000c1f 	cmp	w0, #0x3
   9bd68:	54000608 	b.hi	9be28 <disk_write+0xc8>  // b.pmore
   9bd6c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9bd70:	910003fd 	mov	x29, sp
   9bd74:	a9025bf5 	stp	x21, x22, [sp, #32]
   9bd78:	f00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9bd7c:	9139e2b5 	add	x21, x21, #0xe78
   9bd80:	f860dab6 	ldr	x22, [x21, w0, sxtw #3]
   9bd84:	b4000576 	cbz	x22, 9be30 <disk_write+0xd0>
   9bd88:	f240043f 	tst	x1, #0x3
   9bd8c:	a90153f3 	stp	x19, x20, [sp, #16]
   9bd90:	aa0103f4 	mov	x20, x1
   9bd94:	53175873 	lsl	w19, w3, #9
   9bd98:	a90363f7 	stp	x23, x24, [sp, #48]
   9bd9c:	aa0203f7 	mov	x23, x2
   9bda0:	53175878 	lsl	w24, w3, #9
   9bda4:	54000241 	b.ne	9bdec <disk_write+0x8c>  // b.any
   9bda8:	d377dae1 	lsl	x1, x23, #9
   9bdac:	aa1603e0 	mov	x0, x22
   9bdb0:	f94002c2 	ldr	x2, [x22]
   9bdb4:	f9401042 	ldr	x2, [x2, #32]
   9bdb8:	d63f0040 	blr	x2
   9bdbc:	f94002c3 	ldr	x3, [x22]
   9bdc0:	aa1403e1 	mov	x1, x20
   9bdc4:	aa1603e0 	mov	x0, x22
   9bdc8:	aa1303e2 	mov	x2, x19
   9bdcc:	f9400c63 	ldr	x3, [x3, #24]
   9bdd0:	d63f0060 	blr	x3
   9bdd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bdd8:	531f7c00 	lsr	w0, w0, #31
   9bddc:	a94363f7 	ldp	x23, x24, [sp, #48]
   9bde0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bde4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9bde8:	d65f03c0 	ret
   9bdec:	b9402aa1 	ldr	w1, [x21, #40]
   9bdf0:	f94012a0 	ldr	x0, [x21, #32]
   9bdf4:	6b18003f 	cmp	w1, w24
   9bdf8:	540000e2 	b.cs	9be14 <disk_write+0xb4>  // b.hs, b.nlast
   9bdfc:	b4000040 	cbz	x0, 9be04 <disk_write+0xa4>
   9be00:	94002638 	bl	a56e0 <operator delete[](void*)>
   9be04:	aa1303e0 	mov	x0, x19
   9be08:	b9002ab8 	str	w24, [x21, #40]
   9be0c:	94002625 	bl	a56a0 <operator new[](unsigned long)>
   9be10:	f90012a0 	str	x0, [x21, #32]
   9be14:	aa1403e1 	mov	x1, x20
   9be18:	aa1303e2 	mov	x2, x19
   9be1c:	940023b7 	bl	a4cf8 <memcpy>
   9be20:	f94012b4 	ldr	x20, [x21, #32]
   9be24:	17ffffe1 	b	9bda8 <disk_write+0x48>
   9be28:	52800080 	mov	w0, #0x4                   	// #4
   9be2c:	d65f03c0 	ret
   9be30:	52800060 	mov	w0, #0x3                   	// #3
   9be34:	17ffffeb 	b	9bde0 <disk_write+0x80>
   9be38:	d503201f 	nop
   9be3c:	d503201f 	nop

000000000009be40 <disk_ioctl>:
   9be40:	12001c21 	and	w1, w1, #0xff
   9be44:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9be48:	910003fd 	mov	x29, sp
   9be4c:	7100083f 	cmp	w1, #0x2
   9be50:	54000100 	b.eq	9be70 <disk_ioctl+0x30>  // b.none
   9be54:	71001c3f 	cmp	w1, #0x7
   9be58:	54000180 	b.eq	9be88 <disk_ioctl+0x48>  // b.none
   9be5c:	7100003f 	cmp	w1, #0x0
   9be60:	1a9f07e0 	cset	w0, ne  // ne = any
   9be64:	531e7400 	lsl	w0, w0, #2
   9be68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9be6c:	d65f03c0 	ret
   9be70:	b4000522 	cbz	x2, 9bf14 <disk_ioctl+0xd4>
   9be74:	52804001 	mov	w1, #0x200                 	// #512
   9be78:	52800000 	mov	w0, #0x0                   	// #0
   9be7c:	79000041 	strh	w1, [x2]
   9be80:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9be84:	d65f03c0 	ret
   9be88:	a90153f3 	stp	x19, x20, [sp, #16]
   9be8c:	92401c13 	and	x19, x0, #0xff
   9be90:	52800080 	mov	w0, #0x4                   	// #4
   9be94:	71000e7f 	cmp	w19, #0x3
   9be98:	54000228 	b.hi	9bedc <disk_ioctl+0x9c>  // b.pmore
   9be9c:	f00000d4 	adrp	x20, b6000 <s_OldInfo+0x68>
   9bea0:	9139e294 	add	x20, x20, #0xe78
   9bea4:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   9bea8:	b4000200 	cbz	x0, 9bee8 <disk_ioctl+0xa8>
   9beac:	f9400001 	ldr	x1, [x0]
   9beb0:	f9401421 	ldr	x1, [x1, #40]
   9beb4:	d63f0020 	blr	x1
   9beb8:	2a0003e1 	mov	w1, w0
   9bebc:	52800020 	mov	w0, #0x1                   	// #1
   9bec0:	72001c3f 	tst	w1, #0xff
   9bec4:	540000c0 	b.eq	9bedc <disk_ioctl+0x9c>  // b.none
   9bec8:	52800000 	mov	w0, #0x0                   	// #0
   9becc:	f8337a9f 	str	xzr, [x20, x19, lsl #3]
   9bed0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bed4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bed8:	d65f03c0 	ret
   9bedc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bee0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bee4:	d65f03c0 	ret
   9bee8:	940004b6 	bl	9d1c0 <CDeviceNameService::Get()>
   9beec:	f00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9bef0:	91086021 	add	x1, x1, #0x218
   9bef4:	52800022 	mov	w2, #0x1                   	// #1
   9bef8:	f8737821 	ldr	x1, [x1, x19, lsl #3]
   9befc:	94000471 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   9bf00:	f8337a80 	str	x0, [x20, x19, lsl #3]
   9bf04:	b5fffd40 	cbnz	x0, 9beac <disk_ioctl+0x6c>
   9bf08:	52800060 	mov	w0, #0x3                   	// #3
   9bf0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bf10:	17ffffd6 	b	9be68 <disk_ioctl+0x28>
   9bf14:	f00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9bf18:	f00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9bf1c:	a90153f3 	stp	x19, x20, [sp, #16]
   9bf20:	9107a021 	add	x1, x1, #0x1e8
   9bf24:	9107e000 	add	x0, x0, #0x1f8
   9bf28:	52801b42 	mov	w2, #0xda                  	// #218
   9bf2c:	940001d5 	bl	9c680 <assertion_failed>

000000000009bf30 <ff_cre_syncobj>:
   9bf30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9bf34:	d2800080 	mov	x0, #0x4                   	// #4
   9bf38:	910003fd 	mov	x29, sp
   9bf3c:	f9000bf3 	str	x19, [sp, #16]
   9bf40:	aa0103f3 	mov	x19, x1
   9bf44:	940025cf 	bl	a5680 <operator new(unsigned long)>
   9bf48:	aa0003e2 	mov	x2, x0
   9bf4c:	52800020 	mov	w0, #0x1                   	// #1
   9bf50:	f9000262 	str	x2, [x19]
   9bf54:	b900005f 	str	wzr, [x2]
   9bf58:	f9400bf3 	ldr	x19, [sp, #16]
   9bf5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bf60:	d65f03c0 	ret
   9bf64:	d503201f 	nop
   9bf68:	d503201f 	nop
   9bf6c:	d503201f 	nop

000000000009bf70 <ff_del_syncobj>:
   9bf70:	b4000100 	cbz	x0, 9bf90 <ff_del_syncobj+0x20>
   9bf74:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bf78:	d2800081 	mov	x1, #0x4                   	// #4
   9bf7c:	910003fd 	mov	x29, sp
   9bf80:	940025e4 	bl	a5710 <operator delete(void*, unsigned long)>
   9bf84:	52800020 	mov	w0, #0x1                   	// #1
   9bf88:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bf8c:	d65f03c0 	ret
   9bf90:	52800020 	mov	w0, #0x1                   	// #1
   9bf94:	d65f03c0 	ret
   9bf98:	d503201f 	nop
   9bf9c:	d503201f 	nop

000000000009bfa0 <ff_req_grant>:
   9bfa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bfa4:	910003fd 	mov	x29, sp
   9bfa8:	b4000140 	cbz	x0, 9bfd0 <ff_req_grant+0x30>
   9bfac:	b9400000 	ldr	w0, [x0]
   9bfb0:	35000080 	cbnz	w0, 9bfc0 <ff_req_grant+0x20>
   9bfb4:	52800020 	mov	w0, #0x1                   	// #1
   9bfb8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bfbc:	d65f03c0 	ret
   9bfc0:	940028c4 	bl	a62d0 <EnterCritical>
   9bfc4:	52800020 	mov	w0, #0x1                   	// #1
   9bfc8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bfcc:	d65f03c0 	ret
   9bfd0:	f00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9bfd4:	f00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9bfd8:	9108e021 	add	x1, x1, #0x238
   9bfdc:	91092000 	add	x0, x0, #0x248
   9bfe0:	52800ca2 	mov	w2, #0x65                  	// #101
   9bfe4:	940001a7 	bl	9c680 <assertion_failed>
   9bfe8:	d503201f 	nop
   9bfec:	d503201f 	nop

000000000009bff0 <ff_rel_grant>:
   9bff0:	b40000a0 	cbz	x0, 9c004 <ff_rel_grant+0x14>
   9bff4:	b9400000 	ldr	w0, [x0]
   9bff8:	35000040 	cbnz	w0, 9c000 <ff_rel_grant+0x10>
   9bffc:	d65f03c0 	ret
   9c000:	140028e4 	b	a6390 <LeaveCritical>
   9c004:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c008:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9c00c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c010:	9108e021 	add	x1, x1, #0x238
   9c014:	910003fd 	mov	x29, sp
   9c018:	91092000 	add	x0, x0, #0x248
   9c01c:	52801042 	mov	w2, #0x82                  	// #130
   9c020:	94000198 	bl	9c680 <assertion_failed>
   9c024:	d503201f 	nop
   9c028:	d503201f 	nop
   9c02c:	d503201f 	nop

000000000009c030 <ff_memalloc>:
   9c030:	2a0003e0 	mov	w0, w0
   9c034:	1400014b 	b	9c560 <malloc>
   9c038:	d503201f 	nop
   9c03c:	d503201f 	nop

000000000009c040 <ff_memfree>:
   9c040:	14000150 	b	9c580 <free>
   9c044:	d503201f 	nop
   9c048:	d503201f 	nop
   9c04c:	d503201f 	nop

000000000009c050 <get_fattime>:
   9c050:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9c054:	910003fd 	mov	x29, sp
   9c058:	94002102 	bl	a4460 <CTimer::Get()>
   9c05c:	94001e15 	bl	a38b0 <CTimer::GetTime() const>
   9c060:	34000900 	cbz	w0, 9c180 <get_fattime+0x130>
   9c064:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c068:	52911136 	mov	w22, #0x8889                	// #34953
   9c06c:	72b11116 	movk	w22, #0x8888, lsl #16
   9c070:	2a0003f5 	mov	w21, w0
   9c074:	a90363f7 	stp	x23, x24, [sp, #48]
   9c078:	9bb67c17 	umull	x23, w0, w22
   9c07c:	d365fef7 	lsr	x23, x23, #37
   9c080:	a90153f3 	stp	x19, x20, [sp, #16]
   9c084:	52955573 	mov	w19, #0xaaab                	// #43691
   9c088:	72b55553 	movk	w19, #0xaaaa, lsl #16
   9c08c:	5280f654 	mov	w20, #0x7b2                 	// #1970
   9c090:	9bb67ef6 	umull	x22, w23, w22
   9c094:	d365fed6 	lsr	x22, x22, #37
   9c098:	9bb37ed3 	umull	x19, w22, w19
   9c09c:	d364fe73 	lsr	x19, x19, #36
   9c0a0:	14000003 	b	9c0ac <get_fattime+0x5c>
   9c0a4:	4b020273 	sub	w19, w19, w2
   9c0a8:	11000694 	add	w20, w20, #0x1
   9c0ac:	2a1403e0 	mov	w0, w20
   9c0b0:	940020bc 	bl	a43a0 <CTimer::IsLeapYear(unsigned int)>
   9c0b4:	7100001f 	cmp	w0, #0x0
   9c0b8:	1a9f07e2 	cset	w2, ne  // ne = any
   9c0bc:	1105b442 	add	w2, w2, #0x16d
   9c0c0:	6b02027f 	cmp	w19, w2
   9c0c4:	54ffff02 	b.cs	9c0a4 <get_fattime+0x54>  // b.hs, b.nlast
   9c0c8:	711eee9f 	cmp	w20, #0x7bb
   9c0cc:	54000549 	b.ls	9c174 <get_fattime+0x124>  // b.plast
   9c0d0:	52800018 	mov	w24, #0x0                   	// #0
   9c0d4:	14000002 	b	9c0dc <get_fattime+0x8c>
   9c0d8:	4b000273 	sub	w19, w19, w0
   9c0dc:	2a1803e0 	mov	w0, w24
   9c0e0:	2a1403e1 	mov	w1, w20
   9c0e4:	940020c3 	bl	a43f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>
   9c0e8:	6b00027f 	cmp	w19, w0
   9c0ec:	11000718 	add	w24, w24, #0x1
   9c0f0:	54ffff42 	b.cs	9c0d8 <get_fattime+0x88>  // b.hs, b.nlast
   9c0f4:	52955561 	mov	w1, #0xaaab                	// #43691
   9c0f8:	72b55541 	movk	w1, #0xaaaa, lsl #16
   9c0fc:	52911122 	mov	w2, #0x8889                	// #34953
   9c100:	72b11102 	movk	w2, #0x8888, lsl #16
   9c104:	9ba17ec1 	umull	x1, w22, w1
   9c108:	11000673 	add	w19, w19, #0x1
   9c10c:	511ef280 	sub	w0, w20, #0x7bc
   9c110:	9ba27ea3 	umull	x3, w21, w2
   9c114:	9ba27ee2 	umull	x2, w23, w2
   9c118:	d364fc21 	lsr	x1, x1, #36
   9c11c:	2a181673 	orr	w19, w19, w24, lsl #5
   9c120:	d365fc65 	lsr	x5, x3, #37
   9c124:	0b010421 	add	w1, w1, w1, lsl #1
   9c128:	d365fc44 	lsr	x4, x2, #37
   9c12c:	531c6ca3 	lsl	w3, w5, #4
   9c130:	2a002660 	orr	w0, w19, w0, lsl #9
   9c134:	4b050063 	sub	w3, w3, w5
   9c138:	531c6c82 	lsl	w2, w4, #4
   9c13c:	4b010ed6 	sub	w22, w22, w1, lsl #3
   9c140:	4b030ab5 	sub	w21, w21, w3, lsl #2
   9c144:	4b040041 	sub	w1, w2, w4
   9c148:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c14c:	4b010af7 	sub	w23, w23, w1, lsl #2
   9c150:	531552d6 	lsl	w22, w22, #11
   9c154:	53017eb5 	lsr	w21, w21, #1
   9c158:	2a0042c0 	orr	w0, w22, w0, lsl #16
   9c15c:	2a1716b7 	orr	w23, w21, w23, lsl #5
   9c160:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c164:	2a170000 	orr	w0, w0, w23
   9c168:	a94363f7 	ldp	x23, x24, [sp, #48]
   9c16c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c170:	d65f03c0 	ret
   9c174:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c178:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c17c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9c180:	52800000 	mov	w0, #0x0                   	// #0
   9c184:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c188:	d65f03c0 	ret
   9c18c:	00000000 	.inst	0x00000000 ; undefined

000000000009c190 <ff_uni2oem>:
   9c190:	7101fc1f 	cmp	w0, #0x7f
   9c194:	12003c21 	and	w1, w1, #0xffff
   9c198:	54000249 	b.ls	9c1e0 <ff_uni2oem+0x50>  // b.plast
   9c19c:	710d483f 	cmp	w1, #0x352
   9c1a0:	529fffe1 	mov	w1, #0xffff                	// #65535
   9c1a4:	7a410002 	ccmp	w0, w1, #0x2, eq  // eq = none
   9c1a8:	54000208 	b.hi	9c1e8 <ff_uni2oem+0x58>  // b.pmore
   9c1ac:	d00000a3 	adrp	x3, b2000 <vtable for CPartition>
   9c1b0:	91096063 	add	x3, x3, #0x258
   9c1b4:	d2800001 	mov	x1, #0x0                   	// #0
   9c1b8:	528018e2 	mov	w2, #0xc7                  	// #199
   9c1bc:	14000004 	b	9c1cc <ff_uni2oem+0x3c>
   9c1c0:	f102003f 	cmp	x1, #0x80
   9c1c4:	54000120 	b.eq	9c1e8 <ff_uni2oem+0x58>  // b.none
   9c1c8:	78617862 	ldrh	w2, [x3, x1, lsl #1]
   9c1cc:	6b00005f 	cmp	w2, w0
   9c1d0:	12003c22 	and	w2, w1, #0xffff
   9c1d4:	91000421 	add	x1, x1, #0x1
   9c1d8:	54ffff41 	b.ne	9c1c0 <ff_uni2oem+0x30>  // b.any
   9c1dc:	11020040 	add	w0, w2, #0x80
   9c1e0:	12003c00 	and	w0, w0, #0xffff
   9c1e4:	d65f03c0 	ret
   9c1e8:	52800000 	mov	w0, #0x0                   	// #0
   9c1ec:	d65f03c0 	ret

000000000009c1f0 <ff_oem2uni>:
   9c1f0:	12003c00 	and	w0, w0, #0xffff
   9c1f4:	12003c21 	and	w1, w1, #0xffff
   9c1f8:	7101fc1f 	cmp	w0, #0x7f
   9c1fc:	540000c9 	b.ls	9c214 <ff_oem2uni+0x24>  // b.plast
   9c200:	7103fc1f 	cmp	w0, #0xff
   9c204:	52806a42 	mov	w2, #0x352                 	// #850
   9c208:	7a429020 	ccmp	w1, w2, #0x0, ls  // ls = plast
   9c20c:	54000060 	b.eq	9c218 <ff_oem2uni+0x28>  // b.none
   9c210:	52800000 	mov	w0, #0x0                   	// #0
   9c214:	d65f03c0 	ret
   9c218:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c21c:	91096021 	add	x1, x1, #0x258
   9c220:	8b202420 	add	x0, x1, w0, uxth #1
   9c224:	78500000 	ldurh	w0, [x0, #-256]
   9c228:	d65f03c0 	ret
   9c22c:	d503201f 	nop

000000000009c230 <ff_wtoupper>:
   9c230:	529fffe1 	mov	w1, #0xffff                	// #65535
   9c234:	6b01001f 	cmp	w0, w1
   9c238:	54000328 	b.hi	9c29c <ff_wtoupper+0x6c>  // b.pmore
   9c23c:	713ffc1f 	cmp	w0, #0xfff
   9c240:	d00000a2 	adrp	x2, b2000 <vtable for CPartition>
   9c244:	91096042 	add	x2, x2, #0x258
   9c248:	12003c05 	and	w5, w0, #0xffff
   9c24c:	540002a9 	b.ls	9c2a0 <ff_wtoupper+0x70>  // b.plast
   9c250:	910be042 	add	x2, x2, #0x2f8
   9c254:	5283afa3 	mov	w3, #0x1d7d                	// #7549
   9c258:	7100007f 	cmp	w3, #0x0
   9c25c:	91001042 	add	x2, x2, #0x4
   9c260:	7a4310a0 	ccmp	w5, w3, #0x0, ne  // ne = any
   9c264:	540001a3 	b.cc	9c298 <ff_wtoupper+0x68>  // b.lo, b.ul, b.last
   9c268:	785fe041 	ldurh	w1, [x2, #-2]
   9c26c:	0b210064 	add	w4, w3, w1, uxtb
   9c270:	6b04001f 	cmp	w0, w4
   9c274:	53087c24 	lsr	w4, w1, #8
   9c278:	12001c21 	and	w1, w1, #0xff
   9c27c:	540001eb 	b.lt	9c2b8 <ff_wtoupper+0x88>  // b.tstop
   9c280:	34000164 	cbz	w4, 9c2ac <ff_wtoupper+0x7c>
   9c284:	79400043 	ldrh	w3, [x2]
   9c288:	7100007f 	cmp	w3, #0x0
   9c28c:	91001042 	add	x2, x2, #0x4
   9c290:	7a4310a0 	ccmp	w5, w3, #0x0, ne  // ne = any
   9c294:	54fffea2 	b.cs	9c268 <ff_wtoupper+0x38>  // b.hs, b.nlast
   9c298:	2a0503e0 	mov	w0, w5
   9c29c:	d65f03c0 	ret
   9c2a0:	91040042 	add	x2, x2, #0x100
   9c2a4:	52800c23 	mov	w3, #0x61                  	// #97
   9c2a8:	17ffffec 	b	9c258 <ff_wtoupper+0x28>
   9c2ac:	8b210442 	add	x2, x2, w1, uxtb #1
   9c2b0:	79400043 	ldrh	w3, [x2]
   9c2b4:	17fffff5 	b	9c288 <ff_wtoupper+0x58>
   9c2b8:	7100109f 	cmp	w4, #0x4
   9c2bc:	540006c0 	b.eq	9c394 <ff_wtoupper+0x164>  // b.none
   9c2c0:	54000169 	b.ls	9c2ec <ff_wtoupper+0xbc>  // b.plast
   9c2c4:	71001c9f 	cmp	w4, #0x7
   9c2c8:	540005e0 	b.eq	9c384 <ff_wtoupper+0x154>  // b.none
   9c2cc:	54000349 	b.ls	9c334 <ff_wtoupper+0x104>  // b.plast
   9c2d0:	12838be0 	mov	w0, #0xffffe3a0            	// #-7264
   9c2d4:	7100209f 	cmp	w4, #0x8
   9c2d8:	0b0000a0 	add	w0, w5, w0
   9c2dc:	12003c00 	and	w0, w0, #0xffff
   9c2e0:	1a850005 	csel	w5, w0, w5, eq  // eq = none
   9c2e4:	2a0503e0 	mov	w0, w5
   9c2e8:	17ffffed 	b	9c29c <ff_wtoupper+0x6c>
   9c2ec:	7100089f 	cmp	w4, #0x2
   9c2f0:	54000420 	b.eq	9c374 <ff_wtoupper+0x144>  // b.none
   9c2f4:	540000e9 	b.ls	9c310 <ff_wtoupper+0xe0>  // b.plast
   9c2f8:	510080a0 	sub	w0, w5, #0x20
   9c2fc:	71000c9f 	cmp	w4, #0x3
   9c300:	12003c00 	and	w0, w0, #0xffff
   9c304:	1a850005 	csel	w5, w0, w5, eq  // eq = none
   9c308:	2a0503e0 	mov	w0, w5
   9c30c:	17ffffe4 	b	9c29c <ff_wtoupper+0x6c>
   9c310:	340002a4 	cbz	w4, 9c364 <ff_wtoupper+0x134>
   9c314:	7100049f 	cmp	w4, #0x1
   9c318:	54fffc01 	b.ne	9c298 <ff_wtoupper+0x68>  // b.any
   9c31c:	4b0300a0 	sub	w0, w5, w3
   9c320:	12000000 	and	w0, w0, #0x1
   9c324:	4b0000a5 	sub	w5, w5, w0
   9c328:	12003ca5 	and	w5, w5, #0xffff
   9c32c:	2a0503e0 	mov	w0, w5
   9c330:	17ffffdb 	b	9c29c <ff_wtoupper+0x6c>
   9c334:	7100149f 	cmp	w4, #0x5
   9c338:	540000e0 	b.eq	9c354 <ff_wtoupper+0x124>  // b.none
   9c33c:	7100189f 	cmp	w4, #0x6
   9c340:	54fffac1 	b.ne	9c298 <ff_wtoupper+0x68>  // b.any
   9c344:	110020a5 	add	w5, w5, #0x8
   9c348:	12003ca5 	and	w5, w5, #0xffff
   9c34c:	2a0503e0 	mov	w0, w5
   9c350:	17ffffd3 	b	9c29c <ff_wtoupper+0x6c>
   9c354:	510068a5 	sub	w5, w5, #0x1a
   9c358:	12003ca5 	and	w5, w5, #0xffff
   9c35c:	2a0503e0 	mov	w0, w5
   9c360:	17ffffcf 	b	9c29c <ff_wtoupper+0x6c>
   9c364:	4b030000 	sub	w0, w0, w3
   9c368:	7860d845 	ldrh	w5, [x2, w0, sxtw #1]
   9c36c:	2a0503e0 	mov	w0, w5
   9c370:	17ffffcb 	b	9c29c <ff_wtoupper+0x6c>
   9c374:	510040a5 	sub	w5, w5, #0x10
   9c378:	12003ca5 	and	w5, w5, #0xffff
   9c37c:	2a0503e0 	mov	w0, w5
   9c380:	17ffffc7 	b	9c29c <ff_wtoupper+0x6c>
   9c384:	510140a5 	sub	w5, w5, #0x50
   9c388:	12003ca5 	and	w5, w5, #0xffff
   9c38c:	2a0503e0 	mov	w0, w5
   9c390:	17ffffc3 	b	9c29c <ff_wtoupper+0x6c>
   9c394:	5100c0a5 	sub	w5, w5, #0x30
   9c398:	12003ca5 	and	w5, w5, #0xffff
   9c39c:	2a0503e0 	mov	w0, w5
   9c3a0:	17ffffbf 	b	9c29c <ff_wtoupper+0x6c>
	...

000000000009c3b0 <CActLED::CActLED(bool)>:
   9c3b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9c3b4:	910003fd 	mov	x29, sp
   9c3b8:	d00000c2 	adrp	x2, b6000 <s_OldInfo+0x68>
   9c3bc:	a90153f3 	stp	x19, x20, [sp, #16]
   9c3c0:	aa0003f4 	mov	x20, x0
   9c3c4:	f90013f5 	str	x21, [sp, #32]
   9c3c8:	12001c35 	and	w21, w1, #0xff
   9c3cc:	a9007c1f 	stp	xzr, xzr, [x0]
   9c3d0:	f9075440 	str	x0, [x2, #3752]
   9c3d4:	94000d93 	bl	9fa20 <CMachineInfo::Get()>
   9c3d8:	94000c92 	bl	9f620 <CMachineInfo::GetActLEDInfo() const>
   9c3dc:	2a0003f3 	mov	w19, w0
   9c3e0:	36380213 	tbz	w19, #7, 9c420 <CActLED::CActLED(bool)+0x70>
   9c3e4:	d2800300 	mov	x0, #0x18                  	// #24
   9c3e8:	940024a6 	bl	a5680 <operator new(unsigned long)>
   9c3ec:	12001661 	and	w1, w19, #0x3f
   9c3f0:	d27a0273 	eor	x19, x19, #0x40
   9c3f4:	2a1503e2 	mov	w2, w21
   9c3f8:	d3461a73 	ubfx	x19, x19, #6, #1
   9c3fc:	aa0003f5 	mov	x21, x0
   9c400:	94002258 	bl	a4d60 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   9c404:	aa1403e0 	mov	x0, x20
   9c408:	f9000695 	str	x21, [x20, #8]
   9c40c:	39004293 	strb	w19, [x20, #16]
   9c410:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c414:	f94013f5 	ldr	x21, [sp, #32]
   9c418:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9c41c:	14000021 	b	9c4a0 <CActLED::Off()>
   9c420:	d2800900 	mov	x0, #0x48                  	// #72
   9c424:	94002497 	bl	a5680 <operator new(unsigned long)>
   9c428:	12001661 	and	w1, w19, #0x3f
   9c42c:	d27a0273 	eor	x19, x19, #0x40
   9c430:	aa0003f5 	mov	x21, x0
   9c434:	d2800003 	mov	x3, #0x0                   	// #0
   9c438:	52800022 	mov	w2, #0x1                   	// #1
   9c43c:	d3461a73 	ubfx	x19, x19, #6, #1
   9c440:	94000428 	bl	9d4e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   9c444:	aa1403e0 	mov	x0, x20
   9c448:	f9000295 	str	x21, [x20]
   9c44c:	39004293 	strb	w19, [x20, #16]
   9c450:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c454:	f94013f5 	ldr	x21, [sp, #32]
   9c458:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9c45c:	14000011 	b	9c4a0 <CActLED::Off()>

000000000009c460 <CActLED::~CActLED()>:
   9c460:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9c464:	f907541f 	str	xzr, [x0, #3752]
   9c468:	d65f03c0 	ret
   9c46c:	d503201f 	nop

000000000009c470 <CActLED::On()>:
   9c470:	aa0003e1 	mov	x1, x0
   9c474:	f9400000 	ldr	x0, [x0]
   9c478:	b4000060 	cbz	x0, 9c484 <CActLED::On()+0x14>
   9c47c:	39404021 	ldrb	w1, [x1, #16]
   9c480:	140004cc 	b	9d7b0 <CGPIOPin::Write(unsigned int)>
   9c484:	f9400420 	ldr	x0, [x1, #8]
   9c488:	b4000060 	cbz	x0, 9c494 <CActLED::On()+0x24>
   9c48c:	39404021 	ldrb	w1, [x1, #16]
   9c490:	1400228c 	b	a4ec0 <CVirtualGPIOPin::Write(unsigned int)>
   9c494:	d65f03c0 	ret
   9c498:	d503201f 	nop
   9c49c:	d503201f 	nop

000000000009c4a0 <CActLED::Off()>:
   9c4a0:	aa0003e1 	mov	x1, x0
   9c4a4:	f9400000 	ldr	x0, [x0]
   9c4a8:	b4000080 	cbz	x0, 9c4b8 <CActLED::Off()+0x18>
   9c4ac:	39404021 	ldrb	w1, [x1, #16]
   9c4b0:	52000021 	eor	w1, w1, #0x1
   9c4b4:	140004bf 	b	9d7b0 <CGPIOPin::Write(unsigned int)>
   9c4b8:	f9400420 	ldr	x0, [x1, #8]
   9c4bc:	b4000080 	cbz	x0, 9c4cc <CActLED::Off()+0x2c>
   9c4c0:	39404021 	ldrb	w1, [x1, #16]
   9c4c4:	52000021 	eor	w1, w1, #0x1
   9c4c8:	1400227e 	b	a4ec0 <CVirtualGPIOPin::Write(unsigned int)>
   9c4cc:	d65f03c0 	ret

000000000009c4d0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   9c4d0:	34000381 	cbz	w1, 9c540 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x70>
   9c4d4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9c4d8:	910003fd 	mov	x29, sp
   9c4dc:	a90153f3 	stp	x19, x20, [sp, #16]
   9c4e0:	aa0003f4 	mov	x20, x0
   9c4e4:	52800033 	mov	w19, #0x1                   	// #1
   9c4e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c4ec:	2a0103f5 	mov	w21, w1
   9c4f0:	2a0203f6 	mov	w22, w2
   9c4f4:	f9001bf7 	str	x23, [sp, #48]
   9c4f8:	2a0303f7 	mov	w23, w3
   9c4fc:	d503201f 	nop
   9c500:	aa1403e0 	mov	x0, x20
   9c504:	11000673 	add	w19, w19, #0x1
   9c508:	97ffffda 	bl	9c470 <CActLED::On()>
   9c50c:	2a1603e0 	mov	w0, w22
   9c510:	94001f98 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   9c514:	aa1403e0 	mov	x0, x20
   9c518:	97ffffe2 	bl	9c4a0 <CActLED::Off()>
   9c51c:	2a1703e0 	mov	w0, w23
   9c520:	94001f94 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   9c524:	6b1302bf 	cmp	w21, w19
   9c528:	54fffec2 	b.cs	9c500 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x30>  // b.hs, b.nlast
   9c52c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c530:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c534:	f9401bf7 	ldr	x23, [sp, #48]
   9c538:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c53c:	d65f03c0 	ret
   9c540:	d65f03c0 	ret
   9c544:	d503201f 	nop
   9c548:	d503201f 	nop
   9c54c:	d503201f 	nop

000000000009c550 <CActLED::Get()>:
   9c550:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9c554:	f9475400 	ldr	x0, [x0, #3752]
   9c558:	d65f03c0 	ret
   9c55c:	00000000 	.inst	0x00000000 ; undefined

000000000009c560 <malloc>:
   9c560:	d00000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9c564:	f947c822 	ldr	x2, [x1, #3984]
   9c568:	aa0003e1 	mov	x1, x0
   9c56c:	91006040 	add	x0, x2, #0x18
   9c570:	140024a8 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   9c574:	d503201f 	nop
   9c578:	d503201f 	nop
   9c57c:	d503201f 	nop

000000000009c580 <free>:
   9c580:	aa0003e1 	mov	x1, x0
   9c584:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   9c588:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9c58c:	eb02003f 	cmp	x1, x2
   9c590:	f947c800 	ldr	x0, [x0, #3984]
   9c594:	54000068 	b.hi	9c5a0 <free+0x20>  // b.pmore
   9c598:	91006000 	add	x0, x0, #0x18
   9c59c:	14002501 	b	a59a0 <CHeapAllocator::Free(void*)>
   9c5a0:	91064000 	add	x0, x0, #0x190
   9c5a4:	140024ff 	b	a59a0 <CHeapAllocator::Free(void*)>
   9c5a8:	d503201f 	nop
   9c5ac:	d503201f 	nop

000000000009c5b0 <calloc>:
   9c5b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c5b4:	910003fd 	mov	x29, sp
   9c5b8:	a90153f3 	stp	x19, x20, [sp, #16]
   9c5bc:	9b007c33 	mul	x19, x1, x0
   9c5c0:	f100027f 	cmp	x19, #0x0
   9c5c4:	9a9f1673 	csinc	x19, x19, xzr, ne  // ne = any
   9c5c8:	eb13001f 	cmp	x0, x19
   9c5cc:	540001e8 	b.hi	9c608 <calloc+0x58>  // b.pmore
   9c5d0:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9c5d4:	aa1303e1 	mov	x1, x19
   9c5d8:	f947c800 	ldr	x0, [x0, #3984]
   9c5dc:	91006000 	add	x0, x0, #0x18
   9c5e0:	9400248c 	bl	a5810 <CHeapAllocator::Allocate(unsigned long)>
   9c5e4:	aa0003f4 	mov	x20, x0
   9c5e8:	b4000080 	cbz	x0, 9c5f8 <calloc+0x48>
   9c5ec:	aa1303e2 	mov	x2, x19
   9c5f0:	52800001 	mov	w1, #0x0                   	// #0
   9c5f4:	94001fa7 	bl	a4490 <memset>
   9c5f8:	aa1403e0 	mov	x0, x20
   9c5fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c600:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c604:	d65f03c0 	ret
   9c608:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c60c:	91184021 	add	x1, x1, #0x610
   9c610:	91004020 	add	x0, x1, #0x10
   9c614:	52800562 	mov	w2, #0x2b                  	// #43
   9c618:	9400001a 	bl	9c680 <assertion_failed>
   9c61c:	d503201f 	nop

000000000009c620 <realloc>:
   9c620:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   9c624:	d00000c3 	adrp	x3, b6000 <s_OldInfo+0x68>
   9c628:	eb02001f 	cmp	x0, x2
   9c62c:	f947c863 	ldr	x3, [x3, #3984]
   9c630:	aa0103e2 	mov	x2, x1
   9c634:	aa0003e1 	mov	x1, x0
   9c638:	54000068 	b.hi	9c644 <realloc+0x24>  // b.pmore
   9c63c:	91006060 	add	x0, x3, #0x18
   9c640:	1400250c 	b	a5a70 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   9c644:	91064060 	add	x0, x3, #0x190
   9c648:	1400250a 	b	a5a70 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   9c64c:	d503201f 	nop

000000000009c650 <palloc>:
   9c650:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9c654:	f947c800 	ldr	x0, [x0, #3984]
   9c658:	910c2000 	add	x0, x0, #0x308
   9c65c:	1400255d 	b	a5bd0 <CPageAllocator::Allocate()>

000000000009c660 <pfree>:
   9c660:	d00000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9c664:	f947c822 	ldr	x2, [x1, #3984]
   9c668:	aa0003e1 	mov	x1, x0
   9c66c:	910c2040 	add	x0, x2, #0x308
   9c670:	1400258c 	b	a5ca0 <CPageAllocator::Free(void*)>
	...

000000000009c680 <assertion_failed>:
   9c680:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9c684:	910003fd 	mov	x29, sp
   9c688:	a90153f3 	stp	x19, x20, [sp, #16]
   9c68c:	aa0103f3 	mov	x19, x1
   9c690:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c694:	aa0003f5 	mov	x21, x0
   9c698:	2a0203f6 	mov	w22, w2
   9c69c:	910003f4 	mov	x20, sp
   9c6a0:	94002eb4 	bl	a8170 <CInterruptSystem::DisableFIQ()>
   9c6a4:	d50341ff 	msr	daifclr, #0x1
   9c6a8:	9100c3e0 	add	x0, sp, #0x30
   9c6ac:	940015e1 	bl	a1e30 <CString::CString()>
   9c6b0:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c6b4:	aa1303e2 	mov	x2, x19
   9c6b8:	2a1603e3 	mov	w3, w22
   9c6bc:	9118e021 	add	x1, x1, #0x638
   9c6c0:	9100c3e0 	add	x0, sp, #0x30
   9c6c4:	94001b4b 	bl	a33f0 <CString::Format(char const*, ...)>
   9c6c8:	9100c3e0 	add	x0, sp, #0x30
   9c6cc:	940015f5 	bl	a1ea0 <CString::operator char const*() const>
   9c6d0:	aa0003e1 	mov	x1, x0
   9c6d4:	aa1403e0 	mov	x0, x20
   9c6d8:	9400018a 	bl	9cd00 <debug_stacktrace(unsigned long const*, char const*)>
   9c6dc:	9400097d 	bl	9ecd0 <CLogger::Get()>
   9c6e0:	aa0003f3 	mov	x19, x0
   9c6e4:	9100c3e0 	add	x0, sp, #0x30
   9c6e8:	940015ee 	bl	a1ea0 <CString::operator char const*() const>
   9c6ec:	d00000a3 	adrp	x3, b2000 <vtable for CPartition>
   9c6f0:	aa0003e1 	mov	x1, x0
   9c6f4:	aa1503e4 	mov	x4, x21
   9c6f8:	aa1303e0 	mov	x0, x19
   9c6fc:	91190063 	add	x3, x3, #0x640
   9c700:	52800002 	mov	w2, #0x0                   	// #0
   9c704:	940008af 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c708:	14000000 	b	9c708 <assertion_failed+0x88>
   9c70c:	00000000 	.inst	0x00000000 ; undefined

000000000009c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   9c710:	2a0103e2 	mov	w2, w1
   9c714:	52800101 	mov	w1, #0x8                   	// #8
   9c718:	1400309a 	b	a8980 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   9c71c:	d503201f 	nop

000000000009c720 <CBcmPropertyTags::~CBcmPropertyTags()>:
   9c720:	1400309c 	b	a8990 <CBcmMailBox::~CBcmMailBox()>
   9c724:	d503201f 	nop
   9c728:	d503201f 	nop
   9c72c:	d503201f 	nop

000000000009c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   9c730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c734:	910003fd 	mov	x29, sp
   9c738:	f9000bf3 	str	x19, [sp, #16]
   9c73c:	aa0203f3 	mov	x19, x2
   9c740:	b4000262 	cbz	x2, 9c78c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x5c>
   9c744:	71003c7f 	cmp	w3, #0xf
   9c748:	2a0303e2 	mov	w2, w3
   9c74c:	540002a9 	b.ls	9c7a0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x70>  // b.plast
   9c750:	12007884 	and	w4, w4, #0x7fffffff
   9c754:	51003063 	sub	w3, w3, #0xc
   9c758:	29000e61 	stp	w1, w3, [x19]
   9c75c:	aa1303e1 	mov	x1, x19
   9c760:	b9000a64 	str	w4, [x19, #8]
   9c764:	94000017 	bl	9c7c0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   9c768:	72001c00 	ands	w0, w0, #0xff
   9c76c:	540000a0 	b.eq	9c780 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x50>  // b.none
   9c770:	b9400a61 	ldr	w1, [x19, #8]
   9c774:	72007821 	ands	w1, w1, #0x7fffffff
   9c778:	1a9f07e0 	cset	w0, ne  // ne = any
   9c77c:	b9000a61 	str	w1, [x19, #8]
   9c780:	f9400bf3 	ldr	x19, [sp, #16]
   9c784:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c788:	d65f03c0 	ret
   9c78c:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c790:	91196021 	add	x1, x1, #0x658
   9c794:	91006020 	add	x0, x1, #0x18
   9c798:	52800662 	mov	w2, #0x33                  	// #51
   9c79c:	97ffffb9 	bl	9c680 <assertion_failed>
   9c7a0:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c7a4:	91196021 	add	x1, x1, #0x658
   9c7a8:	9100a020 	add	x0, x1, #0x28
   9c7ac:	52800682 	mov	w2, #0x34                  	// #52
   9c7b0:	97ffffb4 	bl	9c680 <assertion_failed>
   9c7b4:	d503201f 	nop
   9c7b8:	d503201f 	nop
   9c7bc:	d503201f 	nop

000000000009c7c0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   9c7c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9c7c4:	910003fd 	mov	x29, sp
   9c7c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9c7cc:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c7d0:	a90363f7 	stp	x23, x24, [sp, #48]
   9c7d4:	f90023f9 	str	x25, [sp, #64]
   9c7d8:	b4000641 	cbz	x1, 9c8a0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   9c7dc:	71003c5f 	cmp	w2, #0xf
   9c7e0:	2a0203f3 	mov	w19, w2
   9c7e4:	54000689 	b.ls	9c8b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf4>  // b.plast
   9c7e8:	f240067f 	tst	x19, #0x3
   9c7ec:	11003059 	add	w25, w2, #0xc
   9c7f0:	540006c1 	b.ne	9c8c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x108>  // b.any
   9c7f4:	aa0003f6 	mov	x22, x0
   9c7f8:	52800000 	mov	w0, #0x0                   	// #0
   9c7fc:	aa0103f5 	mov	x21, x1
   9c800:	2a0203f8 	mov	w24, w2
   9c804:	94002697 	bl	a6260 <CMemorySystem::GetCoherentPage(unsigned int)>
   9c808:	aa0003f4 	mov	x20, x0
   9c80c:	91002017 	add	x23, x0, #0x8
   9c810:	aa1803e2 	mov	x2, x24
   9c814:	aa1503e1 	mov	x1, x21
   9c818:	aa1703e0 	mov	x0, x23
   9c81c:	29007e99 	stp	w25, wzr, [x20]
   9c820:	94002136 	bl	a4cf8 <memcpy>
   9c824:	b8334aff 	str	wzr, [x23, w19, uxtw]
   9c828:	d5033f9f 	dsb	sy
   9c82c:	32020693 	orr	w19, w20, #0xc0000000
   9c830:	aa1603e0 	mov	x0, x22
   9c834:	2a1303e1 	mov	w1, w19
   9c838:	9400305a 	bl	a89a0 <CBcmMailBox::WriteRead(unsigned int)>
   9c83c:	6b13001f 	cmp	w0, w19
   9c840:	54000100 	b.eq	9c860 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>  // b.none
   9c844:	52800000 	mov	w0, #0x0                   	// #0
   9c848:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c84c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c850:	a94363f7 	ldp	x23, x24, [sp, #48]
   9c854:	f94023f9 	ldr	x25, [sp, #64]
   9c858:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9c85c:	d65f03c0 	ret
   9c860:	d5033fbf 	dmb	sy
   9c864:	b9400681 	ldr	w1, [x20, #4]
   9c868:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   9c86c:	6b00003f 	cmp	w1, w0
   9c870:	54fffea1 	b.ne	9c844 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>  // b.any
   9c874:	aa1803e2 	mov	x2, x24
   9c878:	aa1703e1 	mov	x1, x23
   9c87c:	aa1503e0 	mov	x0, x21
   9c880:	9400211e 	bl	a4cf8 <memcpy>
   9c884:	52800020 	mov	w0, #0x1                   	// #1
   9c888:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c88c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c890:	a94363f7 	ldp	x23, x24, [sp, #48]
   9c894:	f94023f9 	ldr	x25, [sp, #64]
   9c898:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9c89c:	d65f03c0 	ret
   9c8a0:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c8a4:	91196021 	add	x1, x1, #0x658
   9c8a8:	91014020 	add	x0, x1, #0x50
   9c8ac:	52800962 	mov	w2, #0x4b                  	// #75
   9c8b0:	97ffff74 	bl	9c680 <assertion_failed>
   9c8b4:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c8b8:	91196021 	add	x1, x1, #0x658
   9c8bc:	91018020 	add	x0, x1, #0x60
   9c8c0:	52800982 	mov	w2, #0x4c                  	// #76
   9c8c4:	97ffff6f 	bl	9c680 <assertion_failed>
   9c8c8:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c8cc:	91196021 	add	x1, x1, #0x658
   9c8d0:	91024020 	add	x0, x1, #0x90
   9c8d4:	528009c2 	mov	w2, #0x4e                  	// #78
   9c8d8:	97ffff6a 	bl	9c680 <assertion_failed>
   9c8dc:	00000000 	.inst	0x00000000 ; undefined

000000000009c8e0 <CClassAllocator::~CClassAllocator()>:
   9c8e0:	aa0003e1 	mov	x1, x0
   9c8e4:	f9400c00 	ldr	x0, [x0, #24]
   9c8e8:	f900103f 	str	xzr, [x1, #32]
   9c8ec:	b4000040 	cbz	x0, 9c8f4 <CClassAllocator::~CClassAllocator()+0x14>
   9c8f0:	17ffff24 	b	9c580 <free>
   9c8f4:	d65f03c0 	ret
   9c8f8:	d503201f 	nop
   9c8fc:	d503201f 	nop

000000000009c900 <CClassAllocator::Init(unsigned long, unsigned int)>:
   9c900:	f100003f 	cmp	x1, #0x0
   9c904:	9a9f1421 	csinc	x1, x1, xzr, ne  // ne = any
   9c908:	91007c21 	add	x1, x1, #0x1f
   9c90c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c910:	927c6c21 	and	x1, x1, #0xfffffff0
   9c914:	910003fd 	mov	x29, sp
   9c918:	f9000bf3 	str	x19, [sp, #16]
   9c91c:	f9000001 	str	x1, [x0]
   9c920:	34000482 	cbz	w2, 9c9b0 <CClassAllocator::Init(unsigned long, unsigned int)+0xb0>
   9c924:	aa0003f3 	mov	x19, x0
   9c928:	2a0203e0 	mov	w0, w2
   9c92c:	9b017c00 	mul	x0, x0, x1
   9c930:	b9000a62 	str	w2, [x19, #8]
   9c934:	97ffff0b 	bl	9c560 <malloc>
   9c938:	f9000e60 	str	x0, [x19, #24]
   9c93c:	b4000320 	cbz	x0, 9c9a0 <CClassAllocator::Init(unsigned long, unsigned int)+0xa0>
   9c940:	f2400c1f 	tst	x0, #0xf
   9c944:	54000421 	b.ne	9c9c8 <CClassAllocator::Init(unsigned long, unsigned int)+0xc8>  // b.any
   9c948:	b9400a61 	ldr	w1, [x19, #8]
   9c94c:	34000241 	cbz	w1, 9c994 <CClassAllocator::Init(unsigned long, unsigned int)+0x94>
   9c950:	f9400266 	ldr	x6, [x19]
   9c954:	528a6a05 	mov	w5, #0x5350                	// #21328
   9c958:	72a9e845 	movk	w5, #0x4f42, lsl #16
   9c95c:	52800003 	mov	w3, #0x0                   	// #0
   9c960:	f9401262 	ldr	x2, [x19, #32]
   9c964:	d503201f 	nop
   9c968:	2a0303e1 	mov	w1, w3
   9c96c:	aa0203e4 	mov	x4, x2
   9c970:	11000463 	add	w3, w3, #0x1
   9c974:	9b067c21 	mul	x1, x1, x6
   9c978:	8b010002 	add	x2, x0, x1
   9c97c:	b8216805 	str	w5, [x0, x1]
   9c980:	b9400a61 	ldr	w1, [x19, #8]
   9c984:	f9000444 	str	x4, [x2, #8]
   9c988:	f9001262 	str	x2, [x19, #32]
   9c98c:	6b03003f 	cmp	w1, w3
   9c990:	54fffec8 	b.hi	9c968 <CClassAllocator::Init(unsigned long, unsigned int)+0x68>  // b.pmore
   9c994:	f9400bf3 	ldr	x19, [sp, #16]
   9c998:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c99c:	d65f03c0 	ret
   9c9a0:	b9000a7f 	str	wzr, [x19, #8]
   9c9a4:	f9400bf3 	ldr	x19, [sp, #16]
   9c9a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c9ac:	d65f03c0 	ret
   9c9b0:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c9b4:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9c9b8:	911c0021 	add	x1, x1, #0x700
   9c9bc:	911c6000 	add	x0, x0, #0x718
   9c9c0:	52800aa2 	mov	w2, #0x55                  	// #85
   9c9c4:	97ffff2f 	bl	9c680 <assertion_failed>
   9c9c8:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9c9cc:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9c9d0:	911c0021 	add	x1, x1, #0x700
   9c9d4:	911cc000 	add	x0, x0, #0x730
   9c9d8:	52800be2 	mov	w2, #0x5f                  	// #95
   9c9dc:	97ffff29 	bl	9c680 <assertion_failed>

000000000009c9e0 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>:
   9c9e0:	52800025 	mov	w5, #0x1                   	// #1
   9c9e4:	a9017c03 	stp	x3, xzr, [x0, #16]
   9c9e8:	f900101f 	str	xzr, [x0, #32]
   9c9ec:	3900a01f 	strb	wzr, [x0, #40]
   9c9f0:	b9002c05 	str	w5, [x0, #44]
   9c9f4:	17ffffc3 	b	9c900 <CClassAllocator::Init(unsigned long, unsigned int)>
   9c9f8:	d503201f 	nop
   9c9fc:	d503201f 	nop

000000000009ca00 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>:
   9ca00:	52800026 	mov	w6, #0x1                   	// #1
   9ca04:	a9017c04 	stp	x4, xzr, [x0, #16]
   9ca08:	f900101f 	str	xzr, [x0, #32]
   9ca0c:	3900a006 	strb	w6, [x0, #40]
   9ca10:	b9002c03 	str	w3, [x0, #44]
   9ca14:	17ffffbb 	b	9c900 <CClassAllocator::Init(unsigned long, unsigned int)>
   9ca18:	d503201f 	nop
   9ca1c:	d503201f 	nop

000000000009ca20 <CClassAllocator::Allocate()>:
   9ca20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ca24:	910003fd 	mov	x29, sp
   9ca28:	a90153f3 	stp	x19, x20, [sp, #16]
   9ca2c:	aa0003f3 	mov	x19, x0
   9ca30:	3940a000 	ldrb	w0, [x0, #40]
   9ca34:	34000060 	cbz	w0, 9ca40 <CClassAllocator::Allocate()+0x20>
   9ca38:	b9402e60 	ldr	w0, [x19, #44]
   9ca3c:	350002a0 	cbnz	w0, 9ca90 <CClassAllocator::Allocate()+0x70>
   9ca40:	f9401274 	ldr	x20, [x19, #32]
   9ca44:	b4000374 	cbz	x20, 9cab0 <CClassAllocator::Allocate()+0x90>
   9ca48:	b9400281 	ldr	w1, [x20]
   9ca4c:	528a6a00 	mov	w0, #0x5350                	// #21328
   9ca50:	72a9e840 	movk	w0, #0x4f42, lsl #16
   9ca54:	6b00003f 	cmp	w1, w0
   9ca58:	540003e1 	b.ne	9cad4 <CClassAllocator::Allocate()+0xb4>  // b.any
   9ca5c:	f9400681 	ldr	x1, [x20, #8]
   9ca60:	3940a260 	ldrb	w0, [x19, #40]
   9ca64:	f9001261 	str	x1, [x19, #32]
   9ca68:	f900069f 	str	xzr, [x20, #8]
   9ca6c:	350000a0 	cbnz	w0, 9ca80 <CClassAllocator::Allocate()+0x60>
   9ca70:	91004280 	add	x0, x20, #0x10
   9ca74:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ca78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ca7c:	d65f03c0 	ret
   9ca80:	b9402e60 	ldr	w0, [x19, #44]
   9ca84:	34ffff60 	cbz	w0, 9ca70 <CClassAllocator::Allocate()+0x50>
   9ca88:	94002642 	bl	a6390 <LeaveCritical>
   9ca8c:	17fffff9 	b	9ca70 <CClassAllocator::Allocate()+0x50>
   9ca90:	94002610 	bl	a62d0 <EnterCritical>
   9ca94:	f9401274 	ldr	x20, [x19, #32]
   9ca98:	b5fffd94 	cbnz	x20, 9ca48 <CClassAllocator::Allocate()+0x28>
   9ca9c:	3940a260 	ldrb	w0, [x19, #40]
   9caa0:	34000080 	cbz	w0, 9cab0 <CClassAllocator::Allocate()+0x90>
   9caa4:	b9402e60 	ldr	w0, [x19, #44]
   9caa8:	34000040 	cbz	w0, 9cab0 <CClassAllocator::Allocate()+0x90>
   9caac:	94002639 	bl	a6390 <LeaveCritical>
   9cab0:	94000888 	bl	9ecd0 <CLogger::Get()>
   9cab4:	d00000a3 	adrp	x3, b2000 <vtable for CPartition>
   9cab8:	b9400a64 	ldr	w4, [x19, #8]
   9cabc:	52800002 	mov	w2, #0x0                   	// #0
   9cac0:	911dc063 	add	x3, x3, #0x770
   9cac4:	f9400a61 	ldr	x1, [x19, #16]
   9cac8:	940007be 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9cacc:	d2800000 	mov	x0, #0x0                   	// #0
   9cad0:	17ffffe9 	b	9ca74 <CClassAllocator::Allocate()+0x54>
   9cad4:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cad8:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cadc:	911c0021 	add	x1, x1, #0x700
   9cae0:	911e8000 	add	x0, x0, #0x7a0
   9cae4:	52801042 	mov	w2, #0x82                  	// #130
   9cae8:	97fffee6 	bl	9c680 <assertion_failed>
   9caec:	d503201f 	nop

000000000009caf0 <CClassAllocator::Free(void*)>:
   9caf0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9caf4:	910003fd 	mov	x29, sp
   9caf8:	a90157f4 	stp	x20, x21, [sp, #16]
   9cafc:	b4000421 	cbz	x1, 9cb80 <CClassAllocator::Free(void*)+0x90>
   9cb00:	aa0003f4 	mov	x20, x0
   9cb04:	528a6a00 	mov	w0, #0x5350                	// #21328
   9cb08:	72a9e840 	movk	w0, #0x4f42, lsl #16
   9cb0c:	b85f0022 	ldur	w2, [x1, #-16]
   9cb10:	d1004035 	sub	x21, x1, #0x10
   9cb14:	6b00005f 	cmp	w2, w0
   9cb18:	54000401 	b.ne	9cb98 <CClassAllocator::Free(void*)+0xa8>  // b.any
   9cb1c:	f85f8020 	ldur	x0, [x1, #-8]
   9cb20:	b5000480 	cbnz	x0, 9cbb0 <CClassAllocator::Free(void*)+0xc0>
   9cb24:	3940a280 	ldrb	w0, [x20, #40]
   9cb28:	350000e0 	cbnz	w0, 9cb44 <CClassAllocator::Free(void*)+0x54>
   9cb2c:	f9401280 	ldr	x0, [x20, #32]
   9cb30:	f81f8020 	stur	x0, [x1, #-8]
   9cb34:	f9001295 	str	x21, [x20, #32]
   9cb38:	a94157f4 	ldp	x20, x21, [sp, #16]
   9cb3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9cb40:	d65f03c0 	ret
   9cb44:	b9402e80 	ldr	w0, [x20, #44]
   9cb48:	34ffff20 	cbz	w0, 9cb2c <CClassAllocator::Free(void*)+0x3c>
   9cb4c:	f90017e1 	str	x1, [sp, #40]
   9cb50:	940025e0 	bl	a62d0 <EnterCritical>
   9cb54:	f9401282 	ldr	x2, [x20, #32]
   9cb58:	f94017e1 	ldr	x1, [sp, #40]
   9cb5c:	3940a280 	ldrb	w0, [x20, #40]
   9cb60:	f81f8022 	stur	x2, [x1, #-8]
   9cb64:	f9001295 	str	x21, [x20, #32]
   9cb68:	34fffe80 	cbz	w0, 9cb38 <CClassAllocator::Free(void*)+0x48>
   9cb6c:	b9402e80 	ldr	w0, [x20, #44]
   9cb70:	34fffe40 	cbz	w0, 9cb38 <CClassAllocator::Free(void*)+0x48>
   9cb74:	a94157f4 	ldp	x20, x21, [sp, #16]
   9cb78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9cb7c:	14002605 	b	a6390 <LeaveCritical>
   9cb80:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cb84:	b0000080 	adrp	x0, ad000 <From+0x4c0>
   9cb88:	911c0021 	add	x1, x1, #0x700
   9cb8c:	911ee000 	add	x0, x0, #0x7b8
   9cb90:	52801202 	mov	w2, #0x90                  	// #144
   9cb94:	97fffebb 	bl	9c680 <assertion_failed>
   9cb98:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cb9c:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cba0:	911c0021 	add	x1, x1, #0x700
   9cba4:	911f0000 	add	x0, x0, #0x7c0
   9cba8:	52801282 	mov	w2, #0x94                  	// #148
   9cbac:	97fffeb5 	bl	9c680 <assertion_failed>
   9cbb0:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cbb4:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cbb8:	911c0021 	add	x1, x1, #0x700
   9cbbc:	911f8000 	add	x0, x0, #0x7e0
   9cbc0:	528012a2 	mov	w2, #0x95                  	// #149
   9cbc4:	97fffeaf 	bl	9c680 <assertion_failed>
	...

000000000009cbd0 <debug_hexdump(void const*, unsigned int, char const*)>:
   9cbd0:	d102c3ff 	sub	sp, sp, #0xb0
   9cbd4:	f100005f 	cmp	x2, #0x0
   9cbd8:	a9077bfd 	stp	x29, x30, [sp, #112]
   9cbdc:	9101c3fd 	add	x29, sp, #0x70
   9cbe0:	a9095bf5 	stp	x21, x22, [sp, #144]
   9cbe4:	aa0003f6 	mov	x22, x0
   9cbe8:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cbec:	91224000 	add	x0, x0, #0x890
   9cbf0:	9a820015 	csel	x21, x0, x2, eq  // eq = none
   9cbf4:	a90853f3 	stp	x19, x20, [sp, #128]
   9cbf8:	2a0103f4 	mov	w20, w1
   9cbfc:	94000835 	bl	9ecd0 <CLogger::Get()>
   9cc00:	d00000a3 	adrp	x3, b2000 <vtable for CPartition>
   9cc04:	aa1503e1 	mov	x1, x21
   9cc08:	aa1603e5 	mov	x5, x22
   9cc0c:	2a1403e4 	mov	w4, w20
   9cc10:	911fe063 	add	x3, x3, #0x7f8
   9cc14:	52800082 	mov	w2, #0x4                   	// #4
   9cc18:	9400076a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9cc1c:	34000674 	cbz	w20, 9cce8 <debug_hexdump(void const*, unsigned int, char const*)+0x118>
   9cc20:	927c6e85 	and	x5, x20, #0xfffffff0
   9cc24:	aa1603f3 	mov	x19, x22
   9cc28:	f90053f7 	str	x23, [sp, #160]
   9cc2c:	910040a5 	add	x5, x5, #0x10
   9cc30:	0b160294 	add	w20, w20, w22
   9cc34:	d00000b7 	adrp	x23, b2000 <vtable for CPartition>
   9cc38:	912082f7 	add	x23, x23, #0x820
   9cc3c:	8b0502d6 	add	x22, x22, x5
   9cc40:	14000003 	b	9cc4c <debug_hexdump(void const*, unsigned int, char const*)+0x7c>
   9cc44:	6b13029f 	cmp	w20, w19
   9cc48:	540004e0 	b.eq	9cce4 <debug_hexdump(void const*, unsigned int, char const*)+0x114>  // b.none
   9cc4c:	94000821 	bl	9ecd0 <CLogger::Get()>
   9cc50:	39401665 	ldrb	w5, [x19, #5]
   9cc54:	12003e64 	and	w4, w19, #0xffff
   9cc58:	aa1703e3 	mov	x3, x23
   9cc5c:	52800082 	mov	w2, #0x4                   	// #4
   9cc60:	aa1503e1 	mov	x1, x21
   9cc64:	39401267 	ldrb	w7, [x19, #4]
   9cc68:	91004273 	add	x19, x19, #0x10
   9cc6c:	385f3266 	ldurb	w6, [x19, #-13]
   9cc70:	b90013e5 	str	w5, [sp, #16]
   9cc74:	385ff265 	ldurb	w5, [x19, #-1]
   9cc78:	b9000be7 	str	w7, [sp, #8]
   9cc7c:	385fe267 	ldurb	w7, [x19, #-2]
   9cc80:	b90003e6 	str	w6, [sp]
   9cc84:	385fd266 	ldurb	w6, [x19, #-3]
   9cc88:	b90063e5 	str	w5, [sp, #96]
   9cc8c:	385fc265 	ldurb	w5, [x19, #-4]
   9cc90:	b9005be7 	str	w7, [sp, #88]
   9cc94:	385fb267 	ldurb	w7, [x19, #-5]
   9cc98:	b90053e6 	str	w6, [sp, #80]
   9cc9c:	385fa266 	ldurb	w6, [x19, #-6]
   9cca0:	b9004be5 	str	w5, [sp, #72]
   9cca4:	385f9265 	ldurb	w5, [x19, #-7]
   9cca8:	b90043e7 	str	w7, [sp, #64]
   9ccac:	385f8267 	ldurb	w7, [x19, #-8]
   9ccb0:	b9003be6 	str	w6, [sp, #56]
   9ccb4:	385f7266 	ldurb	w6, [x19, #-9]
   9ccb8:	b90033e5 	str	w5, [sp, #48]
   9ccbc:	385f6265 	ldurb	w5, [x19, #-10]
   9ccc0:	b9002be7 	str	w7, [sp, #40]
   9ccc4:	385f2267 	ldurb	w7, [x19, #-14]
   9ccc8:	b90023e6 	str	w6, [sp, #32]
   9cccc:	385f1266 	ldurb	w6, [x19, #-15]
   9ccd0:	b9001be5 	str	w5, [sp, #24]
   9ccd4:	385f0265 	ldurb	w5, [x19, #-16]
   9ccd8:	9400073a 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9ccdc:	eb16027f 	cmp	x19, x22
   9cce0:	54fffb21 	b.ne	9cc44 <debug_hexdump(void const*, unsigned int, char const*)+0x74>  // b.any
   9cce4:	f94053f7 	ldr	x23, [sp, #160]
   9cce8:	a9477bfd 	ldp	x29, x30, [sp, #112]
   9ccec:	a94853f3 	ldp	x19, x20, [sp, #128]
   9ccf0:	a9495bf5 	ldp	x21, x22, [sp, #144]
   9ccf4:	9102c3ff 	add	sp, sp, #0xb0
   9ccf8:	d65f03c0 	ret
   9ccfc:	d503201f 	nop

000000000009cd00 <debug_stacktrace(unsigned long const*, char const*)>:
   9cd00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cd04:	910003fd 	mov	x29, sp
   9cd08:	f100003f 	cmp	x1, #0x0
   9cd0c:	a90153f3 	stp	x19, x20, [sp, #16]
   9cd10:	aa0003f4 	mov	x20, x0
   9cd14:	d2800013 	mov	x19, #0x0                   	// #0
   9cd18:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cd1c:	91224000 	add	x0, x0, #0x890
   9cd20:	a9025bf5 	stp	x21, x22, [sp, #32]
   9cd24:	90000096 	adrp	x22, ac000 <CEMMCDevice::CardReset()+0x7b0>
   9cd28:	911fd2d6 	add	x22, x22, #0x7f4
   9cd2c:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   9cd30:	a90363f7 	stp	x23, x24, [sp, #48]
   9cd34:	d00000b8 	adrp	x24, b2000 <vtable for CPartition>
   9cd38:	9121e318 	add	x24, x24, #0x878
   9cd3c:	9a810017 	csel	x23, x0, x1, eq  // eq = none
   9cd40:	14000004 	b	9cd50 <debug_stacktrace(unsigned long const*, char const*)+0x50>
   9cd44:	91000673 	add	x19, x19, #0x1
   9cd48:	f101027f 	cmp	x19, #0x40
   9cd4c:	54000240 	b.eq	9cd94 <debug_stacktrace(unsigned long const*, char const*)+0x94>  // b.none
   9cd50:	f8737a82 	ldr	x2, [x20, x19, lsl #3]
   9cd54:	eb15005f 	cmp	x2, x21
   9cd58:	54ffff69 	b.ls	9cd44 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.plast
   9cd5c:	eb16005f 	cmp	x2, x22
   9cd60:	54ffff22 	b.cs	9cd44 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.hs, b.nlast
   9cd64:	f240045f 	tst	x2, #0x3
   9cd68:	54fffee1 	b.ne	9cd44 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.any
   9cd6c:	940007d9 	bl	9ecd0 <CLogger::Get()>
   9cd70:	2a1303e4 	mov	w4, w19
   9cd74:	aa1803e3 	mov	x3, x24
   9cd78:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   9cd7c:	52800082 	mov	w2, #0x4                   	// #4
   9cd80:	aa1703e1 	mov	x1, x23
   9cd84:	91000673 	add	x19, x19, #0x1
   9cd88:	9400070e 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9cd8c:	f101027f 	cmp	x19, #0x40
   9cd90:	54fffe01 	b.ne	9cd50 <debug_stacktrace(unsigned long const*, char const*)+0x50>  // b.any
   9cd94:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cd98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cd9c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9cda0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cda4:	d65f03c0 	ret
	...

000000000009cdb0 <CDevice::~CDevice()>:
   9cdb0:	d65f03c0 	ret
   9cdb4:	d503201f 	nop
   9cdb8:	d503201f 	nop
   9cdbc:	d503201f 	nop

000000000009cdc0 <CDevice::Read(void*, unsigned long)>:
   9cdc0:	12800000 	mov	w0, #0xffffffff            	// #-1
   9cdc4:	d65f03c0 	ret
   9cdc8:	d503201f 	nop
   9cdcc:	d503201f 	nop

000000000009cdd0 <CDevice::Seek(unsigned long)>:
   9cdd0:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   9cdd4:	d65f03c0 	ret
   9cdd8:	d503201f 	nop
   9cddc:	d503201f 	nop

000000000009cde0 <CDevice::RemoveDevice()>:
   9cde0:	52800000 	mov	w0, #0x0                   	// #0
   9cde4:	d65f03c0 	ret
   9cde8:	d503201f 	nop
   9cdec:	d503201f 	nop

000000000009cdf0 <CDevice::~CDevice()>:
   9cdf0:	d2800101 	mov	x1, #0x8                   	// #8
   9cdf4:	14002247 	b	a5710 <operator delete(void*, unsigned long)>
   9cdf8:	d503201f 	nop
   9cdfc:	d503201f 	nop

000000000009ce00 <CDevice::CDevice()>:
   9ce00:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9ce04:	9122a021 	add	x1, x1, #0x8a8
   9ce08:	f9000001 	str	x1, [x0]
   9ce0c:	d65f03c0 	ret

000000000009ce10 <CDeviceNameService::CDeviceNameService()>:
   9ce10:	d00000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9ce14:	f900001f 	str	xzr, [x0]
   9ce18:	f9475822 	ldr	x2, [x1, #3760]
   9ce1c:	b900081f 	str	wzr, [x0, #8]
   9ce20:	b5000062 	cbnz	x2, 9ce2c <CDeviceNameService::CDeviceNameService()+0x1c>
   9ce24:	f9075820 	str	x0, [x1, #3760]
   9ce28:	d65f03c0 	ret
   9ce2c:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9ce30:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9ce34:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ce38:	91236021 	add	x1, x1, #0x8d8
   9ce3c:	910003fd 	mov	x29, sp
   9ce40:	9123c000 	add	x0, x0, #0x8f0
   9ce44:	528003e2 	mov	w2, #0x1f                  	// #31
   9ce48:	97fffe0e 	bl	9c680 <assertion_failed>
   9ce4c:	d503201f 	nop

000000000009ce50 <CDeviceNameService::~CDeviceNameService()>:
   9ce50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ce54:	910003fd 	mov	x29, sp
   9ce58:	a90153f3 	stp	x19, x20, [sp, #16]
   9ce5c:	f9400013 	ldr	x19, [x0]
   9ce60:	b4000173 	cbz	x19, 9ce8c <CDeviceNameService::~CDeviceNameService()+0x3c>
   9ce64:	aa0003f4 	mov	x20, x0
   9ce68:	f9400660 	ldr	x0, [x19, #8]
   9ce6c:	f9400273 	ldr	x19, [x19]
   9ce70:	b4000040 	cbz	x0, 9ce78 <CDeviceNameService::~CDeviceNameService()+0x28>
   9ce74:	9400221b 	bl	a56e0 <operator delete[](void*)>
   9ce78:	d2800401 	mov	x1, #0x20                  	// #32
   9ce7c:	f9400280 	ldr	x0, [x20]
   9ce80:	94002224 	bl	a5710 <operator delete(void*, unsigned long)>
   9ce84:	f9000293 	str	x19, [x20]
   9ce88:	b5ffff13 	cbnz	x19, 9ce68 <CDeviceNameService::~CDeviceNameService()+0x18>
   9ce8c:	d00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9ce90:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ce94:	f907581f 	str	xzr, [x0, #3760]
   9ce98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ce9c:	d65f03c0 	ret

000000000009cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   9cea0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cea4:	910003fd 	mov	x29, sp
   9cea8:	a90153f3 	stp	x19, x20, [sp, #16]
   9ceac:	aa0003f4 	mov	x20, x0
   9ceb0:	b9400800 	ldr	w0, [x0, #8]
   9ceb4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ceb8:	aa0103f5 	mov	x21, x1
   9cebc:	aa0203f6 	mov	x22, x2
   9cec0:	f9001bf7 	str	x23, [sp, #48]
   9cec4:	12001c77 	and	w23, w3, #0xff
   9cec8:	35000320 	cbnz	w0, 9cf2c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x8c>
   9cecc:	d2800400 	mov	x0, #0x20                  	// #32
   9ced0:	940021ec 	bl	a5680 <operator new(unsigned long)>
   9ced4:	aa0003f3 	mov	x19, x0
   9ced8:	b4000355 	cbz	x21, 9cf40 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   9cedc:	aa1503e0 	mov	x0, x21
   9cee0:	94001dac 	bl	a4590 <strlen>
   9cee4:	91000400 	add	x0, x0, #0x1
   9cee8:	940021ee 	bl	a56a0 <operator new[](unsigned long)>
   9ceec:	aa1503e1 	mov	x1, x21
   9cef0:	f9000660 	str	x0, [x19, #8]
   9cef4:	94001e37 	bl	a47d0 <strcpy>
   9cef8:	b40003b6 	cbz	x22, 9cf6c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xcc>
   9cefc:	f9400281 	ldr	x1, [x20]
   9cf00:	f9000293 	str	x19, [x20]
   9cf04:	b9400a80 	ldr	w0, [x20, #8]
   9cf08:	f9000a76 	str	x22, [x19, #16]
   9cf0c:	39006277 	strb	w23, [x19, #24]
   9cf10:	f9000261 	str	x1, [x19]
   9cf14:	35000220 	cbnz	w0, 9cf58 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   9cf18:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cf1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cf20:	f9401bf7 	ldr	x23, [sp, #48]
   9cf24:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cf28:	d65f03c0 	ret
   9cf2c:	940024e9 	bl	a62d0 <EnterCritical>
   9cf30:	d2800400 	mov	x0, #0x20                  	// #32
   9cf34:	940021d3 	bl	a5680 <operator new(unsigned long)>
   9cf38:	aa0003f3 	mov	x19, x0
   9cf3c:	b5fffd15 	cbnz	x21, 9cedc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x3c>
   9cf40:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cf44:	b0000080 	adrp	x0, ad000 <From+0x4c0>
   9cf48:	91236021 	add	x1, x1, #0x8d8
   9cf4c:	912e2000 	add	x0, x0, #0xb88
   9cf50:	52800762 	mov	w2, #0x3b                  	// #59
   9cf54:	97fffdcb 	bl	9c680 <assertion_failed>
   9cf58:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cf5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cf60:	f9401bf7 	ldr	x23, [sp, #48]
   9cf64:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cf68:	1400250a 	b	a6390 <LeaveCritical>
   9cf6c:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9cf70:	d00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9cf74:	91236021 	add	x1, x1, #0x8d8
   9cf78:	91240000 	add	x0, x0, #0x900
   9cf7c:	52800802 	mov	w2, #0x40                  	// #64
   9cf80:	97fffdc0 	bl	9c680 <assertion_failed>
   9cf84:	d503201f 	nop
   9cf88:	d503201f 	nop
   9cf8c:	d503201f 	nop

000000000009cf90 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   9cf90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cf94:	910003fd 	mov	x29, sp
   9cf98:	a90153f3 	stp	x19, x20, [sp, #16]
   9cf9c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9cfa0:	f9001bf7 	str	x23, [sp, #48]
   9cfa4:	b40006e1 	cbz	x1, 9d080 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   9cfa8:	aa0003f6 	mov	x22, x0
   9cfac:	b9400800 	ldr	w0, [x0, #8]
   9cfb0:	aa0103f4 	mov	x20, x1
   9cfb4:	12001c57 	and	w23, w2, #0xff
   9cfb8:	350002e0 	cbnz	w0, 9d014 <CDeviceNameService::RemoveDevice(char const*, bool)+0x84>
   9cfbc:	f94002d3 	ldr	x19, [x22]
   9cfc0:	b4000713 	cbz	x19, 9d0a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   9cfc4:	d2800015 	mov	x21, #0x0                   	// #0
   9cfc8:	1400000b 	b	9cff4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   9cfcc:	aa1403e0 	mov	x0, x20
   9cfd0:	94001d7c 	bl	a45c0 <strcmp>
   9cfd4:	35000080 	cbnz	w0, 9cfe4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x54>
   9cfd8:	39406260 	ldrb	w0, [x19, #24]
   9cfdc:	6b17001f 	cmp	w0, w23
   9cfe0:	540002e0 	b.eq	9d03c <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>  // b.none
   9cfe4:	f9400262 	ldr	x2, [x19]
   9cfe8:	aa1303f5 	mov	x21, x19
   9cfec:	b40001a2 	cbz	x2, 9d020 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   9cff0:	aa0203f3 	mov	x19, x2
   9cff4:	f9400661 	ldr	x1, [x19, #8]
   9cff8:	b5fffea1 	cbnz	x1, 9cfcc <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
   9cffc:	d00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d000:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d004:	91236021 	add	x1, x1, #0x8d8
   9d008:	91244000 	add	x0, x0, #0x910
   9d00c:	52800bc2 	mov	w2, #0x5e                  	// #94
   9d010:	97fffd9c 	bl	9c680 <assertion_failed>
   9d014:	940024af 	bl	a62d0 <EnterCritical>
   9d018:	f94002d3 	ldr	x19, [x22]
   9d01c:	b5fffd53 	cbnz	x19, 9cfc4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   9d020:	b9400ac0 	ldr	w0, [x22, #8]
   9d024:	340003e0 	cbz	w0, 9d0a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   9d028:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d02c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d030:	f9401bf7 	ldr	x23, [sp, #48]
   9d034:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d038:	140024d6 	b	a6390 <LeaveCritical>
   9d03c:	f9400260 	ldr	x0, [x19]
   9d040:	b40001d5 	cbz	x21, 9d078 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   9d044:	f90002a0 	str	x0, [x21]
   9d048:	b9400ac0 	ldr	w0, [x22, #8]
   9d04c:	35000260 	cbnz	w0, 9d098 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   9d050:	f9400660 	ldr	x0, [x19, #8]
   9d054:	b4000040 	cbz	x0, 9d05c <CDeviceNameService::RemoveDevice(char const*, bool)+0xcc>
   9d058:	940021a2 	bl	a56e0 <operator delete[](void*)>
   9d05c:	aa1303e0 	mov	x0, x19
   9d060:	d2800401 	mov	x1, #0x20                  	// #32
   9d064:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d068:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d06c:	f9401bf7 	ldr	x23, [sp, #48]
   9d070:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d074:	140021a7 	b	a5710 <operator delete(void*, unsigned long)>
   9d078:	f90002c0 	str	x0, [x22]
   9d07c:	17fffff3 	b	9d048 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   9d080:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d084:	90000080 	adrp	x0, ad000 <From+0x4c0>
   9d088:	91236021 	add	x1, x1, #0x8d8
   9d08c:	912e2000 	add	x0, x0, #0xb88
   9d090:	52800ac2 	mov	w2, #0x56                  	// #86
   9d094:	97fffd7b 	bl	9c680 <assertion_failed>
   9d098:	940024be 	bl	a6390 <LeaveCritical>
   9d09c:	17ffffed 	b	9d050 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   9d0a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d0a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d0a8:	f9401bf7 	ldr	x23, [sp, #48]
   9d0ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d0b0:	d65f03c0 	ret
   9d0b4:	d503201f 	nop
   9d0b8:	d503201f 	nop
   9d0bc:	d503201f 	nop

000000000009d0c0 <CDeviceNameService::GetDevice(char const*, bool)>:
   9d0c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d0c4:	910003fd 	mov	x29, sp
   9d0c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d0cc:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d0d0:	b4000481 	cbz	x1, 9d160 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   9d0d4:	aa0003f5 	mov	x21, x0
   9d0d8:	aa0103f4 	mov	x20, x1
   9d0dc:	b9400800 	ldr	w0, [x0, #8]
   9d0e0:	12001c56 	and	w22, w2, #0xff
   9d0e4:	35000280 	cbnz	w0, 9d134 <CDeviceNameService::GetDevice(char const*, bool)+0x74>
   9d0e8:	f94002b3 	ldr	x19, [x21]
   9d0ec:	b5000153 	cbnz	x19, 9d114 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   9d0f0:	14000017 	b	9d14c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   9d0f4:	aa1403e0 	mov	x0, x20
   9d0f8:	94001d32 	bl	a45c0 <strcmp>
   9d0fc:	35000080 	cbnz	w0, 9d10c <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   9d100:	39406261 	ldrb	w1, [x19, #24]
   9d104:	6b16003f 	cmp	w1, w22
   9d108:	54000380 	b.eq	9d178 <CDeviceNameService::GetDevice(char const*, bool)+0xb8>  // b.none
   9d10c:	f9400273 	ldr	x19, [x19]
   9d110:	b4000193 	cbz	x19, 9d140 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   9d114:	f9400661 	ldr	x1, [x19, #8]
   9d118:	b5fffee1 	cbnz	x1, 9d0f4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   9d11c:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d120:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d124:	91236021 	add	x1, x1, #0x8d8
   9d128:	91244000 	add	x0, x0, #0x910
   9d12c:	52801242 	mov	w2, #0x92                  	// #146
   9d130:	97fffd54 	bl	9c680 <assertion_failed>
   9d134:	94002467 	bl	a62d0 <EnterCritical>
   9d138:	f94002b3 	ldr	x19, [x21]
   9d13c:	b5fffed3 	cbnz	x19, 9d114 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   9d140:	b9400aa0 	ldr	w0, [x21, #8]
   9d144:	34000040 	cbz	w0, 9d14c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   9d148:	94002492 	bl	a6390 <LeaveCritical>
   9d14c:	d2800000 	mov	x0, #0x0                   	// #0
   9d150:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d154:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d158:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d15c:	d65f03c0 	ret
   9d160:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d164:	90000080 	adrp	x0, ad000 <From+0x4c0>
   9d168:	91236021 	add	x1, x1, #0x8d8
   9d16c:	912e2000 	add	x0, x0, #0xb88
   9d170:	52801162 	mov	w2, #0x8b                  	// #139
   9d174:	97fffd43 	bl	9c680 <assertion_failed>
   9d178:	b9400aa1 	ldr	w1, [x21, #8]
   9d17c:	f9400a60 	ldr	x0, [x19, #16]
   9d180:	35000101 	cbnz	w1, 9d1a0 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   9d184:	b5fffe60 	cbnz	x0, 9d150 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   9d188:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d18c:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d190:	91236021 	add	x1, x1, #0x8d8
   9d194:	9124a000 	add	x0, x0, #0x928
   9d198:	52801342 	mov	w2, #0x9a                  	// #154
   9d19c:	97fffd39 	bl	9c680 <assertion_failed>
   9d1a0:	f9001fe0 	str	x0, [sp, #56]
   9d1a4:	9400247b 	bl	a6390 <LeaveCritical>
   9d1a8:	f9401fe0 	ldr	x0, [sp, #56]
   9d1ac:	b5fffd20 	cbnz	x0, 9d150 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   9d1b0:	17fffff6 	b	9d188 <CDeviceNameService::GetDevice(char const*, bool)+0xc8>
   9d1b4:	d503201f 	nop
   9d1b8:	d503201f 	nop
   9d1bc:	d503201f 	nop

000000000009d1c0 <CDeviceNameService::Get()>:
   9d1c0:	b00000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9d1c4:	f9475800 	ldr	x0, [x0, #3760]
   9d1c8:	b4000040 	cbz	x0, 9d1d0 <CDeviceNameService::Get()+0x10>
   9d1cc:	d65f03c0 	ret
   9d1d0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d1d4:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d1d8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d1dc:	91236021 	add	x1, x1, #0x8d8
   9d1e0:	910003fd 	mov	x29, sp
   9d1e4:	9124e000 	add	x0, x0, #0x938
   9d1e8:	52801982 	mov	w2, #0xcc                  	// #204
   9d1ec:	97fffd25 	bl	9c680 <assertion_failed>

000000000009d1f0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   9d1f0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   9d1f4:	910003fd 	mov	x29, sp
   9d1f8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d1fc:	aa0003f3 	mov	x19, x0
   9d200:	910103e0 	add	x0, sp, #0x40
   9d204:	aa0303f4 	mov	x20, x3
   9d208:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d20c:	aa0103f5 	mov	x21, x1
   9d210:	2a0203f6 	mov	w22, w2
   9d214:	f9001bf7 	str	x23, [sp, #48]
   9d218:	12001c97 	and	w23, w4, #0xff
   9d21c:	94001305 	bl	a1e30 <CString::CString()>
   9d220:	90000081 	adrp	x1, ad000 <From+0x4c0>
   9d224:	2a1603e3 	mov	w3, w22
   9d228:	aa1503e2 	mov	x2, x21
   9d22c:	910103e0 	add	x0, sp, #0x40
   9d230:	9130e021 	add	x1, x1, #0xc38
   9d234:	9400186f 	bl	a33f0 <CString::Format(char const*, ...)>
   9d238:	910103e0 	add	x0, sp, #0x40
   9d23c:	94001319 	bl	a1ea0 <CString::operator char const*() const>
   9d240:	2a1703e3 	mov	w3, w23
   9d244:	aa1403e2 	mov	x2, x20
   9d248:	aa0003e1 	mov	x1, x0
   9d24c:	aa1303e0 	mov	x0, x19
   9d250:	97ffff14 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   9d254:	910103e0 	add	x0, sp, #0x40
   9d258:	940012ba 	bl	a1d40 <CString::~CString()>
   9d25c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d260:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d264:	f9401bf7 	ldr	x23, [sp, #48]
   9d268:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9d26c:	d65f03c0 	ret

000000000009d270 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   9d270:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9d274:	910003fd 	mov	x29, sp
   9d278:	a90153f3 	stp	x19, x20, [sp, #16]
   9d27c:	aa0003f3 	mov	x19, x0
   9d280:	9100c3e0 	add	x0, sp, #0x30
   9d284:	aa0103f4 	mov	x20, x1
   9d288:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d28c:	2a0203f5 	mov	w21, w2
   9d290:	12001c76 	and	w22, w3, #0xff
   9d294:	940012e7 	bl	a1e30 <CString::CString()>
   9d298:	90000081 	adrp	x1, ad000 <From+0x4c0>
   9d29c:	2a1503e3 	mov	w3, w21
   9d2a0:	aa1403e2 	mov	x2, x20
   9d2a4:	9100c3e0 	add	x0, sp, #0x30
   9d2a8:	9130e021 	add	x1, x1, #0xc38
   9d2ac:	94001851 	bl	a33f0 <CString::Format(char const*, ...)>
   9d2b0:	9100c3e0 	add	x0, sp, #0x30
   9d2b4:	940012fb 	bl	a1ea0 <CString::operator char const*() const>
   9d2b8:	2a1603e2 	mov	w2, w22
   9d2bc:	aa0003e1 	mov	x1, x0
   9d2c0:	aa1303e0 	mov	x0, x19
   9d2c4:	97ffff33 	bl	9cf90 <CDeviceNameService::RemoveDevice(char const*, bool)>
   9d2c8:	9100c3e0 	add	x0, sp, #0x30
   9d2cc:	9400129d 	bl	a1d40 <CString::~CString()>
   9d2d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d2d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d2d8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9d2dc:	d65f03c0 	ret

000000000009d2e0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   9d2e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9d2e4:	910003fd 	mov	x29, sp
   9d2e8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d2ec:	aa0003f3 	mov	x19, x0
   9d2f0:	9100c3e0 	add	x0, sp, #0x30
   9d2f4:	aa0103f4 	mov	x20, x1
   9d2f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d2fc:	2a0203f5 	mov	w21, w2
   9d300:	12001c76 	and	w22, w3, #0xff
   9d304:	940012cb 	bl	a1e30 <CString::CString()>
   9d308:	90000081 	adrp	x1, ad000 <From+0x4c0>
   9d30c:	2a1503e3 	mov	w3, w21
   9d310:	aa1403e2 	mov	x2, x20
   9d314:	9100c3e0 	add	x0, sp, #0x30
   9d318:	9130e021 	add	x1, x1, #0xc38
   9d31c:	94001835 	bl	a33f0 <CString::Format(char const*, ...)>
   9d320:	9100c3e0 	add	x0, sp, #0x30
   9d324:	940012df 	bl	a1ea0 <CString::operator char const*() const>
   9d328:	2a1603e2 	mov	w2, w22
   9d32c:	aa0003e1 	mov	x1, x0
   9d330:	aa1303e0 	mov	x0, x19
   9d334:	97ffff63 	bl	9d0c0 <CDeviceNameService::GetDevice(char const*, bool)>
   9d338:	aa0003f3 	mov	x19, x0
   9d33c:	9100c3e0 	add	x0, sp, #0x30
   9d340:	94001280 	bl	a1d40 <CString::~CString()>
   9d344:	aa1303e0 	mov	x0, x19
   9d348:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d34c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d350:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9d354:	d65f03c0 	ret
   9d358:	d503201f 	nop
   9d35c:	d503201f 	nop

000000000009d360 <CDeviceNameService::ListDevices(CDevice*)>:
   9d360:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   9d364:	910003fd 	mov	x29, sp
   9d368:	a90153f3 	stp	x19, x20, [sp, #16]
   9d36c:	b40008e1 	cbz	x1, 9d488 <CDeviceNameService::ListDevices(CDevice*)+0x128>
   9d370:	52800014 	mov	w20, #0x0                   	// #0
   9d374:	f9400013 	ldr	x19, [x0]
   9d378:	b4000673 	cbz	x19, 9d444 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   9d37c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d380:	aa0103f6 	mov	x22, x1
   9d384:	a90363f7 	stp	x23, x24, [sp, #48]
   9d388:	b00000b8 	adrp	x24, b2000 <vtable for CPartition>
   9d38c:	91256318 	add	x24, x24, #0x958
   9d390:	a9046bf9 	stp	x25, x26, [sp, #64]
   9d394:	5280015a 	mov	w26, #0xa                   	// #10
   9d398:	52800419 	mov	w25, #0x20                  	// #32
   9d39c:	f9002bfb 	str	x27, [sp, #80]
   9d3a0:	1400001a 	b	9d408 <CDeviceNameService::ListDevices(CDevice*)+0xa8>
   9d3a4:	39406262 	ldrb	w2, [x19, #24]
   9d3a8:	11000694 	add	w20, w20, #0x1
   9d3ac:	aa1803e1 	mov	x1, x24
   9d3b0:	910183e0 	add	x0, sp, #0x60
   9d3b4:	7100005f 	cmp	w2, #0x0
   9d3b8:	1a9f17e2 	cset	w2, eq  // eq = none
   9d3bc:	11018842 	add	w2, w2, #0x62
   9d3c0:	7200069b 	ands	w27, w20, #0x3
   9d3c4:	1a990344 	csel	w4, w26, w25, eq  // eq = none
   9d3c8:	9400180a 	bl	a33f0 <CString::Format(char const*, ...)>
   9d3cc:	f94002c1 	ldr	x1, [x22]
   9d3d0:	910183e0 	add	x0, sp, #0x60
   9d3d4:	f9400c37 	ldr	x23, [x1, #24]
   9d3d8:	940012b2 	bl	a1ea0 <CString::operator char const*() const>
   9d3dc:	aa0003f5 	mov	x21, x0
   9d3e0:	910183e0 	add	x0, sp, #0x60
   9d3e4:	940012e7 	bl	a1f80 <CString::GetLength() const>
   9d3e8:	aa0003e2 	mov	x2, x0
   9d3ec:	aa1503e1 	mov	x1, x21
   9d3f0:	aa1603e0 	mov	x0, x22
   9d3f4:	d63f02e0 	blr	x23
   9d3f8:	910183e0 	add	x0, sp, #0x60
   9d3fc:	f9400273 	ldr	x19, [x19]
   9d400:	94001250 	bl	a1d40 <CString::~CString()>
   9d404:	b4000173 	cbz	x19, 9d430 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
   9d408:	910183e0 	add	x0, sp, #0x60
   9d40c:	94001289 	bl	a1e30 <CString::CString()>
   9d410:	f9400663 	ldr	x3, [x19, #8]
   9d414:	b5fffc83 	cbnz	x3, 9d3a4 <CDeviceNameService::ListDevices(CDevice*)+0x44>
   9d418:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d41c:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d420:	91236021 	add	x1, x1, #0x8d8
   9d424:	91244000 	add	x0, x0, #0x910
   9d428:	52801722 	mov	w2, #0xb9                  	// #185
   9d42c:	97fffc95 	bl	9c680 <assertion_failed>
   9d430:	3500011b 	cbnz	w27, 9d450 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
   9d434:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d438:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d43c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9d440:	f9402bfb 	ldr	x27, [sp, #80]
   9d444:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d448:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9d44c:	d65f03c0 	ret
   9d450:	f94002c3 	ldr	x3, [x22]
   9d454:	f0000061 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   9d458:	aa1603e0 	mov	x0, x22
   9d45c:	91258021 	add	x1, x1, #0x960
   9d460:	d2800022 	mov	x2, #0x1                   	// #1
   9d464:	f9400c63 	ldr	x3, [x3, #24]
   9d468:	d63f0060 	blr	x3
   9d46c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d470:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d474:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d478:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9d47c:	f9402bfb 	ldr	x27, [sp, #80]
   9d480:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9d484:	d65f03c0 	ret
   9d488:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d48c:	b00000a0 	adrp	x0, b2000 <vtable for CPartition>
   9d490:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d494:	91236021 	add	x1, x1, #0x8d8
   9d498:	91252000 	add	x0, x0, #0x948
   9d49c:	52801602 	mov	w2, #0xb0                  	// #176
   9d4a0:	a90363f7 	stp	x23, x24, [sp, #48]
   9d4a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   9d4a8:	f9002bfb 	str	x27, [sp, #80]
   9d4ac:	97fffc75 	bl	9c680 <assertion_failed>

000000000009d4b0 <CGPIOPin::CGPIOPin()>:
   9d4b0:	528006c4 	mov	w4, #0x36                  	// #54
   9d4b4:	52800143 	mov	w3, #0xa                   	// #10
   9d4b8:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   9d4bc:	b21f07e2 	mov	x2, #0x600000006           	// #25769803782
   9d4c0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d4c4:	9125e021 	add	x1, x1, #0x978
   9d4c8:	b9000804 	str	w4, [x0, #8]
   9d4cc:	f9000001 	str	x1, [x0]
   9d4d0:	b9001403 	str	w3, [x0, #20]
   9d4d4:	f803c002 	stur	x2, [x0, #60]
   9d4d8:	d65f03c0 	ret
   9d4dc:	d503201f 	nop

000000000009d4e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   9d4e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d4e4:	528006c7 	mov	w7, #0x36                  	// #54
   9d4e8:	910003fd 	mov	x29, sp
   9d4ec:	52800146 	mov	w6, #0xa                   	// #10
   9d4f0:	b21f07e5 	mov	x5, #0x600000006           	// #25769803782
   9d4f4:	b00000a4 	adrp	x4, b2000 <vtable for CPartition>
   9d4f8:	9125e084 	add	x4, x4, #0x978
   9d4fc:	a90153f3 	stp	x19, x20, [sp, #16]
   9d500:	2a0203f4 	mov	w20, w2
   9d504:	aa0003f3 	mov	x19, x0
   9d508:	f9000004 	str	x4, [x0]
   9d50c:	b9000807 	str	w7, [x0, #8]
   9d510:	b9001406 	str	w6, [x0, #20]
   9d514:	a9027c03 	stp	x3, xzr, [x0, #32]
   9d518:	f803c005 	stur	x5, [x0, #60]
   9d51c:	94000011 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   9d520:	2a1403e1 	mov	w1, w20
   9d524:	aa1303e0 	mov	x0, x19
   9d528:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d52c:	52800022 	mov	w2, #0x1                   	// #1
   9d530:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d534:	1400002f 	b	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   9d538:	d503201f 	nop
   9d53c:	d503201f 	nop

000000000009d540 <CGPIOPin::~CGPIOPin()>:
   9d540:	d65f03c0 	ret
   9d544:	d503201f 	nop
   9d548:	d503201f 	nop
   9d54c:	d503201f 	nop

000000000009d550 <CGPIOPin::~CGPIOPin()>:
   9d550:	d2800901 	mov	x1, #0x48                  	// #72
   9d554:	1400206f 	b	a5710 <operator delete(void*, unsigned long)>
   9d558:	d503201f 	nop
   9d55c:	d503201f 	nop

000000000009d560 <CGPIOPin::AssignPin(unsigned int)>:
   9d560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d564:	910003fd 	mov	x29, sp
   9d568:	a90153f3 	stp	x19, x20, [sp, #16]
   9d56c:	aa0003f4 	mov	x20, x0
   9d570:	b9400800 	ldr	w0, [x0, #8]
   9d574:	7100d81f 	cmp	w0, #0x36
   9d578:	54000321 	b.ne	9d5dc <CGPIOPin::AssignPin(unsigned int)+0x7c>  // b.any
   9d57c:	7100d43f 	cmp	w1, #0x35
   9d580:	b9000a81 	str	w1, [x20, #8]
   9d584:	2a0103f3 	mov	w19, w1
   9d588:	54000128 	b.hi	9d5ac <CGPIOPin::AssignPin(unsigned int)+0x4c>  // b.pmore
   9d58c:	53057e60 	lsr	w0, w19, #5
   9d590:	52800021 	mov	w1, #0x1                   	// #1
   9d594:	1ad32021 	lsl	w1, w1, w19
   9d598:	531e7400 	lsl	w0, w0, #2
   9d59c:	29018680 	stp	w0, w1, [x20, #12]
   9d5a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d5a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d5a8:	d65f03c0 	ret
   9d5ac:	9400091d 	bl	9fa20 <CMachineInfo::Get()>
   9d5b0:	2a1303e1 	mov	w1, w19
   9d5b4:	94000867 	bl	9f750 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   9d5b8:	7100d41f 	cmp	w0, #0x35
   9d5bc:	b9000a80 	str	w0, [x20, #8]
   9d5c0:	2a0003f3 	mov	w19, w0
   9d5c4:	54fffe49 	b.ls	9d58c <CGPIOPin::AssignPin(unsigned int)+0x2c>  // b.plast
   9d5c8:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d5cc:	91262021 	add	x1, x1, #0x988
   9d5d0:	9100a020 	add	x0, x1, #0x28
   9d5d4:	528008e2 	mov	w2, #0x47                  	// #71
   9d5d8:	97fffc2a 	bl	9c680 <assertion_failed>
   9d5dc:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d5e0:	91262021 	add	x1, x1, #0x988
   9d5e4:	91004020 	add	x0, x1, #0x10
   9d5e8:	52800802 	mov	w2, #0x40                  	// #64
   9d5ec:	97fffc25 	bl	9c680 <assertion_failed>

000000000009d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   9d5f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d5f4:	910003fd 	mov	x29, sp
   9d5f8:	7100243f 	cmp	w1, #0x9
   9d5fc:	a90153f3 	stp	x19, x20, [sp, #16]
   9d600:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d604:	54000b6c 	b.gt	9d770 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   9d608:	51001023 	sub	w3, w1, #0x4
   9d60c:	12001c56 	and	w22, w2, #0xff
   9d610:	7100147f 	cmp	w3, #0x5
   9d614:	b9001401 	str	w1, [x0, #20]
   9d618:	2a0103e4 	mov	w4, w1
   9d61c:	aa0003f4 	mov	x20, x0
   9d620:	540006a9 	b.ls	9d6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>  // b.plast
   9d624:	710002df 	cmp	w22, #0x0
   9d628:	f9001bf7 	str	x23, [sp, #48]
   9d62c:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   9d630:	54000ac0 	b.eq	9d788 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>  // b.none
   9d634:	b9400a83 	ldr	w3, [x20, #8]
   9d638:	7100d47f 	cmp	w3, #0x35
   9d63c:	54000ac8 	b.hi	9d794 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>  // b.pmore
   9d640:	529999a1 	mov	w1, #0xcccd                	// #52429
   9d644:	72b99981 	movk	w1, #0xcccc, lsl #16
   9d648:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   9d64c:	b00000d7 	adrp	x23, b6000 <s_OldInfo+0x68>
   9d650:	9ba17c61 	umull	x1, w3, w1
   9d654:	b94ebae0 	ldr	w0, [x23, #3768]
   9d658:	d363fc21 	lsr	x1, x1, #35
   9d65c:	0b010835 	add	w21, w1, w1, lsl #2
   9d660:	0b130021 	add	w1, w1, w19
   9d664:	531e7433 	lsl	w19, w1, #2
   9d668:	4b150475 	sub	w21, w3, w21, lsl #1
   9d66c:	0b1506b5 	add	w21, w21, w21, lsl #1
   9d670:	350005e0 	cbnz	w0, 9d72c <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>
   9d674:	b9401680 	ldr	w0, [x20, #20]
   9d678:	528000e1 	mov	w1, #0x7                   	// #7
   9d67c:	1ad52021 	lsl	w1, w1, w21
   9d680:	b9400262 	ldr	w2, [x19]
   9d684:	7100041f 	cmp	w0, #0x1
   9d688:	1a9f17e0 	cset	w0, eq  // eq = none
   9d68c:	1ad52015 	lsl	w21, w0, w21
   9d690:	0a210041 	bic	w1, w2, w1
   9d694:	2a0102b5 	orr	w21, w21, w1
   9d698:	b9000275 	str	w21, [x19]
   9d69c:	b94ebae0 	ldr	w0, [x23, #3768]
   9d6a0:	350004a0 	cbnz	w0, 9d734 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
   9d6a4:	340001f6 	cbz	w22, 9d6e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   9d6a8:	b9401681 	ldr	w1, [x20, #20]
   9d6ac:	7100083f 	cmp	w1, #0x2
   9d6b0:	540007c0 	b.eq	9d7a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>  // b.none
   9d6b4:	54000128 	b.hi	9d6d8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>  // b.pmore
   9d6b8:	34000441 	cbz	w1, 9d740 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
   9d6bc:	aa1403e0 	mov	x0, x20
   9d6c0:	52800001 	mov	w1, #0x0                   	// #0
   9d6c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d6c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d6cc:	f9401bf7 	ldr	x23, [sp, #48]
   9d6d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d6d4:	14000037 	b	9d7b0 <CGPIOPin::Write(unsigned int)>
   9d6d8:	71000c3f 	cmp	w1, #0x3
   9d6dc:	540001a0 	b.eq	9d710 <CGPIOPin::SetMode(TGPIOMode, bool)+0x120>  // b.none
   9d6e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d6e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d6e8:	f9401bf7 	ldr	x23, [sp, #48]
   9d6ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d6f0:	d65f03c0 	ret
   9d6f4:	350002d6 	cbnz	w22, 9d74c <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   9d6f8:	aa1403e0 	mov	x0, x20
   9d6fc:	51001081 	sub	w1, w4, #0x4
   9d700:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d704:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d708:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d70c:	14000261 	b	9e090 <CGPIOPin::SetAlternateFunction(unsigned int)>
   9d710:	aa1403e0 	mov	x0, x20
   9d714:	52800021 	mov	w1, #0x1                   	// #1
   9d718:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d71c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d720:	f9401bf7 	ldr	x23, [sp, #48]
   9d724:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d728:	14000222 	b	9dfb0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   9d72c:	940022e9 	bl	a62d0 <EnterCritical>
   9d730:	17ffffd1 	b	9d674 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
   9d734:	94002317 	bl	a6390 <LeaveCritical>
   9d738:	34fffd56 	cbz	w22, 9d6e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf0>
   9d73c:	17ffffdb 	b	9d6a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb8>
   9d740:	aa1403e0 	mov	x0, x20
   9d744:	52800001 	mov	w1, #0x0                   	// #0
   9d748:	17fffff4 	b	9d718 <CGPIOPin::SetMode(TGPIOMode, bool)+0x128>
   9d74c:	52800001 	mov	w1, #0x0                   	// #0
   9d750:	94000218 	bl	9dfb0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   9d754:	b9401684 	ldr	w4, [x20, #20]
   9d758:	aa1403e0 	mov	x0, x20
   9d75c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d760:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d764:	51001081 	sub	w1, w4, #0x4
   9d768:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d76c:	14000249 	b	9e090 <CGPIOPin::SetAlternateFunction(unsigned int)>
   9d770:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d774:	91262021 	add	x1, x1, #0x988
   9d778:	f9001bf7 	str	x23, [sp, #48]
   9d77c:	91010020 	add	x0, x1, #0x40
   9d780:	528009e2 	mov	w2, #0x4f                  	// #79
   9d784:	97fffbbf 	bl	9c680 <assertion_failed>
   9d788:	52800001 	mov	w1, #0x0                   	// #0
   9d78c:	94000209 	bl	9dfb0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   9d790:	17ffffa9 	b	9d634 <CGPIOPin::SetMode(TGPIOMode, bool)+0x44>
   9d794:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d798:	91262021 	add	x1, x1, #0x988
   9d79c:	9100a020 	add	x0, x1, #0x28
   9d7a0:	52800d02 	mov	w2, #0x68                  	// #104
   9d7a4:	97fffbb7 	bl	9c680 <assertion_failed>
   9d7a8:	aa1403e0 	mov	x0, x20
   9d7ac:	17ffffdb 	b	9d718 <CGPIOPin::SetMode(TGPIOMode, bool)+0x128>

000000000009d7b0 <CGPIOPin::Write(unsigned int)>:
   9d7b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d7b4:	910003fd 	mov	x29, sp
   9d7b8:	b9400802 	ldr	w2, [x0, #8]
   9d7bc:	7100d45f 	cmp	w2, #0x35
   9d7c0:	54000268 	b.hi	9d80c <CGPIOPin::Write(unsigned int)+0x5c>  // b.pmore
   9d7c4:	b9401402 	ldr	w2, [x0, #20]
   9d7c8:	71000c5f 	cmp	w2, #0x3
   9d7cc:	540002ac 	b.gt	9d820 <CGPIOPin::Write(unsigned int)+0x70>
   9d7d0:	7100043f 	cmp	w1, #0x1
   9d7d4:	54000308 	b.hi	9d834 <CGPIOPin::Write(unsigned int)+0x84>  // b.pmore
   9d7d8:	b9400c03 	ldr	w3, [x0, #12]
   9d7dc:	7100003f 	cmp	w1, #0x0
   9d7e0:	52800382 	mov	w2, #0x1c                  	// #28
   9d7e4:	72bfc402 	movk	w2, #0xfe20, lsl #16
   9d7e8:	b9001801 	str	w1, [x0, #24]
   9d7ec:	52800504 	mov	w4, #0x28                  	// #40
   9d7f0:	72bfc404 	movk	w4, #0xfe20, lsl #16
   9d7f4:	b9401001 	ldr	w1, [x0, #16]
   9d7f8:	1a841042 	csel	w2, w2, w4, ne  // ne = any
   9d7fc:	0b030040 	add	w0, w2, w3
   9d800:	b9000001 	str	w1, [x0]
   9d804:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d808:	d65f03c0 	ret
   9d80c:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d810:	91262021 	add	x1, x1, #0x988
   9d814:	9100a020 	add	x0, x1, #0x28
   9d818:	52801222 	mov	w2, #0x91                  	// #145
   9d81c:	97fffb99 	bl	9c680 <assertion_failed>
   9d820:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d824:	91262021 	add	x1, x1, #0x988
   9d828:	91016020 	add	x0, x1, #0x58
   9d82c:	52801282 	mov	w2, #0x94                  	// #148
   9d830:	97fffb94 	bl	9c680 <assertion_failed>
   9d834:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d838:	91262021 	add	x1, x1, #0x988
   9d83c:	91020020 	add	x0, x1, #0x80
   9d840:	52801302 	mov	w2, #0x98                  	// #152
   9d844:	97fffb8f 	bl	9c680 <assertion_failed>
   9d848:	d503201f 	nop
   9d84c:	d503201f 	nop

000000000009d850 <CGPIOPin::Read() const>:
   9d850:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d854:	910003fd 	mov	x29, sp
   9d858:	b9400801 	ldr	w1, [x0, #8]
   9d85c:	7100d43f 	cmp	w1, #0x35
   9d860:	540001e8 	b.hi	9d89c <CGPIOPin::Read() const+0x4c>  // b.pmore
   9d864:	b9401401 	ldr	w1, [x0, #20]
   9d868:	7100003f 	cmp	w1, #0x0
   9d86c:	51000821 	sub	w1, w1, #0x2
   9d870:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   9d874:	540001e8 	b.hi	9d8b0 <CGPIOPin::Read() const+0x60>  // b.pmore
   9d878:	29418801 	ldp	w1, w2, [x0, #12]
   9d87c:	52800683 	mov	w3, #0x34                  	// #52
   9d880:	72bfc403 	movk	w3, #0xfe20, lsl #16
   9d884:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d888:	0b030020 	add	w0, w1, w3
   9d88c:	b9400000 	ldr	w0, [x0]
   9d890:	6a02001f 	tst	w0, w2
   9d894:	1a9f07e0 	cset	w0, ne  // ne = any
   9d898:	d65f03c0 	ret
   9d89c:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d8a0:	91262021 	add	x1, x1, #0x988
   9d8a4:	9100a020 	add	x0, x1, #0x28
   9d8a8:	52801482 	mov	w2, #0xa4                  	// #164
   9d8ac:	97fffb75 	bl	9c680 <assertion_failed>
   9d8b0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d8b4:	91262021 	add	x1, x1, #0x988
   9d8b8:	91028020 	add	x0, x1, #0xa0
   9d8bc:	528014c2 	mov	w2, #0xa6                  	// #166
   9d8c0:	97fffb70 	bl	9c680 <assertion_failed>
   9d8c4:	d503201f 	nop
   9d8c8:	d503201f 	nop
   9d8cc:	d503201f 	nop

000000000009d8d0 <CGPIOPin::Invert()>:
   9d8d0:	b9401402 	ldr	w2, [x0, #20]
   9d8d4:	7100045f 	cmp	w2, #0x1
   9d8d8:	54000081 	b.ne	9d8e8 <CGPIOPin::Invert()+0x18>  // b.any
   9d8dc:	b9401801 	ldr	w1, [x0, #24]
   9d8e0:	52000021 	eor	w1, w1, #0x1
   9d8e4:	17ffffb3 	b	9d7b0 <CGPIOPin::Write(unsigned int)>
   9d8e8:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d8ec:	91262021 	add	x1, x1, #0x988
   9d8f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d8f4:	91040020 	add	x0, x1, #0x100
   9d8f8:	910003fd 	mov	x29, sp
   9d8fc:	528016a2 	mov	w2, #0xb5                  	// #181
   9d900:	97fffb60 	bl	9c680 <assertion_failed>
   9d904:	d503201f 	nop
   9d908:	d503201f 	nop
   9d90c:	d503201f 	nop

000000000009d910 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   9d910:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d914:	aa0003e4 	mov	x4, x0
   9d918:	910003fd 	mov	x29, sp
   9d91c:	b9401400 	ldr	w0, [x0, #20]
   9d920:	7100001f 	cmp	w0, #0x0
   9d924:	51000800 	sub	w0, w0, #0x2
   9d928:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9d92c:	54000568 	b.hi	9d9d8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xc8>  // b.pmore
   9d930:	b9403c80 	ldr	w0, [x4, #60]
   9d934:	7100181f 	cmp	w0, #0x6
   9d938:	540001e1 	b.ne	9d974 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x64>  // b.any
   9d93c:	b9404080 	ldr	w0, [x4, #64]
   9d940:	7100181f 	cmp	w0, #0x6
   9d944:	54000221 	b.ne	9d988 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x78>  // b.any
   9d948:	b40002a1 	cbz	x1, 9d99c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   9d94c:	f9401480 	ldr	x0, [x4, #40]
   9d950:	b5000300 	cbnz	x0, 9d9b0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xa0>
   9d954:	12001c63 	and	w3, w3, #0xff
   9d958:	a9028881 	stp	x1, x2, [x4, #40]
   9d95c:	3900e083 	strb	w3, [x4, #56]
   9d960:	f9401080 	ldr	x0, [x4, #32]
   9d964:	b4000300 	cbz	x0, 9d9c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xb4>
   9d968:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d96c:	aa0403e1 	mov	x1, x4
   9d970:	14002fd8 	b	a98d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   9d974:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d978:	91262021 	add	x1, x1, #0x988
   9d97c:	91048020 	add	x0, x1, #0x120
   9d980:	52801802 	mov	w2, #0xc0                  	// #192
   9d984:	97fffb3f 	bl	9c680 <assertion_failed>
   9d988:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d98c:	91262021 	add	x1, x1, #0x988
   9d990:	91052020 	add	x0, x1, #0x148
   9d994:	52801822 	mov	w2, #0xc1                  	// #193
   9d998:	97fffb3a 	bl	9c680 <assertion_failed>
   9d99c:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d9a0:	91262021 	add	x1, x1, #0x988
   9d9a4:	9105c020 	add	x0, x1, #0x170
   9d9a8:	52801862 	mov	w2, #0xc3                  	// #195
   9d9ac:	97fffb35 	bl	9c680 <assertion_failed>
   9d9b0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d9b4:	91262021 	add	x1, x1, #0x988
   9d9b8:	91060020 	add	x0, x1, #0x180
   9d9bc:	52801882 	mov	w2, #0xc4                  	// #196
   9d9c0:	97fffb30 	bl	9c680 <assertion_failed>
   9d9c4:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d9c8:	91262021 	add	x1, x1, #0x988
   9d9cc:	91064020 	add	x0, x1, #0x190
   9d9d0:	52801962 	mov	w2, #0xcb                  	// #203
   9d9d4:	97fffb2b 	bl	9c680 <assertion_failed>
   9d9d8:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9d9dc:	91262021 	add	x1, x1, #0x988
   9d9e0:	91028020 	add	x0, x1, #0xa0
   9d9e4:	52801782 	mov	w2, #0xbc                  	// #188
   9d9e8:	97fffb26 	bl	9c680 <assertion_failed>
   9d9ec:	d503201f 	nop

000000000009d9f0 <CGPIOPin::DisconnectInterrupt()>:
   9d9f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d9f4:	aa0003e1 	mov	x1, x0
   9d9f8:	910003fd 	mov	x29, sp
   9d9fc:	b9401400 	ldr	w0, [x0, #20]
   9da00:	7100001f 	cmp	w0, #0x0
   9da04:	51000800 	sub	w0, w0, #0x2
   9da08:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9da0c:	54000448 	b.hi	9da94 <CGPIOPin::DisconnectInterrupt()+0xa4>  // b.pmore
   9da10:	b9403c20 	ldr	w0, [x1, #60]
   9da14:	7100181f 	cmp	w0, #0x6
   9da18:	54000161 	b.ne	9da44 <CGPIOPin::DisconnectInterrupt()+0x54>  // b.any
   9da1c:	b9404020 	ldr	w0, [x1, #64]
   9da20:	7100181f 	cmp	w0, #0x6
   9da24:	540001a1 	b.ne	9da58 <CGPIOPin::DisconnectInterrupt()+0x68>  // b.any
   9da28:	f9401420 	ldr	x0, [x1, #40]
   9da2c:	b4000200 	cbz	x0, 9da6c <CGPIOPin::DisconnectInterrupt()+0x7c>
   9da30:	f900143f 	str	xzr, [x1, #40]
   9da34:	f9401020 	ldr	x0, [x1, #32]
   9da38:	b4000240 	cbz	x0, 9da80 <CGPIOPin::DisconnectInterrupt()+0x90>
   9da3c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9da40:	14002fcc 	b	a9970 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   9da44:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9da48:	91262021 	add	x1, x1, #0x988
   9da4c:	91048020 	add	x0, x1, #0x120
   9da50:	52801aa2 	mov	w2, #0xd5                  	// #213
   9da54:	97fffb0b 	bl	9c680 <assertion_failed>
   9da58:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9da5c:	91262021 	add	x1, x1, #0x988
   9da60:	91052020 	add	x0, x1, #0x148
   9da64:	52801ac2 	mov	w2, #0xd6                  	// #214
   9da68:	97fffb06 	bl	9c680 <assertion_failed>
   9da6c:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9da70:	91262021 	add	x1, x1, #0x988
   9da74:	91068020 	add	x0, x1, #0x1a0
   9da78:	52801b02 	mov	w2, #0xd8                  	// #216
   9da7c:	97fffb01 	bl	9c680 <assertion_failed>
   9da80:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9da84:	91262021 	add	x1, x1, #0x988
   9da88:	91064020 	add	x0, x1, #0x190
   9da8c:	52801b62 	mov	w2, #0xdb                  	// #219
   9da90:	97fffafc 	bl	9c680 <assertion_failed>
   9da94:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9da98:	91262021 	add	x1, x1, #0x988
   9da9c:	91028020 	add	x0, x1, #0xa0
   9daa0:	52801a22 	mov	w2, #0xd1                  	// #209
   9daa4:	97fffaf7 	bl	9c680 <assertion_failed>
   9daa8:	d503201f 	nop
   9daac:	d503201f 	nop

000000000009dab0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   9dab0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dab4:	910003fd 	mov	x29, sp
   9dab8:	a90153f3 	stp	x19, x20, [sp, #16]
   9dabc:	aa0003f3 	mov	x19, x0
   9dac0:	b9401400 	ldr	w0, [x0, #20]
   9dac4:	f90013f5 	str	x21, [sp, #32]
   9dac8:	7100001f 	cmp	w0, #0x0
   9dacc:	51000800 	sub	w0, w0, #0x2
   9dad0:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9dad4:	540007e8 	b.hi	9dbd0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>  // b.pmore
   9dad8:	f9401660 	ldr	x0, [x19, #40]
   9dadc:	b4000520 	cbz	x0, 9db80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   9dae0:	b9403e60 	ldr	w0, [x19, #60]
   9dae4:	7100181f 	cmp	w0, #0x6
   9dae8:	54000561 	b.ne	9db94 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>  // b.any
   9daec:	7100143f 	cmp	w1, #0x5
   9daf0:	540005cc 	b.gt	9dba8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
   9daf4:	b9404260 	ldr	w0, [x19, #64]
   9daf8:	6b01001f 	cmp	w0, w1
   9dafc:	54000600 	b.eq	9dbbc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>  // b.none
   9db00:	b9400e62 	ldr	w2, [x19, #12]
   9db04:	0b010434 	add	w20, w1, w1, lsl #1
   9db08:	52800983 	mov	w3, #0x4c                  	// #76
   9db0c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   9db10:	b00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9db14:	b9003e61 	str	w1, [x19, #60]
   9db18:	b94ebaa0 	ldr	w0, [x21, #3768]
   9db1c:	0b030041 	add	w1, w2, w3
   9db20:	0b140834 	add	w20, w1, w20, lsl #2
   9db24:	350001e0 	cbnz	w0, 9db60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb0>
   9db28:	b9401261 	ldr	w1, [x19, #16]
   9db2c:	b9400280 	ldr	w0, [x20]
   9db30:	2a010000 	orr	w0, w0, w1
   9db34:	b9000280 	str	w0, [x20]
   9db38:	b94ebaa0 	ldr	w0, [x21, #3768]
   9db3c:	350000a0 	cbnz	w0, 9db50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   9db40:	a94153f3 	ldp	x19, x20, [sp, #16]
   9db44:	f94013f5 	ldr	x21, [sp, #32]
   9db48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9db4c:	d65f03c0 	ret
   9db50:	a94153f3 	ldp	x19, x20, [sp, #16]
   9db54:	f94013f5 	ldr	x21, [sp, #32]
   9db58:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9db5c:	1400220d 	b	a6390 <LeaveCritical>
   9db60:	940021dc 	bl	a62d0 <EnterCritical>
   9db64:	b9401261 	ldr	w1, [x19, #16]
   9db68:	b9400280 	ldr	w0, [x20]
   9db6c:	2a010000 	orr	w0, w0, w1
   9db70:	b9000280 	str	w0, [x20]
   9db74:	b94ebaa0 	ldr	w0, [x21, #3768]
   9db78:	34fffe40 	cbz	w0, 9db40 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x90>
   9db7c:	17fffff5 	b	9db50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   9db80:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9db84:	91262021 	add	x1, x1, #0x988
   9db88:	91068020 	add	x0, x1, #0x1a0
   9db8c:	52801c82 	mov	w2, #0xe4                  	// #228
   9db90:	97fffabc 	bl	9c680 <assertion_failed>
   9db94:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9db98:	91262021 	add	x1, x1, #0x988
   9db9c:	91048020 	add	x0, x1, #0x120
   9dba0:	52801cc2 	mov	w2, #0xe6                  	// #230
   9dba4:	97fffab7 	bl	9c680 <assertion_failed>
   9dba8:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dbac:	91262021 	add	x1, x1, #0x988
   9dbb0:	9106c020 	add	x0, x1, #0x1b0
   9dbb4:	52801ce2 	mov	w2, #0xe7                  	// #231
   9dbb8:	97fffab2 	bl	9c680 <assertion_failed>
   9dbbc:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dbc0:	91262021 	add	x1, x1, #0x988
   9dbc4:	91076020 	add	x0, x1, #0x1d8
   9dbc8:	52801d02 	mov	w2, #0xe8                  	// #232
   9dbcc:	97fffaad 	bl	9c680 <assertion_failed>
   9dbd0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dbd4:	91262021 	add	x1, x1, #0x988
   9dbd8:	91028020 	add	x0, x1, #0xa0
   9dbdc:	52801c22 	mov	w2, #0xe1                  	// #225
   9dbe0:	97fffaa8 	bl	9c680 <assertion_failed>
   9dbe4:	d503201f 	nop
   9dbe8:	d503201f 	nop
   9dbec:	d503201f 	nop

000000000009dbf0 <CGPIOPin::DisableInterrupt()>:
   9dbf0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dbf4:	910003fd 	mov	x29, sp
   9dbf8:	a90153f3 	stp	x19, x20, [sp, #16]
   9dbfc:	aa0003f4 	mov	x20, x0
   9dc00:	b9401400 	ldr	w0, [x0, #20]
   9dc04:	f90013f5 	str	x21, [sp, #32]
   9dc08:	7100001f 	cmp	w0, #0x0
   9dc0c:	51000800 	sub	w0, w0, #0x2
   9dc10:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9dc14:	54000588 	b.hi	9dcc4 <CGPIOPin::DisableInterrupt()+0xd4>  // b.pmore
   9dc18:	b9403e81 	ldr	w1, [x20, #60]
   9dc1c:	7100143f 	cmp	w1, #0x5
   9dc20:	5400048c 	b.gt	9dcb0 <CGPIOPin::DisableInterrupt()+0xc0>
   9dc24:	b9400e93 	ldr	w19, [x20, #12]
   9dc28:	0b010421 	add	w1, w1, w1, lsl #1
   9dc2c:	52800982 	mov	w2, #0x4c                  	// #76
   9dc30:	72bfc402 	movk	w2, #0xfe20, lsl #16
   9dc34:	b00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9dc38:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dc3c:	0b020273 	add	w19, w19, w2
   9dc40:	0b010a73 	add	w19, w19, w1, lsl #2
   9dc44:	350001a0 	cbnz	w0, 9dc78 <CGPIOPin::DisableInterrupt()+0x88>
   9dc48:	b9400261 	ldr	w1, [x19]
   9dc4c:	b9401280 	ldr	w0, [x20, #16]
   9dc50:	0a200020 	bic	w0, w1, w0
   9dc54:	b9000260 	str	w0, [x19]
   9dc58:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dc5c:	350001c0 	cbnz	w0, 9dc94 <CGPIOPin::DisableInterrupt()+0xa4>
   9dc60:	528000c0 	mov	w0, #0x6                   	// #6
   9dc64:	f94013f5 	ldr	x21, [sp, #32]
   9dc68:	b9003e80 	str	w0, [x20, #60]
   9dc6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dc70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dc74:	d65f03c0 	ret
   9dc78:	94002196 	bl	a62d0 <EnterCritical>
   9dc7c:	b9400261 	ldr	w1, [x19]
   9dc80:	b9401280 	ldr	w0, [x20, #16]
   9dc84:	0a200020 	bic	w0, w1, w0
   9dc88:	b9000260 	str	w0, [x19]
   9dc8c:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dc90:	34fffe80 	cbz	w0, 9dc60 <CGPIOPin::DisableInterrupt()+0x70>
   9dc94:	940021bf 	bl	a6390 <LeaveCritical>
   9dc98:	528000c0 	mov	w0, #0x6                   	// #6
   9dc9c:	f94013f5 	ldr	x21, [sp, #32]
   9dca0:	b9003e80 	str	w0, [x20, #60]
   9dca4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dca8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dcac:	d65f03c0 	ret
   9dcb0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dcb4:	91262021 	add	x1, x1, #0x988
   9dcb8:	9107e020 	add	x0, x1, #0x1f8
   9dcbc:	52801f62 	mov	w2, #0xfb                  	// #251
   9dcc0:	97fffa70 	bl	9c680 <assertion_failed>
   9dcc4:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dcc8:	91262021 	add	x1, x1, #0x988
   9dccc:	91028020 	add	x0, x1, #0xa0
   9dcd0:	52801ee2 	mov	w2, #0xf7                  	// #247
   9dcd4:	97fffa6b 	bl	9c680 <assertion_failed>
   9dcd8:	d503201f 	nop
   9dcdc:	d503201f 	nop

000000000009dce0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   9dce0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dce4:	910003fd 	mov	x29, sp
   9dce8:	a90153f3 	stp	x19, x20, [sp, #16]
   9dcec:	aa0003f3 	mov	x19, x0
   9dcf0:	b9401400 	ldr	w0, [x0, #20]
   9dcf4:	f90013f5 	str	x21, [sp, #32]
   9dcf8:	7100001f 	cmp	w0, #0x0
   9dcfc:	51000800 	sub	w0, w0, #0x2
   9dd00:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9dd04:	540007e8 	b.hi	9de00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>  // b.pmore
   9dd08:	f9401660 	ldr	x0, [x19, #40]
   9dd0c:	b4000520 	cbz	x0, 9ddb0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   9dd10:	b9404260 	ldr	w0, [x19, #64]
   9dd14:	7100181f 	cmp	w0, #0x6
   9dd18:	54000561 	b.ne	9ddc4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>  // b.any
   9dd1c:	7100143f 	cmp	w1, #0x5
   9dd20:	540005cc 	b.gt	9ddd8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   9dd24:	b9403e60 	ldr	w0, [x19, #60]
   9dd28:	6b01001f 	cmp	w0, w1
   9dd2c:	54000600 	b.eq	9ddec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>  // b.none
   9dd30:	b9400e62 	ldr	w2, [x19, #12]
   9dd34:	0b010434 	add	w20, w1, w1, lsl #1
   9dd38:	52800983 	mov	w3, #0x4c                  	// #76
   9dd3c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   9dd40:	b00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9dd44:	b9004261 	str	w1, [x19, #64]
   9dd48:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dd4c:	0b030041 	add	w1, w2, w3
   9dd50:	0b140834 	add	w20, w1, w20, lsl #2
   9dd54:	350001e0 	cbnz	w0, 9dd90 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb0>
   9dd58:	b9401261 	ldr	w1, [x19, #16]
   9dd5c:	b9400280 	ldr	w0, [x20]
   9dd60:	2a010000 	orr	w0, w0, w1
   9dd64:	b9000280 	str	w0, [x20]
   9dd68:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dd6c:	350000a0 	cbnz	w0, 9dd80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   9dd70:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dd74:	f94013f5 	ldr	x21, [sp, #32]
   9dd78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dd7c:	d65f03c0 	ret
   9dd80:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dd84:	f94013f5 	ldr	x21, [sp, #32]
   9dd88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dd8c:	14002181 	b	a6390 <LeaveCritical>
   9dd90:	94002150 	bl	a62d0 <EnterCritical>
   9dd94:	b9401261 	ldr	w1, [x19, #16]
   9dd98:	b9400280 	ldr	w0, [x20]
   9dd9c:	2a010000 	orr	w0, w0, w1
   9dda0:	b9000280 	str	w0, [x20]
   9dda4:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dda8:	34fffe40 	cbz	w0, 9dd70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x90>
   9ddac:	17fffff5 	b	9dd80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   9ddb0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9ddb4:	91262021 	add	x1, x1, #0x988
   9ddb8:	91068020 	add	x0, x1, #0x1a0
   9ddbc:	528021a2 	mov	w2, #0x10d                 	// #269
   9ddc0:	97fffa30 	bl	9c680 <assertion_failed>
   9ddc4:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9ddc8:	91262021 	add	x1, x1, #0x988
   9ddcc:	91052020 	add	x0, x1, #0x148
   9ddd0:	528021e2 	mov	w2, #0x10f                 	// #271
   9ddd4:	97fffa2b 	bl	9c680 <assertion_failed>
   9ddd8:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dddc:	91262021 	add	x1, x1, #0x988
   9dde0:	9106c020 	add	x0, x1, #0x1b0
   9dde4:	52802202 	mov	w2, #0x110                 	// #272
   9dde8:	97fffa26 	bl	9c680 <assertion_failed>
   9ddec:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9ddf0:	91262021 	add	x1, x1, #0x988
   9ddf4:	91088020 	add	x0, x1, #0x220
   9ddf8:	52802222 	mov	w2, #0x111                 	// #273
   9ddfc:	97fffa21 	bl	9c680 <assertion_failed>
   9de00:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9de04:	91262021 	add	x1, x1, #0x988
   9de08:	91028020 	add	x0, x1, #0xa0
   9de0c:	52802142 	mov	w2, #0x10a                 	// #266
   9de10:	97fffa1c 	bl	9c680 <assertion_failed>
   9de14:	d503201f 	nop
   9de18:	d503201f 	nop
   9de1c:	d503201f 	nop

000000000009de20 <CGPIOPin::DisableInterrupt2()>:
   9de20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9de24:	910003fd 	mov	x29, sp
   9de28:	a90153f3 	stp	x19, x20, [sp, #16]
   9de2c:	aa0003f4 	mov	x20, x0
   9de30:	b9401400 	ldr	w0, [x0, #20]
   9de34:	f90013f5 	str	x21, [sp, #32]
   9de38:	7100001f 	cmp	w0, #0x0
   9de3c:	51000800 	sub	w0, w0, #0x2
   9de40:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   9de44:	54000588 	b.hi	9def4 <CGPIOPin::DisableInterrupt2()+0xd4>  // b.pmore
   9de48:	b9404281 	ldr	w1, [x20, #64]
   9de4c:	7100143f 	cmp	w1, #0x5
   9de50:	5400048c 	b.gt	9dee0 <CGPIOPin::DisableInterrupt2()+0xc0>
   9de54:	b9400e93 	ldr	w19, [x20, #12]
   9de58:	0b010421 	add	w1, w1, w1, lsl #1
   9de5c:	52800982 	mov	w2, #0x4c                  	// #76
   9de60:	72bfc402 	movk	w2, #0xfe20, lsl #16
   9de64:	b00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9de68:	b94ebaa0 	ldr	w0, [x21, #3768]
   9de6c:	0b020273 	add	w19, w19, w2
   9de70:	0b010a73 	add	w19, w19, w1, lsl #2
   9de74:	350001a0 	cbnz	w0, 9dea8 <CGPIOPin::DisableInterrupt2()+0x88>
   9de78:	b9400261 	ldr	w1, [x19]
   9de7c:	b9401280 	ldr	w0, [x20, #16]
   9de80:	0a200020 	bic	w0, w1, w0
   9de84:	b9000260 	str	w0, [x19]
   9de88:	b94ebaa0 	ldr	w0, [x21, #3768]
   9de8c:	350001c0 	cbnz	w0, 9dec4 <CGPIOPin::DisableInterrupt2()+0xa4>
   9de90:	528000c0 	mov	w0, #0x6                   	// #6
   9de94:	f94013f5 	ldr	x21, [sp, #32]
   9de98:	b9004280 	str	w0, [x20, #64]
   9de9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dea0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dea4:	d65f03c0 	ret
   9dea8:	9400210a 	bl	a62d0 <EnterCritical>
   9deac:	b9400261 	ldr	w1, [x19]
   9deb0:	b9401280 	ldr	w0, [x20, #16]
   9deb4:	0a200020 	bic	w0, w1, w0
   9deb8:	b9000260 	str	w0, [x19]
   9debc:	b94ebaa0 	ldr	w0, [x21, #3768]
   9dec0:	34fffe80 	cbz	w0, 9de90 <CGPIOPin::DisableInterrupt2()+0x70>
   9dec4:	94002133 	bl	a6390 <LeaveCritical>
   9dec8:	528000c0 	mov	w0, #0x6                   	// #6
   9decc:	f94013f5 	ldr	x21, [sp, #32]
   9ded0:	b9004280 	str	w0, [x20, #64]
   9ded4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ded8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dedc:	d65f03c0 	ret
   9dee0:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9dee4:	91262021 	add	x1, x1, #0x988
   9dee8:	91090020 	add	x0, x1, #0x240
   9deec:	52802482 	mov	w2, #0x124                 	// #292
   9def0:	97fff9e4 	bl	9c680 <assertion_failed>
   9def4:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9def8:	91262021 	add	x1, x1, #0x988
   9defc:	91028020 	add	x0, x1, #0xa0
   9df00:	52802402 	mov	w2, #0x120                 	// #288
   9df04:	97fff9df 	bl	9c680 <assertion_failed>
   9df08:	d503201f 	nop
   9df0c:	d503201f 	nop

000000000009df10 <CGPIOPin::AcknowledgeInterrupt()>:
   9df10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9df14:	910003fd 	mov	x29, sp
   9df18:	f9401401 	ldr	x1, [x0, #40]
   9df1c:	b4000141 	cbz	x1, 9df44 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   9df20:	3940e001 	ldrb	w1, [x0, #56]
   9df24:	350001a1 	cbnz	w1, 9df58 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   9df28:	29418801 	ldp	w1, w2, [x0, #12]
   9df2c:	52800803 	mov	w3, #0x40                  	// #64
   9df30:	72bfc403 	movk	w3, #0xfe20, lsl #16
   9df34:	0b030020 	add	w0, w1, w3
   9df38:	b9000002 	str	w2, [x0]
   9df3c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9df40:	d65f03c0 	ret
   9df44:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9df48:	91262021 	add	x1, x1, #0x988
   9df4c:	91068020 	add	x0, x1, #0x1a0
   9df50:	52802662 	mov	w2, #0x133                 	// #307
   9df54:	97fff9cb 	bl	9c680 <assertion_failed>
   9df58:	b00000a1 	adrp	x1, b2000 <vtable for CPartition>
   9df5c:	91262021 	add	x1, x1, #0x988
   9df60:	9109a020 	add	x0, x1, #0x268
   9df64:	52802682 	mov	w2, #0x134                 	// #308
   9df68:	97fff9c6 	bl	9c680 <assertion_failed>
   9df6c:	d503201f 	nop

000000000009df70 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   9df70:	6a200022 	bics	w2, w1, w0
   9df74:	54000080 	b.eq	9df84 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   9df78:	d2800503 	mov	x3, #0x28                  	// #40
   9df7c:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   9df80:	b9000062 	str	w2, [x3]
   9df84:	6a010000 	ands	w0, w0, w1
   9df88:	54000080 	b.eq	9df98 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   9df8c:	d2800381 	mov	x1, #0x1c                  	// #28
   9df90:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   9df94:	b9000020 	str	w0, [x1]
   9df98:	d65f03c0 	ret
   9df9c:	d503201f 	nop

000000000009dfa0 <CGPIOPin::ReadAll()>:
   9dfa0:	d2800680 	mov	x0, #0x34                  	// #52
   9dfa4:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   9dfa8:	b9400000 	ldr	w0, [x0]
   9dfac:	d65f03c0 	ret

000000000009dfb0 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   9dfb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dfb4:	910003fd 	mov	x29, sp
   9dfb8:	f90013f5 	str	x21, [sp, #32]
   9dfbc:	b00000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9dfc0:	b94ebaa2 	ldr	w2, [x21, #3768]
   9dfc4:	a90153f3 	stp	x19, x20, [sp, #16]
   9dfc8:	aa0003f4 	mov	x20, x0
   9dfcc:	2a0103f3 	mov	w19, w1
   9dfd0:	35000382 	cbnz	w2, 9e040 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   9dfd4:	b9400a80 	ldr	w0, [x20, #8]
   9dfd8:	7100d41f 	cmp	w0, #0x35
   9dfdc:	540003c8 	b.hi	9e054 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa4>  // b.pmore
   9dfe0:	52800722 	mov	w2, #0x39                  	// #57
   9dfe4:	72a7f102 	movk	w2, #0x3f88, lsl #16
   9dfe8:	0b401042 	add	w2, w2, w0, lsr #4
   9dfec:	71000a7f 	cmp	w19, #0x2
   9dff0:	531f0c00 	ubfiz	w0, w0, #1, #4
   9dff4:	531e7442 	lsl	w2, w2, #2
   9dff8:	5400040c 	b.gt	9e078 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xc8>
   9dffc:	b00000a4 	adrp	x4, b2000 <vtable for CPartition>
   9e000:	91262084 	add	x4, x4, #0x988
   9e004:	b9400045 	ldr	w5, [x2]
   9e008:	9109e084 	add	x4, x4, #0x278
   9e00c:	52800063 	mov	w3, #0x3                   	// #3
   9e010:	b873d881 	ldr	w1, [x4, w19, sxtw #2]
   9e014:	1ac02063 	lsl	w3, w3, w0
   9e018:	0a2300a3 	bic	w3, w5, w3
   9e01c:	1ac02020 	lsl	w0, w1, w0
   9e020:	2a030000 	orr	w0, w0, w3
   9e024:	b9000040 	str	w0, [x2]
   9e028:	b94ebaa0 	ldr	w0, [x21, #3768]
   9e02c:	350001e0 	cbnz	w0, 9e068 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xb8>
   9e030:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e034:	f94013f5 	ldr	x21, [sp, #32]
   9e038:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e03c:	d65f03c0 	ret
   9e040:	2a0203e0 	mov	w0, w2
   9e044:	940020a3 	bl	a62d0 <EnterCritical>
   9e048:	b9400a80 	ldr	w0, [x20, #8]
   9e04c:	7100d41f 	cmp	w0, #0x35
   9e050:	54fffc89 	b.ls	9dfe0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x30>  // b.plast
   9e054:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e058:	91262021 	add	x1, x1, #0x988
   9e05c:	9100a020 	add	x0, x1, #0x28
   9e060:	52802da2 	mov	w2, #0x16d                 	// #365
   9e064:	97fff987 	bl	9c680 <assertion_failed>
   9e068:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e06c:	f94013f5 	ldr	x21, [sp, #32]
   9e070:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e074:	140020c7 	b	a6390 <LeaveCritical>
   9e078:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e07c:	91262021 	add	x1, x1, #0x988
   9e080:	910a2020 	add	x0, x1, #0x288
   9e084:	52802e22 	mov	w2, #0x171                 	// #369
   9e088:	97fff97e 	bl	9c680 <assertion_failed>
   9e08c:	d503201f 	nop

000000000009e090 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   9e090:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e094:	910003fd 	mov	x29, sp
   9e098:	b9400803 	ldr	w3, [x0, #8]
   9e09c:	a90153f3 	stp	x19, x20, [sp, #16]
   9e0a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e0a4:	7100d47f 	cmp	w3, #0x35
   9e0a8:	54000508 	b.hi	9e148 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>  // b.pmore
   9e0ac:	529999a0 	mov	w0, #0xcccd                	// #52429
   9e0b0:	72b99980 	movk	w0, #0xcccc, lsl #16
   9e0b4:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   9e0b8:	7100143f 	cmp	w1, #0x5
   9e0bc:	9ba07c60 	umull	x0, w3, w0
   9e0c0:	2a0103f5 	mov	w21, w1
   9e0c4:	d363fc00 	lsr	x0, x0, #35
   9e0c8:	0b000802 	add	w2, w0, w0, lsl #2
   9e0cc:	0b130000 	add	w0, w0, w19
   9e0d0:	531e7413 	lsl	w19, w0, #2
   9e0d4:	4b020460 	sub	w0, w3, w2, lsl #1
   9e0d8:	0b000414 	add	w20, w0, w0, lsl #1
   9e0dc:	54000408 	b.hi	9e15c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>  // b.pmore
   9e0e0:	900000d6 	adrp	x22, b6000 <s_OldInfo+0x68>
   9e0e4:	b94ebac0 	ldr	w0, [x22, #3768]
   9e0e8:	35000240 	cbnz	w0, 9e130 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   9e0ec:	900000a3 	adrp	x3, b2000 <vtable for CPartition>
   9e0f0:	91262063 	add	x3, x3, #0x988
   9e0f4:	b9400264 	ldr	w4, [x19]
   9e0f8:	910a6063 	add	x3, x3, #0x298
   9e0fc:	528000e2 	mov	w2, #0x7                   	// #7
   9e100:	b8755860 	ldr	w0, [x3, w21, uxtw #2]
   9e104:	1ad42041 	lsl	w1, w2, w20
   9e108:	0a210081 	bic	w1, w4, w1
   9e10c:	1ad42000 	lsl	w0, w0, w20
   9e110:	2a010000 	orr	w0, w0, w1
   9e114:	b9000260 	str	w0, [x19]
   9e118:	b94ebac0 	ldr	w0, [x22, #3768]
   9e11c:	350000e0 	cbnz	w0, 9e138 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   9e120:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e124:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e128:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e12c:	d65f03c0 	ret
   9e130:	94002068 	bl	a62d0 <EnterCritical>
   9e134:	17ffffee 	b	9e0ec <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   9e138:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e13c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e140:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e144:	14002093 	b	a6390 <LeaveCritical>
   9e148:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e14c:	91262021 	add	x1, x1, #0x988
   9e150:	9100a020 	add	x0, x1, #0x28
   9e154:	52803022 	mov	w2, #0x181                 	// #385
   9e158:	97fff94a 	bl	9c680 <assertion_failed>
   9e15c:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e160:	91262021 	add	x1, x1, #0x988
   9e164:	910ac020 	add	x0, x1, #0x2b0
   9e168:	528030a2 	mov	w2, #0x185                 	// #389
   9e16c:	97fff945 	bl	9c680 <assertion_failed>

000000000009e170 <CGPIOPin::InterruptHandler()>:
   9e170:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e174:	910003fd 	mov	x29, sp
   9e178:	b9401401 	ldr	w1, [x0, #20]
   9e17c:	7100003f 	cmp	w1, #0x0
   9e180:	51000821 	sub	w1, w1, #0x2
   9e184:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   9e188:	540002e8 	b.hi	9e1e4 <CGPIOPin::InterruptHandler()+0x74>  // b.pmore
   9e18c:	b9403c01 	ldr	w1, [x0, #60]
   9e190:	7100143f 	cmp	w1, #0x5
   9e194:	540000ec 	b.gt	9e1b0 <CGPIOPin::InterruptHandler()+0x40>
   9e198:	f9401401 	ldr	x1, [x0, #40]
   9e19c:	b40001a1 	cbz	x1, 9e1d0 <CGPIOPin::InterruptHandler()+0x60>
   9e1a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9e1a4:	aa0103f0 	mov	x16, x1
   9e1a8:	f9401800 	ldr	x0, [x0, #48]
   9e1ac:	d61f0200 	br	x16
   9e1b0:	b9404001 	ldr	w1, [x0, #64]
   9e1b4:	7100143f 	cmp	w1, #0x5
   9e1b8:	54ffff0d 	b.le	9e198 <CGPIOPin::InterruptHandler()+0x28>
   9e1bc:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e1c0:	91262021 	add	x1, x1, #0x988
   9e1c4:	910b0020 	add	x0, x1, #0x2c0
   9e1c8:	528032a2 	mov	w2, #0x195                 	// #405
   9e1cc:	97fff92d 	bl	9c680 <assertion_failed>
   9e1d0:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e1d4:	91262021 	add	x1, x1, #0x988
   9e1d8:	91068020 	add	x0, x1, #0x1a0
   9e1dc:	52803302 	mov	w2, #0x198                 	// #408
   9e1e0:	97fff928 	bl	9c680 <assertion_failed>
   9e1e4:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e1e8:	91262021 	add	x1, x1, #0x988
   9e1ec:	91028020 	add	x0, x1, #0xa0
   9e1f0:	52803242 	mov	w2, #0x192                 	// #402
   9e1f4:	97fff923 	bl	9c680 <assertion_failed>
   9e1f8:	d503201f 	nop
   9e1fc:	d503201f 	nop

000000000009e200 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   9e200:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e204:	910003fd 	mov	x29, sp
   9e208:	7100d41f 	cmp	w0, #0x35
   9e20c:	a90153f3 	stp	x19, x20, [sp, #16]
   9e210:	f90013f5 	str	x21, [sp, #32]
   9e214:	54000408 	b.hi	9e294 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x94>  // b.pmore
   9e218:	52800273 	mov	w19, #0x13                  	// #19
   9e21c:	72a7f113 	movk	w19, #0x3f88, lsl #16
   9e220:	0b401673 	add	w19, w19, w0, lsr #5
   9e224:	900000d5 	adrp	x21, b6000 <s_OldInfo+0x68>
   9e228:	2a0003f4 	mov	w20, w0
   9e22c:	52800021 	mov	w1, #0x1                   	// #1
   9e230:	b94ebaa0 	ldr	w0, [x21, #3768]
   9e234:	1ad42034 	lsl	w20, w1, w20
   9e238:	531e7673 	lsl	w19, w19, #2
   9e23c:	35000200 	cbnz	w0, 9e27c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   9e240:	d2801162 	mov	x2, #0x8b                  	// #139
   9e244:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   9e248:	2a3403e1 	mvn	w1, w20
   9e24c:	d503201f 	nop
   9e250:	b9400260 	ldr	w0, [x19]
   9e254:	0a000020 	and	w0, w1, w0
   9e258:	b800c660 	str	w0, [x19], #12
   9e25c:	eb02027f 	cmp	x19, x2
   9e260:	54ffff89 	b.ls	9e250 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>  // b.plast
   9e264:	b94ebaa0 	ldr	w0, [x21, #3768]
   9e268:	350000e0 	cbnz	w0, 9e284 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   9e26c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e270:	f94013f5 	ldr	x21, [sp, #32]
   9e274:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e278:	d65f03c0 	ret
   9e27c:	94002015 	bl	a62d0 <EnterCritical>
   9e280:	17fffff0 	b	9e240 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x40>
   9e284:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e288:	f94013f5 	ldr	x21, [sp, #32]
   9e28c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e290:	14002040 	b	a6390 <LeaveCritical>
   9e294:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e298:	91262021 	add	x1, x1, #0x988
   9e29c:	910c4020 	add	x0, x1, #0x310
   9e2a0:	528033c2 	mov	w2, #0x19e                 	// #414
   9e2a4:	97fff8f7 	bl	9c680 <assertion_failed>
   9e2a8:	d503201f 	nop
   9e2ac:	d503201f 	nop

000000000009e2b0 <__static_initialization_and_destruction_0(int, int)>:
   9e2b0:	529fffe2 	mov	w2, #0xffff                	// #65535
   9e2b4:	6b02003f 	cmp	w1, w2
   9e2b8:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   9e2bc:	54000040 	b.eq	9e2c4 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   9e2c0:	d65f03c0 	ret
   9e2c4:	900000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9e2c8:	52800021 	mov	w1, #0x1                   	// #1
   9e2cc:	b90eb801 	str	w1, [x0, #3768]
   9e2d0:	d65f03c0 	ret
	...

000000000009e2e0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   9e2e0:	900000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9e2e4:	52800021 	mov	w1, #0x1                   	// #1
   9e2e8:	b90eb801 	str	w1, [x0, #3768]
   9e2ec:	d65f03c0 	ret

000000000009e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   9e2f0:	52800003 	mov	w3, #0x0                   	// #0
   9e2f4:	1400000a 	b	9e31c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x2c>
   9e2f8:	5100c021 	sub	w1, w1, #0x30
   9e2fc:	0b020422 	add	w2, w1, w2, lsl #1
   9e300:	12001c21 	and	w1, w1, #0xff
   9e304:	7100243f 	cmp	w1, #0x9
   9e308:	54000148 	b.hi	9e330 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.pmore
   9e30c:	6b02007f 	cmp	w3, w2
   9e310:	2a0203e3 	mov	w3, w2
   9e314:	3a419844 	ccmn	w2, #0x1, #0x4, ls  // ls = plast
   9e318:	540000c0 	b.eq	9e330 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x40>  // b.none
   9e31c:	38c01401 	ldrsb	w1, [x0], #1
   9e320:	0b030862 	add	w2, w3, w3, lsl #2
   9e324:	35fffea1 	cbnz	w1, 9e2f8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   9e328:	2a0303e0 	mov	w0, w3
   9e32c:	d65f03c0 	ret
   9e330:	12800003 	mov	w3, #0xffffffff            	// #-1
   9e334:	2a0303e0 	mov	w0, w3
   9e338:	d65f03c0 	ret
   9e33c:	d503201f 	nop

000000000009e340 <CKernelOptions::~CKernelOptions()>:
   9e340:	900000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9e344:	f907601f 	str	xzr, [x0, #3776]
   9e348:	d65f03c0 	ret
   9e34c:	d503201f 	nop

000000000009e350 <CKernelOptions::GetWidth() const>:
   9e350:	b9481800 	ldr	w0, [x0, #2072]
   9e354:	d65f03c0 	ret
   9e358:	d503201f 	nop
   9e35c:	d503201f 	nop

000000000009e360 <CKernelOptions::GetHeight() const>:
   9e360:	b9481c00 	ldr	w0, [x0, #2076]
   9e364:	d65f03c0 	ret
   9e368:	d503201f 	nop
   9e36c:	d503201f 	nop

000000000009e370 <CKernelOptions::GetLogDevice() const>:
   9e370:	91208000 	add	x0, x0, #0x820
   9e374:	d65f03c0 	ret
   9e378:	d503201f 	nop
   9e37c:	d503201f 	nop

000000000009e380 <CKernelOptions::GetLogLevel() const>:
   9e380:	b9483400 	ldr	w0, [x0, #2100]
   9e384:	d65f03c0 	ret
   9e388:	d503201f 	nop
   9e38c:	d503201f 	nop

000000000009e390 <CKernelOptions::GetKeyMap() const>:
   9e390:	9120e000 	add	x0, x0, #0x838
   9e394:	d65f03c0 	ret
   9e398:	d503201f 	nop
   9e39c:	d503201f 	nop

000000000009e3a0 <CKernelOptions::GetUSBPowerDelay() const>:
   9e3a0:	b9483c00 	ldr	w0, [x0, #2108]
   9e3a4:	d65f03c0 	ret
   9e3a8:	d503201f 	nop
   9e3ac:	d503201f 	nop

000000000009e3b0 <CKernelOptions::GetUSBFullSpeed() const>:
   9e3b0:	39610000 	ldrb	w0, [x0, #2112]
   9e3b4:	d65f03c0 	ret
   9e3b8:	d503201f 	nop
   9e3bc:	d503201f 	nop

000000000009e3c0 <CKernelOptions::GetSoundDevice() const>:
   9e3c0:	91210400 	add	x0, x0, #0x841
   9e3c4:	d65f03c0 	ret
   9e3c8:	d503201f 	nop
   9e3cc:	d503201f 	nop

000000000009e3d0 <CKernelOptions::GetSoundOption() const>:
   9e3d0:	b9485800 	ldr	w0, [x0, #2136]
   9e3d4:	d65f03c0 	ret
   9e3d8:	d503201f 	nop
   9e3dc:	d503201f 	nop

000000000009e3e0 <CKernelOptions::GetCPUSpeed() const>:
   9e3e0:	b9485c00 	ldr	w0, [x0, #2140]
   9e3e4:	d65f03c0 	ret
   9e3e8:	d503201f 	nop
   9e3ec:	d503201f 	nop

000000000009e3f0 <CKernelOptions::GetSoCMaxTemp() const>:
   9e3f0:	b9486000 	ldr	w0, [x0, #2144]
   9e3f4:	d65f03c0 	ret
   9e3f8:	d503201f 	nop
   9e3fc:	d503201f 	nop

000000000009e400 <CKernelOptions::Get()>:
   9e400:	900000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9e404:	f9476000 	ldr	x0, [x0, #3776]
   9e408:	d65f03c0 	ret
   9e40c:	d503201f 	nop

000000000009e410 <CKernelOptions::GetToken()>:
   9e410:	aa0003e3 	mov	x3, x0
   9e414:	f9440800 	ldr	x0, [x0, #2064]
   9e418:	39c00001 	ldrsb	w1, [x0]
   9e41c:	350000c1 	cbnz	w1, 9e434 <CKernelOptions::GetToken()+0x24>
   9e420:	14000011 	b	9e464 <CKernelOptions::GetToken()+0x54>
   9e424:	91000400 	add	x0, x0, #0x1
   9e428:	f9040860 	str	x0, [x3, #2064]
   9e42c:	39c00001 	ldrsb	w1, [x0]
   9e430:	340001a1 	cbz	w1, 9e464 <CKernelOptions::GetToken()+0x54>
   9e434:	7100803f 	cmp	w1, #0x20
   9e438:	54ffff60 	b.eq	9e424 <CKernelOptions::GetToken()+0x14>  // b.none
   9e43c:	f9440861 	ldr	x1, [x3, #2064]
   9e440:	14000006 	b	9e458 <CKernelOptions::GetToken()+0x48>
   9e444:	7100805f 	cmp	w2, #0x20
   9e448:	aa0103e2 	mov	x2, x1
   9e44c:	91000421 	add	x1, x1, #0x1
   9e450:	f9040861 	str	x1, [x3, #2064]
   9e454:	540000c0 	b.eq	9e46c <CKernelOptions::GetToken()+0x5c>  // b.none
   9e458:	39c00022 	ldrsb	w2, [x1]
   9e45c:	35ffff42 	cbnz	w2, 9e444 <CKernelOptions::GetToken()+0x34>
   9e460:	d65f03c0 	ret
   9e464:	d2800000 	mov	x0, #0x0                   	// #0
   9e468:	d65f03c0 	ret
   9e46c:	3900005f 	strb	wzr, [x2]
   9e470:	d65f03c0 	ret
   9e474:	d503201f 	nop
   9e478:	d503201f 	nop
   9e47c:	d503201f 	nop

000000000009e480 <CKernelOptions::CKernelOptions()>:
   9e480:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9e484:	910003fd 	mov	x29, sp
   9e488:	52800083 	mov	w3, #0x4                   	// #4
   9e48c:	52800782 	mov	w2, #0x3c                  	// #60
   9e490:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e494:	9132c021 	add	x1, x1, #0xcb0
   9e498:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e49c:	aa0003f6 	mov	x22, x0
   9e4a0:	a9046bf9 	stp	x25, x26, [sp, #64]
   9e4a4:	91208019 	add	x25, x0, #0x820
   9e4a8:	9120e2da 	add	x26, x22, #0x838
   9e4ac:	aa1903e0 	mov	x0, x25
   9e4b0:	f9040edf 	str	xzr, [x22, #2072]
   9e4b4:	b90836c3 	str	w3, [x22, #2100]
   9e4b8:	b9083edf 	str	wzr, [x22, #2108]
   9e4bc:	392102df 	strb	wzr, [x22, #2112]
   9e4c0:	f9042edf 	str	xzr, [x22, #2136]
   9e4c4:	b90862c2 	str	w2, [x22, #2144]
   9e4c8:	940018c2 	bl	a47d0 <strcpy>
   9e4cc:	aa1a03e0 	mov	x0, x26
   9e4d0:	d0000081 	adrp	x1, b0000 <DevicePrefix+0x80>
   9e4d4:	91038021 	add	x1, x1, #0xe0
   9e4d8:	940018be 	bl	a47d0 <strcpy>
   9e4dc:	900000c2 	adrp	x2, b6000 <s_OldInfo+0x68>
   9e4e0:	9101a3e0 	add	x0, sp, #0x68
   9e4e4:	392106df 	strb	wzr, [x22, #2113]
   9e4e8:	52800001 	mov	w1, #0x0                   	// #0
   9e4ec:	f9076056 	str	x22, [x2, #3776]
   9e4f0:	97fff888 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9e4f4:	aa1603e2 	mov	x2, x22
   9e4f8:	9101a3e0 	add	x0, sp, #0x68
   9e4fc:	52800021 	mov	w1, #0x1                   	// #1
   9e500:	72a000a1 	movk	w1, #0x5, lsl #16
   9e504:	52800004 	mov	w4, #0x0                   	// #0
   9e508:	52810183 	mov	w3, #0x80c                 	// #2060
   9e50c:	97fff889 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9e510:	72001c1f 	tst	w0, #0xff
   9e514:	54000680 	b.eq	9e5e4 <CKernelOptions::CKernelOptions()+0x164>  // b.none
   9e518:	b9400ac0 	ldr	w0, [x22, #8]
   9e51c:	711ffc1f 	cmp	w0, #0x7ff
   9e520:	54000628 	b.hi	9e5e4 <CKernelOptions::CKernelOptions()+0x164>  // b.pmore
   9e524:	910032c1 	add	x1, x22, #0xc
   9e528:	a90153f3 	stp	x19, x20, [sp, #16]
   9e52c:	8b2042c0 	add	x0, x22, w0, uxtw
   9e530:	a90363f7 	stp	x23, x24, [sp, #48]
   9e534:	900000b7 	adrp	x23, b2000 <vtable for CPartition>
   9e538:	913522f7 	add	x23, x23, #0xd48
   9e53c:	900000b8 	adrp	x24, b2000 <vtable for CPartition>
   9e540:	91350318 	add	x24, x24, #0xd40
   9e544:	f9002bfb 	str	x27, [sp, #80]
   9e548:	900000bb 	adrp	x27, b2000 <vtable for CPartition>
   9e54c:	3900301f 	strb	wzr, [x0, #12]
   9e550:	f9040ac1 	str	x1, [x22, #2064]
   9e554:	d503201f 	nop
   9e558:	aa1603e0 	mov	x0, x22
   9e55c:	97ffffad 	bl	9e410 <CKernelOptions::GetToken()>
   9e560:	aa0003f5 	mov	x21, x0
   9e564:	b40003a0 	cbz	x0, 9e5d8 <CKernelOptions::CKernelOptions()+0x158>
   9e568:	39c00001 	ldrsb	w1, [x0]
   9e56c:	34000621 	cbz	w1, 9e630 <CKernelOptions::CKernelOptions()+0x1b0>
   9e570:	aa0003f3 	mov	x19, x0
   9e574:	14000003 	b	9e580 <CKernelOptions::CKernelOptions()+0x100>
   9e578:	39c00261 	ldrsb	w1, [x19]
   9e57c:	340005a1 	cbz	w1, 9e630 <CKernelOptions::CKernelOptions()+0x1b0>
   9e580:	7100f43f 	cmp	w1, #0x3d
   9e584:	aa1303f4 	mov	x20, x19
   9e588:	91000673 	add	x19, x19, #0x1
   9e58c:	54ffff61 	b.ne	9e578 <CKernelOptions::CKernelOptions()+0xf8>  // b.any
   9e590:	aa1703e1 	mov	x1, x23
   9e594:	aa1503e0 	mov	x0, x21
   9e598:	3900029f 	strb	wzr, [x20]
   9e59c:	94001809 	bl	a45c0 <strcmp>
   9e5a0:	350002e0 	cbnz	w0, 9e5fc <CKernelOptions::CKernelOptions()+0x17c>
   9e5a4:	39c00680 	ldrsb	w0, [x20, #1]
   9e5a8:	34fffd80 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e5ac:	aa1303e0 	mov	x0, x19
   9e5b0:	97ffff50 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e5b4:	510a0001 	sub	w1, w0, #0x280
   9e5b8:	7114f03f 	cmp	w1, #0x53c
   9e5bc:	54fffce8 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e5c0:	b9081ac0 	str	w0, [x22, #2072]
   9e5c4:	aa1603e0 	mov	x0, x22
   9e5c8:	97ffff92 	bl	9e410 <CKernelOptions::GetToken()>
   9e5cc:	aa0003f5 	mov	x21, x0
   9e5d0:	b5fffcc0 	cbnz	x0, 9e568 <CKernelOptions::CKernelOptions()+0xe8>
   9e5d4:	d503201f 	nop
   9e5d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e5dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   9e5e0:	f9402bfb 	ldr	x27, [sp, #80]
   9e5e4:	9101a3e0 	add	x0, sp, #0x68
   9e5e8:	97fff84e 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9e5ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e5f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9e5f4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9e5f8:	d65f03c0 	ret
   9e5fc:	aa1803e1 	mov	x1, x24
   9e600:	aa1503e0 	mov	x0, x21
   9e604:	940017ef 	bl	a45c0 <strcmp>
   9e608:	35000260 	cbnz	w0, 9e654 <CKernelOptions::CKernelOptions()+0x1d4>
   9e60c:	39c00680 	ldrsb	w0, [x20, #1]
   9e610:	34fffa40 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e614:	aa1303e0 	mov	x0, x19
   9e618:	97ffff36 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e61c:	51078001 	sub	w1, w0, #0x1e0
   9e620:	7109603f 	cmp	w1, #0x258
   9e624:	54fff9a8 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e628:	b9081ec0 	str	w0, [x22, #2076]
   9e62c:	17ffffcb 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e630:	aa1703e1 	mov	x1, x23
   9e634:	aa1503e0 	mov	x0, x21
   9e638:	940017e2 	bl	a45c0 <strcmp>
   9e63c:	34fff8e0 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e640:	aa1803e1 	mov	x1, x24
   9e644:	aa1503e0 	mov	x0, x21
   9e648:	940017de 	bl	a45c0 <strcmp>
   9e64c:	d2800013 	mov	x19, #0x0                   	// #0
   9e650:	34fff840 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e654:	9132e361 	add	x1, x27, #0xcb8
   9e658:	aa1503e0 	mov	x0, x21
   9e65c:	940017d9 	bl	a45c0 <strcmp>
   9e660:	340001e0 	cbz	w0, 9e69c <CKernelOptions::CKernelOptions()+0x21c>
   9e664:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e668:	91330021 	add	x1, x1, #0xcc0
   9e66c:	aa1503e0 	mov	x0, x21
   9e670:	940017d4 	bl	a45c0 <strcmp>
   9e674:	35000200 	cbnz	w0, 9e6b4 <CKernelOptions::CKernelOptions()+0x234>
   9e678:	b4fff713 	cbz	x19, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e67c:	39c00260 	ldrsb	w0, [x19]
   9e680:	34fff6c0 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e684:	aa1303e0 	mov	x0, x19
   9e688:	97ffff1a 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e68c:	7100101f 	cmp	w0, #0x4
   9e690:	54fff648 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e694:	b90836c0 	str	w0, [x22, #2100]
   9e698:	17ffffb0 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e69c:	aa1303e1 	mov	x1, x19
   9e6a0:	d2800262 	mov	x2, #0x13                  	// #19
   9e6a4:	aa1903e0 	mov	x0, x25
   9e6a8:	94001856 	bl	a4800 <strncpy>
   9e6ac:	3920cedf 	strb	wzr, [x22, #2099]
   9e6b0:	17ffffaa 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e6b4:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e6b8:	91334021 	add	x1, x1, #0xcd0
   9e6bc:	aa1503e0 	mov	x0, x21
   9e6c0:	940017c0 	bl	a45c0 <strcmp>
   9e6c4:	34000220 	cbz	w0, 9e708 <CKernelOptions::CKernelOptions()+0x288>
   9e6c8:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e6cc:	91336021 	add	x1, x1, #0xcd8
   9e6d0:	aa1503e0 	mov	x0, x21
   9e6d4:	940017bb 	bl	a45c0 <strcmp>
   9e6d8:	35000240 	cbnz	w0, 9e720 <CKernelOptions::CKernelOptions()+0x2a0>
   9e6dc:	b4fff3f3 	cbz	x19, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e6e0:	39c00260 	ldrsb	w0, [x19]
   9e6e4:	34fff3a0 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e6e8:	aa1303e0 	mov	x0, x19
   9e6ec:	97ffff01 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e6f0:	5283cf01 	mov	w1, #0x1e78                	// #7800
   9e6f4:	51032002 	sub	w2, w0, #0xc8
   9e6f8:	6b01005f 	cmp	w2, w1
   9e6fc:	54fff2e8 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e700:	b9083ec0 	str	w0, [x22, #2108]
   9e704:	17ffff95 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e708:	aa1303e1 	mov	x1, x19
   9e70c:	d2800042 	mov	x2, #0x2                   	// #2
   9e710:	aa1a03e0 	mov	x0, x26
   9e714:	9400183b 	bl	a4800 <strncpy>
   9e718:	3920eadf 	strb	wzr, [x22, #2106]
   9e71c:	17ffff8f 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e720:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e724:	9133a021 	add	x1, x1, #0xce8
   9e728:	aa1503e0 	mov	x0, x21
   9e72c:	940017a5 	bl	a45c0 <strcmp>
   9e730:	35000120 	cbnz	w0, 9e754 <CKernelOptions::CKernelOptions()+0x2d4>
   9e734:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e738:	9133e021 	add	x1, x1, #0xcf8
   9e73c:	aa1303e0 	mov	x0, x19
   9e740:	940017a0 	bl	a45c0 <strcmp>
   9e744:	35fff0a0 	cbnz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e748:	52800020 	mov	w0, #0x1                   	// #1
   9e74c:	392102c0 	strb	w0, [x22, #2112]
   9e750:	17ffff82 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e754:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e758:	91340021 	add	x1, x1, #0xd00
   9e75c:	aa1503e0 	mov	x0, x21
   9e760:	94001798 	bl	a45c0 <strcmp>
   9e764:	350000e0 	cbnz	w0, 9e780 <CKernelOptions::CKernelOptions()+0x300>
   9e768:	aa1303e1 	mov	x1, x19
   9e76c:	d2800262 	mov	x2, #0x13                  	// #19
   9e770:	912106c0 	add	x0, x22, #0x841
   9e774:	94001823 	bl	a4800 <strncpy>
   9e778:	392152df 	strb	wzr, [x22, #2132]
   9e77c:	17ffff77 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e780:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e784:	91344021 	add	x1, x1, #0xd10
   9e788:	aa1503e0 	mov	x0, x21
   9e78c:	9400178d 	bl	a45c0 <strcmp>
   9e790:	35000140 	cbnz	w0, 9e7b8 <CKernelOptions::CKernelOptions()+0x338>
   9e794:	b4ffee33 	cbz	x19, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e798:	39c00260 	ldrsb	w0, [x19]
   9e79c:	34ffede0 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e7a0:	aa1303e0 	mov	x0, x19
   9e7a4:	97fffed3 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e7a8:	7100081f 	cmp	w0, #0x2
   9e7ac:	54ffed68 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e7b0:	b9085ac0 	str	w0, [x22, #2136]
   9e7b4:	17ffff69 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e7b8:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e7bc:	91348021 	add	x1, x1, #0xd20
   9e7c0:	aa1503e0 	mov	x0, x21
   9e7c4:	9400177f 	bl	a45c0 <strcmp>
   9e7c8:	35000120 	cbnz	w0, 9e7ec <CKernelOptions::CKernelOptions()+0x36c>
   9e7cc:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e7d0:	9134a021 	add	x1, x1, #0xd28
   9e7d4:	aa1303e0 	mov	x0, x19
   9e7d8:	9400177a 	bl	a45c0 <strcmp>
   9e7dc:	35ffebe0 	cbnz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e7e0:	52800020 	mov	w0, #0x1                   	// #1
   9e7e4:	b9085ec0 	str	w0, [x22, #2140]
   9e7e8:	17ffff5c 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e7ec:	aa1503e0 	mov	x0, x21
   9e7f0:	900000a1 	adrp	x1, b2000 <vtable for CPartition>
   9e7f4:	9134c021 	add	x1, x1, #0xd30
   9e7f8:	94001772 	bl	a45c0 <strcmp>
   9e7fc:	7100001f 	cmp	w0, #0x0
   9e800:	fa400a64 	ccmp	x19, #0x0, #0x4, eq  // eq = none
   9e804:	54ffeaa0 	b.eq	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.none
   9e808:	39c00260 	ldrsb	w0, [x19]
   9e80c:	34ffea60 	cbz	w0, 9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e810:	aa1303e0 	mov	x0, x19
   9e814:	97fffeb7 	bl	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e818:	5100a001 	sub	w1, w0, #0x28
   9e81c:	7100983f 	cmp	w1, #0x26
   9e820:	54ffe9c8 	b.hi	9e558 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   9e824:	b90862c0 	str	w0, [x22, #2144]
   9e828:	17ffff4c 	b	9e558 <CKernelOptions::CKernelOptions()+0xd8>
   9e82c:	d503201f 	nop

000000000009e830 <CKernelOptions::GetOptionValue(char*)>:
   9e830:	39c00001 	ldrsb	w1, [x0]
   9e834:	340000e1 	cbz	w1, 9e850 <CKernelOptions::GetOptionValue(char*)+0x20>
   9e838:	7100f43f 	cmp	w1, #0x3d
   9e83c:	aa0003e1 	mov	x1, x0
   9e840:	91000400 	add	x0, x0, #0x1
   9e844:	54ffff61 	b.ne	9e830 <CKernelOptions::GetOptionValue(char*)>  // b.any
   9e848:	3900003f 	strb	wzr, [x1]
   9e84c:	d65f03c0 	ret
   9e850:	d2800000 	mov	x0, #0x0                   	// #0
   9e854:	d65f03c0 	ret
   9e858:	d503201f 	nop
   9e85c:	d503201f 	nop

000000000009e860 <CKernelOptions::GetDecimal(char*)>:
   9e860:	b4000080 	cbz	x0, 9e870 <CKernelOptions::GetDecimal(char*)+0x10>
   9e864:	39c00001 	ldrsb	w1, [x0]
   9e868:	34000041 	cbz	w1, 9e870 <CKernelOptions::GetDecimal(char*)+0x10>
   9e86c:	17fffea1 	b	9e2f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   9e870:	12800000 	mov	w0, #0xffffffff            	// #-1
   9e874:	d65f03c0 	ret
	...

000000000009e880 <CLogger::CLogger(unsigned int, CTimer*)>:
   9e880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e884:	910003fd 	mov	x29, sp
   9e888:	52800023 	mov	w3, #0x1                   	// #1
   9e88c:	f9000bf3 	str	x19, [sp, #16]
   9e890:	aa0003f3 	mov	x19, x0
   9e894:	d2880000 	mov	x0, #0x4000                	// #16384
   9e898:	b9000261 	str	w1, [x19]
   9e89c:	a900fe62 	stp	x2, xzr, [x19, #8]
   9e8a0:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   9e8a4:	b9002a63 	str	w3, [x19, #40]
   9e8a8:	f900e27f 	str	xzr, [x19, #448]
   9e8ac:	b901ca63 	str	w3, [x19, #456]
   9e8b0:	a91d7e7f 	stp	xzr, xzr, [x19, #464]
   9e8b4:	94001b7b 	bl	a56a0 <operator new[](unsigned long)>
   9e8b8:	900000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9e8bc:	f9000e60 	str	x0, [x19, #24]
   9e8c0:	f9076433 	str	x19, [x1, #3784]
   9e8c4:	f9400bf3 	ldr	x19, [sp, #16]
   9e8c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e8cc:	d65f03c0 	ret

000000000009e8d0 <CLogger::~CLogger()>:
   9e8d0:	900000c1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9e8d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e8d8:	910003fd 	mov	x29, sp
   9e8dc:	f907643f 	str	xzr, [x1, #3784]
   9e8e0:	b941c003 	ldr	w3, [x0, #448]
   9e8e4:	f9000bf3 	str	x19, [sp, #16]
   9e8e8:	aa0003f3 	mov	x19, x0
   9e8ec:	b941c402 	ldr	w2, [x0, #452]
   9e8f0:	1400000a 	b	9e918 <CLogger::~CLogger()+0x48>
   9e8f4:	f9401800 	ldr	x0, [x0, #48]
   9e8f8:	b4000080 	cbz	x0, 9e908 <CLogger::~CLogger()+0x38>
   9e8fc:	94001b85 	bl	a5710 <operator delete(void*, unsigned long)>
   9e900:	b941c263 	ldr	w3, [x19, #448]
   9e904:	b941c662 	ldr	w2, [x19, #452]
   9e908:	11000442 	add	w2, w2, #0x1
   9e90c:	7100c85f 	cmp	w2, #0x32
   9e910:	b901c662 	str	w2, [x19, #452]
   9e914:	54000140 	b.eq	9e93c <CLogger::~CLogger()+0x6c>  // b.none
   9e918:	6b03005f 	cmp	w2, w3
   9e91c:	d2802201 	mov	x1, #0x110                 	// #272
   9e920:	8b224e60 	add	x0, x19, w2, uxtw #3
   9e924:	54fffe81 	b.ne	9e8f4 <CLogger::~CLogger()+0x24>  // b.any
   9e928:	f9400e60 	ldr	x0, [x19, #24]
   9e92c:	b40000e0 	cbz	x0, 9e948 <CLogger::~CLogger()+0x78>
   9e930:	f9400bf3 	ldr	x19, [sp, #16]
   9e934:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e938:	14001b6a 	b	a56e0 <operator delete[](void*)>
   9e93c:	52800002 	mov	w2, #0x0                   	// #0
   9e940:	b901c67f 	str	wzr, [x19, #452]
   9e944:	17fffff5 	b	9e918 <CLogger::~CLogger()+0x48>
   9e948:	f9400bf3 	ldr	x19, [sp, #16]
   9e94c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e950:	d65f03c0 	ret
   9e954:	d503201f 	nop
   9e958:	d503201f 	nop
   9e95c:	d503201f 	nop

000000000009e960 <CLogger::Initialize(CDevice*)>:
   9e960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e964:	910003fd 	mov	x29, sp
   9e968:	f9000bf3 	str	x19, [sp, #16]
   9e96c:	aa0003f3 	mov	x19, x0
   9e970:	f9000801 	str	x1, [x0, #16]
   9e974:	9400042b 	bl	9fa20 <CMachineInfo::Get()>
   9e978:	94000306 	bl	9f590 <CMachineInfo::GetMachineName() const>
   9e97c:	900000a3 	adrp	x3, b2000 <vtable for CPartition>
   9e980:	91354063 	add	x3, x3, #0xd50
   9e984:	aa0003e4 	mov	x4, x0
   9e988:	9100a061 	add	x1, x3, #0x28
   9e98c:	aa1303e0 	mov	x0, x19
   9e990:	52800062 	mov	w2, #0x3                   	// #3
   9e994:	9400000b 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e998:	52800020 	mov	w0, #0x1                   	// #1
   9e99c:	f9400bf3 	ldr	x19, [sp, #16]
   9e9a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e9a4:	d65f03c0 	ret
   9e9a8:	d503201f 	nop
   9e9ac:	d503201f 	nop

000000000009e9b0 <CLogger::SetNewTarget(CDevice*)>:
   9e9b0:	f9000801 	str	x1, [x0, #16]
   9e9b4:	d65f03c0 	ret
   9e9b8:	d503201f 	nop
   9e9bc:	d503201f 	nop

000000000009e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   9e9c0:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   9e9c4:	9103c3e8 	add	x8, sp, #0xf0
   9e9c8:	9103c3eb 	add	x11, sp, #0xf0
   9e9cc:	910003fd 	mov	x29, sp
   9e9d0:	910343ea 	add	x10, sp, #0xd0
   9e9d4:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   9e9d8:	a9032fe8 	stp	x8, x11, [sp, #48]
   9e9dc:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   9e9e0:	f90023ea 	str	x10, [sp, #64]
   9e9e4:	b9004be9 	str	w9, [sp, #72]
   9e9e8:	b9004fe8 	str	w8, [sp, #76]
   9e9ec:	a9432fea 	ldp	x10, x11, [sp, #48]
   9e9f0:	a94427e8 	ldp	x8, x9, [sp, #64]
   9e9f4:	a90d17e4 	stp	x4, x5, [sp, #208]
   9e9f8:	910043e4 	add	x4, sp, #0x10
   9e9fc:	a9012fea 	stp	x10, x11, [sp, #16]
   9ea00:	a90227e8 	stp	x8, x9, [sp, #32]
   9ea04:	3d8017e0 	str	q0, [sp, #80]
   9ea08:	3d801be1 	str	q1, [sp, #96]
   9ea0c:	3d801fe2 	str	q2, [sp, #112]
   9ea10:	3d8023e3 	str	q3, [sp, #128]
   9ea14:	3d8027e4 	str	q4, [sp, #144]
   9ea18:	3d802be5 	str	q5, [sp, #160]
   9ea1c:	3d802fe6 	str	q6, [sp, #176]
   9ea20:	3d8033e7 	str	q7, [sp, #192]
   9ea24:	a90e1fe6 	stp	x6, x7, [sp, #224]
   9ea28:	94000006 	bl	9ea40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   9ea2c:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   9ea30:	d65f03c0 	ret
   9ea34:	d503201f 	nop
   9ea38:	d503201f 	nop
   9ea3c:	d503201f 	nop

000000000009ea40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   9ea40:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   9ea44:	910003fd 	mov	x29, sp
   9ea48:	a90153f3 	stp	x19, x20, [sp, #16]
   9ea4c:	aa0003f3 	mov	x19, x0
   9ea50:	910183e0 	add	x0, sp, #0x60
   9ea54:	2a0203f4 	mov	w20, w2
   9ea58:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ea5c:	aa0403f5 	mov	x21, x4
   9ea60:	aa0103f6 	mov	x22, x1
   9ea64:	f9001bf7 	str	x23, [sp, #48]
   9ea68:	aa0303f7 	mov	x23, x3
   9ea6c:	94000cf1 	bl	a1e30 <CString::CString()>
   9ea70:	a9401ea6 	ldp	x6, x7, [x21]
   9ea74:	aa1703e1 	mov	x1, x23
   9ea78:	910103e2 	add	x2, sp, #0x40
   9ea7c:	910183e0 	add	x0, sp, #0x60
   9ea80:	a94116a4 	ldp	x4, x5, [x21, #16]
   9ea84:	a9041fe6 	stp	x6, x7, [sp, #64]
   9ea88:	a90517e4 	stp	x4, x5, [sp, #80]
   9ea8c:	94000f11 	bl	a26d0 <CString::FormatV(char const*, std::__va_list)>
   9ea90:	910183e0 	add	x0, sp, #0x60
   9ea94:	94000d03 	bl	a1ea0 <CString::operator char const*() const>
   9ea98:	aa0003e3 	mov	x3, x0
   9ea9c:	2a1403e2 	mov	w2, w20
   9eaa0:	aa1303e0 	mov	x0, x19
   9eaa4:	aa1603e1 	mov	x1, x22
   9eaa8:	940000fa 	bl	9ee90 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   9eaac:	b9400260 	ldr	w0, [x19]
   9eab0:	6b14001f 	cmp	w0, w20
   9eab4:	54000583 	b.cc	9eb64 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x124>  // b.lo, b.ul, b.last
   9eab8:	910203e0 	add	x0, sp, #0x80
   9eabc:	900000b5 	adrp	x21, b2000 <vtable for CPartition>
   9eac0:	913542b5 	add	x21, x21, #0xd50
   9eac4:	94000cdb 	bl	a1e30 <CString::CString()>
   9eac8:	340005d4 	cbz	w20, 9eb80 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x140>
   9eacc:	f9400660 	ldr	x0, [x19, #8]
   9ead0:	b40001e0 	cbz	x0, 9eb0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   9ead4:	940013f7 	bl	a3ab0 <CTimer::GetTimeString()>
   9ead8:	aa0003f7 	mov	x23, x0
   9eadc:	b4000180 	cbz	x0, 9eb0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   9eae0:	94000cf0 	bl	a1ea0 <CString::operator char const*() const>
   9eae4:	aa0003e1 	mov	x1, x0
   9eae8:	910203e0 	add	x0, sp, #0x80
   9eaec:	94000d2d 	bl	a1fa0 <CString::Append(char const*)>
   9eaf0:	9100e2a1 	add	x1, x21, #0x38
   9eaf4:	910203e0 	add	x0, sp, #0x80
   9eaf8:	94000d2a 	bl	a1fa0 <CString::Append(char const*)>
   9eafc:	f94002e1 	ldr	x1, [x23]
   9eb00:	aa1703e0 	mov	x0, x23
   9eb04:	f9400421 	ldr	x1, [x1, #8]
   9eb08:	d63f0020 	blr	x1
   9eb0c:	aa1603e1 	mov	x1, x22
   9eb10:	910203e0 	add	x0, sp, #0x80
   9eb14:	94000d23 	bl	a1fa0 <CString::Append(char const*)>
   9eb18:	910102a1 	add	x1, x21, #0x40
   9eb1c:	910203e0 	add	x0, sp, #0x80
   9eb20:	94000d20 	bl	a1fa0 <CString::Append(char const*)>
   9eb24:	910183e0 	add	x0, sp, #0x60
   9eb28:	94000cde 	bl	a1ea0 <CString::operator char const*() const>
   9eb2c:	aa0003e1 	mov	x1, x0
   9eb30:	910203e0 	add	x0, sp, #0x80
   9eb34:	94000d1b 	bl	a1fa0 <CString::Append(char const*)>
   9eb38:	34000314 	cbz	w20, 9eb98 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x158>
   9eb3c:	910142a1 	add	x1, x21, #0x50
   9eb40:	910203e0 	add	x0, sp, #0x80
   9eb44:	94000d17 	bl	a1fa0 <CString::Append(char const*)>
   9eb48:	910203e0 	add	x0, sp, #0x80
   9eb4c:	94000cd5 	bl	a1ea0 <CString::operator char const*() const>
   9eb50:	aa0003e1 	mov	x1, x0
   9eb54:	aa1303e0 	mov	x0, x19
   9eb58:	94000062 	bl	9ece0 <CLogger::Write(char const*)>
   9eb5c:	910203e0 	add	x0, sp, #0x80
   9eb60:	94000c78 	bl	a1d40 <CString::~CString()>
   9eb64:	910183e0 	add	x0, sp, #0x60
   9eb68:	94000c76 	bl	a1d40 <CString::~CString()>
   9eb6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eb70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9eb74:	f9401bf7 	ldr	x23, [sp, #48]
   9eb78:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9eb7c:	d65f03c0 	ret
   9eb80:	9100c2a1 	add	x1, x21, #0x30
   9eb84:	910203e0 	add	x0, sp, #0x80
   9eb88:	94000cce 	bl	a1ec0 <CString::operator=(char const*)>
   9eb8c:	f9400660 	ldr	x0, [x19, #8]
   9eb90:	b5fffa20 	cbnz	x0, 9ead4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x94>
   9eb94:	17ffffde 	b	9eb0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xcc>
   9eb98:	910122a1 	add	x1, x21, #0x48
   9eb9c:	910203e0 	add	x0, sp, #0x80
   9eba0:	94000d00 	bl	a1fa0 <CString::Append(char const*)>
   9eba4:	910142a1 	add	x1, x21, #0x50
   9eba8:	910203e0 	add	x0, sp, #0x80
   9ebac:	94000cfd 	bl	a1fa0 <CString::Append(char const*)>
   9ebb0:	910203e0 	add	x0, sp, #0x80
   9ebb4:	94000cbb 	bl	a1ea0 <CString::operator char const*() const>
   9ebb8:	aa0003e1 	mov	x1, x0
   9ebbc:	aa1303e0 	mov	x0, x19
   9ebc0:	94000048 	bl	9ece0 <CLogger::Write(char const*)>
   9ebc4:	f940ee60 	ldr	x0, [x19, #472]
   9ebc8:	b4000040 	cbz	x0, 9ebd0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x190>
   9ebcc:	d63f0000 	blr	x0
   9ebd0:	52801fe0 	mov	w0, #0xff                  	// #255
   9ebd4:	94001233 	bl	a34a0 <set_qemu_exit_status>
   9ebd8:	94001236 	bl	a34b0 <halt>
   9ebdc:	d503201f 	nop

000000000009ebe0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   9ebe0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   9ebe4:	910003fd 	mov	x29, sp
   9ebe8:	a90153f3 	stp	x19, x20, [sp, #16]
   9ebec:	aa0003f3 	mov	x19, x0
   9ebf0:	b9400000 	ldr	w0, [x0]
   9ebf4:	6b02001f 	cmp	w0, w2
   9ebf8:	540002c3 	b.cc	9ec50 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x70>  // b.lo, b.ul, b.last
   9ebfc:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ec00:	aa0303f4 	mov	x20, x3
   9ec04:	3900e3ff 	strb	wzr, [sp, #56]
   9ec08:	340002a2 	cbz	w2, 9ec5c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x7c>
   9ec0c:	9100e3e0 	add	x0, sp, #0x38
   9ec10:	900000b5 	adrp	x21, b2000 <vtable for CPartition>
   9ec14:	913542b5 	add	x21, x21, #0xd50
   9ec18:	94001706 	bl	a4830 <strcat>
   9ec1c:	910102a1 	add	x1, x21, #0x40
   9ec20:	9100e3e0 	add	x0, sp, #0x38
   9ec24:	94001703 	bl	a4830 <strcat>
   9ec28:	aa1403e1 	mov	x1, x20
   9ec2c:	9100e3e0 	add	x0, sp, #0x38
   9ec30:	94001700 	bl	a4830 <strcat>
   9ec34:	910142a1 	add	x1, x21, #0x50
   9ec38:	9100e3e0 	add	x0, sp, #0x38
   9ec3c:	940016fd 	bl	a4830 <strcat>
   9ec40:	9100e3e1 	add	x1, sp, #0x38
   9ec44:	aa1303e0 	mov	x0, x19
   9ec48:	94000026 	bl	9ece0 <CLogger::Write(char const*)>
   9ec4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ec50:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ec54:	a8d07bfd 	ldp	x29, x30, [sp], #256
   9ec58:	d65f03c0 	ret
   9ec5c:	900000b6 	adrp	x22, b2000 <vtable for CPartition>
   9ec60:	913542d6 	add	x22, x22, #0xd50
   9ec64:	aa0103f5 	mov	x21, x1
   9ec68:	9100e3e0 	add	x0, sp, #0x38
   9ec6c:	9100c2c1 	add	x1, x22, #0x30
   9ec70:	940016d8 	bl	a47d0 <strcpy>
   9ec74:	aa1503e1 	mov	x1, x21
   9ec78:	9100e3e0 	add	x0, sp, #0x38
   9ec7c:	940016ed 	bl	a4830 <strcat>
   9ec80:	910102c1 	add	x1, x22, #0x40
   9ec84:	9100e3e0 	add	x0, sp, #0x38
   9ec88:	940016ea 	bl	a4830 <strcat>
   9ec8c:	aa1403e1 	mov	x1, x20
   9ec90:	9100e3e0 	add	x0, sp, #0x38
   9ec94:	940016e7 	bl	a4830 <strcat>
   9ec98:	910122c1 	add	x1, x22, #0x48
   9ec9c:	9100e3e0 	add	x0, sp, #0x38
   9eca0:	940016e4 	bl	a4830 <strcat>
   9eca4:	910142c1 	add	x1, x22, #0x50
   9eca8:	9100e3e0 	add	x0, sp, #0x38
   9ecac:	940016e1 	bl	a4830 <strcat>
   9ecb0:	9100e3e1 	add	x1, sp, #0x38
   9ecb4:	aa1303e0 	mov	x0, x19
   9ecb8:	9400000a 	bl	9ece0 <CLogger::Write(char const*)>
   9ecbc:	52801fe0 	mov	w0, #0xff                  	// #255
   9ecc0:	940011f8 	bl	a34a0 <set_qemu_exit_status>
   9ecc4:	940011fb 	bl	a34b0 <halt>
   9ecc8:	d503201f 	nop
   9eccc:	d503201f 	nop

000000000009ecd0 <CLogger::Get()>:
   9ecd0:	900000c0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9ecd4:	f9476400 	ldr	x0, [x0, #3784]
   9ecd8:	d65f03c0 	ret
   9ecdc:	d503201f 	nop

000000000009ece0 <CLogger::Write(char const*)>:
   9ece0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ece4:	910003fd 	mov	x29, sp
   9ece8:	a90153f3 	stp	x19, x20, [sp, #16]
   9ecec:	aa0003f3 	mov	x19, x0
   9ecf0:	aa0103e0 	mov	x0, x1
   9ecf4:	aa0103f4 	mov	x20, x1
   9ecf8:	f90013f5 	str	x21, [sp, #32]
   9ecfc:	94001625 	bl	a4590 <strlen>
   9ed00:	aa0003e2 	mov	x2, x0
   9ed04:	aa0003f5 	mov	x21, x0
   9ed08:	f9400a60 	ldr	x0, [x19, #16]
   9ed0c:	aa1403e1 	mov	x1, x20
   9ed10:	f9400003 	ldr	x3, [x0]
   9ed14:	f9400c63 	ldr	x3, [x3, #24]
   9ed18:	d63f0060 	blr	x3
   9ed1c:	b9402a60 	ldr	w0, [x19, #40]
   9ed20:	35000480 	cbnz	w0, 9edb0 <CLogger::Write(char const*)+0xd0>
   9ed24:	d10006a5 	sub	x5, x21, #0x1
   9ed28:	b40002b5 	cbz	x21, 9ed7c <CLogger::Write(char const*)+0x9c>
   9ed2c:	aa1403e1 	mov	x1, x20
   9ed30:	d2800026 	mov	x6, #0x1                   	// #1
   9ed34:	8b050285 	add	x5, x20, x5
   9ed38:	38c01420 	ldrsb	w0, [x1], #1
   9ed3c:	7100341f 	cmp	w0, #0xd
   9ed40:	cb0100c3 	sub	x3, x6, x1
   9ed44:	54000140 	b.eq	9ed6c <CLogger::Write(char const*)+0x8c>  // b.none
   9ed48:	b9402262 	ldr	w2, [x19, #32]
   9ed4c:	f9400e64 	ldr	x4, [x19, #24]
   9ed50:	38226880 	strb	w0, [x4, x2]
   9ed54:	29440262 	ldp	w2, w0, [x19, #32]
   9ed58:	11000442 	add	w2, w2, #0x1
   9ed5c:	12003442 	and	w2, w2, #0x3fff
   9ed60:	6b00005f 	cmp	w2, w0
   9ed64:	b9002262 	str	w2, [x19, #32]
   9ed68:	54000120 	b.eq	9ed8c <CLogger::Write(char const*)+0xac>  // b.none
   9ed6c:	ab05007f 	cmn	x3, x5
   9ed70:	54fffe41 	b.ne	9ed38 <CLogger::Write(char const*)+0x58>  // b.any
   9ed74:	b9402a60 	ldr	w0, [x19, #40]
   9ed78:	35000140 	cbnz	w0, 9eda0 <CLogger::Write(char const*)+0xc0>
   9ed7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ed80:	f94013f5 	ldr	x21, [sp, #32]
   9ed84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ed88:	d65f03c0 	ret
   9ed8c:	51000442 	sub	w2, w2, #0x1
   9ed90:	b9402a60 	ldr	w0, [x19, #40]
   9ed94:	12003442 	and	w2, w2, #0x3fff
   9ed98:	b9002262 	str	w2, [x19, #32]
   9ed9c:	34ffff00 	cbz	w0, 9ed7c <CLogger::Write(char const*)+0x9c>
   9eda0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eda4:	f94013f5 	ldr	x21, [sp, #32]
   9eda8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9edac:	14001d79 	b	a6390 <LeaveCritical>
   9edb0:	94001d48 	bl	a62d0 <EnterCritical>
   9edb4:	d10006a5 	sub	x5, x21, #0x1
   9edb8:	b5fffbb5 	cbnz	x21, 9ed2c <CLogger::Write(char const*)+0x4c>
   9edbc:	17ffffee 	b	9ed74 <CLogger::Write(char const*)+0x94>

000000000009edc0 <CLogger::Read(void*, unsigned int)>:
   9edc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9edc4:	910003fd 	mov	x29, sp
   9edc8:	a90153f3 	stp	x19, x20, [sp, #16]
   9edcc:	aa0003f3 	mov	x19, x0
   9edd0:	2a0203f4 	mov	w20, w2
   9edd4:	b9402800 	ldr	w0, [x0, #40]
   9edd8:	f90013f5 	str	x21, [sp, #32]
   9eddc:	aa0103f5 	mov	x21, x1
   9ede0:	350003a0 	cbnz	w0, 9ee54 <CLogger::Read(void*, unsigned int)+0x94>
   9ede4:	29440261 	ldp	w1, w0, [x19, #32]
   9ede8:	6b00003f 	cmp	w1, w0
   9edec:	54000420 	b.eq	9ee70 <CLogger::Read(void*, unsigned int)+0xb0>  // b.none
   9edf0:	2a1403e4 	mov	w4, w20
   9edf4:	d2800003 	mov	x3, #0x0                   	// #0
   9edf8:	1400000d 	b	9ee2c <CLogger::Read(void*, unsigned int)+0x6c>
   9edfc:	b9402660 	ldr	w0, [x19, #36]
   9ee00:	11000474 	add	w20, w3, #0x1
   9ee04:	f9400e62 	ldr	x2, [x19, #24]
   9ee08:	38e06840 	ldrsb	w0, [x2, x0]
   9ee0c:	38236aa0 	strb	w0, [x21, x3]
   9ee10:	91000463 	add	x3, x3, #0x1
   9ee14:	29440a60 	ldp	w0, w2, [x19, #32]
   9ee18:	11000442 	add	w2, w2, #0x1
   9ee1c:	12003442 	and	w2, w2, #0x3fff
   9ee20:	6b00005f 	cmp	w2, w0
   9ee24:	b9002662 	str	w2, [x19, #36]
   9ee28:	54000080 	b.eq	9ee38 <CLogger::Read(void*, unsigned int)+0x78>  // b.none
   9ee2c:	eb04007f 	cmp	x3, x4
   9ee30:	2a0303f4 	mov	w20, w3
   9ee34:	54fffe41 	b.ne	9edfc <CLogger::Read(void*, unsigned int)+0x3c>  // b.any
   9ee38:	b9402a60 	ldr	w0, [x19, #40]
   9ee3c:	350001e0 	cbnz	w0, 9ee78 <CLogger::Read(void*, unsigned int)+0xb8>
   9ee40:	2a1403e0 	mov	w0, w20
   9ee44:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ee48:	f94013f5 	ldr	x21, [sp, #32]
   9ee4c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ee50:	d65f03c0 	ret
   9ee54:	94001d1f 	bl	a62d0 <EnterCritical>
   9ee58:	29440261 	ldp	w1, w0, [x19, #32]
   9ee5c:	6b00003f 	cmp	w1, w0
   9ee60:	54fffc81 	b.ne	9edf0 <CLogger::Read(void*, unsigned int)+0x30>  // b.any
   9ee64:	b9402a60 	ldr	w0, [x19, #40]
   9ee68:	34000040 	cbz	w0, 9ee70 <CLogger::Read(void*, unsigned int)+0xb0>
   9ee6c:	94001d49 	bl	a6390 <LeaveCritical>
   9ee70:	12800014 	mov	w20, #0xffffffff            	// #-1
   9ee74:	17fffff3 	b	9ee40 <CLogger::Read(void*, unsigned int)+0x80>
   9ee78:	94001d46 	bl	a6390 <LeaveCritical>
   9ee7c:	2a1403e0 	mov	w0, w20
   9ee80:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ee84:	f94013f5 	ldr	x21, [sp, #32]
   9ee88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ee8c:	d65f03c0 	ret

000000000009ee90 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   9ee90:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9ee94:	910003fd 	mov	x29, sp
   9ee98:	a90153f3 	stp	x19, x20, [sp, #16]
   9ee9c:	aa0003f3 	mov	x19, x0
   9eea0:	d2802200 	mov	x0, #0x110                 	// #272
   9eea4:	aa0103f4 	mov	x20, x1
   9eea8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9eeac:	2a0203f6 	mov	w22, w2
   9eeb0:	aa0303f5 	mov	x21, x3
   9eeb4:	940019f3 	bl	a5680 <operator new(unsigned long)>
   9eeb8:	aa1403e1 	mov	x1, x20
   9eebc:	d2800642 	mov	x2, #0x32                  	// #50
   9eec0:	aa0003f4 	mov	x20, x0
   9eec4:	b8004416 	str	w22, [x0], #4
   9eec8:	9400164e 	bl	a4800 <strncpy>
   9eecc:	aa1503e1 	mov	x1, x21
   9eed0:	9100da80 	add	x0, x20, #0x36
   9eed4:	3900d69f 	strb	wzr, [x20, #53]
   9eed8:	d2801902 	mov	x2, #0xc8                  	// #200
   9eedc:	94001649 	bl	a4800 <strncpy>
   9eee0:	3903f69f 	strb	wzr, [x20, #253]
   9eee4:	f9400660 	ldr	x0, [x19, #8]
   9eee8:	b40000c0 	cbz	x0, 9ef00 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   9eeec:	910133e2 	add	x2, sp, #0x4c
   9eef0:	910123e1 	add	x1, sp, #0x48
   9eef4:	94001273 	bl	a38c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   9eef8:	72001c1f 	tst	w0, #0xff
   9eefc:	540005e1 	b.ne	9efb8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x128>  // b.any
   9ef00:	a9107e9f 	stp	xzr, xzr, [x20, #256]
   9ef04:	b941ca62 	ldr	w2, [x19, #456]
   9ef08:	35000502 	cbnz	w2, 9efa8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   9ef0c:	b941c261 	ldr	w1, [x19, #448]
   9ef10:	8b214e60 	add	x0, x19, w1, uxtw #3
   9ef14:	f9001814 	str	x20, [x0, #48]
   9ef18:	7100c43f 	cmp	w1, #0x31
   9ef1c:	11000421 	add	w1, w1, #0x1
   9ef20:	54000340 	b.eq	9ef88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>  // b.none
   9ef24:	b941c660 	ldr	w0, [x19, #452]
   9ef28:	b901c261 	str	w1, [x19, #448]
   9ef2c:	6b00003f 	cmp	w1, w0
   9ef30:	54000120 	b.eq	9ef54 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc4>  // b.none
   9ef34:	35000262 	cbnz	w2, 9ef80 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   9ef38:	f940ea60 	ldr	x0, [x19, #464]
   9ef3c:	b4000040 	cbz	x0, 9ef44 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   9ef40:	d63f0000 	blr	x0
   9ef44:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ef48:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ef4c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9ef50:	d65f03c0 	ret
   9ef54:	7100c43f 	cmp	w1, #0x31
   9ef58:	8b214e60 	add	x0, x19, w1, uxtw #3
   9ef5c:	11000421 	add	w1, w1, #0x1
   9ef60:	f9401800 	ldr	x0, [x0, #48]
   9ef64:	540001c1 	b.ne	9ef9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>  // b.any
   9ef68:	b901c67f 	str	wzr, [x19, #452]
   9ef6c:	350003c2 	cbnz	w2, 9efe4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   9ef70:	b4fffe40 	cbz	x0, 9ef38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   9ef74:	d2802201 	mov	x1, #0x110                 	// #272
   9ef78:	940019e6 	bl	a5710 <operator delete(void*, unsigned long)>
   9ef7c:	17ffffef 	b	9ef38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   9ef80:	94001d04 	bl	a6390 <LeaveCritical>
   9ef84:	17ffffed 	b	9ef38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   9ef88:	b941c660 	ldr	w0, [x19, #452]
   9ef8c:	b901c27f 	str	wzr, [x19, #448]
   9ef90:	35fffd20 	cbnz	w0, 9ef34 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa4>
   9ef94:	f9401a60 	ldr	x0, [x19, #48]
   9ef98:	52800021 	mov	w1, #0x1                   	// #1
   9ef9c:	b901c661 	str	w1, [x19, #452]
   9efa0:	34fffe82 	cbz	w2, 9ef70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   9efa4:	14000010 	b	9efe4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   9efa8:	2a0203e0 	mov	w0, w2
   9efac:	94001cc9 	bl	a62d0 <EnterCritical>
   9efb0:	b941ca62 	ldr	w2, [x19, #456]
   9efb4:	17ffffd6 	b	9ef0c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x7c>
   9efb8:	294907e2 	ldp	w2, w1, [sp, #72]
   9efbc:	5282eb23 	mov	w3, #0x1759                	// #5977
   9efc0:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   9efc4:	f9400660 	ldr	x0, [x19, #8]
   9efc8:	9ba37c21 	umull	x1, w1, w3
   9efcc:	f9008282 	str	x2, [x20, #256]
   9efd0:	d36dfc21 	lsr	x1, x1, #45
   9efd4:	b9010a81 	str	w1, [x20, #264]
   9efd8:	940011fa 	bl	a37c0 <CTimer::GetTimeZone() const>
   9efdc:	b9010e80 	str	w0, [x20, #268]
   9efe0:	17ffffc9 	b	9ef04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x74>
   9efe4:	f9001fe0 	str	x0, [sp, #56]
   9efe8:	94001cea 	bl	a6390 <LeaveCritical>
   9efec:	f9401fe0 	ldr	x0, [sp, #56]
   9eff0:	17ffffe0 	b	9ef70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   9eff4:	d503201f 	nop
   9eff8:	d503201f 	nop
   9effc:	d503201f 	nop

000000000009f000 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   9f000:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9f004:	910003fd 	mov	x29, sp
   9f008:	a90153f3 	stp	x19, x20, [sp, #16]
   9f00c:	aa0003f3 	mov	x19, x0
   9f010:	b941c800 	ldr	w0, [x0, #456]
   9f014:	a9025bf5 	stp	x21, x22, [sp, #32]
   9f018:	aa0103f5 	mov	x21, x1
   9f01c:	aa0203f6 	mov	x22, x2
   9f020:	a90363f7 	stp	x23, x24, [sp, #48]
   9f024:	aa0303f7 	mov	x23, x3
   9f028:	aa0403f8 	mov	x24, x4
   9f02c:	a9046bf9 	stp	x25, x26, [sp, #64]
   9f030:	aa0503f9 	mov	x25, x5
   9f034:	aa0603fa 	mov	x26, x6
   9f038:	35000460 	cbnz	w0, 9f0c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc4>
   9f03c:	b941c261 	ldr	w1, [x19, #448]
   9f040:	b941c667 	ldr	w7, [x19, #452]
   9f044:	6b0100ff 	cmp	w7, w1
   9f048:	540004e0 	b.eq	9f0e4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe4>  // b.none
   9f04c:	8b274e61 	add	x1, x19, w7, uxtw #3
   9f050:	7100c4ff 	cmp	w7, #0x31
   9f054:	1a8707e7 	csinc	w7, wzr, w7, eq  // eq = none
   9f058:	f9401834 	ldr	x20, [x1, #48]
   9f05c:	b901c667 	str	w7, [x19, #452]
   9f060:	35000500 	cbnz	w0, 9f100 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x100>
   9f064:	aa1403e1 	mov	x1, x20
   9f068:	aa1603e0 	mov	x0, x22
   9f06c:	b8404422 	ldr	w2, [x1], #4
   9f070:	b90002a2 	str	w2, [x21]
   9f074:	940015d7 	bl	a47d0 <strcpy>
   9f078:	9100da81 	add	x1, x20, #0x36
   9f07c:	aa1703e0 	mov	x0, x23
   9f080:	940015d4 	bl	a47d0 <strcpy>
   9f084:	f9408283 	ldr	x3, [x20, #256]
   9f088:	aa1403e0 	mov	x0, x20
   9f08c:	d2802201 	mov	x1, #0x110                 	// #272
   9f090:	b9410a82 	ldr	w2, [x20, #264]
   9f094:	f9000303 	str	x3, [x24]
   9f098:	b9000322 	str	w2, [x25]
   9f09c:	b9410e82 	ldr	w2, [x20, #268]
   9f0a0:	b9000342 	str	w2, [x26]
   9f0a4:	9400199b 	bl	a5710 <operator delete(void*, unsigned long)>
   9f0a8:	52800020 	mov	w0, #0x1                   	// #1
   9f0ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f0b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f0b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   9f0b8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9f0bc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9f0c0:	d65f03c0 	ret
   9f0c4:	94001c83 	bl	a62d0 <EnterCritical>
   9f0c8:	b941c260 	ldr	w0, [x19, #448]
   9f0cc:	b941c667 	ldr	w7, [x19, #452]
   9f0d0:	6b07001f 	cmp	w0, w7
   9f0d4:	b941ca60 	ldr	w0, [x19, #456]
   9f0d8:	54fffba1 	b.ne	9f04c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x4c>  // b.any
   9f0dc:	34000040 	cbz	w0, 9f0e4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe4>
   9f0e0:	94001cac 	bl	a6390 <LeaveCritical>
   9f0e4:	52800000 	mov	w0, #0x0                   	// #0
   9f0e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f0ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f0f0:	a94363f7 	ldp	x23, x24, [sp, #48]
   9f0f4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9f0f8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9f0fc:	d65f03c0 	ret
   9f100:	94001ca4 	bl	a6390 <LeaveCritical>
   9f104:	17ffffd8 	b	9f064 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x64>
   9f108:	d503201f 	nop
   9f10c:	d503201f 	nop

000000000009f110 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   9f110:	f900e801 	str	x1, [x0, #464]
   9f114:	d65f03c0 	ret
   9f118:	d503201f 	nop
   9f11c:	d503201f 	nop

000000000009f120 <CLogger::RegisterPanicHandler(void (*)())>:
   9f120:	f900ec01 	str	x1, [x0, #472]
   9f124:	d65f03c0 	ret
	...

000000000009f130 <CMachineInfo::CMachineInfo()>:
   9f130:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9f134:	910003fd 	mov	x29, sp
   9f138:	f9000bf3 	str	x19, [sp, #16]
   9f13c:	f90017e0 	str	x0, [sp, #40]
   9f140:	f94017e0 	ldr	x0, [sp, #40]
   9f144:	b900001f 	str	wzr, [x0]
   9f148:	f94017e0 	ldr	x0, [sp, #40]
   9f14c:	52800201 	mov	w1, #0x10                  	// #16
   9f150:	b9000401 	str	w1, [x0, #4]
   9f154:	f94017e0 	ldr	x0, [sp, #40]
   9f158:	b900081f 	str	wzr, [x0, #8]
   9f15c:	f94017e0 	ldr	x0, [sp, #40]
   9f160:	b9000c1f 	str	wzr, [x0, #12]
   9f164:	f94017e0 	ldr	x0, [sp, #40]
   9f168:	52800081 	mov	w1, #0x4                   	// #4
   9f16c:	b9001001 	str	w1, [x0, #16]
   9f170:	f94017e0 	ldr	x0, [sp, #40]
   9f174:	b900141f 	str	wzr, [x0, #20]
   9f178:	f94017e0 	ldr	x0, [sp, #40]
   9f17c:	528e3ea1 	mov	w1, #0x71f5                	// #29173
   9f180:	79003001 	strh	w1, [x0, #24]
   9f184:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f188:	913b4000 	add	x0, x0, #0xed0
   9f18c:	f9400000 	ldr	x0, [x0]
   9f190:	f100001f 	cmp	x0, #0x0
   9f194:	540004c0 	b.eq	9f22c <CMachineInfo::CMachineInfo()+0xfc>  // b.none
   9f198:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f19c:	913b4000 	add	x0, x0, #0xed0
   9f1a0:	f9400000 	ldr	x0, [x0]
   9f1a4:	b9400001 	ldr	w1, [x0]
   9f1a8:	f94017e0 	ldr	x0, [sp, #40]
   9f1ac:	b9000001 	str	w1, [x0]
   9f1b0:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f1b4:	913b4000 	add	x0, x0, #0xed0
   9f1b8:	f9400000 	ldr	x0, [x0]
   9f1bc:	b9400401 	ldr	w1, [x0, #4]
   9f1c0:	f94017e0 	ldr	x0, [sp, #40]
   9f1c4:	b9000401 	str	w1, [x0, #4]
   9f1c8:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f1cc:	913b4000 	add	x0, x0, #0xed0
   9f1d0:	f9400000 	ldr	x0, [x0]
   9f1d4:	b9400801 	ldr	w1, [x0, #8]
   9f1d8:	f94017e0 	ldr	x0, [sp, #40]
   9f1dc:	b9000801 	str	w1, [x0, #8]
   9f1e0:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f1e4:	913b4000 	add	x0, x0, #0xed0
   9f1e8:	f9400000 	ldr	x0, [x0]
   9f1ec:	b9400c01 	ldr	w1, [x0, #12]
   9f1f0:	f94017e0 	ldr	x0, [sp, #40]
   9f1f4:	b9000c01 	str	w1, [x0, #12]
   9f1f8:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f1fc:	913b4000 	add	x0, x0, #0xed0
   9f200:	f9400000 	ldr	x0, [x0]
   9f204:	b9401001 	ldr	w1, [x0, #16]
   9f208:	f94017e0 	ldr	x0, [sp, #40]
   9f20c:	b9001001 	str	w1, [x0, #16]
   9f210:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f214:	913b4000 	add	x0, x0, #0xed0
   9f218:	f9400000 	ldr	x0, [x0]
   9f21c:	b9401401 	ldr	w1, [x0, #20]
   9f220:	f94017e0 	ldr	x0, [sp, #40]
   9f224:	b9001401 	str	w1, [x0, #20]
   9f228:	140000ca 	b	9f550 <CMachineInfo::CMachineInfo()+0x420>
   9f22c:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f230:	913b4000 	add	x0, x0, #0xed0
   9f234:	f94017e1 	ldr	x1, [sp, #40]
   9f238:	f9000001 	str	x1, [x0]
   9f23c:	910163e0 	add	x0, sp, #0x58
   9f240:	52800021 	mov	w1, #0x1                   	// #1
   9f244:	97fff533 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9f248:	910123e1 	add	x1, sp, #0x48
   9f24c:	910163e0 	add	x0, sp, #0x58
   9f250:	52800004 	mov	w4, #0x0                   	// #0
   9f254:	52800203 	mov	w3, #0x10                  	// #16
   9f258:	aa0103e2 	mov	x2, x1
   9f25c:	52800021 	mov	w1, #0x1                   	// #1
   9f260:	72a000c1 	movk	w1, #0x6, lsl #16
   9f264:	97fff533 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9f268:	12001c00 	and	w0, w0, #0xff
   9f26c:	7100001f 	cmp	w0, #0x0
   9f270:	540000a0 	b.eq	9f284 <CMachineInfo::CMachineInfo()+0x154>  // b.none
   9f274:	b94057e0 	ldr	w0, [sp, #84]
   9f278:	12003c01 	and	w1, w0, #0xffff
   9f27c:	f94017e0 	ldr	x0, [sp, #40]
   9f280:	79003001 	strh	w1, [x0, #24]
   9f284:	9100e3e1 	add	x1, sp, #0x38
   9f288:	910163e0 	add	x0, sp, #0x58
   9f28c:	52800004 	mov	w4, #0x0                   	// #0
   9f290:	52800203 	mov	w3, #0x10                  	// #16
   9f294:	aa0103e2 	mov	x2, x1
   9f298:	52800041 	mov	w1, #0x2                   	// #2
   9f29c:	72a00021 	movk	w1, #0x1, lsl #16
   9f2a0:	97fff524 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9f2a4:	12001c00 	and	w0, w0, #0xff
   9f2a8:	52000000 	eor	w0, w0, #0x1
   9f2ac:	12001c00 	and	w0, w0, #0xff
   9f2b0:	7100001f 	cmp	w0, #0x0
   9f2b4:	54000060 	b.eq	9f2c0 <CMachineInfo::CMachineInfo()+0x190>  // b.none
   9f2b8:	52800013 	mov	w19, #0x0                   	// #0
   9f2bc:	140000a2 	b	9f544 <CMachineInfo::CMachineInfo()+0x414>
   9f2c0:	b94047e1 	ldr	w1, [sp, #68]
   9f2c4:	f94017e0 	ldr	x0, [sp, #40]
   9f2c8:	b9000001 	str	w1, [x0]
   9f2cc:	f94017e0 	ldr	x0, [sp, #40]
   9f2d0:	b9400000 	ldr	w0, [x0]
   9f2d4:	12090000 	and	w0, w0, #0x800000
   9f2d8:	7100001f 	cmp	w0, #0x0
   9f2dc:	54000c80 	b.eq	9f46c <CMachineInfo::CMachineInfo()+0x33c>  // b.none
   9f2e0:	f94017e0 	ldr	x0, [sp, #40]
   9f2e4:	b9400000 	ldr	w0, [x0]
   9f2e8:	53047c00 	lsr	w0, w0, #4
   9f2ec:	12001c00 	and	w0, w0, #0xff
   9f2f0:	b90067e0 	str	w0, [sp, #100]
   9f2f4:	b9006fff 	str	wzr, [sp, #108]
   9f2f8:	b9406fe0 	ldr	w0, [sp, #108]
   9f2fc:	7100341f 	cmp	w0, #0xd
   9f300:	54000248 	b.hi	9f348 <CMachineInfo::CMachineInfo()+0x218>  // b.pmore
   9f304:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f308:	9102a002 	add	x2, x0, #0xa8
   9f30c:	b9406fe1 	ldr	w1, [sp, #108]
   9f310:	aa0103e0 	mov	x0, x1
   9f314:	d37ff800 	lsl	x0, x0, #1
   9f318:	8b010000 	add	x0, x0, x1
   9f31c:	d37ef400 	lsl	x0, x0, #2
   9f320:	8b000040 	add	x0, x2, x0
   9f324:	b9400000 	ldr	w0, [x0]
   9f328:	b94067e1 	ldr	w1, [sp, #100]
   9f32c:	6b00003f 	cmp	w1, w0
   9f330:	540000a0 	b.eq	9f344 <CMachineInfo::CMachineInfo()+0x214>  // b.none
   9f334:	b9406fe0 	ldr	w0, [sp, #108]
   9f338:	11000400 	add	w0, w0, #0x1
   9f33c:	b9006fe0 	str	w0, [sp, #108]
   9f340:	17ffffee 	b	9f2f8 <CMachineInfo::CMachineInfo()+0x1c8>
   9f344:	d503201f 	nop
   9f348:	b9406fe0 	ldr	w0, [sp, #108]
   9f34c:	7100341f 	cmp	w0, #0xd
   9f350:	54000069 	b.ls	9f35c <CMachineInfo::CMachineInfo()+0x22c>  // b.plast
   9f354:	52800013 	mov	w19, #0x0                   	// #0
   9f358:	1400007b 	b	9f544 <CMachineInfo::CMachineInfo()+0x414>
   9f35c:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f360:	9102a002 	add	x2, x0, #0xa8
   9f364:	b9406fe1 	ldr	w1, [sp, #108]
   9f368:	aa0103e0 	mov	x0, x1
   9f36c:	d37ff800 	lsl	x0, x0, #1
   9f370:	8b010000 	add	x0, x0, x1
   9f374:	d37ef400 	lsl	x0, x0, #2
   9f378:	8b000040 	add	x0, x2, x0
   9f37c:	b9400401 	ldr	w1, [x0, #4]
   9f380:	f94017e0 	ldr	x0, [sp, #40]
   9f384:	b9000401 	str	w1, [x0, #4]
   9f388:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9f38c:	9102a002 	add	x2, x0, #0xa8
   9f390:	b9406fe1 	ldr	w1, [sp, #108]
   9f394:	aa0103e0 	mov	x0, x1
   9f398:	d37ff800 	lsl	x0, x0, #1
   9f39c:	8b010000 	add	x0, x0, x1
   9f3a0:	d37ef400 	lsl	x0, x0, #2
   9f3a4:	8b000040 	add	x0, x2, x0
   9f3a8:	b9400801 	ldr	w1, [x0, #8]
   9f3ac:	f94017e0 	ldr	x0, [sp, #40]
   9f3b0:	b9000801 	str	w1, [x0, #8]
   9f3b4:	f94017e0 	ldr	x0, [sp, #40]
   9f3b8:	b9400000 	ldr	w0, [x0]
   9f3bc:	12000c00 	and	w0, w0, #0xf
   9f3c0:	11000401 	add	w1, w0, #0x1
   9f3c4:	f94017e0 	ldr	x0, [sp, #40]
   9f3c8:	b9000c01 	str	w1, [x0, #12]
   9f3cc:	f94017e0 	ldr	x0, [sp, #40]
   9f3d0:	b9400000 	ldr	w0, [x0]
   9f3d4:	530c7c00 	lsr	w0, w0, #12
   9f3d8:	12000c01 	and	w1, w0, #0xf
   9f3dc:	f94017e0 	ldr	x0, [sp, #40]
   9f3e0:	b9001001 	str	w1, [x0, #16]
   9f3e4:	f94017e0 	ldr	x0, [sp, #40]
   9f3e8:	b9400000 	ldr	w0, [x0]
   9f3ec:	53147c00 	lsr	w0, w0, #20
   9f3f0:	12000800 	and	w0, w0, #0x7
   9f3f4:	52802001 	mov	w1, #0x100                 	// #256
   9f3f8:	1ac02020 	lsl	w0, w1, w0
   9f3fc:	2a0003e1 	mov	w1, w0
   9f400:	f94017e0 	ldr	x0, [sp, #40]
   9f404:	b9001401 	str	w1, [x0, #20]
   9f408:	f94017e0 	ldr	x0, [sp, #40]
   9f40c:	b9401000 	ldr	w0, [x0, #16]
   9f410:	71000c1f 	cmp	w0, #0x3
   9f414:	5400008d 	b.le	9f424 <CMachineInfo::CMachineInfo()+0x2f4>
   9f418:	f94017e0 	ldr	x0, [sp, #40]
   9f41c:	52800081 	mov	w1, #0x4                   	// #4
   9f420:	b9001001 	str	w1, [x0, #16]
   9f424:	f94017e0 	ldr	x0, [sp, #40]
   9f428:	b9400400 	ldr	w0, [x0, #4]
   9f42c:	71000c1f 	cmp	w0, #0x3
   9f430:	54000881 	b.ne	9f540 <CMachineInfo::CMachineInfo()+0x410>  // b.any
   9f434:	f94017e0 	ldr	x0, [sp, #40]
   9f438:	b9401400 	ldr	w0, [x0, #20]
   9f43c:	7104001f 	cmp	w0, #0x100
   9f440:	54000801 	b.ne	9f540 <CMachineInfo::CMachineInfo()+0x410>  // b.any
   9f444:	f94017e0 	ldr	x0, [sp, #40]
   9f448:	b9400c00 	ldr	w0, [x0, #12]
   9f44c:	7100041f 	cmp	w0, #0x1
   9f450:	54000061 	b.ne	9f45c <CMachineInfo::CMachineInfo()+0x32c>  // b.any
   9f454:	52800020 	mov	w0, #0x1                   	// #1
   9f458:	14000002 	b	9f460 <CMachineInfo::CMachineInfo()+0x330>
   9f45c:	52800040 	mov	w0, #0x2                   	// #2
   9f460:	f94017e1 	ldr	x1, [sp, #40]
   9f464:	b9000420 	str	w0, [x1, #4]
   9f468:	14000036 	b	9f540 <CMachineInfo::CMachineInfo()+0x410>
   9f46c:	b9006bff 	str	wzr, [sp, #104]
   9f470:	b9406be0 	ldr	w0, [sp, #104]
   9f474:	7100401f 	cmp	w0, #0x10
   9f478:	54000208 	b.hi	9f4b8 <CMachineInfo::CMachineInfo()+0x388>  // b.pmore
   9f47c:	d00000a0 	adrp	x0, b5000 <font_data+0x1340>
   9f480:	913e6001 	add	x1, x0, #0xf98
   9f484:	b9406be0 	ldr	w0, [sp, #104]
   9f488:	d37cec00 	lsl	x0, x0, #4
   9f48c:	8b000020 	add	x0, x1, x0
   9f490:	b9400001 	ldr	w1, [x0]
   9f494:	f94017e0 	ldr	x0, [sp, #40]
   9f498:	b9400000 	ldr	w0, [x0]
   9f49c:	6b00003f 	cmp	w1, w0
   9f4a0:	540000a0 	b.eq	9f4b4 <CMachineInfo::CMachineInfo()+0x384>  // b.none
   9f4a4:	b9406be0 	ldr	w0, [sp, #104]
   9f4a8:	11000400 	add	w0, w0, #0x1
   9f4ac:	b9006be0 	str	w0, [sp, #104]
   9f4b0:	17fffff0 	b	9f470 <CMachineInfo::CMachineInfo()+0x340>
   9f4b4:	d503201f 	nop
   9f4b8:	b9406be0 	ldr	w0, [sp, #104]
   9f4bc:	7100401f 	cmp	w0, #0x10
   9f4c0:	54000069 	b.ls	9f4cc <CMachineInfo::CMachineInfo()+0x39c>  // b.plast
   9f4c4:	52800013 	mov	w19, #0x0                   	// #0
   9f4c8:	1400001f 	b	9f544 <CMachineInfo::CMachineInfo()+0x414>
   9f4cc:	d00000a0 	adrp	x0, b5000 <font_data+0x1340>
   9f4d0:	913e6001 	add	x1, x0, #0xf98
   9f4d4:	b9406be0 	ldr	w0, [sp, #104]
   9f4d8:	d37cec00 	lsl	x0, x0, #4
   9f4dc:	8b000020 	add	x0, x1, x0
   9f4e0:	b9400401 	ldr	w1, [x0, #4]
   9f4e4:	f94017e0 	ldr	x0, [sp, #40]
   9f4e8:	b9000401 	str	w1, [x0, #4]
   9f4ec:	f94017e0 	ldr	x0, [sp, #40]
   9f4f0:	52800021 	mov	w1, #0x1                   	// #1
   9f4f4:	b9000801 	str	w1, [x0, #8]
   9f4f8:	d00000a0 	adrp	x0, b5000 <font_data+0x1340>
   9f4fc:	913e6001 	add	x1, x0, #0xf98
   9f500:	b9406be0 	ldr	w0, [sp, #104]
   9f504:	d37cec00 	lsl	x0, x0, #4
   9f508:	8b000020 	add	x0, x1, x0
   9f50c:	b9400801 	ldr	w1, [x0, #8]
   9f510:	f94017e0 	ldr	x0, [sp, #40]
   9f514:	b9000c01 	str	w1, [x0, #12]
   9f518:	f94017e0 	ldr	x0, [sp, #40]
   9f51c:	b900101f 	str	wzr, [x0, #16]
   9f520:	d00000a0 	adrp	x0, b5000 <font_data+0x1340>
   9f524:	913e6001 	add	x1, x0, #0xf98
   9f528:	b9406be0 	ldr	w0, [sp, #104]
   9f52c:	d37cec00 	lsl	x0, x0, #4
   9f530:	8b000020 	add	x0, x1, x0
   9f534:	b9400c01 	ldr	w1, [x0, #12]
   9f538:	f94017e0 	ldr	x0, [sp, #40]
   9f53c:	b9001401 	str	w1, [x0, #20]
   9f540:	52800033 	mov	w19, #0x1                   	// #1
   9f544:	910163e0 	add	x0, sp, #0x58
   9f548:	97fff476 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f54c:	7100067f 	cmp	w19, #0x1
   9f550:	f9400bf3 	ldr	x19, [sp, #16]
   9f554:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9f558:	d65f03c0 	ret
   9f55c:	d503201f 	nop

000000000009f560 <CMachineInfo::~CMachineInfo()>:
   9f560:	f00000a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   9f564:	f9476822 	ldr	x2, [x1, #3792]
   9f568:	eb00005f 	cmp	x2, x0
   9f56c:	54000040 	b.eq	9f574 <CMachineInfo::~CMachineInfo()+0x14>  // b.none
   9f570:	d65f03c0 	ret
   9f574:	f907683f 	str	xzr, [x1, #3792]
   9f578:	d65f03c0 	ret
   9f57c:	d503201f 	nop

000000000009f580 <CMachineInfo::GetMachineModel() const>:
   9f580:	b9400400 	ldr	w0, [x0, #4]
   9f584:	d65f03c0 	ret
   9f588:	d503201f 	nop
   9f58c:	d503201f 	nop

000000000009f590 <CMachineInfo::GetMachineName() const>:
   9f590:	b9800400 	ldrsw	x0, [x0, #4]
   9f594:	d00000a1 	adrp	x1, b5000 <font_data+0x1340>
   9f598:	913e6021 	add	x1, x1, #0xf98
   9f59c:	9106e021 	add	x1, x1, #0x1b8
   9f5a0:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   9f5a4:	d65f03c0 	ret
   9f5a8:	d503201f 	nop
   9f5ac:	d503201f 	nop

000000000009f5b0 <CMachineInfo::GetModelMajor() const>:
   9f5b0:	b9400800 	ldr	w0, [x0, #8]
   9f5b4:	d65f03c0 	ret
   9f5b8:	d503201f 	nop
   9f5bc:	d503201f 	nop

000000000009f5c0 <CMachineInfo::GetModelRevision() const>:
   9f5c0:	b9400c00 	ldr	w0, [x0, #12]
   9f5c4:	d65f03c0 	ret
   9f5c8:	d503201f 	nop
   9f5cc:	d503201f 	nop

000000000009f5d0 <CMachineInfo::GetSoCType() const>:
   9f5d0:	b9401000 	ldr	w0, [x0, #16]
   9f5d4:	d65f03c0 	ret
   9f5d8:	d503201f 	nop
   9f5dc:	d503201f 	nop

000000000009f5e0 <CMachineInfo::GetRAMSize() const>:
   9f5e0:	b9401400 	ldr	w0, [x0, #20]
   9f5e4:	d65f03c0 	ret
   9f5e8:	d503201f 	nop
   9f5ec:	d503201f 	nop

000000000009f5f0 <CMachineInfo::GetSoCName() const>:
   9f5f0:	b9801000 	ldrsw	x0, [x0, #16]
   9f5f4:	d00000a1 	adrp	x1, b5000 <font_data+0x1340>
   9f5f8:	913e6021 	add	x1, x1, #0xf98
   9f5fc:	91090021 	add	x1, x1, #0x240
   9f600:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   9f604:	d65f03c0 	ret
   9f608:	d503201f 	nop
   9f60c:	d503201f 	nop

000000000009f610 <CMachineInfo::GetRevisionRaw() const>:
   9f610:	b9400000 	ldr	w0, [x0]
   9f614:	d65f03c0 	ret
   9f618:	d503201f 	nop
   9f61c:	d503201f 	nop

000000000009f620 <CMachineInfo::GetActLEDInfo() const>:
   9f620:	b9800400 	ldrsw	x0, [x0, #4]
   9f624:	d00000a1 	adrp	x1, b5000 <font_data+0x1340>
   9f628:	913e6021 	add	x1, x1, #0xf98
   9f62c:	9109a021 	add	x1, x1, #0x268
   9f630:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   9f634:	d65f03c0 	ret
   9f638:	d503201f 	nop
   9f63c:	d503201f 	nop

000000000009f640 <CMachineInfo::GetClockRate(unsigned int) const>:
   9f640:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9f644:	910003fd 	mov	x29, sp
   9f648:	a90153f3 	stp	x19, x20, [sp, #16]
   9f64c:	2a0103f3 	mov	w19, w1
   9f650:	aa0003f4 	mov	x20, x0
   9f654:	52800001 	mov	w1, #0x0                   	// #0
   9f658:	910083e0 	add	x0, sp, #0x20
   9f65c:	97fff42d 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9f660:	910083e0 	add	x0, sp, #0x20
   9f664:	52800041 	mov	w1, #0x2                   	// #2
   9f668:	72a00061 	movk	w1, #0x3, lsl #16
   9f66c:	52800084 	mov	w4, #0x4                   	// #4
   9f670:	b90037f3 	str	w19, [sp, #52]
   9f674:	52800283 	mov	w3, #0x14                  	// #20
   9f678:	9100a3e2 	add	x2, sp, #0x28
   9f67c:	97fff42d 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9f680:	72001c1f 	tst	w0, #0xff
   9f684:	54000541 	b.ne	9f72c <CMachineInfo::GetClockRate(unsigned int) const+0xec>  // b.any
   9f688:	71000a7f 	cmp	w19, #0x2
   9f68c:	54000400 	b.eq	9f70c <CMachineInfo::GetClockRate(unsigned int) const+0xcc>  // b.none
   9f690:	7100127f 	cmp	w19, #0x4
   9f694:	54000220 	b.eq	9f6d8 <CMachineInfo::GetClockRate(unsigned int) const+0x98>  // b.none
   9f698:	7100067f 	cmp	w19, #0x1
   9f69c:	540000e0 	b.eq	9f6b8 <CMachineInfo::GetClockRate(unsigned int) const+0x78>  // b.none
   9f6a0:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f6a4:	9136a000 	add	x0, x0, #0xda8
   9f6a8:	91062001 	add	x1, x0, #0x188
   9f6ac:	52802822 	mov	w2, #0x141                 	// #321
   9f6b0:	91066000 	add	x0, x0, #0x198
   9f6b4:	97fff3f3 	bl	9c680 <assertion_failed>
   9f6b8:	910083e0 	add	x0, sp, #0x20
   9f6bc:	529c2013 	mov	w19, #0xe100                	// #57600
   9f6c0:	72a0beb3 	movk	w19, #0x5f5, lsl #16
   9f6c4:	97fff417 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f6c8:	2a1303e0 	mov	w0, w19
   9f6cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f6d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f6d4:	d65f03c0 	ret
   9f6d8:	b9400a81 	ldr	w1, [x20, #8]
   9f6dc:	52946000 	mov	w0, #0xa300                	// #41728
   9f6e0:	72a23c20 	movk	w0, #0x11e1, lsl #16
   9f6e4:	52965013 	mov	w19, #0xb280                	// #45696
   9f6e8:	72a1dcd3 	movk	w19, #0xee6, lsl #16
   9f6ec:	71000c3f 	cmp	w1, #0x3
   9f6f0:	1a803273 	csel	w19, w19, w0, cc  // cc = lo, ul, last
   9f6f4:	910083e0 	add	x0, sp, #0x20
   9f6f8:	97fff40a 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f6fc:	2a1303e0 	mov	w0, w19
   9f700:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f704:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f708:	d65f03c0 	ret
   9f70c:	910083e0 	add	x0, sp, #0x20
   9f710:	528d8013 	mov	w19, #0x6c00                	// #27648
   9f714:	72a05b93 	movk	w19, #0x2dc, lsl #16
   9f718:	97fff402 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f71c:	2a1303e0 	mov	w0, w19
   9f720:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f724:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f728:	d65f03c0 	ret
   9f72c:	b9403bf3 	ldr	w19, [sp, #56]
   9f730:	910083e0 	add	x0, sp, #0x20
   9f734:	97fff3fb 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f738:	2a1303e0 	mov	w0, w19
   9f73c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f740:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f744:	d65f03c0 	ret
   9f748:	d503201f 	nop
   9f74c:	d503201f 	nop

000000000009f750 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   9f750:	7100d83f 	cmp	w1, #0x36
   9f754:	aa0003e2 	mov	x2, x0
   9f758:	54000120 	b.eq	9f77c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.none
   9f75c:	7100dc3f 	cmp	w1, #0x37
   9f760:	54000241 	b.ne	9f7a8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>  // b.any
   9f764:	b9400442 	ldr	w2, [x2, #4]
   9f768:	528005a1 	mov	w1, #0x2d                  	// #45
   9f76c:	52800500 	mov	w0, #0x28                  	// #40
   9f770:	71000c5f 	cmp	w2, #0x3
   9f774:	1a81c000 	csel	w0, w0, w1, gt
   9f778:	d65f03c0 	ret
   9f77c:	b9400441 	ldr	w1, [x2, #4]
   9f780:	52800500 	mov	w0, #0x28                  	// #40
   9f784:	71000c3f 	cmp	w1, #0x3
   9f788:	540000ed 	b.le	9f7a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   9f78c:	b9400842 	ldr	w2, [x2, #8]
   9f790:	52800521 	mov	w1, #0x29                  	// #41
   9f794:	528005a0 	mov	w0, #0x2d                  	// #45
   9f798:	71000c5f 	cmp	w2, #0x3
   9f79c:	1a813000 	csel	w0, w0, w1, cc  // cc = lo, ul, last
   9f7a0:	d65f03c0 	ret
   9f7a4:	d65f03c0 	ret
   9f7a8:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f7ac:	9136a000 	add	x0, x0, #0xda8
   9f7b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f7b4:	91062001 	add	x1, x0, #0x188
   9f7b8:	910003fd 	mov	x29, sp
   9f7bc:	91066000 	add	x0, x0, #0x198
   9f7c0:	52802f42 	mov	w2, #0x17a                 	// #378
   9f7c4:	97fff3af 	bl	9c680 <assertion_failed>
   9f7c8:	d503201f 	nop
   9f7cc:	d503201f 	nop

000000000009f7d0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   9f7d0:	b9400800 	ldr	w0, [x0, #8]
   9f7d4:	71000c1f 	cmp	w0, #0x3
   9f7d8:	54000108 	b.hi	9f7f8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   9f7dc:	7100043f 	cmp	w1, #0x1
   9f7e0:	54000200 	b.eq	9f820 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   9f7e4:	7100183f 	cmp	w1, #0x6
   9f7e8:	528ca000 	mov	w0, #0x6500                	// #25856
   9f7ec:	72a3b9a0 	movk	w0, #0x1dcd, lsl #16
   9f7f0:	1a8013e0 	csel	w0, wzr, w0, ne  // ne = any
   9f7f4:	d65f03c0 	ret
   9f7f8:	7100043f 	cmp	w1, #0x1
   9f7fc:	540000c0 	b.eq	9f814 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   9f800:	7100183f 	cmp	w1, #0x6
   9f804:	5282f000 	mov	w0, #0x1780                	// #6016
   9f808:	72a59680 	movk	w0, #0x2cb4, lsl #16
   9f80c:	1a8013e0 	csel	w0, wzr, w0, ne  // ne = any
   9f810:	d65f03c0 	ret
   9f814:	529f3000 	mov	w0, #0xf980                	// #63872
   9f818:	72a066e0 	movk	w0, #0x337, lsl #16
   9f81c:	d65f03c0 	ret
   9f820:	529f0000 	mov	w0, #0xf800                	// #63488
   9f824:	72a02480 	movk	w0, #0x124, lsl #16
   9f828:	d65f03c0 	ret
   9f82c:	d503201f 	nop

000000000009f830 <CMachineInfo::GetDevice(TDeviceId) const>:
   9f830:	350000a1 	cbnz	w1, 9f844 <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   9f834:	b9400400 	ldr	w0, [x0, #4]
   9f838:	7100041f 	cmp	w0, #0x1
   9f83c:	1a9f07e0 	cset	w0, ne  // ne = any
   9f840:	d65f03c0 	ret
   9f844:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f848:	9136a000 	add	x0, x0, #0xda8
   9f84c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f850:	91062001 	add	x1, x0, #0x188
   9f854:	910003fd 	mov	x29, sp
   9f858:	91066000 	add	x0, x0, #0x198
   9f85c:	528036a2 	mov	w2, #0x1b5                 	// #437
   9f860:	97fff388 	bl	9c680 <assertion_failed>
   9f864:	d503201f 	nop
   9f868:	d503201f 	nop
   9f86c:	d503201f 	nop

000000000009f870 <CMachineInfo::ArePWMChannelsSwapped() const>:
   9f870:	b9400400 	ldr	w0, [x0, #4]
   9f874:	529fff61 	mov	w1, #0xfffb                	// #65531
   9f878:	72afffe1 	movk	w1, #0x7fff, lsl #16
   9f87c:	51001002 	sub	w2, w0, #0x4
   9f880:	51001800 	sub	w0, w0, #0x6
   9f884:	6b01005f 	cmp	w2, w1
   9f888:	7a419800 	ccmp	w0, #0x1, #0x0, ls  // ls = plast
   9f88c:	1a9f97e0 	cset	w0, hi  // hi = pmore
   9f890:	d65f03c0 	ret
   9f894:	d503201f 	nop
   9f898:	d503201f 	nop
   9f89c:	d503201f 	nop

000000000009f8a0 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   9f8a0:	f00000a2 	adrp	x2, b6000 <s_OldInfo+0x68>
   9f8a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f8a8:	910003fd 	mov	x29, sp
   9f8ac:	aa0003e3 	mov	x3, x0
   9f8b0:	f9476842 	ldr	x2, [x2, #3792]
   9f8b4:	b40000a2 	cbz	x2, 9f8c8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x28>
   9f8b8:	eb03005f 	cmp	x2, x3
   9f8bc:	54000120 	b.eq	9f8e0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x40>  // b.none
   9f8c0:	aa0203e3 	mov	x3, x2
   9f8c4:	b5ffffa2 	cbnz	x2, 9f8b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18>
   9f8c8:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f8cc:	9136a000 	add	x0, x0, #0xda8
   9f8d0:	91062001 	add	x1, x0, #0x188
   9f8d4:	528038a2 	mov	w2, #0x1c5                 	// #453
   9f8d8:	91068000 	add	x0, x0, #0x1a0
   9f8dc:	97fff369 	bl	9c680 <assertion_failed>
   9f8e0:	721c6c3f 	tst	w1, #0xfffffff0
   9f8e4:	540001c1 	b.ne	9f91c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x7c>  // b.any
   9f8e8:	71001c3f 	cmp	w1, #0x7
   9f8ec:	540003c8 	b.hi	9f964 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>  // b.pmore
   9f8f0:	79403044 	ldrh	w4, [x2, #24]
   9f8f4:	52801000 	mov	w0, #0x80                  	// #128
   9f8f8:	1ac12883 	asr	w3, w4, w1
   9f8fc:	360000c3 	tbz	w3, #0, 9f914 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x74>
   9f900:	52800023 	mov	w3, #0x1                   	// #1
   9f904:	2a0103e0 	mov	w0, w1
   9f908:	1ac12061 	lsl	w1, w3, w1
   9f90c:	0a210081 	bic	w1, w4, w1
   9f910:	79003041 	strh	w1, [x2, #24]
   9f914:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9f918:	d65f03c0 	ret
   9f91c:	79403062 	ldrh	w2, [x3, #24]
   9f920:	7102043f 	cmp	w1, #0x81
   9f924:	1a9f07e1 	cset	w1, ne  // ne = any
   9f928:	11001821 	add	w1, w1, #0x6
   9f92c:	d503201f 	nop
   9f930:	1ac12840 	asr	w0, w2, w1
   9f934:	370000c0 	tbnz	w0, #0, 9f94c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   9f938:	51000421 	sub	w1, w1, #0x1
   9f93c:	3100043f 	cmn	w1, #0x1
   9f940:	54ffff81 	b.ne	9f930 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>  // b.any
   9f944:	52801000 	mov	w0, #0x80                  	// #128
   9f948:	17fffff3 	b	9f914 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x74>
   9f94c:	52800024 	mov	w4, #0x1                   	// #1
   9f950:	2a0103e0 	mov	w0, w1
   9f954:	1ac12081 	lsl	w1, w4, w1
   9f958:	0a210042 	bic	w2, w2, w1
   9f95c:	79003062 	strh	w2, [x3, #24]
   9f960:	17ffffed 	b	9f914 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x74>
   9f964:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f968:	9136a000 	add	x0, x0, #0xda8
   9f96c:	91062001 	add	x1, x0, #0x188
   9f970:	528039c2 	mov	w2, #0x1ce                 	// #462
   9f974:	9106c000 	add	x0, x0, #0x1b0
   9f978:	97fff342 	bl	9c680 <assertion_failed>
   9f97c:	d503201f 	nop

000000000009f980 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   9f980:	f00000a2 	adrp	x2, b6000 <s_OldInfo+0x68>
   9f984:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f988:	910003fd 	mov	x29, sp
   9f98c:	f9476842 	ldr	x2, [x2, #3792]
   9f990:	b40000c2 	cbz	x2, 9f9a8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x28>
   9f994:	d503201f 	nop
   9f998:	eb00005f 	cmp	x2, x0
   9f99c:	54000120 	b.eq	9f9c0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x40>  // b.none
   9f9a0:	aa0203e0 	mov	x0, x2
   9f9a4:	b5ffffa2 	cbnz	x2, 9f998 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>
   9f9a8:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f9ac:	9136a000 	add	x0, x0, #0xda8
   9f9b0:	91062001 	add	x1, x0, #0x188
   9f9b4:	52803d42 	mov	w2, #0x1ea                 	// #490
   9f9b8:	91068000 	add	x0, x0, #0x1a0
   9f9bc:	97fff331 	bl	9c680 <assertion_failed>
   9f9c0:	71001c3f 	cmp	w1, #0x7
   9f9c4:	54000148 	b.hi	9f9ec <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>  // b.pmore
   9f9c8:	79403043 	ldrh	w3, [x2, #24]
   9f9cc:	1ac12860 	asr	w0, w3, w1
   9f9d0:	370001a0 	tbnz	w0, #0, 9fa04 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   9f9d4:	52800020 	mov	w0, #0x1                   	// #1
   9f9d8:	1ac12001 	lsl	w1, w0, w1
   9f9dc:	2a030021 	orr	w1, w1, w3
   9f9e0:	79003041 	strh	w1, [x2, #24]
   9f9e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9f9e8:	d65f03c0 	ret
   9f9ec:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9f9f0:	9136a000 	add	x0, x0, #0xda8
   9f9f4:	91062001 	add	x1, x0, #0x188
   9f9f8:	52803e42 	mov	w2, #0x1f2                 	// #498
   9f9fc:	9106c000 	add	x0, x0, #0x1b0
   9fa00:	97fff320 	bl	9c680 <assertion_failed>
   9fa04:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9fa08:	9136a000 	add	x0, x0, #0xda8
   9fa0c:	91062001 	add	x1, x0, #0x188
   9fa10:	52803e62 	mov	w2, #0x1f3                 	// #499
   9fa14:	91074000 	add	x0, x0, #0x1d0
   9fa18:	97fff31a 	bl	9c680 <assertion_failed>
   9fa1c:	d503201f 	nop

000000000009fa20 <CMachineInfo::Get()>:
   9fa20:	f00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   9fa24:	f9476800 	ldr	x0, [x0, #3792]
   9fa28:	b4000040 	cbz	x0, 9fa30 <CMachineInfo::Get()+0x10>
   9fa2c:	d65f03c0 	ret
   9fa30:	f0000080 	adrp	x0, b2000 <vtable for CPartition>
   9fa34:	9136a000 	add	x0, x0, #0xda8
   9fa38:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9fa3c:	91062001 	add	x1, x0, #0x188
   9fa40:	910003fd 	mov	x29, sp
   9fa44:	91068000 	add	x0, x0, #0x1a0
   9fa48:	52803f22 	mov	w2, #0x1f9                 	// #505
   9fa4c:	97fff30d 	bl	9c680 <assertion_failed>

000000000009fa50 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   9fa50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9fa54:	910003fd 	mov	x29, sp
   9fa58:	a90153f3 	stp	x19, x20, [sp, #16]
   9fa5c:	aa0003f3 	mov	x19, x0
   9fa60:	2a0203f4 	mov	w20, w2
   9fa64:	a9025bf5 	stp	x21, x22, [sp, #32]
   9fa68:	2a0103f5 	mov	w21, w1
   9fa6c:	12001c76 	and	w22, w3, #0xff
   9fa70:	97fff4e4 	bl	9ce00 <CDevice::CDevice()>
   9fa74:	f0000084 	adrp	x4, b2000 <vtable for CPartition>
   9fa78:	913ec084 	add	x4, x4, #0xfb0
   9fa7c:	29015275 	stp	w21, w20, [x19, #8]
   9fa80:	91008260 	add	x0, x19, #0x20
   9fa84:	39004276 	strb	w22, [x19, #16]
   9fa88:	f9000264 	str	x4, [x19]
   9fa8c:	f9000e7f 	str	xzr, [x19, #24]
   9fa90:	94002448 	bl	a8bb0 <CCharGenerator::CCharGenerator()>
   9fa94:	52800024 	mov	w4, #0x1                   	// #1
   9fa98:	12800403 	mov	w3, #0xffffffdf            	// #-33
   9fa9c:	f900167f 	str	xzr, [x19, #40]
   9faa0:	9101c260 	add	x0, x19, #0x70
   9faa4:	d2800002 	mov	x2, #0x0                   	// #0
   9faa8:	f804427f 	stur	xzr, [x19, #68]
   9faac:	52801021 	mov	w1, #0x81                  	// #129
   9fab0:	f9002a7f 	str	xzr, [x19, #80]
   9fab4:	39016264 	strb	w4, [x19, #88]
   9fab8:	7900b663 	strh	w3, [x19, #90]
   9fabc:	3901727f 	strb	wzr, [x19, #92]
   9fac0:	3901a27f 	strb	wzr, [x19, #104]
   9fac4:	94002477 	bl	a8ca0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   9fac8:	52800020 	mov	w0, #0x1                   	// #1
   9facc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9fad0:	b900c260 	str	w0, [x19, #192]
   9fad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fad8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fadc:	d65f03c0 	ret

000000000009fae0 <CScreenDevice::~CScreenDevice()>:
   9fae0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fae4:	910003fd 	mov	x29, sp
   9fae8:	f0000081 	adrp	x1, b2000 <vtable for CPartition>
   9faec:	913ec021 	add	x1, x1, #0xfb0
   9faf0:	a90153f3 	stp	x19, x20, [sp, #16]
   9faf4:	aa0003f3 	mov	x19, x0
   9faf8:	39404000 	ldrb	w0, [x0, #16]
   9fafc:	f9000261 	str	x1, [x19]
   9fb00:	34000080 	cbz	w0, 9fb10 <CScreenDevice::~CScreenDevice()+0x30>
   9fb04:	f9401660 	ldr	x0, [x19, #40]
   9fb08:	b4000040 	cbz	x0, 9fb10 <CScreenDevice::~CScreenDevice()+0x30>
   9fb0c:	940016f5 	bl	a56e0 <operator delete[](void*)>
   9fb10:	f900167f 	str	xzr, [x19, #40]
   9fb14:	f9400e74 	ldr	x20, [x19, #24]
   9fb18:	b40000d4 	cbz	x20, 9fb30 <CScreenDevice::~CScreenDevice()+0x50>
   9fb1c:	aa1403e0 	mov	x0, x20
   9fb20:	940022d0 	bl	a8660 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   9fb24:	aa1403e0 	mov	x0, x20
   9fb28:	d2801301 	mov	x1, #0x98                  	// #152
   9fb2c:	940016f9 	bl	a5710 <operator delete(void*, unsigned long)>
   9fb30:	9101c260 	add	x0, x19, #0x70
   9fb34:	f9000e7f 	str	xzr, [x19, #24]
   9fb38:	9400249a 	bl	a8da0 <CDMAChannel::~CDMAChannel()>
   9fb3c:	91008260 	add	x0, x19, #0x20
   9fb40:	94002420 	bl	a8bc0 <CCharGenerator::~CCharGenerator()>
   9fb44:	aa1303e0 	mov	x0, x19
   9fb48:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fb4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fb50:	17fff498 	b	9cdb0 <CDevice::~CDevice()>
   9fb54:	d503201f 	nop
   9fb58:	d503201f 	nop
   9fb5c:	d503201f 	nop

000000000009fb60 <CScreenDevice::~CScreenDevice()>:
   9fb60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fb64:	910003fd 	mov	x29, sp
   9fb68:	f9000bf3 	str	x19, [sp, #16]
   9fb6c:	aa0003f3 	mov	x19, x0
   9fb70:	97ffffdc 	bl	9fae0 <CScreenDevice::~CScreenDevice()>
   9fb74:	aa1303e0 	mov	x0, x19
   9fb78:	d2801901 	mov	x1, #0xc8                  	// #200
   9fb7c:	f9400bf3 	ldr	x19, [sp, #16]
   9fb80:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fb84:	140016e3 	b	a5710 <operator delete(void*, unsigned long)>
   9fb88:	d503201f 	nop
   9fb8c:	d503201f 	nop

000000000009fb90 <CScreenDevice::Initialize()>:
   9fb90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9fb94:	910003fd 	mov	x29, sp
   9fb98:	a90153f3 	stp	x19, x20, [sp, #16]
   9fb9c:	aa0003f3 	mov	x19, x0
   9fba0:	f90013f5 	str	x21, [sp, #32]
   9fba4:	39404015 	ldrb	w21, [x0, #16]
   9fba8:	35000275 	cbnz	w21, 9fbf4 <CScreenDevice::Initialize()+0x64>
   9fbac:	d2801300 	mov	x0, #0x98                  	// #152
   9fbb0:	940016b4 	bl	a5680 <operator new(unsigned long)>
   9fbb4:	29410a61 	ldp	w1, w2, [x19, #8]
   9fbb8:	aa0003f4 	mov	x20, x0
   9fbbc:	52800005 	mov	w5, #0x0                   	// #0
   9fbc0:	52800004 	mov	w4, #0x0                   	// #0
   9fbc4:	52800203 	mov	w3, #0x10                  	// #16
   9fbc8:	9400225e 	bl	a8540 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9fbcc:	aa1403e0 	mov	x0, x20
   9fbd0:	f9000e74 	str	x20, [x19, #24]
   9fbd4:	940022c3 	bl	a86e0 <CBcmFrameBuffer::Initialize()>
   9fbd8:	72001c1f 	tst	w0, #0xff
   9fbdc:	540006e1 	b.ne	9fcb8 <CScreenDevice::Initialize()+0x128>  // b.any
   9fbe0:	2a1503e0 	mov	w0, w21
   9fbe4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fbe8:	f94013f5 	ldr	x21, [sp, #32]
   9fbec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fbf0:	d65f03c0 	ret
   9fbf4:	29410400 	ldp	w0, w1, [x0, #8]
   9fbf8:	29068260 	stp	w0, w0, [x19, #52]
   9fbfc:	1b017c00 	mul	w0, w0, w1
   9fc00:	b9003e61 	str	w1, [x19, #60]
   9fc04:	531f7801 	lsl	w1, w0, #1
   9fc08:	d37f7c00 	ubfiz	x0, x0, #1, #32
   9fc0c:	b9003261 	str	w1, [x19, #48]
   9fc10:	940016a4 	bl	a56a0 <operator new[](unsigned long)>
   9fc14:	b9403e74 	ldr	w20, [x19, #60]
   9fc18:	f9001660 	str	x0, [x19, #40]
   9fc1c:	91008275 	add	x21, x19, #0x20
   9fc20:	aa1503e0 	mov	x0, x21
   9fc24:	940023ef 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   9fc28:	2a0003e1 	mov	w1, w0
   9fc2c:	aa1503e0 	mov	x0, x21
   9fc30:	1ac10a94 	udiv	w20, w20, w1
   9fc34:	940023eb 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   9fc38:	b9404a62 	ldr	w2, [x19, #72]
   9fc3c:	2a0003e1 	mov	w1, w0
   9fc40:	aa1303e0 	mov	x0, x19
   9fc44:	1b017e81 	mul	w1, w20, w1
   9fc48:	b9005662 	str	w2, [x19, #84]
   9fc4c:	b9004261 	str	w1, [x19, #64]
   9fc50:	2909fe61 	stp	w1, wzr, [x19, #76]
   9fc54:	940001d3 	bl	a03a0 <CScreenDevice::ClearDisplayEnd()>
   9fc58:	39416260 	ldrb	w0, [x19, #88]
   9fc5c:	350001a0 	cbnz	w0, 9fc90 <CScreenDevice::Initialize()+0x100>
   9fc60:	97fff558 	bl	9d1c0 <CDeviceNameService::Get()>
   9fc64:	f0000081 	adrp	x1, b2000 <vtable for CPartition>
   9fc68:	aa1303e2 	mov	x2, x19
   9fc6c:	9132c021 	add	x1, x1, #0xcb0
   9fc70:	52800003 	mov	w3, #0x0                   	// #0
   9fc74:	52800035 	mov	w21, #0x1                   	// #1
   9fc78:	97fff48a 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   9fc7c:	2a1503e0 	mov	w0, w21
   9fc80:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fc84:	f94013f5 	ldr	x21, [sp, #32]
   9fc88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fc8c:	d65f03c0 	ret
   9fc90:	aa1303e0 	mov	x0, x19
   9fc94:	52800035 	mov	w21, #0x1                   	// #1
   9fc98:	94000416 	bl	a0cf0 <CScreenDevice::InvertCursor() [clone .part.0]>
   9fc9c:	97fff549 	bl	9d1c0 <CDeviceNameService::Get()>
   9fca0:	f0000081 	adrp	x1, b2000 <vtable for CPartition>
   9fca4:	aa1303e2 	mov	x2, x19
   9fca8:	9132c021 	add	x1, x1, #0xcb0
   9fcac:	52800003 	mov	w3, #0x0                   	// #0
   9fcb0:	97fff47c 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   9fcb4:	17fffff2 	b	9fc7c <CScreenDevice::Initialize()+0xec>
   9fcb8:	f9400e60 	ldr	x0, [x19, #24]
   9fcbc:	940022c9 	bl	a87e0 <CBcmFrameBuffer::GetDepth() const>
   9fcc0:	7100401f 	cmp	w0, #0x10
   9fcc4:	54fff8e1 	b.ne	9fbe0 <CScreenDevice::Initialize()+0x50>  // b.any
   9fcc8:	f9400e60 	ldr	x0, [x19, #24]
   9fccc:	940022c9 	bl	a87f0 <CBcmFrameBuffer::GetBuffer() const>
   9fcd0:	2a0003e1 	mov	w1, w0
   9fcd4:	f9400e60 	ldr	x0, [x19, #24]
   9fcd8:	f9001661 	str	x1, [x19, #40]
   9fcdc:	940022c9 	bl	a8800 <CBcmFrameBuffer::GetSize() const>
   9fce0:	2a0003e1 	mov	w1, w0
   9fce4:	f9400e60 	ldr	x0, [x19, #24]
   9fce8:	b9003261 	str	w1, [x19, #48]
   9fcec:	940022b9 	bl	a87d0 <CBcmFrameBuffer::GetPitch() const>
   9fcf0:	2a0003e1 	mov	w1, w0
   9fcf4:	f9400e60 	ldr	x0, [x19, #24]
   9fcf8:	b9003661 	str	w1, [x19, #52]
   9fcfc:	940022a5 	bl	a8790 <CBcmFrameBuffer::GetWidth() const>
   9fd00:	2a0003e1 	mov	w1, w0
   9fd04:	f9400e60 	ldr	x0, [x19, #24]
   9fd08:	b9003a61 	str	w1, [x19, #56]
   9fd0c:	940022a5 	bl	a87a0 <CBcmFrameBuffer::GetHeight() const>
   9fd10:	b9403661 	ldr	w1, [x19, #52]
   9fd14:	2a0003f4 	mov	w20, w0
   9fd18:	b9003e60 	str	w0, [x19, #60]
   9fd1c:	f240043f 	tst	x1, #0x3
   9fd20:	54fff601 	b.ne	9fbe0 <CScreenDevice::Initialize()+0x50>  // b.any
   9fd24:	53017c21 	lsr	w1, w1, #1
   9fd28:	b9003661 	str	w1, [x19, #52]
   9fd2c:	17ffffbc 	b	9fc1c <CScreenDevice::Initialize()+0x8c>

000000000009fd30 <CScreenDevice::GetWidth() const>:
   9fd30:	b9403800 	ldr	w0, [x0, #56]
   9fd34:	d65f03c0 	ret
   9fd38:	d503201f 	nop
   9fd3c:	d503201f 	nop

000000000009fd40 <CScreenDevice::GetHeight() const>:
   9fd40:	b9403c00 	ldr	w0, [x0, #60]
   9fd44:	d65f03c0 	ret
   9fd48:	d503201f 	nop
   9fd4c:	d503201f 	nop

000000000009fd50 <CScreenDevice::GetColumns() const>:
   9fd50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fd54:	910003fd 	mov	x29, sp
   9fd58:	91008000 	add	x0, x0, #0x20
   9fd5c:	f9000bf3 	str	x19, [sp, #16]
   9fd60:	b9401813 	ldr	w19, [x0, #24]
   9fd64:	9400239b 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   9fd68:	1ac00a60 	udiv	w0, w19, w0
   9fd6c:	f9400bf3 	ldr	x19, [sp, #16]
   9fd70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fd74:	d65f03c0 	ret
   9fd78:	d503201f 	nop
   9fd7c:	d503201f 	nop

000000000009fd80 <CScreenDevice::GetRows() const>:
   9fd80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fd84:	910003fd 	mov	x29, sp
   9fd88:	91008000 	add	x0, x0, #0x20
   9fd8c:	f9000bf3 	str	x19, [sp, #16]
   9fd90:	b9402013 	ldr	w19, [x0, #32]
   9fd94:	94002393 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   9fd98:	1ac00a60 	udiv	w0, w19, w0
   9fd9c:	f9400bf3 	ldr	x19, [sp, #16]
   9fda0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fda4:	d65f03c0 	ret
   9fda8:	d503201f 	nop
   9fdac:	d503201f 	nop

000000000009fdb0 <CScreenDevice::GetFrameBuffer()>:
   9fdb0:	f9400c00 	ldr	x0, [x0, #24]
   9fdb4:	d65f03c0 	ret
   9fdb8:	d503201f 	nop
   9fdbc:	d503201f 	nop

000000000009fdc0 <CScreenDevice::GetStatus()>:
   9fdc0:	39416003 	ldrb	w3, [x0, #88]
   9fdc4:	3941a002 	ldrb	w2, [x0, #104]
   9fdc8:	f9401401 	ldr	x1, [x0, #40]
   9fdcc:	39008103 	strb	w3, [x8, #32]
   9fdd0:	b9403003 	ldr	w3, [x0, #48]
   9fdd4:	3900c102 	strb	w2, [x8, #48]
   9fdd8:	b9404402 	ldr	w2, [x0, #68]
   9fddc:	f9000101 	str	x1, [x8]
   9fde0:	29010903 	stp	w3, w2, [x8, #8]
   9fde4:	a9448c01 	ldp	x1, x3, [x0, #72]
   9fde8:	7940b402 	ldrh	w2, [x0, #90]
   9fdec:	a9010d01 	stp	x1, x3, [x8, #16]
   9fdf0:	39417001 	ldrb	w1, [x0, #92]
   9fdf4:	79004502 	strh	w2, [x8, #34]
   9fdf8:	f9403000 	ldr	x0, [x0, #96]
   9fdfc:	39009101 	strb	w1, [x8, #36]
   9fe00:	f9001500 	str	x0, [x8, #40]
   9fe04:	d65f03c0 	ret
   9fe08:	d503201f 	nop
   9fe0c:	d503201f 	nop

000000000009fe10 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   9fe10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fe14:	910003fd 	mov	x29, sp
   9fe18:	a90153f3 	stp	x19, x20, [sp, #16]
   9fe1c:	aa0003f3 	mov	x19, x0
   9fe20:	aa0103f4 	mov	x20, x1
   9fe24:	b9400820 	ldr	w0, [x1, #8]
   9fe28:	b9403261 	ldr	w1, [x19, #48]
   9fe2c:	6b00003f 	cmp	w1, w0
   9fe30:	54000081 	b.ne	9fe40 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>  // b.any
   9fe34:	29468261 	ldp	w1, w0, [x19, #52]
   9fe38:	6b00003f 	cmp	w1, w0
   9fe3c:	540000a0 	b.eq	9fe50 <CScreenDevice::SetStatus(TScreenStatus const&)+0x40>  // b.none
   9fe40:	52800000 	mov	w0, #0x0                   	// #0
   9fe44:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fe48:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fe4c:	d65f03c0 	ret
   9fe50:	b940c260 	ldr	w0, [x19, #192]
   9fe54:	35000400 	cbnz	w0, 9fed4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>
   9fe58:	3941a260 	ldrb	w0, [x19, #104]
   9fe5c:	35ffff20 	cbnz	w0, 9fe40 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   9fe60:	3940c280 	ldrb	w0, [x20, #48]
   9fe64:	35fffee0 	cbnz	w0, 9fe40 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   9fe68:	b9403262 	ldr	w2, [x19, #48]
   9fe6c:	f9400281 	ldr	x1, [x20]
   9fe70:	f9401660 	ldr	x0, [x19, #40]
   9fe74:	940013a1 	bl	a4cf8 <memcpy>
   9fe78:	29418281 	ldp	w1, w0, [x20, #12]
   9fe7c:	b9401682 	ldr	w2, [x20, #20]
   9fe80:	b9004661 	str	w1, [x19, #68]
   9fe84:	b9401a81 	ldr	w1, [x20, #24]
   9fe88:	b9004a60 	str	w0, [x19, #72]
   9fe8c:	b9401e80 	ldr	w0, [x20, #28]
   9fe90:	b9004e62 	str	w2, [x19, #76]
   9fe94:	39408282 	ldrb	w2, [x20, #32]
   9fe98:	b9005261 	str	w1, [x19, #80]
   9fe9c:	79404681 	ldrh	w1, [x20, #34]
   9fea0:	b9005660 	str	w0, [x19, #84]
   9fea4:	39409280 	ldrb	w0, [x20, #36]
   9fea8:	39016262 	strb	w2, [x19, #88]
   9feac:	b9402a82 	ldr	w2, [x20, #40]
   9feb0:	7900b661 	strh	w1, [x19, #90]
   9feb4:	b9402e81 	ldr	w1, [x20, #44]
   9feb8:	39017260 	strb	w0, [x19, #92]
   9febc:	b940c260 	ldr	w0, [x19, #192]
   9fec0:	290c0662 	stp	w2, w1, [x19, #96]
   9fec4:	350001a0 	cbnz	w0, 9fef8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe8>
   9fec8:	d5033fbf 	dmb	sy
   9fecc:	52800020 	mov	w0, #0x1                   	// #1
   9fed0:	17ffffdd 	b	9fe44 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   9fed4:	940018ff 	bl	a62d0 <EnterCritical>
   9fed8:	3941a260 	ldrb	w0, [x19, #104]
   9fedc:	35000060 	cbnz	w0, 9fee8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd8>
   9fee0:	3940c280 	ldrb	w0, [x20, #48]
   9fee4:	34fffc20 	cbz	w0, 9fe68 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   9fee8:	b940c260 	ldr	w0, [x19, #192]
   9feec:	34fffaa0 	cbz	w0, 9fe40 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   9fef0:	94001928 	bl	a6390 <LeaveCritical>
   9fef4:	17ffffd3 	b	9fe40 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   9fef8:	94001926 	bl	a6390 <LeaveCritical>
   9fefc:	17fffff3 	b	9fec8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xb8>

000000000009ff00 <CScreenDevice::Write(void const*, unsigned long)>:
   9ff00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ff04:	910003fd 	mov	x29, sp
   9ff08:	a90153f3 	stp	x19, x20, [sp, #16]
   9ff0c:	aa0003f4 	mov	x20, x0
   9ff10:	aa0103f3 	mov	x19, x1
   9ff14:	b940c000 	ldr	w0, [x0, #192]
   9ff18:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ff1c:	aa0203f5 	mov	x21, x2
   9ff20:	35000400 	cbnz	w0, 9ffa0 <CScreenDevice::Write(void const*, unsigned long)+0xa0>
   9ff24:	52800021 	mov	w1, #0x1                   	// #1
   9ff28:	d10006b6 	sub	x22, x21, #0x1
   9ff2c:	39416280 	ldrb	w0, [x20, #88]
   9ff30:	3901a281 	strb	w1, [x20, #104]
   9ff34:	350002c0 	cbnz	w0, 9ff8c <CScreenDevice::Write(void const*, unsigned long)+0x8c>
   9ff38:	b4000475 	cbz	x21, 9ffc4 <CScreenDevice::Write(void const*, unsigned long)+0xc4>
   9ff3c:	8b150275 	add	x21, x19, x21
   9ff40:	38401661 	ldrb	w1, [x19], #1
   9ff44:	aa1403e0 	mov	x0, x20
   9ff48:	94000022 	bl	9ffd0 <CScreenDevice::Write(char)>
   9ff4c:	eb15027f 	cmp	x19, x21
   9ff50:	54ffff81 	b.ne	9ff40 <CScreenDevice::Write(void const*, unsigned long)+0x40>  // b.any
   9ff54:	110006d6 	add	w22, w22, #0x1
   9ff58:	39416280 	ldrb	w0, [x20, #88]
   9ff5c:	34000060 	cbz	w0, 9ff68 <CScreenDevice::Write(void const*, unsigned long)+0x68>
   9ff60:	aa1403e0 	mov	x0, x20
   9ff64:	94000363 	bl	a0cf0 <CScreenDevice::InvertCursor() [clone .part.0]>
   9ff68:	b940c280 	ldr	w0, [x20, #192]
   9ff6c:	3901a29f 	strb	wzr, [x20, #104]
   9ff70:	350001c0 	cbnz	w0, 9ffa8 <CScreenDevice::Write(void const*, unsigned long)+0xa8>
   9ff74:	d5033fbf 	dmb	sy
   9ff78:	2a1603e0 	mov	w0, w22
   9ff7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ff80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ff84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ff88:	d65f03c0 	ret
   9ff8c:	aa1403e0 	mov	x0, x20
   9ff90:	94000358 	bl	a0cf0 <CScreenDevice::InvertCursor() [clone .part.0]>
   9ff94:	b5fffd55 	cbnz	x21, 9ff3c <CScreenDevice::Write(void const*, unsigned long)+0x3c>
   9ff98:	52800016 	mov	w22, #0x0                   	// #0
   9ff9c:	17ffffef 	b	9ff58 <CScreenDevice::Write(void const*, unsigned long)+0x58>
   9ffa0:	940018cc 	bl	a62d0 <EnterCritical>
   9ffa4:	17ffffe0 	b	9ff24 <CScreenDevice::Write(void const*, unsigned long)+0x24>
   9ffa8:	940018fa 	bl	a6390 <LeaveCritical>
   9ffac:	d5033fbf 	dmb	sy
   9ffb0:	2a1603e0 	mov	w0, w22
   9ffb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ffb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ffbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ffc0:	d65f03c0 	ret
   9ffc4:	52800016 	mov	w22, #0x0                   	// #0
   9ffc8:	17ffffe8 	b	9ff68 <CScreenDevice::Write(void const*, unsigned long)+0x68>
   9ffcc:	d503201f 	nop

000000000009ffd0 <CScreenDevice::Write(char)>:
   9ffd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ffd4:	910003fd 	mov	x29, sp
   9ffd8:	13001c21 	sxtb	w1, w1
   9ffdc:	b9404402 	ldr	w2, [x0, #68]
   9ffe0:	f9000bf3 	str	x19, [sp, #16]
   9ffe4:	aa0003f3 	mov	x19, x0
   9ffe8:	7100105f 	cmp	w2, #0x4
   9ffec:	54000b40 	b.eq	a0154 <CScreenDevice::Write(char)+0x184>  // b.none
   9fff0:	54000408 	b.hi	a0070 <CScreenDevice::Write(char)+0xa0>  // b.pmore
   9fff4:	7100085f 	cmp	w2, #0x2
   9fff8:	54000be0 	b.eq	a0174 <CScreenDevice::Write(char)+0x1a4>  // b.none
   9fffc:	71000c5f 	cmp	w2, #0x3
   a0000:	54000281 	b.ne	a0050 <CScreenDevice::Write(char)+0x80>  // b.any
   a0004:	7101403f 	cmp	w1, #0x50
   a0008:	540001c0 	b.eq	a0040 <CScreenDevice::Write(char)+0x70>  // b.none
   a000c:	5400084d 	b.le	a0114 <CScreenDevice::Write(char)+0x144>
   a0010:	7101b03f 	cmp	w1, #0x6c
   a0014:	54000920 	b.eq	a0138 <CScreenDevice::Write(char)+0x168>  // b.none
   a0018:	5400072d 	b.le	a00fc <CScreenDevice::Write(char)+0x12c>
   a001c:	7101b43f 	cmp	w1, #0x6d
   a0020:	54000101 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0024:	b9406000 	ldr	w0, [x0, #96]
   a0028:	7100081f 	cmp	w0, #0x2
   a002c:	54001300 	b.eq	a028c <CScreenDevice::Write(char)+0x2bc>  // b.none
   a0030:	54001708 	b.hi	a0310 <CScreenDevice::Write(char)+0x340>  // b.pmore
   a0034:	34001720 	cbz	w0, a0318 <CScreenDevice::Write(char)+0x348>
   a0038:	1280ffe0 	mov	w0, #0xfffff800            	// #-2048
   a003c:	7900b660 	strh	w0, [x19, #90]
   a0040:	b900467f 	str	wzr, [x19, #68]
   a0044:	f9400bf3 	ldr	x19, [sp, #16]
   a0048:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a004c:	d65f03c0 	ret
   a0050:	34000ca2 	cbz	w2, a01e4 <CScreenDevice::Write(char)+0x214>
   a0054:	7100045f 	cmp	w2, #0x1
   a0058:	54ffff41 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a005c:	71016c3f 	cmp	w1, #0x5b
   a0060:	54ffff01 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0064:	52800040 	mov	w0, #0x2                   	// #2
   a0068:	b9004660 	str	w0, [x19, #68]
   a006c:	17fffff6 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0070:	7100185f 	cmp	w2, #0x6
   a0074:	540009a0 	b.eq	a01a8 <CScreenDevice::Write(char)+0x1d8>  // b.none
   a0078:	71001c5f 	cmp	w2, #0x7
   a007c:	540001e1 	b.ne	a00b8 <CScreenDevice::Write(char)+0xe8>  // b.any
   a0080:	121d7820 	and	w0, w1, #0xfffffffb
   a0084:	7101a01f 	cmp	w0, #0x68
   a0088:	540002c0 	b.eq	a00e0 <CScreenDevice::Write(char)+0x110>  // b.none
   a008c:	5100c021 	sub	w1, w1, #0x30
   a0090:	12001c20 	and	w0, w1, #0xff
   a0094:	7100241f 	cmp	w0, #0x9
   a0098:	54fffd48 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a009c:	b9406260 	ldr	w0, [x19, #96]
   a00a0:	0b000800 	add	w0, w0, w0, lsl #2
   a00a4:	0b000421 	add	w1, w1, w0, lsl #1
   a00a8:	71018c3f 	cmp	w1, #0x63
   a00ac:	b9006261 	str	w1, [x19, #96]
   a00b0:	54fffc88 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a00b4:	17ffffe4 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a00b8:	7100145f 	cmp	w2, #0x5
   a00bc:	54fffc21 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a00c0:	5100c021 	sub	w1, w1, #0x30
   a00c4:	12001c20 	and	w0, w1, #0xff
   a00c8:	7100241f 	cmp	w0, #0x9
   a00cc:	54fffba8 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a00d0:	528000c0 	mov	w0, #0x6                   	// #6
   a00d4:	b9006661 	str	w1, [x19, #100]
   a00d8:	b9004660 	str	w0, [x19, #68]
   a00dc:	17ffffda 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a00e0:	b9406260 	ldr	w0, [x19, #96]
   a00e4:	7100641f 	cmp	w0, #0x19
   a00e8:	54fffac1 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a00ec:	7101a03f 	cmp	w1, #0x68
   a00f0:	1a9f17e0 	cset	w0, eq  // eq = none
   a00f4:	39016260 	strb	w0, [x19, #88]
   a00f8:	17ffffd2 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a00fc:	7101603f 	cmp	w1, #0x58
   a0100:	54000181 	b.ne	a0130 <CScreenDevice::Write(char)+0x160>  // b.any
   a0104:	b9406001 	ldr	w1, [x0, #96]
   a0108:	34fff9c1 	cbz	w1, a0040 <CScreenDevice::Write(char)+0x70>
   a010c:	940002d9 	bl	a0c70 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a0110:	17ffffcc 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0114:	7100ec3f 	cmp	w1, #0x3b
   a0118:	54001060 	b.eq	a0324 <CScreenDevice::Write(char)+0x354>  // b.none
   a011c:	51013020 	sub	w0, w1, #0x4c
   a0120:	12001c00 	and	w0, w0, #0xff
   a0124:	7100041f 	cmp	w0, #0x1
   a0128:	54fffb28 	b.hi	a008c <CScreenDevice::Write(char)+0xbc>  // b.pmore
   a012c:	17ffffc5 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0130:	7101a03f 	cmp	w1, #0x68
   a0134:	54fff861 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0138:	b9406260 	ldr	w0, [x19, #96]
   a013c:	7100101f 	cmp	w0, #0x4
   a0140:	54fff801 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0144:	7101a03f 	cmp	w1, #0x68
   a0148:	1a9f17e0 	cset	w0, eq  // eq = none
   a014c:	39017260 	strb	w0, [x19, #92]
   a0150:	17ffffbc 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0154:	5100c021 	sub	w1, w1, #0x30
   a0158:	12001c20 	and	w0, w1, #0xff
   a015c:	7100241f 	cmp	w0, #0x9
   a0160:	54fff708 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a0164:	528000e0 	mov	w0, #0x7                   	// #7
   a0168:	b9006261 	str	w1, [x19, #96]
   a016c:	b9004660 	str	w0, [x19, #68]
   a0170:	17ffffb5 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0174:	7101203f 	cmp	w1, #0x48
   a0178:	54000e20 	b.eq	a033c <CScreenDevice::Write(char)+0x36c>  // b.none
   a017c:	5400064c 	b.gt	a0244 <CScreenDevice::Write(char)+0x274>
   a0180:	7101083f 	cmp	w1, #0x42
   a0184:	54000f00 	b.eq	a0364 <CScreenDevice::Write(char)+0x394>  // b.none
   a0188:	5400042d 	b.le	a020c <CScreenDevice::Write(char)+0x23c>
   a018c:	71010c3f 	cmp	w1, #0x43
   a0190:	54000e40 	b.eq	a0358 <CScreenDevice::Write(char)+0x388>  // b.none
   a0194:	7101103f 	cmp	w1, #0x44
   a0198:	54fff541 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a019c:	940000e5 	bl	a0530 <CScreenDevice::CursorLeft()>
   a01a0:	b900467f 	str	wzr, [x19, #68]
   a01a4:	17ffffa8 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a01a8:	7101203f 	cmp	w1, #0x48
   a01ac:	540007c0 	b.eq	a02a4 <CScreenDevice::Write(char)+0x2d4>  // b.none
   a01b0:	7101c83f 	cmp	w1, #0x72
   a01b4:	54000720 	b.eq	a0298 <CScreenDevice::Write(char)+0x2c8>  // b.none
   a01b8:	5100c021 	sub	w1, w1, #0x30
   a01bc:	12001c20 	and	w0, w1, #0xff
   a01c0:	7100241f 	cmp	w0, #0x9
   a01c4:	54fff3e8 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a01c8:	b9406660 	ldr	w0, [x19, #100]
   a01cc:	0b000800 	add	w0, w0, w0, lsl #2
   a01d0:	0b000421 	add	w1, w1, w0, lsl #1
   a01d4:	71031c3f 	cmp	w1, #0xc7
   a01d8:	b9006661 	str	w1, [x19, #100]
   a01dc:	54fff328 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a01e0:	17ffff99 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a01e4:	7100283f 	cmp	w1, #0xa
   a01e8:	540008c0 	b.eq	a0300 <CScreenDevice::Write(char)+0x330>  // b.none
   a01ec:	5400042c 	b.gt	a0270 <CScreenDevice::Write(char)+0x2a0>
   a01f0:	7100203f 	cmp	w1, #0x8
   a01f4:	540007a0 	b.eq	a02e8 <CScreenDevice::Write(char)+0x318>  // b.none
   a01f8:	7100243f 	cmp	w1, #0x9
   a01fc:	54000601 	b.ne	a02bc <CScreenDevice::Write(char)+0x2ec>  // b.any
   a0200:	f9400bf3 	ldr	x19, [sp, #16]
   a0204:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0208:	140001a2 	b	a0890 <CScreenDevice::Tabulator()>
   a020c:	7100fc3f 	cmp	w1, #0x3f
   a0210:	54000900 	b.eq	a0330 <CScreenDevice::Write(char)+0x360>  // b.none
   a0214:	7101043f 	cmp	w1, #0x41
   a0218:	54000ac1 	b.ne	a0370 <CScreenDevice::Write(char)+0x3a0>  // b.any
   a021c:	b9404800 	ldr	w0, [x0, #72]
   a0220:	b9405661 	ldr	w1, [x19, #84]
   a0224:	6b00003f 	cmp	w1, w0
   a0228:	54fff0c9 	b.ls	a0040 <CScreenDevice::Write(char)+0x70>  // b.plast
   a022c:	91008260 	add	x0, x19, #0x20
   a0230:	9400226c 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0234:	b9405661 	ldr	w1, [x19, #84]
   a0238:	4b000021 	sub	w1, w1, w0
   a023c:	b9005661 	str	w1, [x19, #84]
   a0240:	17ffff80 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0244:	7101343f 	cmp	w1, #0x4d
   a0248:	54ffefcc 	b.gt	a0040 <CScreenDevice::Write(char)+0x70>
   a024c:	71012c3f 	cmp	w1, #0x4b
   a0250:	54ffef8c 	b.gt	a0040 <CScreenDevice::Write(char)+0x70>
   a0254:	7101283f 	cmp	w1, #0x4a
   a0258:	540007a0 	b.eq	a034c <CScreenDevice::Write(char)+0x37c>  // b.none
   a025c:	71012c3f 	cmp	w1, #0x4b
   a0260:	54ffef01 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0264:	9400007b 	bl	a0450 <CScreenDevice::ClearLineEnd()>
   a0268:	b900467f 	str	wzr, [x19, #68]
   a026c:	17ffff76 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0270:	7100343f 	cmp	w1, #0xd
   a0274:	54000200 	b.eq	a02b4 <CScreenDevice::Write(char)+0x2e4>  // b.none
   a0278:	71006c3f 	cmp	w1, #0x1b
   a027c:	54000201 	b.ne	a02bc <CScreenDevice::Write(char)+0x2ec>  // b.any
   a0280:	52800020 	mov	w0, #0x1                   	// #1
   a0284:	b9004660 	str	w0, [x19, #68]
   a0288:	17ffff6f 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a028c:	528003e0 	mov	w0, #0x1f                  	// #31
   a0290:	7900b660 	strh	w0, [x19, #90]
   a0294:	17ffff6b 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0298:	294c0801 	ldp	w1, w2, [x0, #96]
   a029c:	94000149 	bl	a07c0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   a02a0:	17ffff68 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a02a4:	294c0801 	ldp	w1, w2, [x0, #96]
   a02a8:	940000ce 	bl	a05e0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   a02ac:	b900467f 	str	wzr, [x19, #68]
   a02b0:	17ffff65 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a02b4:	b900501f 	str	wzr, [x0, #80]
   a02b8:	17ffff63 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a02bc:	12001c20 	and	w0, w1, #0xff
   a02c0:	71007c1f 	cmp	w0, #0x1f
   a02c4:	54ffec09 	b.ls	a0044 <CScreenDevice::Write(char)+0x74>  // b.plast
   a02c8:	7940b664 	ldrh	w4, [x19, #90]
   a02cc:	aa1303e0 	mov	x0, x19
   a02d0:	294a0e62 	ldp	w2, w3, [x19, #80]
   a02d4:	940001c3 	bl	a09e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a02d8:	aa1303e0 	mov	x0, x19
   a02dc:	f9400bf3 	ldr	x19, [sp, #16]
   a02e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a02e4:	140000df 	b	a0660 <CScreenDevice::CursorRight()>
   a02e8:	94000092 	bl	a0530 <CScreenDevice::CursorLeft()>
   a02ec:	294a0a61 	ldp	w1, w2, [x19, #80]
   a02f0:	aa1303e0 	mov	x0, x19
   a02f4:	f9400bf3 	ldr	x19, [sp, #16]
   a02f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a02fc:	140001f5 	b	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a0300:	b900501f 	str	wzr, [x0, #80]
   a0304:	f9400bf3 	ldr	x19, [sp, #16]
   a0308:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a030c:	14000069 	b	a04b0 <CScreenDevice::CursorDown()>
   a0310:	71006c1f 	cmp	w0, #0x1b
   a0314:	54ffe961 	b.ne	a0040 <CScreenDevice::Write(char)+0x70>  // b.any
   a0318:	12800400 	mov	w0, #0xffffffdf            	// #-33
   a031c:	7900b660 	strh	w0, [x19, #90]
   a0320:	17ffff48 	b	a0040 <CScreenDevice::Write(char)+0x70>
   a0324:	528000a0 	mov	w0, #0x5                   	// #5
   a0328:	b9004660 	str	w0, [x19, #68]
   a032c:	17ffff46 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0330:	52800080 	mov	w0, #0x4                   	// #4
   a0334:	b9004660 	str	w0, [x19, #68]
   a0338:	17ffff43 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a033c:	b9404800 	ldr	w0, [x0, #72]
   a0340:	b900467f 	str	wzr, [x19, #68]
   a0344:	290a027f 	stp	wzr, w0, [x19, #80]
   a0348:	17ffff3f 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a034c:	94000015 	bl	a03a0 <CScreenDevice::ClearDisplayEnd()>
   a0350:	b900467f 	str	wzr, [x19, #68]
   a0354:	17ffff3c 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0358:	940000c2 	bl	a0660 <CScreenDevice::CursorRight()>
   a035c:	b900467f 	str	wzr, [x19, #68]
   a0360:	17ffff39 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0364:	94000053 	bl	a04b0 <CScreenDevice::CursorDown()>
   a0368:	b900467f 	str	wzr, [x19, #68]
   a036c:	17ffff36 	b	a0044 <CScreenDevice::Write(char)+0x74>
   a0370:	5100c021 	sub	w1, w1, #0x30
   a0374:	12001c20 	and	w0, w1, #0xff
   a0378:	7100241f 	cmp	w0, #0x9
   a037c:	54ffe628 	b.hi	a0040 <CScreenDevice::Write(char)+0x70>  // b.pmore
   a0380:	52800060 	mov	w0, #0x3                   	// #3
   a0384:	b9006261 	str	w1, [x19, #96]
   a0388:	b9004660 	str	w0, [x19, #68]
   a038c:	17ffff2e 	b	a0044 <CScreenDevice::Write(char)+0x74>

00000000000a0390 <CScreenDevice::CarriageReturn()>:
   a0390:	b900501f 	str	wzr, [x0, #80]
   a0394:	d65f03c0 	ret
   a0398:	d503201f 	nop
   a039c:	d503201f 	nop

00000000000a03a0 <CScreenDevice::ClearDisplayEnd()>:
   a03a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a03a4:	910003fd 	mov	x29, sp
   a03a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a03ac:	aa0003f4 	mov	x20, x0
   a03b0:	b9405293 	ldr	w19, [x20, #80]
   a03b4:	b9403800 	ldr	w0, [x0, #56]
   a03b8:	f90013f5 	str	x21, [sp, #32]
   a03bc:	91008295 	add	x21, x20, #0x20
   a03c0:	6b00027f 	cmp	w19, w0
   a03c4:	54000162 	b.cs	a03f0 <CScreenDevice::ClearDisplayEnd()+0x50>  // b.hs, b.nlast
   a03c8:	b9405682 	ldr	w2, [x20, #84]
   a03cc:	2a1303e1 	mov	w1, w19
   a03d0:	aa1403e0 	mov	x0, x20
   a03d4:	940001bf 	bl	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a03d8:	aa1503e0 	mov	x0, x21
   a03dc:	940021fd 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a03e0:	b9403a81 	ldr	w1, [x20, #56]
   a03e4:	0b000273 	add	w19, w19, w0
   a03e8:	6b13003f 	cmp	w1, w19
   a03ec:	54fffee8 	b.hi	a03c8 <CScreenDevice::ClearDisplayEnd()+0x28>  // b.pmore
   a03f0:	b9405693 	ldr	w19, [x20, #84]
   a03f4:	aa1503e0 	mov	x0, x21
   a03f8:	940021fa 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a03fc:	29460e81 	ldp	w1, w3, [x20, #48]
   a0400:	0b000262 	add	w2, w19, w0
   a0404:	f9401680 	ldr	x0, [x20, #40]
   a0408:	1b037c42 	mul	w2, w2, w3
   a040c:	53017c21 	lsr	w1, w1, #1
   a0410:	8b224400 	add	x0, x0, w2, uxtw #1
   a0414:	6b020021 	subs	w1, w1, w2
   a0418:	54000120 	b.eq	a043c <CScreenDevice::ClearDisplayEnd()+0x9c>  // b.none
   a041c:	51000421 	sub	w1, w1, #0x1
   a0420:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0424:	91000422 	add	x2, x1, #0x1
   a0428:	52800001 	mov	w1, #0x0                   	// #0
   a042c:	d37ff842 	lsl	x2, x2, #1
   a0430:	f94013f5 	ldr	x21, [sp, #32]
   a0434:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0438:	14001016 	b	a4490 <memset>
   a043c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0440:	f94013f5 	ldr	x21, [sp, #32]
   a0444:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0448:	d65f03c0 	ret
   a044c:	d503201f 	nop

00000000000a0450 <CScreenDevice::ClearLineEnd()>:
   a0450:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0454:	910003fd 	mov	x29, sp
   a0458:	a90153f3 	stp	x19, x20, [sp, #16]
   a045c:	aa0003f4 	mov	x20, x0
   a0460:	b9405293 	ldr	w19, [x20, #80]
   a0464:	b9403800 	ldr	w0, [x0, #56]
   a0468:	6b00027f 	cmp	w19, w0
   a046c:	540001c2 	b.cs	a04a4 <CScreenDevice::ClearLineEnd()+0x54>  // b.hs, b.nlast
   a0470:	f90013f5 	str	x21, [sp, #32]
   a0474:	91008295 	add	x21, x20, #0x20
   a0478:	b9405682 	ldr	w2, [x20, #84]
   a047c:	2a1303e1 	mov	w1, w19
   a0480:	aa1403e0 	mov	x0, x20
   a0484:	94000193 	bl	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a0488:	aa1503e0 	mov	x0, x21
   a048c:	940021d1 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0490:	b9403a81 	ldr	w1, [x20, #56]
   a0494:	0b000273 	add	w19, w19, w0
   a0498:	6b13003f 	cmp	w1, w19
   a049c:	54fffee8 	b.hi	a0478 <CScreenDevice::ClearLineEnd()+0x28>  // b.pmore
   a04a0:	f94013f5 	ldr	x21, [sp, #32]
   a04a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a04a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a04ac:	d65f03c0 	ret

00000000000a04b0 <CScreenDevice::CursorDown()>:
   a04b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a04b4:	910003fd 	mov	x29, sp
   a04b8:	a90153f3 	stp	x19, x20, [sp, #16]
   a04bc:	91008014 	add	x20, x0, #0x20
   a04c0:	aa0003f3 	mov	x19, x0
   a04c4:	aa1403e0 	mov	x0, x20
   a04c8:	940021c6 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a04cc:	b9405662 	ldr	w2, [x19, #84]
   a04d0:	b9404e61 	ldr	w1, [x19, #76]
   a04d4:	0b020000 	add	w0, w0, w2
   a04d8:	6b01001f 	cmp	w0, w1
   a04dc:	b9005660 	str	w0, [x19, #84]
   a04e0:	54000082 	b.cs	a04f0 <CScreenDevice::CursorDown()+0x40>  // b.hs, b.nlast
   a04e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a04e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a04ec:	d65f03c0 	ret
   a04f0:	aa1303e0 	mov	x0, x19
   a04f4:	940000ff 	bl	a08f0 <CScreenDevice::Scroll()>
   a04f8:	aa1403e0 	mov	x0, x20
   a04fc:	940021b9 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0500:	b9405661 	ldr	w1, [x19, #84]
   a0504:	4b000021 	sub	w1, w1, w0
   a0508:	b9005661 	str	w1, [x19, #84]
   a050c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0510:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0514:	d65f03c0 	ret
   a0518:	d503201f 	nop
   a051c:	d503201f 	nop

00000000000a0520 <CScreenDevice::CursorHome()>:
   a0520:	b9404801 	ldr	w1, [x0, #72]
   a0524:	290a041f 	stp	wzr, w1, [x0, #80]
   a0528:	d65f03c0 	ret
   a052c:	d503201f 	nop

00000000000a0530 <CScreenDevice::CursorLeft()>:
   a0530:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0534:	910003fd 	mov	x29, sp
   a0538:	b9405001 	ldr	w1, [x0, #80]
   a053c:	a90153f3 	stp	x19, x20, [sp, #16]
   a0540:	aa0003f3 	mov	x19, x0
   a0544:	35000361 	cbnz	w1, a05b0 <CScreenDevice::CursorLeft()+0x80>
   a0548:	b9404800 	ldr	w0, [x0, #72]
   a054c:	b9405662 	ldr	w2, [x19, #84]
   a0550:	6b00005f 	cmp	w2, w0
   a0554:	540000a8 	b.hi	a0568 <CScreenDevice::CursorLeft()+0x38>  // b.pmore
   a0558:	aa1303e0 	mov	x0, x19
   a055c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0560:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0564:	1400015b 	b	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a0568:	b9403a74 	ldr	w20, [x19, #56]
   a056c:	f90013f5 	str	x21, [sp, #32]
   a0570:	91008275 	add	x21, x19, #0x20
   a0574:	aa1503e0 	mov	x0, x21
   a0578:	94002196 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a057c:	2a0003e1 	mov	w1, w0
   a0580:	aa1503e0 	mov	x0, x21
   a0584:	4b010294 	sub	w20, w20, w1
   a0588:	b9005274 	str	w20, [x19, #80]
   a058c:	94002195 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0590:	294a0a61 	ldp	w1, w2, [x19, #80]
   a0594:	f94013f5 	ldr	x21, [sp, #32]
   a0598:	4b000042 	sub	w2, w2, w0
   a059c:	aa1303e0 	mov	x0, x19
   a05a0:	b9005662 	str	w2, [x19, #84]
   a05a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a05a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a05ac:	14000149 	b	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a05b0:	91008000 	add	x0, x0, #0x20
   a05b4:	94002187 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a05b8:	294a0a61 	ldp	w1, w2, [x19, #80]
   a05bc:	4b000021 	sub	w1, w1, w0
   a05c0:	aa1303e0 	mov	x0, x19
   a05c4:	b9005261 	str	w1, [x19, #80]
   a05c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a05cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a05d0:	14000140 	b	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a05d4:	d503201f 	nop
   a05d8:	d503201f 	nop
   a05dc:	d503201f 	nop

00000000000a05e0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   a05e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a05e4:	910003fd 	mov	x29, sp
   a05e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a05ec:	91008016 	add	x22, x0, #0x20
   a05f0:	2a0103f5 	mov	w21, w1
   a05f4:	a90153f3 	stp	x19, x20, [sp, #16]
   a05f8:	aa0003f4 	mov	x20, x0
   a05fc:	aa1603e0 	mov	x0, x22
   a0600:	2a0203f3 	mov	w19, w2
   a0604:	51000673 	sub	w19, w19, #0x1
   a0608:	94002172 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a060c:	2a0003e2 	mov	w2, w0
   a0610:	aa1603e0 	mov	x0, x22
   a0614:	1b027e73 	mul	w19, w19, w2
   a0618:	94002172 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a061c:	b9403a81 	ldr	w1, [x20, #56]
   a0620:	6b13003f 	cmp	w1, w19
   a0624:	54000149 	b.ls	a064c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a0628:	b9404a82 	ldr	w2, [x20, #72]
   a062c:	510006a1 	sub	w1, w21, #0x1
   a0630:	1b007c21 	mul	w1, w1, w0
   a0634:	6b01005f 	cmp	w2, w1
   a0638:	540000a8 	b.hi	a064c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.pmore
   a063c:	b9404e80 	ldr	w0, [x20, #76]
   a0640:	6b01001f 	cmp	w0, w1
   a0644:	54000049 	b.ls	a064c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a0648:	290a0693 	stp	w19, w1, [x20, #80]
   a064c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0650:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0654:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0658:	d65f03c0 	ret
   a065c:	d503201f 	nop

00000000000a0660 <CScreenDevice::CursorRight()>:
   a0660:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0664:	910003fd 	mov	x29, sp
   a0668:	f9000bf3 	str	x19, [sp, #16]
   a066c:	aa0003f3 	mov	x19, x0
   a0670:	91008000 	add	x0, x0, #0x20
   a0674:	94002157 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0678:	b9405262 	ldr	w2, [x19, #80]
   a067c:	b9403a61 	ldr	w1, [x19, #56]
   a0680:	0b020000 	add	w0, w0, w2
   a0684:	6b01001f 	cmp	w0, w1
   a0688:	b9005260 	str	w0, [x19, #80]
   a068c:	54000082 	b.cs	a069c <CScreenDevice::CursorRight()+0x3c>  // b.hs, b.nlast
   a0690:	f9400bf3 	ldr	x19, [sp, #16]
   a0694:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0698:	d65f03c0 	ret
   a069c:	aa1303e0 	mov	x0, x19
   a06a0:	b900527f 	str	wzr, [x19, #80]
   a06a4:	f9400bf3 	ldr	x19, [sp, #16]
   a06a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a06ac:	17ffff81 	b	a04b0 <CScreenDevice::CursorDown()>

00000000000a06b0 <CScreenDevice::CursorUp()>:
   a06b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a06b4:	910003fd 	mov	x29, sp
   a06b8:	f9000bf3 	str	x19, [sp, #16]
   a06bc:	aa0003f3 	mov	x19, x0
   a06c0:	b9405661 	ldr	w1, [x19, #84]
   a06c4:	b9404800 	ldr	w0, [x0, #72]
   a06c8:	6b00003f 	cmp	w1, w0
   a06cc:	54000088 	b.hi	a06dc <CScreenDevice::CursorUp()+0x2c>  // b.pmore
   a06d0:	f9400bf3 	ldr	x19, [sp, #16]
   a06d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a06d8:	d65f03c0 	ret
   a06dc:	91008260 	add	x0, x19, #0x20
   a06e0:	94002140 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a06e4:	b9405661 	ldr	w1, [x19, #84]
   a06e8:	4b000021 	sub	w1, w1, w0
   a06ec:	b9005661 	str	w1, [x19, #84]
   a06f0:	f9400bf3 	ldr	x19, [sp, #16]
   a06f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a06f8:	d65f03c0 	ret
   a06fc:	d503201f 	nop

00000000000a0700 <CScreenDevice::DeleteChars(unsigned int)>:
   a0700:	d65f03c0 	ret
   a0704:	d503201f 	nop
   a0708:	d503201f 	nop
   a070c:	d503201f 	nop

00000000000a0710 <CScreenDevice::DeleteLines(unsigned int)>:
   a0710:	d65f03c0 	ret
   a0714:	d503201f 	nop
   a0718:	d503201f 	nop
   a071c:	d503201f 	nop

00000000000a0720 <CScreenDevice::DisplayChar(char)>:
   a0720:	12001c22 	and	w2, w1, #0xff
   a0724:	71007c5f 	cmp	w2, #0x1f
   a0728:	54000048 	b.hi	a0730 <CScreenDevice::DisplayChar(char)+0x10>  // b.pmore
   a072c:	d65f03c0 	ret
   a0730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0734:	13001c21 	sxtb	w1, w1
   a0738:	910003fd 	mov	x29, sp
   a073c:	7940b404 	ldrh	w4, [x0, #90]
   a0740:	f9000bf3 	str	x19, [sp, #16]
   a0744:	aa0003f3 	mov	x19, x0
   a0748:	294a0c02 	ldp	w2, w3, [x0, #80]
   a074c:	940000a5 	bl	a09e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a0750:	aa1303e0 	mov	x0, x19
   a0754:	f9400bf3 	ldr	x19, [sp, #16]
   a0758:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a075c:	17ffffc1 	b	a0660 <CScreenDevice::CursorRight()>

00000000000a0760 <CScreenDevice::EraseChars(unsigned int)>:
   a0760:	35000041 	cbnz	w1, a0768 <CScreenDevice::EraseChars(unsigned int)+0x8>
   a0764:	d65f03c0 	ret
   a0768:	14000142 	b	a0c70 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a076c:	d503201f 	nop

00000000000a0770 <CScreenDevice::InsertLines(unsigned int)>:
   a0770:	d65f03c0 	ret
   a0774:	d503201f 	nop
   a0778:	d503201f 	nop
   a077c:	d503201f 	nop

00000000000a0780 <CScreenDevice::InsertMode(bool)>:
   a0780:	39017001 	strb	w1, [x0, #92]
   a0784:	d65f03c0 	ret
   a0788:	d503201f 	nop
   a078c:	d503201f 	nop

00000000000a0790 <CScreenDevice::NewLine()>:
   a0790:	b900501f 	str	wzr, [x0, #80]
   a0794:	17ffff47 	b	a04b0 <CScreenDevice::CursorDown()>
   a0798:	d503201f 	nop
   a079c:	d503201f 	nop

00000000000a07a0 <CScreenDevice::ReverseScroll()>:
   a07a0:	d65f03c0 	ret
   a07a4:	d503201f 	nop
   a07a8:	d503201f 	nop
   a07ac:	d503201f 	nop

00000000000a07b0 <CScreenDevice::SetCursorMode(bool)>:
   a07b0:	39016001 	strb	w1, [x0, #88]
   a07b4:	d65f03c0 	ret
   a07b8:	d503201f 	nop
   a07bc:	d503201f 	nop

00000000000a07c0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   a07c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a07c4:	910003fd 	mov	x29, sp
   a07c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a07cc:	91008016 	add	x22, x0, #0x20
   a07d0:	2a0203f5 	mov	w21, w2
   a07d4:	a90153f3 	stp	x19, x20, [sp, #16]
   a07d8:	aa0003f4 	mov	x20, x0
   a07dc:	aa1603e0 	mov	x0, x22
   a07e0:	2a0103f3 	mov	w19, w1
   a07e4:	51000673 	sub	w19, w19, #0x1
   a07e8:	940020fe 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a07ec:	2a0003e1 	mov	w1, w0
   a07f0:	aa1603e0 	mov	x0, x22
   a07f4:	1b017e73 	mul	w19, w19, w1
   a07f8:	940020fa 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a07fc:	b9404281 	ldr	w1, [x20, #64]
   a0800:	1b157c00 	mul	w0, w0, w21
   a0804:	7100001f 	cmp	w0, #0x0
   a0808:	7a531020 	ccmp	w1, w19, #0x0, ne  // ne = any
   a080c:	1a9f97e2 	cset	w2, hi  // hi = pmore
   a0810:	6b00027f 	cmp	w19, w0
   a0814:	7a403020 	ccmp	w1, w0, #0x0, cc  // cc = lo, ul, last
   a0818:	1a9f37e1 	cset	w1, cs  // cs = hs, nlast
   a081c:	6a01005f 	tst	w2, w1
   a0820:	540000e1 	b.ne	a083c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x7c>  // b.any
   a0824:	b9404a93 	ldr	w19, [x20, #72]
   a0828:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a082c:	290a4e9f 	stp	wzr, w19, [x20, #80]
   a0830:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0834:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0838:	d65f03c0 	ret
   a083c:	29090293 	stp	w19, w0, [x20, #72]
   a0840:	17fffffa 	b	a0828 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x68>
   a0844:	d503201f 	nop
   a0848:	d503201f 	nop
   a084c:	d503201f 	nop

00000000000a0850 <CScreenDevice::SetStandoutMode(unsigned int)>:
   a0850:	7100083f 	cmp	w1, #0x2
   a0854:	54000160 	b.eq	a0880 <CScreenDevice::SetStandoutMode(unsigned int)+0x30>  // b.none
   a0858:	540000a8 	b.hi	a086c <CScreenDevice::SetStandoutMode(unsigned int)+0x1c>  // b.pmore
   a085c:	340000c1 	cbz	w1, a0874 <CScreenDevice::SetStandoutMode(unsigned int)+0x24>
   a0860:	1280ffe1 	mov	w1, #0xfffff800            	// #-2048
   a0864:	7900b401 	strh	w1, [x0, #90]
   a0868:	d65f03c0 	ret
   a086c:	71006c3f 	cmp	w1, #0x1b
   a0870:	54ffffc1 	b.ne	a0868 <CScreenDevice::SetStandoutMode(unsigned int)+0x18>  // b.any
   a0874:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a0878:	7900b401 	strh	w1, [x0, #90]
   a087c:	d65f03c0 	ret
   a0880:	528003e1 	mov	w1, #0x1f                  	// #31
   a0884:	7900b401 	strh	w1, [x0, #90]
   a0888:	d65f03c0 	ret
   a088c:	d503201f 	nop

00000000000a0890 <CScreenDevice::Tabulator()>:
   a0890:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0894:	910003fd 	mov	x29, sp
   a0898:	f9000bf3 	str	x19, [sp, #16]
   a089c:	aa0003f3 	mov	x19, x0
   a08a0:	91008000 	add	x0, x0, #0x20
   a08a4:	940020cb 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a08a8:	b9405262 	ldr	w2, [x19, #80]
   a08ac:	531d7000 	lsl	w0, w0, #3
   a08b0:	b9403a63 	ldr	w3, [x19, #56]
   a08b4:	0b020001 	add	w1, w0, w2
   a08b8:	1ac00821 	udiv	w1, w1, w0
   a08bc:	1b007c21 	mul	w1, w1, w0
   a08c0:	6b03003f 	cmp	w1, w3
   a08c4:	b9005261 	str	w1, [x19, #80]
   a08c8:	54000082 	b.cs	a08d8 <CScreenDevice::Tabulator()+0x48>  // b.hs, b.nlast
   a08cc:	f9400bf3 	ldr	x19, [sp, #16]
   a08d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a08d4:	d65f03c0 	ret
   a08d8:	aa1303e0 	mov	x0, x19
   a08dc:	b900527f 	str	wzr, [x19, #80]
   a08e0:	f9400bf3 	ldr	x19, [sp, #16]
   a08e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a08e8:	17fffef2 	b	a04b0 <CScreenDevice::CursorDown()>
   a08ec:	d503201f 	nop

00000000000a08f0 <CScreenDevice::Scroll()>:
   a08f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a08f4:	910003fd 	mov	x29, sp
   a08f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a08fc:	aa0003f5 	mov	x21, x0
   a0900:	91008000 	add	x0, x0, #0x20
   a0904:	a90153f3 	stp	x19, x20, [sp, #16]
   a0908:	940020b6 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a090c:	29490ea4 	ldp	w4, w3, [x21, #72]
   a0910:	2a0003f3 	mov	w19, w0
   a0914:	b94036a1 	ldr	w1, [x21, #52]
   a0918:	f94016a6 	ldr	x6, [x21, #40]
   a091c:	4b040063 	sub	w3, w3, w4
   a0920:	4b000063 	sub	w3, w3, w0
   a0924:	1b017c96 	mul	w22, w4, w1
   a0928:	1b017c63 	mul	w3, w3, w1
   a092c:	8b1604d6 	add	x22, x6, x22, lsl #1
   a0930:	6b0307ff 	cmp	wzr, w3, lsl #1
   a0934:	540001c1 	b.ne	a096c <CScreenDevice::Scroll()+0x7c>  // b.any
   a0938:	1b017e73 	mul	w19, w19, w1
   a093c:	eb5307ff 	cmp	xzr, x19, lsr #1
   a0940:	d341fe73 	lsr	x19, x19, #1
   a0944:	54000460 	b.eq	a09d0 <CScreenDevice::Scroll()+0xe0>  // b.none
   a0948:	51000673 	sub	w19, w19, #0x1
   a094c:	aa1603e0 	mov	x0, x22
   a0950:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0954:	91000662 	add	x2, x19, #0x1
   a0958:	52800001 	mov	w1, #0x0                   	// #0
   a095c:	d37ef442 	lsl	x2, x2, #2
   a0960:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0964:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0968:	14000eca 	b	a4490 <memset>
   a096c:	0b000084 	add	w4, w4, w0
   a0970:	531f7863 	lsl	w3, w3, #1
   a0974:	f9001bf7 	str	x23, [sp, #48]
   a0978:	2a0303f4 	mov	w20, w3
   a097c:	9101c2b7 	add	x23, x21, #0x70
   a0980:	1b017c82 	mul	w2, w4, w1
   a0984:	aa1403e3 	mov	x3, x20
   a0988:	aa1603e1 	mov	x1, x22
   a098c:	52800005 	mov	w5, #0x0                   	// #0
   a0990:	52800044 	mov	w4, #0x2                   	// #2
   a0994:	aa1703e0 	mov	x0, x23
   a0998:	8b0204c2 	add	x2, x6, x2, lsl #1
   a099c:	9400213d 	bl	a8e90 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   a09a0:	aa1703e0 	mov	x0, x23
   a09a4:	940022a3 	bl	a9430 <CDMAChannel::Start()>
   a09a8:	aa1703e0 	mov	x0, x23
   a09ac:	940022f1 	bl	a9570 <CDMAChannel::Wait()>
   a09b0:	b94036a1 	ldr	w1, [x21, #52]
   a09b4:	927ef683 	and	x3, x20, #0xfffffffffffffffc
   a09b8:	8b0302d6 	add	x22, x22, x3
   a09bc:	f9401bf7 	ldr	x23, [sp, #48]
   a09c0:	1b017e73 	mul	w19, w19, w1
   a09c4:	eb5307ff 	cmp	xzr, x19, lsr #1
   a09c8:	d341fe73 	lsr	x19, x19, #1
   a09cc:	54fffbe1 	b.ne	a0948 <CScreenDevice::Scroll()+0x58>  // b.any
   a09d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a09d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a09d8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a09dc:	d65f03c0 	ret

00000000000a09e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   a09e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a09e4:	910003fd 	mov	x29, sp
   a09e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a09ec:	91008014 	add	x20, x0, #0x20
   a09f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a09f4:	aa0003f5 	mov	x21, x0
   a09f8:	aa1403e0 	mov	x0, x20
   a09fc:	52800016 	mov	w22, #0x0                   	// #0
   a0a00:	a90363f7 	stp	x23, x24, [sp, #48]
   a0a04:	2a0203f7 	mov	w23, w2
   a0a08:	13001c38 	sxtb	w24, w1
   a0a0c:	a9046bf9 	stp	x25, x26, [sp, #64]
   a0a10:	2a0303f9 	mov	w25, w3
   a0a14:	12003c9a 	and	w26, w4, #0xffff
   a0a18:	94002072 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0a1c:	6b16001f 	cmp	w0, w22
   a0a20:	54000489 	b.ls	a0ab0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xd0>  // b.plast
   a0a24:	d503201f 	nop
   a0a28:	52800013 	mov	w19, #0x0                   	// #0
   a0a2c:	d503201f 	nop
   a0a30:	aa1403e0 	mov	x0, x20
   a0a34:	94002067 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0a38:	2a0003e4 	mov	w4, w0
   a0a3c:	2a1303e2 	mov	w2, w19
   a0a40:	6b13009f 	cmp	w4, w19
   a0a44:	2a1603e3 	mov	w3, w22
   a0a48:	2a1803e1 	mov	w1, w24
   a0a4c:	aa1403e0 	mov	x0, x20
   a0a50:	54000249 	b.ls	a0a98 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>  // b.plast
   a0a54:	9400206b 	bl	a8c00 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   a0a58:	b9403aa2 	ldr	w2, [x21, #56]
   a0a5c:	72001c1f 	tst	w0, #0xff
   a0a60:	0b170261 	add	w1, w19, w23
   a0a64:	1a9f1343 	csel	w3, w26, wzr, ne  // ne = any
   a0a68:	6b01005f 	cmp	w2, w1
   a0a6c:	54000129 	b.ls	a0a90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb0>  // b.plast
   a0a70:	b9403ea0 	ldr	w0, [x21, #60]
   a0a74:	6b00033f 	cmp	w25, w0
   a0a78:	540000c2 	b.cs	a0a90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb0>  // b.hs, b.nlast
   a0a7c:	b94036a0 	ldr	w0, [x21, #52]
   a0a80:	f94016a1 	ldr	x1, [x21, #40]
   a0a84:	1b005f20 	madd	w0, w25, w0, w23
   a0a88:	0b130000 	add	w0, w0, w19
   a0a8c:	78207823 	strh	w3, [x1, x0, lsl #1]
   a0a90:	11000673 	add	w19, w19, #0x1
   a0a94:	17ffffe7 	b	a0a30 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>
   a0a98:	aa1403e0 	mov	x0, x20
   a0a9c:	110006d6 	add	w22, w22, #0x1
   a0aa0:	94002050 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0aa4:	6b16001f 	cmp	w0, w22
   a0aa8:	11000739 	add	w25, w25, #0x1
   a0aac:	54fffbe8 	b.hi	a0a28 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>  // b.pmore
   a0ab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0ab4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0ab8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a0abc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a0ac0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a0ac4:	d65f03c0 	ret
   a0ac8:	d503201f 	nop
   a0acc:	d503201f 	nop

00000000000a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   a0ad0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a0ad4:	910003fd 	mov	x29, sp
   a0ad8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0adc:	91008016 	add	x22, x0, #0x20
   a0ae0:	2a0103f5 	mov	w21, w1
   a0ae4:	a90153f3 	stp	x19, x20, [sp, #16]
   a0ae8:	aa0003f4 	mov	x20, x0
   a0aec:	aa1603e0 	mov	x0, x22
   a0af0:	a90363f7 	stp	x23, x24, [sp, #48]
   a0af4:	2a0203f7 	mov	w23, w2
   a0af8:	52800018 	mov	w24, #0x0                   	// #0
   a0afc:	94002039 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0b00:	6b18001f 	cmp	w0, w24
   a0b04:	540003c9 	b.ls	a0b7c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xac>  // b.plast
   a0b08:	aa1603e0 	mov	x0, x22
   a0b0c:	52800013 	mov	w19, #0x0                   	// #0
   a0b10:	94002030 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0b14:	6b13001f 	cmp	w0, w19
   a0b18:	0b150263 	add	w3, w19, w21
   a0b1c:	54000249 	b.ls	a0b64 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x94>  // b.plast
   a0b20:	b9403a80 	ldr	w0, [x20, #56]
   a0b24:	6b03001f 	cmp	w0, w3
   a0b28:	54000129 	b.ls	a0b4c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>  // b.plast
   a0b2c:	b9403e80 	ldr	w0, [x20, #60]
   a0b30:	6b0002ff 	cmp	w23, w0
   a0b34:	540000c2 	b.cs	a0b4c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x7c>  // b.hs, b.nlast
   a0b38:	b9403680 	ldr	w0, [x20, #52]
   a0b3c:	f9401681 	ldr	x1, [x20, #40]
   a0b40:	1b0056e0 	madd	w0, w23, w0, w21
   a0b44:	0b130000 	add	w0, w0, w19
   a0b48:	7820783f 	strh	wzr, [x1, x0, lsl #1]
   a0b4c:	aa1603e0 	mov	x0, x22
   a0b50:	11000673 	add	w19, w19, #0x1
   a0b54:	9400201f 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0b58:	6b13001f 	cmp	w0, w19
   a0b5c:	0b150263 	add	w3, w19, w21
   a0b60:	54fffe08 	b.hi	a0b20 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x50>  // b.pmore
   a0b64:	aa1603e0 	mov	x0, x22
   a0b68:	11000718 	add	w24, w24, #0x1
   a0b6c:	9400201d 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0b70:	6b18001f 	cmp	w0, w24
   a0b74:	110006f7 	add	w23, w23, #0x1
   a0b78:	54fffc88 	b.hi	a0b08 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x38>  // b.pmore
   a0b7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0b80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0b84:	a94363f7 	ldp	x23, x24, [sp, #48]
   a0b88:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0b8c:	d65f03c0 	ret

00000000000a0b90 <CScreenDevice::InvertCursor()>:
   a0b90:	39416001 	ldrb	w1, [x0, #88]
   a0b94:	35000041 	cbnz	w1, a0b9c <CScreenDevice::InvertCursor()+0xc>
   a0b98:	d65f03c0 	ret
   a0b9c:	14000055 	b	a0cf0 <CScreenDevice::InvertCursor() [clone .part.0]>

00000000000a0ba0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   a0ba0:	b9403804 	ldr	w4, [x0, #56]
   a0ba4:	12003c63 	and	w3, w3, #0xffff
   a0ba8:	6b01009f 	cmp	w4, w1
   a0bac:	54000109 	b.ls	a0bcc <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a0bb0:	b9403c04 	ldr	w4, [x0, #60]
   a0bb4:	6b02009f 	cmp	w4, w2
   a0bb8:	540000a9 	b.ls	a0bcc <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a0bbc:	b9403404 	ldr	w4, [x0, #52]
   a0bc0:	f9401400 	ldr	x0, [x0, #40]
   a0bc4:	1b040442 	madd	w2, w2, w4, w1
   a0bc8:	78227803 	strh	w3, [x0, x2, lsl #1]
   a0bcc:	d65f03c0 	ret

00000000000a0bd0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   a0bd0:	aa0003e3 	mov	x3, x0
   a0bd4:	b9403800 	ldr	w0, [x0, #56]
   a0bd8:	6b01001f 	cmp	w0, w1
   a0bdc:	540000c9 	b.ls	a0bf4 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x24>  // b.plast
   a0be0:	b9403c64 	ldr	w4, [x3, #60]
   a0be4:	52800000 	mov	w0, #0x0                   	// #0
   a0be8:	6b02009f 	cmp	w4, w2
   a0bec:	54000088 	b.hi	a0bfc <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>  // b.pmore
   a0bf0:	d65f03c0 	ret
   a0bf4:	52800000 	mov	w0, #0x0                   	// #0
   a0bf8:	d65f03c0 	ret
   a0bfc:	b9403464 	ldr	w4, [x3, #52]
   a0c00:	f9401460 	ldr	x0, [x3, #40]
   a0c04:	1b040442 	madd	w2, w2, w4, w1
   a0c08:	78627800 	ldrh	w0, [x0, x2, lsl #1]
   a0c0c:	d65f03c0 	ret

00000000000a0c10 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   a0c10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0c14:	910003fd 	mov	x29, sp
   a0c18:	a90153f3 	stp	x19, x20, [sp, #16]
   a0c1c:	aa0003f4 	mov	x20, x0
   a0c20:	91008000 	add	x0, x0, #0x20
   a0c24:	2a0203f3 	mov	w19, w2
   a0c28:	92400673 	and	x19, x19, #0x3
   a0c2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0c30:	12000435 	and	w21, w1, #0x3
   a0c34:	b9403a96 	ldr	w22, [x20, #56]
   a0c38:	94001fe6 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0c3c:	1b0002b5 	madd	w21, w21, w0, w0
   a0c40:	d0000081 	adrp	x1, b2000 <vtable for CPartition>
   a0c44:	913f8021 	add	x1, x1, #0xfe0
   a0c48:	38616a61 	ldrb	w1, [x19, x1]
   a0c4c:	aa1403e0 	mov	x0, x20
   a0c50:	1280ffe4 	mov	w4, #0xfffff800            	// #-2048
   a0c54:	52800003 	mov	w3, #0x0                   	// #0
   a0c58:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0c5c:	4b1502c2 	sub	w2, w22, w21
   a0c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0c64:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0c68:	17ffff5e 	b	a09e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a0c6c:	d503201f 	nop

00000000000a0c70 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   a0c70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a0c74:	910003fd 	mov	x29, sp
   a0c78:	a90363f7 	stp	x23, x24, [sp, #48]
   a0c7c:	2a0103f7 	mov	w23, w1
   a0c80:	b9405018 	ldr	w24, [x0, #80]
   a0c84:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0c88:	91008016 	add	x22, x0, #0x20
   a0c8c:	a90153f3 	stp	x19, x20, [sp, #16]
   a0c90:	aa0003f4 	mov	x20, x0
   a0c94:	aa1603e0 	mov	x0, x22
   a0c98:	94001fce 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0c9c:	b9403a95 	ldr	w21, [x20, #56]
   a0ca0:	1b176000 	madd	w0, w0, w23, w24
   a0ca4:	b9405293 	ldr	w19, [x20, #80]
   a0ca8:	6b0002bf 	cmp	w21, w0
   a0cac:	1a8092b5 	csel	w21, w21, w0, ls  // ls = plast
   a0cb0:	6b1302bf 	cmp	w21, w19
   a0cb4:	54000149 	b.ls	a0cdc <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x6c>  // b.plast
   a0cb8:	b9405682 	ldr	w2, [x20, #84]
   a0cbc:	2a1303e1 	mov	w1, w19
   a0cc0:	aa1403e0 	mov	x0, x20
   a0cc4:	97ffff83 	bl	a0ad0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a0cc8:	aa1603e0 	mov	x0, x22
   a0ccc:	94001fc1 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0cd0:	0b000273 	add	w19, w19, w0
   a0cd4:	6b1302bf 	cmp	w21, w19
   a0cd8:	54ffff08 	b.hi	a0cb8 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x48>  // b.pmore
   a0cdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0ce0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0ce4:	a94363f7 	ldp	x23, x24, [sp, #48]
   a0ce8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0cec:	d65f03c0 	ret

00000000000a0cf0 <CScreenDevice::InvertCursor() [clone .part.0]>:
   a0cf0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0cf4:	910003fd 	mov	x29, sp
   a0cf8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0cfc:	91008015 	add	x21, x0, #0x20
   a0d00:	a90153f3 	stp	x19, x20, [sp, #16]
   a0d04:	aa0003f4 	mov	x20, x0
   a0d08:	aa1503e0 	mov	x0, x21
   a0d0c:	94001fb9 	bl	a8bf0 <CCharGenerator::GetUnderline() const>
   a0d10:	2a0003f6 	mov	w22, w0
   a0d14:	aa1503e0 	mov	x0, x21
   a0d18:	94001fb2 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0d1c:	6b16001f 	cmp	w0, w22
   a0d20:	54000389 	b.ls	a0d90 <CScreenDevice::InvertCursor() [clone .part.0]+0xa0>  // b.plast
   a0d24:	d503201f 	nop
   a0d28:	aa1503e0 	mov	x0, x21
   a0d2c:	52800013 	mov	w19, #0x0                   	// #0
   a0d30:	94001fa8 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0d34:	6b13001f 	cmp	w0, w19
   a0d38:	54000229 	b.ls	a0d7c <CScreenDevice::InvertCursor() [clone .part.0]+0x8c>  // b.plast
   a0d3c:	d503201f 	nop
   a0d40:	b9405281 	ldr	w1, [x20, #80]
   a0d44:	b9403a80 	ldr	w0, [x20, #56]
   a0d48:	0b010261 	add	w1, w19, w1
   a0d4c:	6b00003f 	cmp	w1, w0
   a0d50:	540000c2 	b.cs	a0d68 <CScreenDevice::InvertCursor() [clone .part.0]+0x78>  // b.hs, b.nlast
   a0d54:	b9405682 	ldr	w2, [x20, #84]
   a0d58:	b9403e80 	ldr	w0, [x20, #60]
   a0d5c:	0b0202c2 	add	w2, w22, w2
   a0d60:	6b00005f 	cmp	w2, w0
   a0d64:	540001e3 	b.cc	a0da0 <CScreenDevice::InvertCursor() [clone .part.0]+0xb0>  // b.lo, b.ul, b.last
   a0d68:	11000673 	add	w19, w19, #0x1
   a0d6c:	aa1503e0 	mov	x0, x21
   a0d70:	94001f98 	bl	a8bd0 <CCharGenerator::GetCharWidth() const>
   a0d74:	6b13001f 	cmp	w0, w19
   a0d78:	54fffe48 	b.hi	a0d40 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>  // b.pmore
   a0d7c:	aa1503e0 	mov	x0, x21
   a0d80:	110006d6 	add	w22, w22, #0x1
   a0d84:	94001f97 	bl	a8be0 <CCharGenerator::GetCharHeight() const>
   a0d88:	6b16001f 	cmp	w0, w22
   a0d8c:	54fffce8 	b.hi	a0d28 <CScreenDevice::InvertCursor() [clone .part.0]+0x38>  // b.pmore
   a0d90:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0d94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0d98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0d9c:	d65f03c0 	ret
   a0da0:	b9403683 	ldr	w3, [x20, #52]
   a0da4:	f9401680 	ldr	x0, [x20, #40]
   a0da8:	1b030441 	madd	w1, w2, w3, w1
   a0dac:	d37ff821 	lsl	x1, x1, #1
   a0db0:	78616802 	ldrh	w2, [x0, x1]
   a0db4:	350000a2 	cbnz	w2, a0dc8 <CScreenDevice::InvertCursor() [clone .part.0]+0xd8>
   a0db8:	7940b682 	ldrh	w2, [x20, #90]
   a0dbc:	11000673 	add	w19, w19, #0x1
   a0dc0:	78216802 	strh	w2, [x0, x1]
   a0dc4:	17ffffea 	b	a0d6c <CScreenDevice::InvertCursor() [clone .part.0]+0x7c>
   a0dc8:	11000673 	add	w19, w19, #0x1
   a0dcc:	7821681f 	strh	wzr, [x0, x1]
   a0dd0:	17ffffe7 	b	a0d6c <CScreenDevice::InvertCursor() [clone .part.0]+0x7c>
	...

00000000000a0de0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   a0de0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a0de4:	910003fd 	mov	x29, sp
   a0de8:	a90153f3 	stp	x19, x20, [sp, #16]
   a0dec:	aa0003f3 	mov	x19, x0
   a0df0:	2a0303f4 	mov	w20, w3
   a0df4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0df8:	aa0103f5 	mov	x21, x1
   a0dfc:	91040016 	add	x22, x0, #0x100
   a0e00:	a90363f7 	stp	x23, x24, [sp, #48]
   a0e04:	9101c018 	add	x24, x0, #0x70
   a0e08:	9102e017 	add	x23, x0, #0xb8
   a0e0c:	a9046bf9 	stp	x25, x26, [sp, #64]
   a0e10:	12001c59 	and	w25, w2, #0xff
   a0e14:	5280003a 	mov	w26, #0x1                   	// #1
   a0e18:	f9002bfb 	str	x27, [sp, #80]
   a0e1c:	9100a27b 	add	x27, x19, #0x28
   a0e20:	97ffeff8 	bl	9ce00 <CDevice::CDevice()>
   a0e24:	d0000082 	adrp	x2, b2000 <vtable for CPartition>
   a0e28:	913fe042 	add	x2, x2, #0xff8
   a0e2c:	39004279 	strb	w25, [x19, #16]
   a0e30:	aa1b03e0 	mov	x0, x27
   a0e34:	b9001674 	str	w20, [x19, #20]
   a0e38:	a9005662 	stp	x2, x21, [x19]
   a0e3c:	f9000e7f 	str	xzr, [x19, #24]
   a0e40:	3900827f 	strb	wzr, [x19, #32]
   a0e44:	97fff19b 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   a0e48:	aa1803e0 	mov	x0, x24
   a0e4c:	97fff199 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   a0e50:	aa1703e0 	mov	x0, x23
   a0e54:	97fff197 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   a0e58:	aa1603e0 	mov	x0, x22
   a0e5c:	97fff195 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   a0e60:	b9401662 	ldr	w2, [x19, #20]
   a0e64:	7100033f 	cmp	w25, #0x0
   a0e68:	1a9f07e0 	cset	w0, ne  // ne = any
   a0e6c:	b9094a7f 	str	wzr, [x19, #2376]
   a0e70:	0b1a0000 	add	w0, w0, w26
   a0e74:	b9094e7f 	str	wzr, [x19, #2380]
   a0e78:	b909527f 	str	wzr, [x19, #2384]
   a0e7c:	b911567f 	str	wzr, [x19, #4436]
   a0e80:	7100145f 	cmp	w2, #0x5
   a0e84:	b9115a7f 	str	wzr, [x19, #4440]
   a0e88:	b9115e7a 	str	w26, [x19, #4444]
   a0e8c:	f908b27f 	str	xzr, [x19, #4448]
   a0e90:	b9117a60 	str	w0, [x19, #4472]
   a0e94:	b9117e7a 	str	w26, [x19, #4476]
   a0e98:	54000548 	b.hi	a0f40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>  // b.pmore
   a0e9c:	d00000b5 	adrp	x21, b6000 <s_OldInfo+0x68>
   a0ea0:	910922b5 	add	x21, x21, #0x248
   a0ea4:	9100c2a1 	add	x1, x21, #0x30
   a0ea8:	d37c7e80 	ubfiz	x0, x20, #4, #32
   a0eac:	b8606821 	ldr	w1, [x1, x0]
   a0eb0:	2a1403f9 	mov	w25, w20
   a0eb4:	7100d43f 	cmp	w1, #0x35
   a0eb8:	54000448 	b.hi	a0f40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>  // b.pmore
   a0ebc:	d00000a0 	adrp	x0, b6000 <s_OldInfo+0x68>
   a0ec0:	913b6000 	add	x0, x0, #0xed8
   a0ec4:	2a0203e2 	mov	w2, w2
   a0ec8:	91006000 	add	x0, x0, #0x18
   a0ecc:	f8627803 	ldr	x3, [x0, x2, lsl #3]
   a0ed0:	b5000663 	cbnz	x3, a0f9c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1bc>
   a0ed4:	f8797aa3 	ldr	x3, [x21, x25, lsl #3]
   a0ed8:	f8227813 	str	x19, [x0, x2, lsl #3]
   a0edc:	f9000e63 	str	x3, [x19, #24]
   a0ee0:	b4000683 	cbz	x3, a0fb0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
   a0ee4:	340003d4 	cbz	w20, a0f5c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   a0ee8:	9100c2b5 	add	x21, x21, #0x30
   a0eec:	aa1703e0 	mov	x0, x23
   a0ef0:	8b1912b5 	add	x21, x21, x25, lsl #4
   a0ef4:	97fff19b 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   a0ef8:	b94006a1 	ldr	w1, [x21, #4]
   a0efc:	52800022 	mov	w2, #0x1                   	// #1
   a0f00:	aa1703e0 	mov	x0, x23
   a0f04:	11001021 	add	w1, w1, #0x4
   a0f08:	97fff1ba 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a0f0c:	b9400aa1 	ldr	w1, [x21, #8]
   a0f10:	aa1603e0 	mov	x0, x22
   a0f14:	97fff193 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   a0f18:	b9400ea1 	ldr	w1, [x21, #12]
   a0f1c:	52800022 	mov	w2, #0x1                   	// #1
   a0f20:	aa1603e0 	mov	x0, x22
   a0f24:	11001021 	add	w1, w1, #0x4
   a0f28:	97fff1b2 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a0f2c:	aa1603e0 	mov	x0, x22
   a0f30:	52800041 	mov	w1, #0x2                   	// #2
   a0f34:	97fff41f 	bl	9dfb0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   a0f38:	52800020 	mov	w0, #0x1                   	// #1
   a0f3c:	39008260 	strb	w0, [x19, #32]
   a0f40:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0f44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0f48:	a94363f7 	ldp	x23, x24, [sp, #48]
   a0f4c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a0f50:	f9402bfb 	ldr	x27, [sp, #80]
   a0f54:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a0f58:	d65f03c0 	ret
   a0f5c:	52800401 	mov	w1, #0x20                  	// #32
   a0f60:	aa1b03e0 	mov	x0, x27
   a0f64:	97fff17f 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   a0f68:	2a1a03e2 	mov	w2, w26
   a0f6c:	aa1b03e0 	mov	x0, x27
   a0f70:	52800001 	mov	w1, #0x0                   	// #0
   a0f74:	97fff19f 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a0f78:	52800421 	mov	w1, #0x21                  	// #33
   a0f7c:	aa1803e0 	mov	x0, x24
   a0f80:	97fff178 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   a0f84:	52800001 	mov	w1, #0x0                   	// #0
   a0f88:	2a1a03e2 	mov	w2, w26
   a0f8c:	aa1803e0 	mov	x0, x24
   a0f90:	97fff198 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a0f94:	b94032a1 	ldr	w1, [x21, #48]
   a0f98:	17ffffd4 	b	a0ee8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x108>
   a0f9c:	f0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a0fa0:	9100a021 	add	x1, x1, #0x28
   a0fa4:	91004020 	add	x0, x1, #0x10
   a0fa8:	52801602 	mov	w2, #0xb0                  	// #176
   a0fac:	97ffedb5 	bl	9c680 <assertion_failed>
   a0fb0:	f0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a0fb4:	9100a021 	add	x1, x1, #0x28
   a0fb8:	9100a020 	add	x0, x1, #0x28
   a0fbc:	52801682 	mov	w2, #0xb4                  	// #180
   a0fc0:	97ffedb0 	bl	9c680 <assertion_failed>
   a0fc4:	d503201f 	nop
   a0fc8:	d503201f 	nop
   a0fcc:	d503201f 	nop

00000000000a0fd0 <CSerialDevice::~CSerialDevice()>:
   a0fd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0fd4:	910003fd 	mov	x29, sp
   a0fd8:	d0000081 	adrp	x1, b2000 <vtable for CPartition>
   a0fdc:	913fe021 	add	x1, x1, #0xff8
   a0fe0:	a90153f3 	stp	x19, x20, [sp, #16]
   a0fe4:	aa0003f3 	mov	x19, x0
   a0fe8:	39408000 	ldrb	w0, [x0, #32]
   a0fec:	f9000261 	str	x1, [x19]
   a0ff0:	340006c0 	cbz	w0, a10c8 <CSerialDevice::~CSerialDevice()+0xf8>
   a0ff4:	b9401663 	ldr	w3, [x19, #20]
   a0ff8:	d00000a1 	adrp	x1, b6000 <s_OldInfo+0x68>
   a0ffc:	913b6034 	add	x20, x1, #0xed8
   a1000:	52800020 	mov	w0, #0x1                   	// #1
   a1004:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1008:	b9401682 	ldr	w2, [x20, #20]
   a100c:	1ac32000 	lsl	w0, w0, w3
   a1010:	0a200040 	bic	w0, w2, w0
   a1014:	b9001680 	str	w0, [x20, #20]
   a1018:	d5033f9f 	dsb	sy
   a101c:	f9400e60 	ldr	x0, [x19, #24]
   a1020:	f9400662 	ldr	x2, [x19, #8]
   a1024:	b900381f 	str	wzr, [x0, #56]
   a1028:	b900301f 	str	wzr, [x0, #48]
   a102c:	b4000182 	cbz	x2, a105c <CSerialDevice::~CSerialDevice()+0x8c>
   a1030:	b94ed820 	ldr	w0, [x1, #3800]
   a1034:	51000400 	sub	w0, w0, #0x1
   a1038:	b90ed820 	str	w0, [x1, #3800]
   a103c:	35000100 	cbnz	w0, a105c <CSerialDevice::~CSerialDevice()+0x8c>
   a1040:	f9400680 	ldr	x0, [x20, #8]
   a1044:	b4000600 	cbz	x0, a1104 <CSerialDevice::~CSerialDevice()+0x134>
   a1048:	39404281 	ldrb	w1, [x20, #16]
   a104c:	34000561 	cbz	w1, a10f8 <CSerialDevice::~CSerialDevice()+0x128>
   a1050:	94001bb8 	bl	a7f30 <CInterruptSystem::DisconnectFIQ()>
   a1054:	f900069f 	str	xzr, [x20, #8]
   a1058:	3900429f 	strb	wzr, [x20, #16]
   a105c:	9102e275 	add	x21, x19, #0xb8
   a1060:	52800022 	mov	w2, #0x1                   	// #1
   a1064:	aa1503e0 	mov	x0, x21
   a1068:	52800001 	mov	w1, #0x0                   	// #0
   a106c:	97fff161 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a1070:	91040276 	add	x22, x19, #0x100
   a1074:	52800022 	mov	w2, #0x1                   	// #1
   a1078:	aa1603e0 	mov	x0, x22
   a107c:	52800001 	mov	w1, #0x0                   	// #0
   a1080:	97fff15c 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a1084:	b9401661 	ldr	w1, [x19, #20]
   a1088:	91006294 	add	x20, x20, #0x18
   a108c:	aa1603e0 	mov	x0, x22
   a1090:	f8217a9f 	str	xzr, [x20, x1, lsl #3]
   a1094:	3900827f 	strb	wzr, [x19, #32]
   a1098:	97fff12a 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a109c:	aa1503e0 	mov	x0, x21
   a10a0:	97fff128 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10a4:	9101c260 	add	x0, x19, #0x70
   a10a8:	97fff126 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10ac:	9100a260 	add	x0, x19, #0x28
   a10b0:	97fff124 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10b4:	aa1303e0 	mov	x0, x19
   a10b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a10bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a10c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a10c4:	17ffef3b 	b	9cdb0 <CDevice::~CDevice()>
   a10c8:	91040260 	add	x0, x19, #0x100
   a10cc:	97fff11d 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10d0:	9102e260 	add	x0, x19, #0xb8
   a10d4:	97fff11b 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10d8:	9101c260 	add	x0, x19, #0x70
   a10dc:	97fff119 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10e0:	9100a260 	add	x0, x19, #0x28
   a10e4:	97fff117 	bl	9d540 <CGPIOPin::~CGPIOPin()>
   a10e8:	aa1303e0 	mov	x0, x19
   a10ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a10f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a10f4:	17ffef2f 	b	9cdb0 <CDevice::~CDevice()>
   a10f8:	52801321 	mov	w1, #0x99                  	// #153
   a10fc:	94001b6d 	bl	a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a1100:	17ffffd5 	b	a1054 <CSerialDevice::~CSerialDevice()+0x84>
   a1104:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1108:	9100a021 	add	x1, x1, #0x28
   a110c:	91010020 	add	x0, x1, #0x40
   a1110:	52801c02 	mov	w2, #0xe0                  	// #224
   a1114:	97ffed5b 	bl	9c680 <assertion_failed>
   a1118:	d503201f 	nop
   a111c:	d503201f 	nop

00000000000a1120 <CSerialDevice::~CSerialDevice()>:
   a1120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1124:	910003fd 	mov	x29, sp
   a1128:	f9000bf3 	str	x19, [sp, #16]
   a112c:	aa0003f3 	mov	x19, x0
   a1130:	97ffffa8 	bl	a0fd0 <CSerialDevice::~CSerialDevice()>
   a1134:	aa1303e0 	mov	x0, x19
   a1138:	d2823001 	mov	x1, #0x1180                	// #4480
   a113c:	f9400bf3 	ldr	x19, [sp, #16]
   a1140:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1144:	14001173 	b	a5710 <operator delete(void*, unsigned long)>
   a1148:	d503201f 	nop
   a114c:	d503201f 	nop

00000000000a1150 <CSerialDevice::Initialize(unsigned int)>:
   a1150:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a1154:	910003fd 	mov	x29, sp
   a1158:	a9025bf5 	stp	x21, x22, [sp, #32]
   a115c:	39408015 	ldrb	w21, [x0, #32]
   a1160:	350000b5 	cbnz	w21, a1174 <CSerialDevice::Initialize(unsigned int)+0x24>
   a1164:	2a1503e0 	mov	w0, w21
   a1168:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a116c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1170:	d65f03c0 	ret
   a1174:	a90153f3 	stp	x19, x20, [sp, #16]
   a1178:	2a0103f4 	mov	w20, w1
   a117c:	aa0003f3 	mov	x19, x0
   a1180:	97fffa28 	bl	9fa20 <CMachineInfo::Get()>
   a1184:	52800041 	mov	w1, #0x2                   	// #2
   a1188:	97fff92e 	bl	9f640 <CMachineInfo::GetClockRate(unsigned int) const>
   a118c:	34000d80 	cbz	w0, a133c <CSerialDevice::Initialize(unsigned int)+0x1ec>
   a1190:	5104b282 	sub	w2, w20, #0x12c
   a1194:	5280fa81 	mov	w1, #0x7d4                 	// #2004
   a1198:	72a007a1 	movk	w1, #0x3d, lsl #16
   a119c:	6b01005f 	cmp	w2, w1
   a11a0:	54000da8 	b.hi	a1354 <CSerialDevice::Initialize(unsigned int)+0x204>  // b.pmore
   a11a4:	531c6e82 	lsl	w2, w20, #4
   a11a8:	529fffc1 	mov	w1, #0xfffe                	// #65534
   a11ac:	1ac20816 	udiv	w22, w0, w2
   a11b0:	510006c3 	sub	w3, w22, #0x1
   a11b4:	6b01007f 	cmp	w3, w1
   a11b8:	54000da8 	b.hi	a136c <CSerialDevice::Initialize(unsigned int)+0x21c>  // b.pmore
   a11bc:	1b0282c2 	msub	w2, w22, w2, w0
   a11c0:	531d7042 	lsl	w2, w2, #3
   a11c4:	1ad40841 	udiv	w1, w2, w20
   a11c8:	12000034 	and	w20, w1, #0x1
   a11cc:	0b410694 	add	w20, w20, w1, lsr #1
   a11d0:	7100fe9f 	cmp	w20, #0x3f
   a11d4:	54000d88 	b.hi	a1384 <CSerialDevice::Initialize(unsigned int)+0x234>  // b.pmore
   a11d8:	f9400660 	ldr	x0, [x19, #8]
   a11dc:	b40008a0 	cbz	x0, a12f0 <CSerialDevice::Initialize(unsigned int)+0x1a0>
   a11e0:	a90363f7 	stp	x23, x24, [sp, #48]
   a11e4:	b00000b8 	adrp	x24, b6000 <s_OldInfo+0x68>
   a11e8:	913b6317 	add	x23, x24, #0xed8
   a11ec:	b94edb01 	ldr	w1, [x24, #3800]
   a11f0:	350006a1 	cbnz	w1, a12c4 <CSerialDevice::Initialize(unsigned int)+0x174>
   a11f4:	39404261 	ldrb	w1, [x19, #16]
   a11f8:	90000002 	adrp	x2, a1000 <CSerialDevice::~CSerialDevice()+0x30>
   a11fc:	9132c042 	add	x2, x2, #0xcb0
   a1200:	f90006e0 	str	x0, [x23, #8]
   a1204:	d2800003 	mov	x3, #0x0                   	// #0
   a1208:	390042e1 	strb	w1, [x23, #16]
   a120c:	35000861 	cbnz	w1, a1318 <CSerialDevice::Initialize(unsigned int)+0x1c8>
   a1210:	52801321 	mov	w1, #0x99                  	// #153
   a1214:	94001b07 	bl	a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a1218:	b94edb01 	ldr	w1, [x24, #3800]
   a121c:	7100143f 	cmp	w1, #0x5
   a1220:	54000be8 	b.hi	a139c <CSerialDevice::Initialize(unsigned int)+0x24c>  // b.pmore
   a1224:	f9400e60 	ldr	x0, [x19, #24]
   a1228:	11000421 	add	w1, w1, #0x1
   a122c:	5280ffe2 	mov	w2, #0x7ff                 	// #2047
   a1230:	b90edb01 	str	w1, [x24, #3800]
   a1234:	f9400661 	ldr	x1, [x19, #8]
   a1238:	b900381f 	str	wzr, [x0, #56]
   a123c:	9100b003 	add	x3, x0, #0x2c
   a1240:	b9004402 	str	w2, [x0, #68]
   a1244:	b9002416 	str	w22, [x0, #36]
   a1248:	b9002814 	str	w20, [x0, #40]
   a124c:	b4000b21 	cbz	x1, a13b0 <CSerialDevice::Initialize(unsigned int)+0x260>
   a1250:	52800124 	mov	w4, #0x9                   	// #9
   a1254:	52800e03 	mov	w3, #0x70                  	// #112
   a1258:	52808a02 	mov	w2, #0x450                 	// #1104
   a125c:	52800021 	mov	w1, #0x1                   	// #1
   a1260:	b9003404 	str	w4, [x0, #52]
   a1264:	b9002c03 	str	w3, [x0, #44]
   a1268:	b9003802 	str	w2, [x0, #56]
   a126c:	b9401660 	ldr	w0, [x19, #20]
   a1270:	b94016e2 	ldr	w2, [x23, #20]
   a1274:	1ac02020 	lsl	w0, w1, w0
   a1278:	2a020000 	orr	w0, w0, w2
   a127c:	b90016e0 	str	w0, [x23, #20]
   a1280:	d5033f9f 	dsb	sy
   a1284:	f9400e60 	ldr	x0, [x19, #24]
   a1288:	a94363f7 	ldp	x23, x24, [sp, #48]
   a128c:	52806021 	mov	w1, #0x301                 	// #769
   a1290:	b9003001 	str	w1, [x0, #48]
   a1294:	97ffefcb 	bl	9d1c0 <CDeviceNameService::Get()>
   a1298:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a129c:	9100a021 	add	x1, x1, #0x28
   a12a0:	aa1303e2 	mov	x2, x19
   a12a4:	91040021 	add	x1, x1, #0x100
   a12a8:	52800003 	mov	w3, #0x0                   	// #0
   a12ac:	97ffeefd 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   a12b0:	2a1503e0 	mov	w0, w21
   a12b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a12b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a12bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a12c0:	d65f03c0 	ret
   a12c4:	f94006e2 	ldr	x2, [x23, #8]
   a12c8:	eb02001f 	cmp	x0, x2
   a12cc:	540002e0 	b.eq	a1328 <CSerialDevice::Initialize(unsigned int)+0x1d8>  // b.none
   a12d0:	b9401660 	ldr	w0, [x19, #20]
   a12d4:	910062f7 	add	x23, x23, #0x18
   a12d8:	52800015 	mov	w21, #0x0                   	// #0
   a12dc:	f8207aff 	str	xzr, [x23, x0, lsl #3]
   a12e0:	3900827f 	strb	wzr, [x19, #32]
   a12e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a12e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a12ec:	17ffff9e 	b	a1164 <CSerialDevice::Initialize(unsigned int)+0x14>
   a12f0:	f9400e60 	ldr	x0, [x19, #24]
   a12f4:	5280ffe1 	mov	w1, #0x7ff                 	// #2047
   a12f8:	b900381f 	str	wzr, [x0, #56]
   a12fc:	9100b003 	add	x3, x0, #0x2c
   a1300:	b9004401 	str	w1, [x0, #68]
   a1304:	b9002416 	str	w22, [x0, #36]
   a1308:	b9002814 	str	w20, [x0, #40]
   a130c:	52800c01 	mov	w1, #0x60                  	// #96
   a1310:	b9000061 	str	w1, [x3]
   a1314:	17ffffde 	b	a128c <CSerialDevice::Initialize(unsigned int)+0x13c>
   a1318:	52801321 	mov	w1, #0x99                  	// #153
   a131c:	94001b75 	bl	a80f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   a1320:	b94edb01 	ldr	w1, [x24, #3800]
   a1324:	17ffffbe 	b	a121c <CSerialDevice::Initialize(unsigned int)+0xcc>
   a1328:	39404262 	ldrb	w2, [x19, #16]
   a132c:	394042e0 	ldrb	w0, [x23, #16]
   a1330:	6b00005f 	cmp	w2, w0
   a1334:	54fff740 	b.eq	a121c <CSerialDevice::Initialize(unsigned int)+0xcc>  // b.none
   a1338:	17ffffe6 	b	a12d0 <CSerialDevice::Initialize(unsigned int)+0x180>
   a133c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1340:	9100a021 	add	x1, x1, #0x28
   a1344:	a90363f7 	stp	x23, x24, [sp, #48]
   a1348:	91016020 	add	x0, x1, #0x58
   a134c:	52801fa2 	mov	w2, #0xfd                  	// #253
   a1350:	97ffeccc 	bl	9c680 <assertion_failed>
   a1354:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1358:	9100a021 	add	x1, x1, #0x28
   a135c:	a90363f7 	stp	x23, x24, [sp, #48]
   a1360:	9101a020 	add	x0, x1, #0x68
   a1364:	52801fe2 	mov	w2, #0xff                  	// #255
   a1368:	97ffecc6 	bl	9c680 <assertion_failed>
   a136c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1370:	9100a021 	add	x1, x1, #0x28
   a1374:	a90363f7 	stp	x23, x24, [sp, #48]
   a1378:	91026020 	add	x0, x1, #0x98
   a137c:	52802042 	mov	w2, #0x102                 	// #258
   a1380:	97ffecc0 	bl	9c680 <assertion_failed>
   a1384:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1388:	9100a021 	add	x1, x1, #0x28
   a138c:	a90363f7 	stp	x23, x24, [sp, #48]
   a1390:	91030020 	add	x0, x1, #0xc0
   a1394:	528020a2 	mov	w2, #0x105                 	// #261
   a1398:	97ffecba 	bl	9c680 <assertion_failed>
   a139c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a13a0:	9100a021 	add	x1, x1, #0x28
   a13a4:	91036020 	add	x0, x1, #0xd8
   a13a8:	528024e2 	mov	w2, #0x127                 	// #295
   a13ac:	97ffecb5 	bl	9c680 <assertion_failed>
   a13b0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a13b4:	17ffffd6 	b	a130c <CSerialDevice::Initialize(unsigned int)+0x1bc>
   a13b8:	d503201f 	nop
   a13bc:	d503201f 	nop

00000000000a13c0 <CSerialDevice::Write(void const*, unsigned long)>:
   a13c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a13c4:	910003fd 	mov	x29, sp
   a13c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a13cc:	aa0003f4 	mov	x20, x0
   a13d0:	39408000 	ldrb	w0, [x0, #32]
   a13d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a13d8:	a90363f7 	stp	x23, x24, [sp, #48]
   a13dc:	34000b60 	cbz	w0, a1548 <CSerialDevice::Write(void const*, unsigned long)+0x188>
   a13e0:	aa0103f5 	mov	x21, x1
   a13e4:	aa0203f8 	mov	x24, x2
   a13e8:	b9517e80 	ldr	w0, [x20, #4476]
   a13ec:	350008c0 	cbnz	w0, a1504 <CSerialDevice::Write(void const*, unsigned long)+0x144>
   a13f0:	b4000b75 	cbz	x21, a155c <CSerialDevice::Write(void const*, unsigned long)+0x19c>
   a13f4:	b4000bf8 	cbz	x24, a1570 <CSerialDevice::Write(void const*, unsigned long)+0x1b0>
   a13f8:	d2800013 	mov	x19, #0x0                   	// #0
   a13fc:	14000005 	b	a1410 <CSerialDevice::Write(void const*, unsigned long)+0x50>
   a1400:	91000673 	add	x19, x19, #0x1
   a1404:	110006f6 	add	w22, w23, #0x1
   a1408:	eb13031f 	cmp	x24, x19
   a140c:	54000260 	b.eq	a1458 <CSerialDevice::Write(void const*, unsigned long)+0x98>  // b.none
   a1410:	38736aa1 	ldrb	w1, [x21, x19]
   a1414:	aa1403e0 	mov	x0, x20
   a1418:	2a1303f7 	mov	w23, w19
   a141c:	9400017d 	bl	a1a10 <CSerialDevice::Write(unsigned char)>
   a1420:	72001c1f 	tst	w0, #0xff
   a1424:	2a1303f6 	mov	w22, w19
   a1428:	54000180 	b.eq	a1458 <CSerialDevice::Write(void const*, unsigned long)+0x98>  // b.none
   a142c:	38736aa0 	ldrb	w0, [x21, x19]
   a1430:	7100281f 	cmp	w0, #0xa
   a1434:	54fffe61 	b.ne	a1400 <CSerialDevice::Write(void const*, unsigned long)+0x40>  // b.any
   a1438:	b9515e80 	ldr	w0, [x20, #4444]
   a143c:	3607fe20 	tbz	w0, #0, a1400 <CSerialDevice::Write(void const*, unsigned long)+0x40>
   a1440:	528001a1 	mov	w1, #0xd                   	// #13
   a1444:	aa1403e0 	mov	x0, x20
   a1448:	94000172 	bl	a1a10 <CSerialDevice::Write(unsigned char)>
   a144c:	72001c1f 	tst	w0, #0xff
   a1450:	54fffd81 	b.ne	a1400 <CSerialDevice::Write(void const*, unsigned long)+0x40>  // b.any
   a1454:	d503201f 	nop
   a1458:	b9517e80 	ldr	w0, [x20, #4476]
   a145c:	35000580 	cbnz	w0, a150c <CSerialDevice::Write(void const*, unsigned long)+0x14c>
   a1460:	f9400680 	ldr	x0, [x20, #8]
   a1464:	b4000440 	cbz	x0, a14ec <CSerialDevice::Write(void const*, unsigned long)+0x12c>
   a1468:	b9517a80 	ldr	w0, [x20, #4472]
   a146c:	35000620 	cbnz	w0, a1530 <CSerialDevice::Write(void const*, unsigned long)+0x170>
   a1470:	b9515680 	ldr	w0, [x20, #4436]
   a1474:	b9515a81 	ldr	w1, [x20, #4440]
   a1478:	6b00003f 	cmp	w1, w0
   a147c:	54000380 	b.eq	a14ec <CSerialDevice::Write(void const*, unsigned long)+0x12c>  // b.none
   a1480:	b9515680 	ldr	w0, [x20, #4436]
   a1484:	b9515a81 	ldr	w1, [x20, #4440]
   a1488:	6b00003f 	cmp	w1, w0
   a148c:	540002c0 	b.eq	a14e4 <CSerialDevice::Write(void const*, unsigned long)+0x124>  // b.none
   a1490:	f9400e82 	ldr	x2, [x20, #24]
   a1494:	91006043 	add	x3, x2, #0x18
   a1498:	1400000e 	b	a14d0 <CSerialDevice::Write(void const*, unsigned long)+0x110>
   a149c:	b9515a80 	ldr	w0, [x20, #4440]
   a14a0:	8b204281 	add	x1, x20, w0, uxtw
   a14a4:	11000400 	add	w0, w0, #0x1
   a14a8:	b9115a80 	str	w0, [x20, #4440]
   a14ac:	39655020 	ldrb	w0, [x1, #2388]
   a14b0:	b9000040 	str	w0, [x2]
   a14b4:	b9515a80 	ldr	w0, [x20, #4440]
   a14b8:	12002800 	and	w0, w0, #0x7ff
   a14bc:	b9115a80 	str	w0, [x20, #4440]
   a14c0:	b9515681 	ldr	w1, [x20, #4436]
   a14c4:	b9515a80 	ldr	w0, [x20, #4440]
   a14c8:	6b00003f 	cmp	w1, w0
   a14cc:	540000c0 	b.eq	a14e4 <CSerialDevice::Write(void const*, unsigned long)+0x124>  // b.none
   a14d0:	b9400060 	ldr	w0, [x3]
   a14d4:	362ffe40 	tbz	w0, #5, a149c <CSerialDevice::Write(void const*, unsigned long)+0xdc>
   a14d8:	b9403840 	ldr	w0, [x2, #56]
   a14dc:	321b0000 	orr	w0, w0, #0x20
   a14e0:	b9003840 	str	w0, [x2, #56]
   a14e4:	b9517a80 	ldr	w0, [x20, #4472]
   a14e8:	35000160 	cbnz	w0, a1514 <CSerialDevice::Write(void const*, unsigned long)+0x154>
   a14ec:	2a1603e0 	mov	w0, w22
   a14f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a14f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a14f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a14fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1500:	d65f03c0 	ret
   a1504:	94001373 	bl	a62d0 <EnterCritical>
   a1508:	17ffffba 	b	a13f0 <CSerialDevice::Write(void const*, unsigned long)+0x30>
   a150c:	940013a1 	bl	a6390 <LeaveCritical>
   a1510:	17ffffd4 	b	a1460 <CSerialDevice::Write(void const*, unsigned long)+0xa0>
   a1514:	9400139f 	bl	a6390 <LeaveCritical>
   a1518:	2a1603e0 	mov	w0, w22
   a151c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1520:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1524:	a94363f7 	ldp	x23, x24, [sp, #48]
   a1528:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a152c:	d65f03c0 	ret
   a1530:	94001368 	bl	a62d0 <EnterCritical>
   a1534:	b9515681 	ldr	w1, [x20, #4436]
   a1538:	b9515a80 	ldr	w0, [x20, #4440]
   a153c:	6b00003f 	cmp	w1, w0
   a1540:	54fffa01 	b.ne	a1480 <CSerialDevice::Write(void const*, unsigned long)+0xc0>  // b.any
   a1544:	17ffffe8 	b	a14e4 <CSerialDevice::Write(void const*, unsigned long)+0x124>
   a1548:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a154c:	9100a021 	add	x1, x1, #0x28
   a1550:	91042020 	add	x0, x1, #0x108
   a1554:	528029a2 	mov	w2, #0x14d                 	// #333
   a1558:	97ffec4a 	bl	9c680 <assertion_failed>
   a155c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1560:	9100a021 	add	x1, x1, #0x28
   a1564:	91046020 	add	x0, x1, #0x118
   a1568:	52802a42 	mov	w2, #0x152                 	// #338
   a156c:	97ffec45 	bl	9c680 <assertion_failed>
   a1570:	52800016 	mov	w22, #0x0                   	// #0
   a1574:	17ffffb9 	b	a1458 <CSerialDevice::Write(void const*, unsigned long)+0x98>
   a1578:	d503201f 	nop
   a157c:	d503201f 	nop

00000000000a1580 <CSerialDevice::Read(void*, unsigned long)>:
   a1580:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a1584:	910003fd 	mov	x29, sp
   a1588:	a90153f3 	stp	x19, x20, [sp, #16]
   a158c:	aa0003f3 	mov	x19, x0
   a1590:	39408000 	ldrb	w0, [x0, #32]
   a1594:	f90013f5 	str	x21, [sp, #32]
   a1598:	340008c0 	cbz	w0, a16b0 <CSerialDevice::Read(void*, unsigned long)+0x130>
   a159c:	aa0103f4 	mov	x20, x1
   a15a0:	b4000921 	cbz	x1, a16c4 <CSerialDevice::Read(void*, unsigned long)+0x144>
   a15a4:	f9400660 	ldr	x0, [x19, #8]
   a15a8:	aa0203f5 	mov	x21, x2
   a15ac:	b4000560 	cbz	x0, a1658 <CSerialDevice::Read(void*, unsigned long)+0xd8>
   a15b0:	b9517a60 	ldr	w0, [x19, #4472]
   a15b4:	35000760 	cbnz	w0, a16a0 <CSerialDevice::Read(void*, unsigned long)+0x120>
   a15b8:	b9495260 	ldr	w0, [x19, #2384]
   a15bc:	37f803e0 	tbnz	w0, #31, a1638 <CSerialDevice::Read(void*, unsigned long)+0xb8>
   a15c0:	b4000955 	cbz	x21, a16e8 <CSerialDevice::Read(void*, unsigned long)+0x168>
   a15c4:	d2800003 	mov	x3, #0x0                   	// #0
   a15c8:	1400000e 	b	a1600 <CSerialDevice::Read(void*, unsigned long)+0x80>
   a15cc:	b9494e64 	ldr	w4, [x19, #2380]
   a15d0:	8b244261 	add	x1, x19, w4, uxtw
   a15d4:	11000460 	add	w0, w3, #0x1
   a15d8:	11000484 	add	w4, w4, #0x1
   a15dc:	b9094e64 	str	w4, [x19, #2380]
   a15e0:	39452021 	ldrb	w1, [x1, #328]
   a15e4:	38236a81 	strb	w1, [x20, x3]
   a15e8:	91000463 	add	x3, x3, #0x1
   a15ec:	b9494e64 	ldr	w4, [x19, #2380]
   a15f0:	eb15007f 	cmp	x3, x21
   a15f4:	12002884 	and	w4, w4, #0x7ff
   a15f8:	b9094e64 	str	w4, [x19, #2380]
   a15fc:	54000220 	b.eq	a1640 <CSerialDevice::Read(void*, unsigned long)+0xc0>  // b.none
   a1600:	b9494a62 	ldr	w2, [x19, #2376]
   a1604:	2a0303e0 	mov	w0, w3
   a1608:	b9494e61 	ldr	w1, [x19, #2380]
   a160c:	6b01005f 	cmp	w2, w1
   a1610:	54fffde1 	b.ne	a15cc <CSerialDevice::Read(void*, unsigned long)+0x4c>  // b.any
   a1614:	b9517a61 	ldr	w1, [x19, #4472]
   a1618:	34000181 	cbz	w1, a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a161c:	b9003fe0 	str	w0, [sp, #60]
   a1620:	9400135c 	bl	a6390 <LeaveCritical>
   a1624:	b9403fe0 	ldr	w0, [sp, #60]
   a1628:	a94153f3 	ldp	x19, x20, [sp, #16]
   a162c:	f94013f5 	ldr	x21, [sp, #32]
   a1630:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1634:	d65f03c0 	ret
   a1638:	b9495260 	ldr	w0, [x19, #2384]
   a163c:	b909527f 	str	wzr, [x19, #2384]
   a1640:	b9517a61 	ldr	w1, [x19, #4472]
   a1644:	35fffec1 	cbnz	w1, a161c <CSerialDevice::Read(void*, unsigned long)+0x9c>
   a1648:	a94153f3 	ldp	x19, x20, [sp, #16]
   a164c:	f94013f5 	ldr	x21, [sp, #32]
   a1650:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1654:	d65f03c0 	ret
   a1658:	b40004c2 	cbz	x2, a16f0 <CSerialDevice::Read(void*, unsigned long)+0x170>
   a165c:	d2800003 	mov	x3, #0x0                   	// #0
   a1660:	14000008 	b	a1680 <CSerialDevice::Read(void*, unsigned long)+0x100>
   a1664:	375803a4 	tbnz	w4, #11, a16d8 <CSerialDevice::Read(void*, unsigned long)+0x158>
   a1668:	374003c4 	tbnz	w4, #8, a16e0 <CSerialDevice::Read(void*, unsigned long)+0x160>
   a166c:	38236a84 	strb	w4, [x20, x3]
   a1670:	91000463 	add	x3, x3, #0x1
   a1674:	11000400 	add	w0, w0, #0x1
   a1678:	eb0302bf 	cmp	x21, x3
   a167c:	54fffe60 	b.eq	a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>  // b.none
   a1680:	f9400e61 	ldr	x1, [x19, #24]
   a1684:	2a0303e0 	mov	w0, w3
   a1688:	b9401822 	ldr	w2, [x1, #24]
   a168c:	3727fde2 	tbnz	w2, #4, a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a1690:	b9400024 	ldr	w4, [x1]
   a1694:	3657fe84 	tbz	w4, #10, a1664 <CSerialDevice::Read(void*, unsigned long)+0xe4>
   a1698:	12800000 	mov	w0, #0xffffffff            	// #-1
   a169c:	17ffffeb 	b	a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a16a0:	9400130c 	bl	a62d0 <EnterCritical>
   a16a4:	b9495260 	ldr	w0, [x19, #2384]
   a16a8:	36fff8c0 	tbz	w0, #31, a15c0 <CSerialDevice::Read(void*, unsigned long)+0x40>
   a16ac:	17ffffe3 	b	a1638 <CSerialDevice::Read(void*, unsigned long)+0xb8>
   a16b0:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a16b4:	9100a021 	add	x1, x1, #0x28
   a16b8:	91042020 	add	x0, x1, #0x108
   a16bc:	528031e2 	mov	w2, #0x18f                 	// #399
   a16c0:	97ffebf0 	bl	9c680 <assertion_failed>
   a16c4:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a16c8:	9100a021 	add	x1, x1, #0x28
   a16cc:	91046020 	add	x0, x1, #0x118
   a16d0:	52803242 	mov	w2, #0x192                 	// #402
   a16d4:	97ffebeb 	bl	9c680 <assertion_failed>
   a16d8:	12800020 	mov	w0, #0xfffffffe            	// #-2
   a16dc:	17ffffdb 	b	a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a16e0:	12800040 	mov	w0, #0xfffffffd            	// #-3
   a16e4:	17ffffd9 	b	a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a16e8:	52800000 	mov	w0, #0x0                   	// #0
   a16ec:	17ffffd5 	b	a1640 <CSerialDevice::Read(void*, unsigned long)+0xc0>
   a16f0:	52800000 	mov	w0, #0x0                   	// #0
   a16f4:	17ffffd5 	b	a1648 <CSerialDevice::Read(void*, unsigned long)+0xc8>
   a16f8:	d503201f 	nop
   a16fc:	d503201f 	nop

00000000000a1700 <CSerialDevice::GetOptions() const>:
   a1700:	b9515c00 	ldr	w0, [x0, #4444]
   a1704:	d65f03c0 	ret
   a1708:	d503201f 	nop
   a170c:	d503201f 	nop

00000000000a1710 <CSerialDevice::SetOptions(unsigned int)>:
   a1710:	b9115c01 	str	w1, [x0, #4444]
   a1714:	d65f03c0 	ret
   a1718:	d503201f 	nop
   a171c:	d503201f 	nop

00000000000a1720 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   a1720:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1724:	910003fd 	mov	x29, sp
   a1728:	f9400403 	ldr	x3, [x0, #8]
   a172c:	b4000183 	cbz	x3, a175c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   a1730:	f948b003 	ldr	x3, [x0, #4448]
   a1734:	b50001e3 	cbnz	x3, a1770 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x50>
   a1738:	b4000261 	cbz	x1, a1784 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x64>
   a173c:	39c00023 	ldrsb	w3, [x1]
   a1740:	340002c3 	cbz	w3, a1798 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x78>
   a1744:	b4000342 	cbz	x2, a17ac <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   a1748:	f908b001 	str	x1, [x0, #4448]
   a174c:	f908b401 	str	x1, [x0, #4456]
   a1750:	f908b802 	str	x2, [x0, #4464]
   a1754:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a1758:	d65f03c0 	ret
   a175c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1760:	9100a021 	add	x1, x1, #0x28
   a1764:	9104a020 	add	x0, x1, #0x128
   a1768:	52803d22 	mov	w2, #0x1e9                 	// #489
   a176c:	97ffebc5 	bl	9c680 <assertion_failed>
   a1770:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1774:	9100a021 	add	x1, x1, #0x28
   a1778:	91050020 	add	x0, x1, #0x140
   a177c:	52803d42 	mov	w2, #0x1ea                 	// #490
   a1780:	97ffebc0 	bl	9c680 <assertion_failed>
   a1784:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1788:	9100a021 	add	x1, x1, #0x28
   a178c:	91054020 	add	x0, x1, #0x150
   a1790:	52803d82 	mov	w2, #0x1ec                 	// #492
   a1794:	97ffebbb 	bl	9c680 <assertion_failed>
   a1798:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a179c:	9100a021 	add	x1, x1, #0x28
   a17a0:	91058020 	add	x0, x1, #0x160
   a17a4:	52803da2 	mov	w2, #0x1ed                 	// #493
   a17a8:	97ffebb6 	bl	9c680 <assertion_failed>
   a17ac:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a17b0:	9100a021 	add	x1, x1, #0x28
   a17b4:	9105c020 	add	x0, x1, #0x170
   a17b8:	52803dc2 	mov	w2, #0x1ee                 	// #494
   a17bc:	97ffebb1 	bl	9c680 <assertion_failed>

00000000000a17c0 <CSerialDevice::AvailableForWrite()>:
   a17c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a17c4:	910003fd 	mov	x29, sp
   a17c8:	f9000bf3 	str	x19, [sp, #16]
   a17cc:	aa0003f3 	mov	x19, x0
   a17d0:	39408000 	ldrb	w0, [x0, #32]
   a17d4:	340003a0 	cbz	w0, a1848 <CSerialDevice::AvailableForWrite()+0x88>
   a17d8:	f9400660 	ldr	x0, [x19, #8]
   a17dc:	b4000400 	cbz	x0, a185c <CSerialDevice::AvailableForWrite()+0x9c>
   a17e0:	b9517a60 	ldr	w0, [x19, #4472]
   a17e4:	350002c0 	cbnz	w0, a183c <CSerialDevice::AvailableForWrite()+0x7c>
   a17e8:	b9515a62 	ldr	w2, [x19, #4440]
   a17ec:	b9515661 	ldr	w1, [x19, #4436]
   a17f0:	6b01005f 	cmp	w2, w1
   a17f4:	b9515a61 	ldr	w1, [x19, #4440]
   a17f8:	b9515662 	ldr	w2, [x19, #4436]
   a17fc:	54000108 	b.hi	a181c <CSerialDevice::AvailableForWrite()+0x5c>  // b.pmore
   a1800:	111ffc33 	add	w19, w1, #0x7ff
   a1804:	4b020273 	sub	w19, w19, w2
   a1808:	35000100 	cbnz	w0, a1828 <CSerialDevice::AvailableForWrite()+0x68>
   a180c:	2a1303e0 	mov	w0, w19
   a1810:	f9400bf3 	ldr	x19, [sp, #16]
   a1814:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1818:	d65f03c0 	ret
   a181c:	51000433 	sub	w19, w1, #0x1
   a1820:	4b020273 	sub	w19, w19, w2
   a1824:	34ffff40 	cbz	w0, a180c <CSerialDevice::AvailableForWrite()+0x4c>
   a1828:	940012da 	bl	a6390 <LeaveCritical>
   a182c:	2a1303e0 	mov	w0, w19
   a1830:	f9400bf3 	ldr	x19, [sp, #16]
   a1834:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1838:	d65f03c0 	ret
   a183c:	940012a5 	bl	a62d0 <EnterCritical>
   a1840:	b9517a60 	ldr	w0, [x19, #4472]
   a1844:	17ffffe9 	b	a17e8 <CSerialDevice::AvailableForWrite()+0x28>
   a1848:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a184c:	9100a021 	add	x1, x1, #0x28
   a1850:	91042020 	add	x0, x1, #0x108
   a1854:	52803f02 	mov	w2, #0x1f8                 	// #504
   a1858:	97ffeb8a 	bl	9c680 <assertion_failed>
   a185c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1860:	9100a021 	add	x1, x1, #0x28
   a1864:	9104a020 	add	x0, x1, #0x128
   a1868:	52803f22 	mov	w2, #0x1f9                 	// #505
   a186c:	97ffeb85 	bl	9c680 <assertion_failed>

00000000000a1870 <CSerialDevice::AvailableForRead()>:
   a1870:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1874:	910003fd 	mov	x29, sp
   a1878:	f9000bf3 	str	x19, [sp, #16]
   a187c:	aa0003f3 	mov	x19, x0
   a1880:	39408000 	ldrb	w0, [x0, #32]
   a1884:	340003a0 	cbz	w0, a18f8 <CSerialDevice::AvailableForRead()+0x88>
   a1888:	f9400660 	ldr	x0, [x19, #8]
   a188c:	b4000400 	cbz	x0, a190c <CSerialDevice::AvailableForRead()+0x9c>
   a1890:	b9517a60 	ldr	w0, [x19, #4472]
   a1894:	350002c0 	cbnz	w0, a18ec <CSerialDevice::AvailableForRead()+0x7c>
   a1898:	b9494a62 	ldr	w2, [x19, #2376]
   a189c:	b9494e61 	ldr	w1, [x19, #2380]
   a18a0:	6b01005f 	cmp	w2, w1
   a18a4:	b9494a61 	ldr	w1, [x19, #2376]
   a18a8:	54000122 	b.cs	a18cc <CSerialDevice::AvailableForRead()+0x5c>  // b.hs, b.nlast
   a18ac:	b9494e62 	ldr	w2, [x19, #2380]
   a18b0:	11200033 	add	w19, w1, #0x800
   a18b4:	4b020273 	sub	w19, w19, w2
   a18b8:	35000100 	cbnz	w0, a18d8 <CSerialDevice::AvailableForRead()+0x68>
   a18bc:	2a1303e0 	mov	w0, w19
   a18c0:	f9400bf3 	ldr	x19, [sp, #16]
   a18c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a18c8:	d65f03c0 	ret
   a18cc:	b9494e73 	ldr	w19, [x19, #2380]
   a18d0:	4b130033 	sub	w19, w1, w19
   a18d4:	34ffff40 	cbz	w0, a18bc <CSerialDevice::AvailableForRead()+0x4c>
   a18d8:	940012ae 	bl	a6390 <LeaveCritical>
   a18dc:	2a1303e0 	mov	w0, w19
   a18e0:	f9400bf3 	ldr	x19, [sp, #16]
   a18e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a18e8:	d65f03c0 	ret
   a18ec:	94001279 	bl	a62d0 <EnterCritical>
   a18f0:	b9517a60 	ldr	w0, [x19, #4472]
   a18f4:	17ffffe9 	b	a1898 <CSerialDevice::AvailableForRead()+0x28>
   a18f8:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a18fc:	9100a021 	add	x1, x1, #0x28
   a1900:	91042020 	add	x0, x1, #0x108
   a1904:	528041c2 	mov	w2, #0x20e                 	// #526
   a1908:	97ffeb5e 	bl	9c680 <assertion_failed>
   a190c:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1910:	9100a021 	add	x1, x1, #0x28
   a1914:	9104a020 	add	x0, x1, #0x128
   a1918:	528041e2 	mov	w2, #0x20f                 	// #527
   a191c:	97ffeb59 	bl	9c680 <assertion_failed>

00000000000a1920 <CSerialDevice::Peek()>:
   a1920:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1924:	910003fd 	mov	x29, sp
   a1928:	a90153f3 	stp	x19, x20, [sp, #16]
   a192c:	aa0003f3 	mov	x19, x0
   a1930:	39408000 	ldrb	w0, [x0, #32]
   a1934:	340003e0 	cbz	w0, a19b0 <CSerialDevice::Peek()+0x90>
   a1938:	f9400660 	ldr	x0, [x19, #8]
   a193c:	b4000440 	cbz	x0, a19c4 <CSerialDevice::Peek()+0xa4>
   a1940:	b9517a60 	ldr	w0, [x19, #4472]
   a1944:	35000180 	cbnz	w0, a1974 <CSerialDevice::Peek()+0x54>
   a1948:	b9494a60 	ldr	w0, [x19, #2376]
   a194c:	b9494e61 	ldr	w1, [x19, #2380]
   a1950:	6b00003f 	cmp	w1, w0
   a1954:	54000420 	b.eq	a19d8 <CSerialDevice::Peek()+0xb8>  // b.none
   a1958:	b9494e60 	ldr	w0, [x19, #2380]
   a195c:	8b204273 	add	x19, x19, w0, uxtw
   a1960:	39452274 	ldrb	w20, [x19, #328]
   a1964:	2a1403e0 	mov	w0, w20
   a1968:	a94153f3 	ldp	x19, x20, [sp, #16]
   a196c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1970:	d65f03c0 	ret
   a1974:	94001257 	bl	a62d0 <EnterCritical>
   a1978:	b9494a61 	ldr	w1, [x19, #2376]
   a197c:	b9494e60 	ldr	w0, [x19, #2380]
   a1980:	6b00003f 	cmp	w1, w0
   a1984:	540002e0 	b.eq	a19e0 <CSerialDevice::Peek()+0xc0>  // b.none
   a1988:	b9494e60 	ldr	w0, [x19, #2380]
   a198c:	8b204260 	add	x0, x19, w0, uxtw
   a1990:	39452014 	ldrb	w20, [x0, #328]
   a1994:	b9517a60 	ldr	w0, [x19, #4472]
   a1998:	34fffe60 	cbz	w0, a1964 <CSerialDevice::Peek()+0x44>
   a199c:	9400127d 	bl	a6390 <LeaveCritical>
   a19a0:	2a1403e0 	mov	w0, w20
   a19a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a19a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a19ac:	d65f03c0 	ret
   a19b0:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a19b4:	9100a021 	add	x1, x1, #0x28
   a19b8:	91042020 	add	x0, x1, #0x108
   a19bc:	52804482 	mov	w2, #0x224                 	// #548
   a19c0:	97ffeb30 	bl	9c680 <assertion_failed>
   a19c4:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a19c8:	9100a021 	add	x1, x1, #0x28
   a19cc:	9104a020 	add	x0, x1, #0x128
   a19d0:	528044a2 	mov	w2, #0x225                 	// #549
   a19d4:	97ffeb2b 	bl	9c680 <assertion_failed>
   a19d8:	12800014 	mov	w20, #0xffffffff            	// #-1
   a19dc:	17ffffe2 	b	a1964 <CSerialDevice::Peek()+0x44>
   a19e0:	b9517a60 	ldr	w0, [x19, #4472]
   a19e4:	12800014 	mov	w20, #0xffffffff            	// #-1
   a19e8:	35fffda0 	cbnz	w0, a199c <CSerialDevice::Peek()+0x7c>
   a19ec:	17ffffde 	b	a1964 <CSerialDevice::Peek()+0x44>

00000000000a19f0 <CSerialDevice::Flush()>:
   a19f0:	f9400c01 	ldr	x1, [x0, #24]
   a19f4:	91006021 	add	x1, x1, #0x18
   a19f8:	b9400020 	ldr	w0, [x1]
   a19fc:	371fffe0 	tbnz	w0, #3, a19f8 <CSerialDevice::Flush()+0x8>
   a1a00:	d65f03c0 	ret
   a1a04:	d503201f 	nop
   a1a08:	d503201f 	nop
   a1a0c:	d503201f 	nop

00000000000a1a10 <CSerialDevice::Write(unsigned char)>:
   a1a10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1a14:	910003fd 	mov	x29, sp
   a1a18:	a90153f3 	stp	x19, x20, [sp, #16]
   a1a1c:	aa0003f3 	mov	x19, x0
   a1a20:	f9400400 	ldr	x0, [x0, #8]
   a1a24:	f90013f5 	str	x21, [sp, #32]
   a1a28:	12001c35 	and	w21, w1, #0xff
   a1a2c:	b4000460 	cbz	x0, a1ab8 <CSerialDevice::Write(unsigned char)+0xa8>
   a1a30:	b9517a63 	ldr	w3, [x19, #4472]
   a1a34:	350002e3 	cbnz	w3, a1a90 <CSerialDevice::Write(unsigned char)+0x80>
   a1a38:	b9515662 	ldr	w2, [x19, #4436]
   a1a3c:	b9515a60 	ldr	w0, [x19, #4440]
   a1a40:	11000442 	add	w2, w2, #0x1
   a1a44:	12002842 	and	w2, w2, #0x7ff
   a1a48:	6b00005f 	cmp	w2, w0
   a1a4c:	54000520 	b.eq	a1af0 <CSerialDevice::Write(unsigned char)+0xe0>  // b.none
   a1a50:	b9515662 	ldr	w2, [x19, #4436]
   a1a54:	52800034 	mov	w20, #0x1                   	// #1
   a1a58:	8b224260 	add	x0, x19, w2, uxtw
   a1a5c:	0b140042 	add	w2, w2, w20
   a1a60:	b9115662 	str	w2, [x19, #4436]
   a1a64:	39255015 	strb	w21, [x0, #2388]
   a1a68:	b9515660 	ldr	w0, [x19, #4436]
   a1a6c:	12002800 	and	w0, w0, #0x7ff
   a1a70:	b9115660 	str	w0, [x19, #4436]
   a1a74:	34000043 	cbz	w3, a1a7c <CSerialDevice::Write(unsigned char)+0x6c>
   a1a78:	94001246 	bl	a6390 <LeaveCritical>
   a1a7c:	2a1403e0 	mov	w0, w20
   a1a80:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1a84:	f94013f5 	ldr	x21, [sp, #32]
   a1a88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1a8c:	d65f03c0 	ret
   a1a90:	2a0303e0 	mov	w0, w3
   a1a94:	9400120f 	bl	a62d0 <EnterCritical>
   a1a98:	b9515660 	ldr	w0, [x19, #4436]
   a1a9c:	b9515a61 	ldr	w1, [x19, #4440]
   a1aa0:	11000400 	add	w0, w0, #0x1
   a1aa4:	12002800 	and	w0, w0, #0x7ff
   a1aa8:	6b01001f 	cmp	w0, w1
   a1aac:	540001c0 	b.eq	a1ae4 <CSerialDevice::Write(unsigned char)+0xd4>  // b.none
   a1ab0:	b9517a63 	ldr	w3, [x19, #4472]
   a1ab4:	17ffffe7 	b	a1a50 <CSerialDevice::Write(unsigned char)+0x40>
   a1ab8:	f9400e61 	ldr	x1, [x19, #24]
   a1abc:	91006022 	add	x2, x1, #0x18
   a1ac0:	b9400040 	ldr	w0, [x2]
   a1ac4:	372fffe0 	tbnz	w0, #5, a1ac0 <CSerialDevice::Write(unsigned char)+0xb0>
   a1ac8:	52800034 	mov	w20, #0x1                   	// #1
   a1acc:	b9000035 	str	w21, [x1]
   a1ad0:	2a1403e0 	mov	w0, w20
   a1ad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1ad8:	f94013f5 	ldr	x21, [sp, #32]
   a1adc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1ae0:	d65f03c0 	ret
   a1ae4:	b9517a63 	ldr	w3, [x19, #4472]
   a1ae8:	52800014 	mov	w20, #0x0                   	// #0
   a1aec:	17ffffe2 	b	a1a74 <CSerialDevice::Write(unsigned char)+0x64>
   a1af0:	52800014 	mov	w20, #0x0                   	// #0
   a1af4:	f94013f5 	ldr	x21, [sp, #32]
   a1af8:	2a1403e0 	mov	w0, w20
   a1afc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1b00:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1b04:	d65f03c0 	ret
   a1b08:	d503201f 	nop
   a1b0c:	d503201f 	nop

00000000000a1b10 <CSerialDevice::InterruptHandler()>:
   a1b10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1b14:	910003fd 	mov	x29, sp
   a1b18:	a90153f3 	stp	x19, x20, [sp, #16]
   a1b1c:	aa0003f3 	mov	x19, x0
   a1b20:	b9517800 	ldr	w0, [x0, #4472]
   a1b24:	35000c00 	cbnz	w0, a1ca4 <CSerialDevice::InterruptHandler()+0x194>
   a1b28:	f9400e62 	ldr	x2, [x19, #24]
   a1b2c:	52800014 	mov	w20, #0x0                   	// #0
   a1b30:	b9404040 	ldr	w0, [x2, #64]
   a1b34:	91006043 	add	x3, x2, #0x18
   a1b38:	b9004440 	str	w0, [x2, #68]
   a1b3c:	b9401840 	ldr	w0, [x2, #24]
   a1b40:	37200460 	tbnz	w0, #4, a1bcc <CSerialDevice::InterruptHandler()+0xbc>
   a1b44:	f948b265 	ldr	x5, [x19, #4448]
   a1b48:	52800014 	mov	w20, #0x0                   	// #0
   a1b4c:	12800049 	mov	w9, #0xfffffffd            	// #-3
   a1b50:	12800026 	mov	w6, #0xfffffffe            	// #-2
   a1b54:	12800007 	mov	w7, #0xffffffff            	// #-1
   a1b58:	52800028 	mov	w8, #0x1                   	// #1
   a1b5c:	d503201f 	nop
   a1b60:	b9400041 	ldr	w1, [x2]
   a1b64:	365006e1 	tbz	w1, #10, a1c40 <CSerialDevice::InterruptHandler()+0x130>
   a1b68:	b9495260 	ldr	w0, [x19, #2384]
   a1b6c:	35000040 	cbnz	w0, a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1b70:	b9095267 	str	w7, [x19, #2384]
   a1b74:	b40000c5 	cbz	x5, a1b8c <CSerialDevice::InterruptHandler()+0x7c>
   a1b78:	f948b660 	ldr	x0, [x19, #4456]
   a1b7c:	39c00004 	ldrsb	w4, [x0]
   a1b80:	6b21809f 	cmp	w4, w1, sxtb
   a1b84:	540007a0 	b.eq	a1c78 <CSerialDevice::InterruptHandler()+0x168>  // b.none
   a1b88:	f908b665 	str	x5, [x19, #4456]
   a1b8c:	b9494a60 	ldr	w0, [x19, #2376]
   a1b90:	b9494e64 	ldr	w4, [x19, #2380]
   a1b94:	11000400 	add	w0, w0, #0x1
   a1b98:	12002800 	and	w0, w0, #0x7ff
   a1b9c:	6b04001f 	cmp	w0, w4
   a1ba0:	540005a0 	b.eq	a1c54 <CSerialDevice::InterruptHandler()+0x144>  // b.none
   a1ba4:	b9494a60 	ldr	w0, [x19, #2376]
   a1ba8:	8b204264 	add	x4, x19, w0, uxtw
   a1bac:	11000400 	add	w0, w0, #0x1
   a1bb0:	b9094a60 	str	w0, [x19, #2376]
   a1bb4:	39052081 	strb	w1, [x4, #328]
   a1bb8:	b9494a60 	ldr	w0, [x19, #2376]
   a1bbc:	12002800 	and	w0, w0, #0x7ff
   a1bc0:	b9094a60 	str	w0, [x19, #2376]
   a1bc4:	b9400060 	ldr	w0, [x3]
   a1bc8:	3627fcc0 	tbz	w0, #4, a1b60 <CSerialDevice::InterruptHandler()+0x50>
   a1bcc:	b9401840 	ldr	w0, [x2, #24]
   a1bd0:	362801a0 	tbz	w0, #5, a1c04 <CSerialDevice::InterruptHandler()+0xf4>
   a1bd4:	14000013 	b	a1c20 <CSerialDevice::InterruptHandler()+0x110>
   a1bd8:	b9515a60 	ldr	w0, [x19, #4440]
   a1bdc:	8b204261 	add	x1, x19, w0, uxtw
   a1be0:	11000400 	add	w0, w0, #0x1
   a1be4:	b9115a60 	str	w0, [x19, #4440]
   a1be8:	39655020 	ldrb	w0, [x1, #2388]
   a1bec:	b9000040 	str	w0, [x2]
   a1bf0:	b9515a60 	ldr	w0, [x19, #4440]
   a1bf4:	12002800 	and	w0, w0, #0x7ff
   a1bf8:	b9115a60 	str	w0, [x19, #4440]
   a1bfc:	b9400060 	ldr	w0, [x3]
   a1c00:	37280100 	tbnz	w0, #5, a1c20 <CSerialDevice::InterruptHandler()+0x110>
   a1c04:	b9515661 	ldr	w1, [x19, #4436]
   a1c08:	b9515a60 	ldr	w0, [x19, #4440]
   a1c0c:	6b00003f 	cmp	w1, w0
   a1c10:	54fffe41 	b.ne	a1bd8 <CSerialDevice::InterruptHandler()+0xc8>  // b.any
   a1c14:	b9403840 	ldr	w0, [x2, #56]
   a1c18:	121a7800 	and	w0, w0, #0xffffffdf
   a1c1c:	b9003840 	str	w0, [x2, #56]
   a1c20:	b9517a60 	ldr	w0, [x19, #4472]
   a1c24:	350003c0 	cbnz	w0, a1c9c <CSerialDevice::InterruptHandler()+0x18c>
   a1c28:	34000354 	cbz	w20, a1c90 <CSerialDevice::InterruptHandler()+0x180>
   a1c2c:	f948ba60 	ldr	x0, [x19, #4464]
   a1c30:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1c34:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1c38:	aa0003f0 	mov	x16, x0
   a1c3c:	d61f0200 	br	x16
   a1c40:	36580121 	tbz	w1, #11, a1c64 <CSerialDevice::InterruptHandler()+0x154>
   a1c44:	b9495260 	ldr	w0, [x19, #2384]
   a1c48:	35fff960 	cbnz	w0, a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1c4c:	b9095266 	str	w6, [x19, #2384]
   a1c50:	17ffffc9 	b	a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1c54:	b9495260 	ldr	w0, [x19, #2384]
   a1c58:	35fffb60 	cbnz	w0, a1bc4 <CSerialDevice::InterruptHandler()+0xb4>
   a1c5c:	b9095266 	str	w6, [x19, #2384]
   a1c60:	17ffffd9 	b	a1bc4 <CSerialDevice::InterruptHandler()+0xb4>
   a1c64:	3647f881 	tbz	w1, #8, a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1c68:	b9495260 	ldr	w0, [x19, #2384]
   a1c6c:	35fff840 	cbnz	w0, a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1c70:	b9095269 	str	w9, [x19, #2384]
   a1c74:	17ffffc0 	b	a1b74 <CSerialDevice::InterruptHandler()+0x64>
   a1c78:	91000404 	add	x4, x0, #0x1
   a1c7c:	f908b664 	str	x4, [x19, #4456]
   a1c80:	39c00400 	ldrsb	w0, [x0, #1]
   a1c84:	7100001f 	cmp	w0, #0x0
   a1c88:	1a881294 	csel	w20, w20, w8, ne  // ne = any
   a1c8c:	17ffffc0 	b	a1b8c <CSerialDevice::InterruptHandler()+0x7c>
   a1c90:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1c94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1c98:	d65f03c0 	ret
   a1c9c:	940011bd 	bl	a6390 <LeaveCritical>
   a1ca0:	17ffffe2 	b	a1c28 <CSerialDevice::InterruptHandler()+0x118>
   a1ca4:	9400118b 	bl	a62d0 <EnterCritical>
   a1ca8:	17ffffa0 	b	a1b28 <CSerialDevice::InterruptHandler()+0x18>
   a1cac:	d503201f 	nop

00000000000a1cb0 <CSerialDevice::InterruptStub(void*)>:
   a1cb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a1cb4:	910003fd 	mov	x29, sp
   a1cb8:	a90153f3 	stp	x19, x20, [sp, #16]
   a1cbc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1cc0:	d5033fbf 	dmb	sy
   a1cc4:	b00000b6 	adrp	x22, b6000 <s_OldInfo+0x68>
   a1cc8:	913b62d6 	add	x22, x22, #0xed8
   a1ccc:	b94016d4 	ldr	w20, [x22, #20]
   a1cd0:	34000234 	cbz	w20, a1d14 <CSerialDevice::InterruptStub(void*)+0x64>
   a1cd4:	910062d6 	add	x22, x22, #0x18
   a1cd8:	52800013 	mov	w19, #0x0                   	// #0
   a1cdc:	f9001bf7 	str	x23, [sp, #48]
   a1ce0:	52800037 	mov	w23, #0x1                   	// #1
   a1ce4:	d503201f 	nop
   a1ce8:	1ad322f5 	lsl	w21, w23, w19
   a1cec:	6a1402bf 	tst	w21, w20
   a1cf0:	54000080 	b.eq	a1d00 <CSerialDevice::InterruptStub(void*)+0x50>  // b.none
   a1cf4:	f8735ac0 	ldr	x0, [x22, w19, uxtw #3]
   a1cf8:	b4000160 	cbz	x0, a1d24 <CSerialDevice::InterruptStub(void*)+0x74>
   a1cfc:	97ffff85 	bl	a1b10 <CSerialDevice::InterruptHandler()>
   a1d00:	11000673 	add	w19, w19, #0x1
   a1d04:	6a350294 	bics	w20, w20, w21
   a1d08:	7a451a62 	ccmp	w19, #0x5, #0x2, ne  // ne = any
   a1d0c:	54fffee9 	b.ls	a1ce8 <CSerialDevice::InterruptStub(void*)+0x38>  // b.plast
   a1d10:	f9401bf7 	ldr	x23, [sp, #48]
   a1d14:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1d18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1d1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1d20:	d65f03c0 	ret
   a1d24:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1d28:	9100a021 	add	x1, x1, #0x28
   a1d2c:	91060020 	add	x0, x1, #0x180
   a1d30:	52805922 	mov	w2, #0x2c9                 	// #713
   a1d34:	97ffea53 	bl	9c680 <assertion_failed>
	...

00000000000a1d40 <CString::~CString()>:
   a1d40:	aa0003e1 	mov	x1, x0
   a1d44:	d0000082 	adrp	x2, b3000 <vtable for CSerialDevice+0x18>
   a1d48:	9107a042 	add	x2, x2, #0x1e8
   a1d4c:	f9400400 	ldr	x0, [x0, #8]
   a1d50:	f9000022 	str	x2, [x1]
   a1d54:	b4000040 	cbz	x0, a1d5c <CString::~CString()+0x1c>
   a1d58:	14000e62 	b	a56e0 <operator delete[](void*)>
   a1d5c:	d65f03c0 	ret

00000000000a1d60 <CString::~CString()>:
   a1d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1d64:	910003fd 	mov	x29, sp
   a1d68:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1d6c:	9107a021 	add	x1, x1, #0x1e8
   a1d70:	f9000bf3 	str	x19, [sp, #16]
   a1d74:	aa0003f3 	mov	x19, x0
   a1d78:	f9400400 	ldr	x0, [x0, #8]
   a1d7c:	f9000261 	str	x1, [x19]
   a1d80:	b4000040 	cbz	x0, a1d88 <CString::~CString()+0x28>
   a1d84:	94000e57 	bl	a56e0 <operator delete[](void*)>
   a1d88:	aa1303e0 	mov	x0, x19
   a1d8c:	d2800401 	mov	x1, #0x20                  	// #32
   a1d90:	f9400bf3 	ldr	x19, [sp, #16]
   a1d94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1d98:	14000e5e 	b	a5710 <operator delete(void*, unsigned long)>
   a1d9c:	d503201f 	nop

00000000000a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   a1da0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1da4:	910003fd 	mov	x29, sp
   a1da8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1dac:	f9400402 	ldr	x2, [x0, #8]
   a1db0:	a90153f3 	stp	x19, x20, [sp, #16]
   a1db4:	aa0003f3 	mov	x19, x0
   a1db8:	f9400c15 	ldr	x21, [x0, #24]
   a1dbc:	b9401000 	ldr	w0, [x0, #16]
   a1dc0:	cb0202b5 	sub	x21, x21, x2
   a1dc4:	8b0102a1 	add	x1, x21, x1
   a1dc8:	91000422 	add	x2, x1, #0x1
   a1dcc:	eb00005f 	cmp	x2, x0
   a1dd0:	540000a8 	b.hi	a1de4 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x44>  // b.pmore
   a1dd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1dd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1ddc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1de0:	d65f03c0 	ret
   a1de4:	91010434 	add	x20, x1, #0x41
   a1de8:	aa1403e0 	mov	x0, x20
   a1dec:	94000e2d 	bl	a56a0 <operator new[](unsigned long)>
   a1df0:	f9400e61 	ldr	x1, [x19, #24]
   a1df4:	aa0003f6 	mov	x22, x0
   a1df8:	3900003f 	strb	wzr, [x1]
   a1dfc:	f9400661 	ldr	x1, [x19, #8]
   a1e00:	94000a74 	bl	a47d0 <strcpy>
   a1e04:	f9400660 	ldr	x0, [x19, #8]
   a1e08:	b4000040 	cbz	x0, a1e10 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   a1e0c:	94000e35 	bl	a56e0 <operator delete[](void*)>
   a1e10:	8b1502d5 	add	x21, x22, x21
   a1e14:	f9000676 	str	x22, [x19, #8]
   a1e18:	b9001274 	str	w20, [x19, #16]
   a1e1c:	f9000e75 	str	x21, [x19, #24]
   a1e20:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1e24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1e28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1e2c:	d65f03c0 	ret

00000000000a1e30 <CString::CString()>:
   a1e30:	d0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a1e34:	9107a021 	add	x1, x1, #0x1e8
   a1e38:	b900101f 	str	wzr, [x0, #16]
   a1e3c:	a9007c01 	stp	x1, xzr, [x0]
   a1e40:	d65f03c0 	ret
   a1e44:	d503201f 	nop
   a1e48:	d503201f 	nop
   a1e4c:	d503201f 	nop

00000000000a1e50 <CString::CString(char const*)>:
   a1e50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1e54:	910003fd 	mov	x29, sp
   a1e58:	d0000082 	adrp	x2, b3000 <vtable for CSerialDevice+0x18>
   a1e5c:	9107a042 	add	x2, x2, #0x1e8
   a1e60:	a90153f3 	stp	x19, x20, [sp, #16]
   a1e64:	aa0003f3 	mov	x19, x0
   a1e68:	aa0103e0 	mov	x0, x1
   a1e6c:	aa0103f4 	mov	x20, x1
   a1e70:	f9000262 	str	x2, [x19]
   a1e74:	940009c7 	bl	a4590 <strlen>
   a1e78:	11000400 	add	w0, w0, #0x1
   a1e7c:	b9001260 	str	w0, [x19, #16]
   a1e80:	94000e08 	bl	a56a0 <operator new[](unsigned long)>
   a1e84:	aa1403e1 	mov	x1, x20
   a1e88:	f9000660 	str	x0, [x19, #8]
   a1e8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1e90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1e94:	14000a4f 	b	a47d0 <strcpy>
   a1e98:	d503201f 	nop
   a1e9c:	d503201f 	nop

00000000000a1ea0 <CString::operator char const*() const>:
   a1ea0:	f9400400 	ldr	x0, [x0, #8]
   a1ea4:	f0000041 	adrp	x1, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a1ea8:	9126c021 	add	x1, x1, #0x9b0
   a1eac:	f100001f 	cmp	x0, #0x0
   a1eb0:	9a800020 	csel	x0, x1, x0, eq  // eq = none
   a1eb4:	d65f03c0 	ret
   a1eb8:	d503201f 	nop
   a1ebc:	d503201f 	nop

00000000000a1ec0 <CString::operator=(char const*)>:
   a1ec0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1ec4:	910003fd 	mov	x29, sp
   a1ec8:	a90153f3 	stp	x19, x20, [sp, #16]
   a1ecc:	aa0003f3 	mov	x19, x0
   a1ed0:	aa0103f4 	mov	x20, x1
   a1ed4:	f9400400 	ldr	x0, [x0, #8]
   a1ed8:	b4000040 	cbz	x0, a1ee0 <CString::operator=(char const*)+0x20>
   a1edc:	94000e01 	bl	a56e0 <operator delete[](void*)>
   a1ee0:	aa1403e0 	mov	x0, x20
   a1ee4:	940009ab 	bl	a4590 <strlen>
   a1ee8:	11000400 	add	w0, w0, #0x1
   a1eec:	b9001260 	str	w0, [x19, #16]
   a1ef0:	94000dec 	bl	a56a0 <operator new[](unsigned long)>
   a1ef4:	aa1403e1 	mov	x1, x20
   a1ef8:	f9000660 	str	x0, [x19, #8]
   a1efc:	94000a35 	bl	a47d0 <strcpy>
   a1f00:	f9400660 	ldr	x0, [x19, #8]
   a1f04:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1f08:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1f0c:	d65f03c0 	ret

00000000000a1f10 <CString::operator=(CString const&)>:
   a1f10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1f14:	910003fd 	mov	x29, sp
   a1f18:	a90153f3 	stp	x19, x20, [sp, #16]
   a1f1c:	aa0003f3 	mov	x19, x0
   a1f20:	f9400400 	ldr	x0, [x0, #8]
   a1f24:	f90013f5 	str	x21, [sp, #32]
   a1f28:	aa0103f5 	mov	x21, x1
   a1f2c:	b4000040 	cbz	x0, a1f34 <CString::operator=(CString const&)+0x24>
   a1f30:	94000dec 	bl	a56e0 <operator delete[](void*)>
   a1f34:	f94006a0 	ldr	x0, [x21, #8]
   a1f38:	f0000054 	adrp	x20, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a1f3c:	9126c294 	add	x20, x20, #0x9b0
   a1f40:	f100001f 	cmp	x0, #0x0
   a1f44:	9a800280 	csel	x0, x20, x0, eq  // eq = none
   a1f48:	94000992 	bl	a4590 <strlen>
   a1f4c:	11000400 	add	w0, w0, #0x1
   a1f50:	b9001260 	str	w0, [x19, #16]
   a1f54:	94000dd3 	bl	a56a0 <operator new[](unsigned long)>
   a1f58:	f9000660 	str	x0, [x19, #8]
   a1f5c:	f94006a1 	ldr	x1, [x21, #8]
   a1f60:	f100003f 	cmp	x1, #0x0
   a1f64:	9a810281 	csel	x1, x20, x1, eq  // eq = none
   a1f68:	94000a1a 	bl	a47d0 <strcpy>
   a1f6c:	aa1303e0 	mov	x0, x19
   a1f70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1f74:	f94013f5 	ldr	x21, [sp, #32]
   a1f78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1f7c:	d65f03c0 	ret

00000000000a1f80 <CString::GetLength() const>:
   a1f80:	f9400400 	ldr	x0, [x0, #8]
   a1f84:	b4000040 	cbz	x0, a1f8c <CString::GetLength() const+0xc>
   a1f88:	14000982 	b	a4590 <strlen>
   a1f8c:	d2800000 	mov	x0, #0x0                   	// #0
   a1f90:	d65f03c0 	ret
   a1f94:	d503201f 	nop
   a1f98:	d503201f 	nop
   a1f9c:	d503201f 	nop

00000000000a1fa0 <CString::Append(char const*)>:
   a1fa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1fa4:	910003fd 	mov	x29, sp
   a1fa8:	52800022 	mov	w2, #0x1                   	// #1
   a1fac:	a90153f3 	stp	x19, x20, [sp, #16]
   a1fb0:	aa0003f3 	mov	x19, x0
   a1fb4:	f9400400 	ldr	x0, [x0, #8]
   a1fb8:	f90013f5 	str	x21, [sp, #32]
   a1fbc:	aa0103f5 	mov	x21, x1
   a1fc0:	b9001262 	str	w2, [x19, #16]
   a1fc4:	b40000a0 	cbz	x0, a1fd8 <CString::Append(char const*)+0x38>
   a1fc8:	94000972 	bl	a4590 <strlen>
   a1fcc:	b9401261 	ldr	w1, [x19, #16]
   a1fd0:	0b000021 	add	w1, w1, w0
   a1fd4:	b9001261 	str	w1, [x19, #16]
   a1fd8:	aa1503e0 	mov	x0, x21
   a1fdc:	9400096d 	bl	a4590 <strlen>
   a1fe0:	b9401261 	ldr	w1, [x19, #16]
   a1fe4:	0b000020 	add	w0, w1, w0
   a1fe8:	b9001260 	str	w0, [x19, #16]
   a1fec:	94000dad 	bl	a56a0 <operator new[](unsigned long)>
   a1ff0:	f9400661 	ldr	x1, [x19, #8]
   a1ff4:	aa0003f4 	mov	x20, x0
   a1ff8:	b40001a1 	cbz	x1, a202c <CString::Append(char const*)+0x8c>
   a1ffc:	940009f5 	bl	a47d0 <strcpy>
   a2000:	f9400660 	ldr	x0, [x19, #8]
   a2004:	b4000040 	cbz	x0, a200c <CString::Append(char const*)+0x6c>
   a2008:	94000db6 	bl	a56e0 <operator delete[](void*)>
   a200c:	aa1503e1 	mov	x1, x21
   a2010:	aa1403e0 	mov	x0, x20
   a2014:	94000a07 	bl	a4830 <strcat>
   a2018:	f94013f5 	ldr	x21, [sp, #32]
   a201c:	f9000674 	str	x20, [x19, #8]
   a2020:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2024:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2028:	d65f03c0 	ret
   a202c:	aa1503e1 	mov	x1, x21
   a2030:	3900001f 	strb	wzr, [x0]
   a2034:	aa1403e0 	mov	x0, x20
   a2038:	940009fe 	bl	a4830 <strcat>
   a203c:	f94013f5 	ldr	x21, [sp, #32]
   a2040:	f9000674 	str	x20, [x19, #8]
   a2044:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2048:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a204c:	d65f03c0 	ret

00000000000a2050 <CString::Compare(char const*) const>:
   a2050:	f9400400 	ldr	x0, [x0, #8]
   a2054:	1400095b 	b	a45c0 <strcmp>
   a2058:	d503201f 	nop
   a205c:	d503201f 	nop

00000000000a2060 <CString::Find(char) const>:
   a2060:	f9400403 	ldr	x3, [x0, #8]
   a2064:	13001c21 	sxtb	w1, w1
   a2068:	39c00060 	ldrsb	w0, [x3]
   a206c:	34000140 	cbz	w0, a2094 <CString::Find(char) const+0x34>
   a2070:	d2800002 	mov	x2, #0x0                   	// #0
   a2074:	14000003 	b	a2080 <CString::Find(char) const+0x20>
   a2078:	38e26860 	ldrsb	w0, [x3, x2]
   a207c:	340000c0 	cbz	w0, a2094 <CString::Find(char) const+0x34>
   a2080:	6b00003f 	cmp	w1, w0
   a2084:	2a0203e0 	mov	w0, w2
   a2088:	91000442 	add	x2, x2, #0x1
   a208c:	54ffff61 	b.ne	a2078 <CString::Find(char) const+0x18>  // b.any
   a2090:	d65f03c0 	ret
   a2094:	12800000 	mov	w0, #0xffffffff            	// #-1
   a2098:	d65f03c0 	ret
   a209c:	d503201f 	nop

00000000000a20a0 <CString::PutChar(char, unsigned long)>:
   a20a0:	b40002e2 	cbz	x2, a20fc <CString::PutChar(char, unsigned long)+0x5c>
   a20a4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a20a8:	910003fd 	mov	x29, sp
   a20ac:	f90013f5 	str	x21, [sp, #32]
   a20b0:	13001c35 	sxtb	w21, w1
   a20b4:	aa0203e1 	mov	x1, x2
   a20b8:	a90153f3 	stp	x19, x20, [sp, #16]
   a20bc:	aa0203f3 	mov	x19, x2
   a20c0:	aa0003f4 	mov	x20, x0
   a20c4:	97ffff37 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a20c8:	d1000661 	sub	x1, x19, #0x1
   a20cc:	d503201f 	nop
   a20d0:	f9400e82 	ldr	x2, [x20, #24]
   a20d4:	d1000421 	sub	x1, x1, #0x1
   a20d8:	b100043f 	cmn	x1, #0x1
   a20dc:	91000440 	add	x0, x2, #0x1
   a20e0:	f9000e80 	str	x0, [x20, #24]
   a20e4:	39000055 	strb	w21, [x2]
   a20e8:	54ffff41 	b.ne	a20d0 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   a20ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a20f0:	f94013f5 	ldr	x21, [sp, #32]
   a20f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a20f8:	d65f03c0 	ret
   a20fc:	d65f03c0 	ret

00000000000a2100 <CString::PutString(char const*)>:
   a2100:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2104:	910003fd 	mov	x29, sp
   a2108:	a90153f3 	stp	x19, x20, [sp, #16]
   a210c:	aa0003f3 	mov	x19, x0
   a2110:	aa0103e0 	mov	x0, x1
   a2114:	f90013f5 	str	x21, [sp, #32]
   a2118:	aa0103f5 	mov	x21, x1
   a211c:	9400091d 	bl	a4590 <strlen>
   a2120:	aa0003f4 	mov	x20, x0
   a2124:	b4000080 	cbz	x0, a2134 <CString::PutString(char const*)+0x34>
   a2128:	aa0003e1 	mov	x1, x0
   a212c:	aa1303e0 	mov	x0, x19
   a2130:	97ffff1c 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2134:	aa1503e1 	mov	x1, x21
   a2138:	f9400e60 	ldr	x0, [x19, #24]
   a213c:	940009a5 	bl	a47d0 <strcpy>
   a2140:	f9400e60 	ldr	x0, [x19, #24]
   a2144:	f94013f5 	ldr	x21, [sp, #32]
   a2148:	8b140014 	add	x20, x0, x20
   a214c:	f9000e74 	str	x20, [x19, #24]
   a2150:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2154:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2158:	d65f03c0 	ret
   a215c:	d503201f 	nop

00000000000a2160 <CString::Replace(char const*, char const*)>:
   a2160:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a2164:	910003fd 	mov	x29, sp
   a2168:	a9025bf5 	stp	x21, x22, [sp, #32]
   a216c:	aa0103f5 	mov	x21, x1
   a2170:	52800016 	mov	w22, #0x0                   	// #0
   a2174:	39c00021 	ldrsb	w1, [x1]
   a2178:	350000a1 	cbnz	w1, a218c <CString::Replace(char const*, char const*)+0x2c>
   a217c:	2a1603e0 	mov	w0, w22
   a2180:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2184:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a2188:	d65f03c0 	ret
   a218c:	a90153f3 	stp	x19, x20, [sp, #16]
   a2190:	aa0003f4 	mov	x20, x0
   a2194:	910143e0 	add	x0, sp, #0x50
   a2198:	f9400681 	ldr	x1, [x20, #8]
   a219c:	a90363f7 	stp	x23, x24, [sp, #48]
   a21a0:	aa0203f7 	mov	x23, x2
   a21a4:	f90023f9 	str	x25, [sp, #64]
   a21a8:	97ffff2a 	bl	a1e50 <CString::CString(char const*)>
   a21ac:	f9400680 	ldr	x0, [x20, #8]
   a21b0:	b4000040 	cbz	x0, a21b8 <CString::Replace(char const*, char const*)+0x58>
   a21b4:	94000d4b 	bl	a56e0 <operator delete[](void*)>
   a21b8:	52800801 	mov	w1, #0x40                  	// #64
   a21bc:	d2800800 	mov	x0, #0x40                  	// #64
   a21c0:	52800016 	mov	w22, #0x0                   	// #0
   a21c4:	b9001281 	str	w1, [x20, #16]
   a21c8:	94000d36 	bl	a56a0 <operator new[](unsigned long)>
   a21cc:	f9402ff8 	ldr	x24, [sp, #88]
   a21d0:	f9000680 	str	x0, [x20, #8]
   a21d4:	f9000e80 	str	x0, [x20, #24]
   a21d8:	39c002a1 	ldrsb	w1, [x21]
   a21dc:	aa1803e0 	mov	x0, x24
   a21e0:	940009a4 	bl	a4870 <strchr>
   a21e4:	aa0003f3 	mov	x19, x0
   a21e8:	b4000360 	cbz	x0, a2254 <CString::Replace(char const*, char const*)+0xf4>
   a21ec:	eb00031f 	cmp	x24, x0
   a21f0:	54000563 	b.cc	a229c <CString::Replace(char const*, char const*)+0x13c>  // b.lo, b.ul, b.last
   a21f4:	39c006a4 	ldrsb	w4, [x21, #1]
   a21f8:	91000663 	add	x3, x19, #0x1
   a21fc:	910006a5 	add	x5, x21, #0x1
   a2200:	35000084 	cbnz	w4, a2210 <CString::Replace(char const*, char const*)+0xb0>
   a2204:	14000035 	b	a22d8 <CString::Replace(char const*, char const*)+0x178>
   a2208:	38c01ca4 	ldrsb	w4, [x5, #1]!
   a220c:	34000664 	cbz	w4, a22d8 <CString::Replace(char const*, char const*)+0x178>
   a2210:	39c00066 	ldrsb	w6, [x3]
   a2214:	91000463 	add	x3, x3, #0x1
   a2218:	6b0400df 	cmp	w6, w4
   a221c:	54ffff60 	b.eq	a2208 <CString::Replace(char const*, char const*)+0xa8>  // b.none
   a2220:	d2800021 	mov	x1, #0x1                   	// #1
   a2224:	aa1403e0 	mov	x0, x20
   a2228:	38c01713 	ldrsb	w19, [x24], #1
   a222c:	97fffedd 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2230:	f9400e80 	ldr	x0, [x20, #24]
   a2234:	91000401 	add	x1, x0, #0x1
   a2238:	f9000e81 	str	x1, [x20, #24]
   a223c:	39000013 	strb	w19, [x0]
   a2240:	aa1803e0 	mov	x0, x24
   a2244:	39c002a1 	ldrsb	w1, [x21]
   a2248:	9400098a 	bl	a4870 <strchr>
   a224c:	aa0003f3 	mov	x19, x0
   a2250:	b5fffce0 	cbnz	x0, a21ec <CString::Replace(char const*, char const*)+0x8c>
   a2254:	aa1803e1 	mov	x1, x24
   a2258:	aa1403e0 	mov	x0, x20
   a225c:	97ffffa9 	bl	a2100 <CString::PutString(char const*)>
   a2260:	f9400e81 	ldr	x1, [x20, #24]
   a2264:	b0000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a2268:	9107a000 	add	x0, x0, #0x1e8
   a226c:	3900003f 	strb	wzr, [x1]
   a2270:	f9002be0 	str	x0, [sp, #80]
   a2274:	f9402fe0 	ldr	x0, [sp, #88]
   a2278:	b40003c0 	cbz	x0, a22f0 <CString::Replace(char const*, char const*)+0x190>
   a227c:	94000d19 	bl	a56e0 <operator delete[](void*)>
   a2280:	2a1603e0 	mov	w0, w22
   a2284:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2288:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a228c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2290:	f94023f9 	ldr	x25, [sp, #64]
   a2294:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a2298:	d65f03c0 	ret
   a229c:	d2800021 	mov	x1, #0x1                   	// #1
   a22a0:	aa1403e0 	mov	x0, x20
   a22a4:	38c01719 	ldrsb	w25, [x24], #1
   a22a8:	97fffebe 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a22ac:	f9400e80 	ldr	x0, [x20, #24]
   a22b0:	eb18027f 	cmp	x19, x24
   a22b4:	91000401 	add	x1, x0, #0x1
   a22b8:	f9000e81 	str	x1, [x20, #24]
   a22bc:	39000019 	strb	w25, [x0]
   a22c0:	54fffee1 	b.ne	a229c <CString::Replace(char const*, char const*)+0x13c>  // b.any
   a22c4:	39c006a4 	ldrsb	w4, [x21, #1]
   a22c8:	aa1303f8 	mov	x24, x19
   a22cc:	91000663 	add	x3, x19, #0x1
   a22d0:	910006a5 	add	x5, x21, #0x1
   a22d4:	35fff9e4 	cbnz	w4, a2210 <CString::Replace(char const*, char const*)+0xb0>
   a22d8:	aa1703e1 	mov	x1, x23
   a22dc:	aa1403e0 	mov	x0, x20
   a22e0:	110006d6 	add	w22, w22, #0x1
   a22e4:	aa0303f8 	mov	x24, x3
   a22e8:	97ffff86 	bl	a2100 <CString::PutString(char const*)>
   a22ec:	17ffffbb 	b	a21d8 <CString::Replace(char const*, char const*)+0x78>
   a22f0:	2a1603e0 	mov	w0, w22
   a22f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a22f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a22fc:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2300:	f94023f9 	ldr	x25, [sp, #64]
   a2304:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a2308:	d65f03c0 	ret
   a230c:	d503201f 	nop

00000000000a2310 <CString::ReserveSpace(unsigned long)>:
   a2310:	b4000041 	cbz	x1, a2318 <CString::ReserveSpace(unsigned long)+0x8>
   a2314:	17fffea3 	b	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2318:	d65f03c0 	ret
   a231c:	d503201f 	nop

00000000000a2320 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   a2320:	eb22403f 	cmp	x1, w2, uxtw
   a2324:	12001c63 	and	w3, w3, #0xff
   a2328:	2a0203e2 	mov	w2, w2
   a232c:	d2800024 	mov	x4, #0x1                   	// #1
   a2330:	540003e3 	b.cc	a23ac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x8c>  // b.lo, b.ul, b.last
   a2334:	d503201f 	nop
   a2338:	9b027c84 	mul	x4, x4, x2
   a233c:	9ac40826 	udiv	x6, x1, x4
   a2340:	eb06005f 	cmp	x2, x6
   a2344:	aa0603e5 	mov	x5, x6
   a2348:	54ffff89 	b.ls	a2338 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.plast
   a234c:	7100007f 	cmp	w3, #0x0
   a2350:	52800408 	mov	w8, #0x20                  	// #32
   a2354:	1a8813e8 	csel	w8, wzr, w8, ne  // ne = any
   a2358:	12001d08 	and	w8, w8, #0xff
   a235c:	aa0003e7 	mov	x7, x0
   a2360:	1100dd08 	add	w8, w8, #0x37
   a2364:	14000004 	b	a2374 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   a2368:	9ac60825 	udiv	x5, x1, x6
   a236c:	aa0603e4 	mov	x4, x6
   a2370:	aa0503e6 	mov	x6, x5
   a2374:	12001ca3 	and	w3, w5, #0xff
   a2378:	f10024bf 	cmp	x5, #0x9
   a237c:	9b0484c1 	msub	x1, x6, x4, x1
   a2380:	1100c065 	add	w5, w3, #0x30
   a2384:	0b080063 	add	w3, w3, w8
   a2388:	9ac20886 	udiv	x6, x4, x2
   a238c:	13001ca5 	sxtb	w5, w5
   a2390:	13001c63 	sxtb	w3, w3
   a2394:	1a858063 	csel	w3, w3, w5, hi  // hi = pmore
   a2398:	eb04005f 	cmp	x2, x4
   a239c:	380014e3 	strb	w3, [x7], #1
   a23a0:	54fffe49 	b.ls	a2368 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>  // b.plast
   a23a4:	390000ff 	strb	wzr, [x7]
   a23a8:	d65f03c0 	ret
   a23ac:	aa0103e5 	mov	x5, x1
   a23b0:	aa0103e6 	mov	x6, x1
   a23b4:	17ffffe6 	b	a234c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   a23b8:	d503201f 	nop
   a23bc:	d503201f 	nop

00000000000a23c0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   a23c0:	eb22403f 	cmp	x1, w2, uxtw
   a23c4:	12001c63 	and	w3, w3, #0xff
   a23c8:	2a0203e2 	mov	w2, w2
   a23cc:	d2800024 	mov	x4, #0x1                   	// #1
   a23d0:	540003e3 	b.cc	a244c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x8c>  // b.lo, b.ul, b.last
   a23d4:	d503201f 	nop
   a23d8:	9b027c84 	mul	x4, x4, x2
   a23dc:	9ac40826 	udiv	x6, x1, x4
   a23e0:	eb06005f 	cmp	x2, x6
   a23e4:	aa0603e5 	mov	x5, x6
   a23e8:	54ffff89 	b.ls	a23d8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x18>  // b.plast
   a23ec:	7100007f 	cmp	w3, #0x0
   a23f0:	52800408 	mov	w8, #0x20                  	// #32
   a23f4:	1a8813e8 	csel	w8, wzr, w8, ne  // ne = any
   a23f8:	12001d08 	and	w8, w8, #0xff
   a23fc:	aa0003e7 	mov	x7, x0
   a2400:	1100dd08 	add	w8, w8, #0x37
   a2404:	14000004 	b	a2414 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x54>
   a2408:	9ac60825 	udiv	x5, x1, x6
   a240c:	aa0603e4 	mov	x4, x6
   a2410:	aa0503e6 	mov	x6, x5
   a2414:	12001ca3 	and	w3, w5, #0xff
   a2418:	f10024bf 	cmp	x5, #0x9
   a241c:	9b0484c1 	msub	x1, x6, x4, x1
   a2420:	1100c065 	add	w5, w3, #0x30
   a2424:	0b080063 	add	w3, w3, w8
   a2428:	9ac20886 	udiv	x6, x4, x2
   a242c:	13001ca5 	sxtb	w5, w5
   a2430:	13001c63 	sxtb	w3, w3
   a2434:	1a858063 	csel	w3, w3, w5, hi  // hi = pmore
   a2438:	eb04005f 	cmp	x2, x4
   a243c:	380014e3 	strb	w3, [x7], #1
   a2440:	54fffe49 	b.ls	a2408 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x48>  // b.plast
   a2444:	390000ff 	strb	wzr, [x7]
   a2448:	d65f03c0 	ret
   a244c:	aa0103e5 	mov	x5, x1
   a2450:	aa0103e6 	mov	x6, x1
   a2454:	17ffffe6 	b	a23ec <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x2c>
   a2458:	d503201f 	nop
   a245c:	d503201f 	nop

00000000000a2460 <CString::ftoa(char*, double, unsigned int)>:
   a2460:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a2464:	910003fd 	mov	x29, sp
   a2468:	1e602018 	fcmpe	d0, #0.0
   a246c:	a90153f3 	stp	x19, x20, [sp, #16]
   a2470:	aa0003f3 	mov	x19, x0
   a2474:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2478:	2a0103f6 	mov	w22, w1
   a247c:	a90363f7 	stp	x23, x24, [sp, #48]
   a2480:	aa0003f8 	mov	x24, x0
   a2484:	fd0023e8 	str	d8, [sp, #64]
   a2488:	1e604008 	fmov	d8, d0
   a248c:	54000085 	b.pl	a249c <CString::ftoa(char*, double, unsigned int)+0x3c>  // b.nfrst
   a2490:	1e614008 	fneg	d8, d0
   a2494:	528005a0 	mov	w0, #0x2d                  	// #45
   a2498:	38001700 	strb	w0, [x24], #1
   a249c:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   a24a0:	9e670000 	fmov	d0, x0
   a24a4:	1e602110 	fcmpe	d8, d0
   a24a8:	54000eec 	b.gt	a2684 <CString::ftoa(char*, double, unsigned int)+0x224>
   a24ac:	9e790114 	fcvtzu	x20, d8
   a24b0:	d2800022 	mov	x2, #0x1                   	// #1
   a24b4:	f100269f 	cmp	x20, #0x9
   a24b8:	54000fc9 	b.ls	a26b0 <CString::ftoa(char*, double, unsigned int)+0x250>  // b.plast
   a24bc:	d503201f 	nop
   a24c0:	8b020842 	add	x2, x2, x2, lsl #2
   a24c4:	d37ff842 	lsl	x2, x2, #1
   a24c8:	9ac20a83 	udiv	x3, x20, x2
   a24cc:	f100247f 	cmp	x3, #0x9
   a24d0:	54ffff88 	b.hi	a24c0 <CString::ftoa(char*, double, unsigned int)+0x60>  // b.pmore
   a24d4:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   a24d8:	aa1803e0 	mov	x0, x24
   a24dc:	aa1403e5 	mov	x5, x20
   a24e0:	f29999a7 	movk	x7, #0xcccd
   a24e4:	14000003 	b	a24f0 <CString::ftoa(char*, double, unsigned int)+0x90>
   a24e8:	aa0303e2 	mov	x2, x3
   a24ec:	9ac308a3 	udiv	x3, x5, x3
   a24f0:	12001c64 	and	w4, w3, #0xff
   a24f4:	f100247f 	cmp	x3, #0x9
   a24f8:	1100c083 	add	w3, w4, #0x30
   a24fc:	11015c84 	add	w4, w4, #0x57
   a2500:	13001c63 	sxtb	w3, w3
   a2504:	13001c84 	sxtb	w4, w4
   a2508:	1a838084 	csel	w4, w4, w3, hi  // hi = pmore
   a250c:	9ac208a6 	udiv	x6, x5, x2
   a2510:	f100245f 	cmp	x2, #0x9
   a2514:	38001404 	strb	w4, [x0], #1
   a2518:	9bc77c43 	umulh	x3, x2, x7
   a251c:	d343fc63 	lsr	x3, x3, #3
   a2520:	9b0294c5 	msub	x5, x6, x2, x5
   a2524:	54fffe28 	b.hi	a24e8 <CString::ftoa(char*, double, unsigned int)+0x88>  // b.pmore
   a2528:	3900001f 	strb	wzr, [x0]
   a252c:	35000116 	cbnz	w22, a254c <CString::ftoa(char*, double, unsigned int)+0xec>
   a2530:	aa1303e0 	mov	x0, x19
   a2534:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2538:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a253c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2540:	fd4023e8 	ldr	d8, [sp, #64]
   a2544:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a2548:	d65f03c0 	ret
   a254c:	aa1803e0 	mov	x0, x24
   a2550:	52800275 	mov	w21, #0x13                  	// #19
   a2554:	9400080f 	bl	a4590 <strlen>
   a2558:	528005c1 	mov	w1, #0x2e                  	// #46
   a255c:	71004edf 	cmp	w22, #0x13
   a2560:	1a9592d5 	csel	w21, w22, w21, ls  // ls = plast
   a2564:	8b000317 	add	x23, x24, x0
   a2568:	710006df 	cmp	w22, #0x1
   a256c:	38206b01 	strb	w1, [x24, x0]
   a2570:	910006f6 	add	x22, x23, #0x1
   a2574:	54000a69 	b.ls	a26c0 <CString::ftoa(char*, double, unsigned int)+0x260>  // b.plast
   a2578:	52800040 	mov	w0, #0x2                   	// #2
   a257c:	d2800141 	mov	x1, #0xa                   	// #10
   a2580:	8b010821 	add	x1, x1, x1, lsl #2
   a2584:	11000400 	add	w0, w0, #0x1
   a2588:	6b15001f 	cmp	w0, w21
   a258c:	d37ff821 	lsl	x1, x1, #1
   a2590:	54ffff89 	b.ls	a2580 <CString::ftoa(char*, double, unsigned int)+0x120>  // b.plast
   a2594:	9e630020 	ucvtf	d0, x1
   a2598:	9e630281 	ucvtf	d1, x20
   a259c:	d2800021 	mov	x1, #0x1                   	// #1
   a25a0:	1e613908 	fsub	d8, d8, d1
   a25a4:	1e600908 	fmul	d8, d8, d0
   a25a8:	9e790104 	fcvtzu	x4, d8
   a25ac:	f100249f 	cmp	x4, #0x9
   a25b0:	54000849 	b.ls	a26b8 <CString::ftoa(char*, double, unsigned int)+0x258>  // b.plast
   a25b4:	d503201f 	nop
   a25b8:	8b010821 	add	x1, x1, x1, lsl #2
   a25bc:	d37ff821 	lsl	x1, x1, #1
   a25c0:	9ac10882 	udiv	x2, x4, x1
   a25c4:	f100245f 	cmp	x2, #0x9
   a25c8:	54ffff88 	b.hi	a25b8 <CString::ftoa(char*, double, unsigned int)+0x158>  // b.pmore
   a25cc:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   a25d0:	910163e5 	add	x5, sp, #0x58
   a25d4:	f29999a7 	movk	x7, #0xcccd
   a25d8:	14000003 	b	a25e4 <CString::ftoa(char*, double, unsigned int)+0x184>
   a25dc:	aa0203e1 	mov	x1, x2
   a25e0:	9ac20882 	udiv	x2, x4, x2
   a25e4:	12001c43 	and	w3, w2, #0xff
   a25e8:	f100245f 	cmp	x2, #0x9
   a25ec:	1100c060 	add	w0, w3, #0x30
   a25f0:	11015c63 	add	w3, w3, #0x57
   a25f4:	13001c00 	sxtb	w0, w0
   a25f8:	13001c63 	sxtb	w3, w3
   a25fc:	1a808063 	csel	w3, w3, w0, hi  // hi = pmore
   a2600:	9ac10886 	udiv	x6, x4, x1
   a2604:	f100243f 	cmp	x1, #0x9
   a2608:	380014a3 	strb	w3, [x5], #1
   a260c:	9bc77c22 	umulh	x2, x1, x7
   a2610:	d343fc42 	lsr	x2, x2, #3
   a2614:	9b0190c4 	msub	x4, x6, x1, x4
   a2618:	54fffe28 	b.hi	a25dc <CString::ftoa(char*, double, unsigned int)+0x17c>  // b.pmore
   a261c:	910163e0 	add	x0, sp, #0x58
   a2620:	390000bf 	strb	wzr, [x5]
   a2624:	940007db 	bl	a4590 <strlen>
   a2628:	4b0002b5 	sub	w21, w21, w0
   a262c:	510006a3 	sub	w3, w21, #0x1
   a2630:	34000175 	cbz	w21, a265c <CString::ftoa(char*, double, unsigned int)+0x1fc>
   a2634:	91000861 	add	x1, x3, #0x2
   a2638:	aa1603e0 	mov	x0, x22
   a263c:	52800602 	mov	w2, #0x30                  	// #48
   a2640:	8b0102e1 	add	x1, x23, x1
   a2644:	d503201f 	nop
   a2648:	38001402 	strb	w2, [x0], #1
   a264c:	eb00003f 	cmp	x1, x0
   a2650:	54ffffc1 	b.ne	a2648 <CString::ftoa(char*, double, unsigned int)+0x1e8>  // b.any
   a2654:	91000463 	add	x3, x3, #0x1
   a2658:	8b0302d6 	add	x22, x22, x3
   a265c:	910163e1 	add	x1, sp, #0x58
   a2660:	aa1603e0 	mov	x0, x22
   a2664:	9400085b 	bl	a47d0 <strcpy>
   a2668:	aa1303e0 	mov	x0, x19
   a266c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2670:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2674:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2678:	fd4023e8 	ldr	d8, [sp, #64]
   a267c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a2680:	d65f03c0 	ret
   a2684:	aa1803e0 	mov	x0, x24
   a2688:	b0000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a268c:	9106e021 	add	x1, x1, #0x1b8
   a2690:	94000850 	bl	a47d0 <strcpy>
   a2694:	aa1303e0 	mov	x0, x19
   a2698:	a94153f3 	ldp	x19, x20, [sp, #16]
   a269c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a26a0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a26a4:	fd4023e8 	ldr	d8, [sp, #64]
   a26a8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a26ac:	d65f03c0 	ret
   a26b0:	aa1403e3 	mov	x3, x20
   a26b4:	17ffff88 	b	a24d4 <CString::ftoa(char*, double, unsigned int)+0x74>
   a26b8:	aa0403e2 	mov	x2, x4
   a26bc:	17ffffc4 	b	a25cc <CString::ftoa(char*, double, unsigned int)+0x16c>
   a26c0:	1e649000 	fmov	d0, #1.000000000000000000e+01
   a26c4:	17ffffb5 	b	a2598 <CString::ftoa(char*, double, unsigned int)+0x138>
   a26c8:	d503201f 	nop
   a26cc:	d503201f 	nop

00000000000a26d0 <CString::FormatV(char const*, std::__va_list)>:
   a26d0:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   a26d4:	910003fd 	mov	x29, sp
   a26d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a26dc:	a90573fb 	stp	x27, x28, [sp, #80]
   a26e0:	aa0103fc 	mov	x28, x1
   a26e4:	a9400454 	ldp	x20, x1, [x2]
   a26e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a26ec:	aa0203f5 	mov	x21, x2
   a26f0:	f9003be1 	str	x1, [sp, #112]
   a26f4:	b9401c41 	ldr	w1, [x2, #28]
   a26f8:	a9046bf9 	stp	x25, x26, [sp, #64]
   a26fc:	aa0003fa 	mov	x26, x0
   a2700:	f9400400 	ldr	x0, [x0, #8]
   a2704:	b90083e1 	str	w1, [sp, #128]
   a2708:	b9401856 	ldr	w22, [x2, #24]
   a270c:	b4000040 	cbz	x0, a2714 <CString::FormatV(char const*, std::__va_list)+0x44>
   a2710:	94000bf4 	bl	a56e0 <operator delete[](void*)>
   a2714:	52800801 	mov	w1, #0x40                  	// #64
   a2718:	d2800800 	mov	x0, #0x40                  	// #64
   a271c:	b9001341 	str	w1, [x26, #16]
   a2720:	94000be0 	bl	a56a0 <operator new[](unsigned long)>
   a2724:	f9000740 	str	x0, [x26, #8]
   a2728:	f9000f40 	str	x0, [x26, #24]
   a272c:	39c00393 	ldrsb	w19, [x28]
   a2730:	340013d3 	cbz	w19, a29a8 <CString::FormatV(char const*, std::__va_list)+0x2d8>
   a2734:	a90363f7 	stp	x23, x24, [sp, #48]
   a2738:	b202e7f7 	mov	x23, #0xcccccccccccccccc    	// #-3689348814741910324
   a273c:	b0000098 	adrp	x24, b3000 <vtable for CSerialDevice+0x18>
   a2740:	91074300 	add	x0, x24, #0x1d0
   a2744:	f29999b7 	movk	x23, #0xcccd
   a2748:	f9003fe0 	str	x0, [sp, #120]
   a274c:	d503201f 	nop
   a2750:	7100967f 	cmp	w19, #0x25
   a2754:	9100079b 	add	x27, x28, #0x1
   a2758:	54002041 	b.ne	a2b60 <CString::FormatV(char const*, std::__va_list)+0x490>  // b.any
   a275c:	39c00782 	ldrsb	w2, [x28, #1]
   a2760:	7100945f 	cmp	w2, #0x25
   a2764:	54002140 	b.eq	a2b8c <CString::FormatV(char const*, std::__va_list)+0x4bc>  // b.none
   a2768:	71008c5f 	cmp	w2, #0x23
   a276c:	52800009 	mov	w9, #0x0                   	// #0
   a2770:	54000081 	b.ne	a2780 <CString::FormatV(char const*, std::__va_list)+0xb0>  // b.any
   a2774:	39c00b82 	ldrsb	w2, [x28, #2]
   a2778:	91000b9b 	add	x27, x28, #0x2
   a277c:	52800029 	mov	w9, #0x1                   	// #1
   a2780:	7100b45f 	cmp	w2, #0x2d
   a2784:	9100077c 	add	x28, x27, #0x1
   a2788:	52800019 	mov	w25, #0x0                   	// #0
   a278c:	540000c1 	b.ne	a27a4 <CString::FormatV(char const*, std::__va_list)+0xd4>  // b.any
   a2790:	91000b60 	add	x0, x27, #0x2
   a2794:	39c00762 	ldrsb	w2, [x27, #1]
   a2798:	52800039 	mov	w25, #0x1                   	// #1
   a279c:	aa1c03fb 	mov	x27, x28
   a27a0:	aa0003fc 	mov	x28, x0
   a27a4:	7100c05f 	cmp	w2, #0x30
   a27a8:	52800007 	mov	w7, #0x0                   	// #0
   a27ac:	540000a1 	b.ne	a27c0 <CString::FormatV(char const*, std::__va_list)+0xf0>  // b.any
   a27b0:	39c00762 	ldrsb	w2, [x27, #1]
   a27b4:	52800027 	mov	w7, #0x1                   	// #1
   a27b8:	aa1c03fb 	mov	x27, x28
   a27bc:	9100079c 	add	x28, x28, #0x1
   a27c0:	5100c043 	sub	w3, w2, #0x30
   a27c4:	d2800013 	mov	x19, #0x0                   	// #0
   a27c8:	12001c60 	and	w0, w3, #0xff
   a27cc:	7100241f 	cmp	w0, #0x9
   a27d0:	54000188 	b.hi	a2800 <CString::FormatV(char const*, std::__va_list)+0x130>  // b.pmore
   a27d4:	d503201f 	nop
   a27d8:	aa1b03fc 	mov	x28, x27
   a27dc:	38c01f62 	ldrsb	w2, [x27, #1]!
   a27e0:	8b130a73 	add	x19, x19, x19, lsl #2
   a27e4:	93407c63 	sxtw	x3, w3
   a27e8:	8b130473 	add	x19, x3, x19, lsl #1
   a27ec:	5100c043 	sub	w3, w2, #0x30
   a27f0:	12001c64 	and	w4, w3, #0xff
   a27f4:	7100249f 	cmp	w4, #0x9
   a27f8:	54ffff09 	b.ls	a27d8 <CString::FormatV(char const*, std::__va_list)+0x108>  // b.plast
   a27fc:	91000b9c 	add	x28, x28, #0x2
   a2800:	7100b85f 	cmp	w2, #0x2e
   a2804:	540029e0 	b.eq	a2d40 <CString::FormatV(char const*, std::__va_list)+0x670>  // b.none
   a2808:	39c00362 	ldrsb	w2, [x27]
   a280c:	528000c1 	mov	w1, #0x6                   	// #6
   a2810:	7101b05f 	cmp	w2, #0x6c
   a2814:	52800018 	mov	w24, #0x0                   	// #0
   a2818:	52800008 	mov	w8, #0x0                   	// #0
   a281c:	54001ca0 	b.eq	a2bb0 <CString::FormatV(char const*, std::__va_list)+0x4e0>  // b.none
   a2820:	7101bc5f 	cmp	w2, #0x6f
   a2824:	54001e40 	b.eq	a2bec <CString::FormatV(char const*, std::__va_list)+0x51c>  // b.none
   a2828:	5400044c 	b.gt	a28b0 <CString::FormatV(char const*, std::__va_list)+0x1e0>
   a282c:	7101905f 	cmp	w2, #0x64
   a2830:	54000f40 	b.eq	a2a18 <CString::FormatV(char const*, std::__va_list)+0x348>  // b.none
   a2834:	540016ed 	b.le	a2b10 <CString::FormatV(char const*, std::__va_list)+0x440>
   a2838:	7101985f 	cmp	w2, #0x66
   a283c:	54000ea1 	b.ne	a2a10 <CString::FormatV(char const*, std::__va_list)+0x340>  // b.any
   a2840:	b94083e0 	ldr	w0, [sp, #128]
   a2844:	37f83d20 	tbnz	w0, #31, a2fe8 <CString::FormatV(char const*, std::__va_list)+0x918>
   a2848:	91003e80 	add	x0, x20, #0xf
   a284c:	aa1403e2 	mov	x2, x20
   a2850:	927df014 	and	x20, x0, #0xfffffffffffffff8
   a2854:	fd400040 	ldr	d0, [x2]
   a2858:	910243e0 	add	x0, sp, #0x90
   a285c:	97ffff01 	bl	a2460 <CString::ftoa(char*, double, unsigned int)>
   a2860:	910243e0 	add	x0, sp, #0x90
   a2864:	9400074b 	bl	a4590 <strlen>
   a2868:	aa0003fb 	mov	x27, x0
   a286c:	35003dd9 	cbnz	w25, a3024 <CString::FormatV(char const*, std::__va_list)+0x954>
   a2870:	eb13001f 	cmp	x0, x19
   a2874:	540008a2 	b.cs	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>  // b.hs, b.nlast
   a2878:	cb000273 	sub	x19, x19, x0
   a287c:	aa1a03e0 	mov	x0, x26
   a2880:	aa1303e1 	mov	x1, x19
   a2884:	97fffd47 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2888:	d1000660 	sub	x0, x19, #0x1
   a288c:	52800403 	mov	w3, #0x20                  	// #32
   a2890:	f9400f41 	ldr	x1, [x26, #24]
   a2894:	d1000400 	sub	x0, x0, #0x1
   a2898:	b100041f 	cmn	x0, #0x1
   a289c:	91000422 	add	x2, x1, #0x1
   a28a0:	f9000f42 	str	x2, [x26, #24]
   a28a4:	39000023 	strb	w3, [x1]
   a28a8:	54ffff41 	b.ne	a2890 <CString::FormatV(char const*, std::__va_list)+0x1c0>  // b.any
   a28ac:	14000037 	b	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   a28b0:	7101d45f 	cmp	w2, #0x75
   a28b4:	54002420 	b.eq	a2d38 <CString::FormatV(char const*, std::__va_list)+0x668>  // b.none
   a28b8:	5400086d 	b.le	a29c4 <CString::FormatV(char const*, std::__va_list)+0x2f4>
   a28bc:	7101e05f 	cmp	w2, #0x78
   a28c0:	54002641 	b.ne	a2d88 <CString::FormatV(char const*, std::__va_list)+0x6b8>  // b.any
   a28c4:	35004169 	cbnz	w9, a30f0 <CString::FormatV(char const*, std::__va_list)+0xa20>
   a28c8:	d2800203 	mov	x3, #0x10                  	// #16
   a28cc:	d503201f 	nop
   a28d0:	34001b58 	cbz	w24, a2c38 <CString::FormatV(char const*, std::__va_list)+0x568>
   a28d4:	37f82896 	tbnz	w22, #31, a2de4 <CString::FormatV(char const*, std::__va_list)+0x714>
   a28d8:	91003e81 	add	x1, x20, #0xf
   a28dc:	aa1403e0 	mov	x0, x20
   a28e0:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a28e4:	f9400009 	ldr	x9, [x0]
   a28e8:	eb09007f 	cmp	x3, x9
   a28ec:	54004ec8 	b.hi	a32c4 <CString::FormatV(char const*, std::__va_list)+0xbf4>  // b.pmore
   a28f0:	d2800020 	mov	x0, #0x1                   	// #1
   a28f4:	d503201f 	nop
   a28f8:	9b037c00 	mul	x0, x0, x3
   a28fc:	9ac00928 	udiv	x8, x9, x0
   a2900:	eb08007f 	cmp	x3, x8
   a2904:	aa0803e4 	mov	x4, x8
   a2908:	54ffff89 	b.ls	a28f8 <CString::FormatV(char const*, std::__va_list)+0x228>  // b.plast
   a290c:	7101605f 	cmp	w2, #0x58
   a2910:	5280040b 	mov	w11, #0x20                  	// #32
   a2914:	1a8b03eb 	csel	w11, wzr, w11, eq  // eq = none
   a2918:	12001d6b 	and	w11, w11, #0xff
   a291c:	910243ea 	add	x10, sp, #0x90
   a2920:	1100dd6b 	add	w11, w11, #0x37
   a2924:	14000004 	b	a2934 <CString::FormatV(char const*, std::__va_list)+0x264>
   a2928:	9ac80924 	udiv	x4, x9, x8
   a292c:	aa0803e0 	mov	x0, x8
   a2930:	aa0403e8 	mov	x8, x4
   a2934:	12001c81 	and	w1, w4, #0xff
   a2938:	f100249f 	cmp	x4, #0x9
   a293c:	9b00a509 	msub	x9, x8, x0, x9
   a2940:	1100c022 	add	w2, w1, #0x30
   a2944:	0b0b0021 	add	w1, w1, w11
   a2948:	9ac30808 	udiv	x8, x0, x3
   a294c:	13001c42 	sxtb	w2, w2
   a2950:	13001c21 	sxtb	w1, w1
   a2954:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
   a2958:	eb00007f 	cmp	x3, x0
   a295c:	38001541 	strb	w1, [x10], #1
   a2960:	54fffe49 	b.ls	a2928 <CString::FormatV(char const*, std::__va_list)+0x258>  // b.plast
   a2964:	910243e0 	add	x0, sp, #0x90
   a2968:	3900015f 	strb	wzr, [x10]
   a296c:	b9006fe7 	str	w7, [sp, #108]
   a2970:	94000708 	bl	a4590 <strlen>
   a2974:	b9406fe7 	ldr	w7, [sp, #108]
   a2978:	aa0003fb 	mov	x27, x0
   a297c:	35001b79 	cbnz	w25, a2ce8 <CString::FormatV(char const*, std::__va_list)+0x618>
   a2980:	eb00027f 	cmp	x19, x0
   a2984:	54002408 	b.hi	a2e04 <CString::FormatV(char const*, std::__va_list)+0x734>  // b.pmore
   a2988:	910243e1 	add	x1, sp, #0x90
   a298c:	aa1a03e0 	mov	x0, x26
   a2990:	97fffddc 	bl	a2100 <CString::PutString(char const*)>
   a2994:	39c00393 	ldrsb	w19, [x28]
   a2998:	35ffedd3 	cbnz	w19, a2750 <CString::FormatV(char const*, std::__va_list)+0x80>
   a299c:	d503201f 	nop
   a29a0:	f9400f40 	ldr	x0, [x26, #24]
   a29a4:	a94363f7 	ldp	x23, x24, [sp, #48]
   a29a8:	3900001f 	strb	wzr, [x0]
   a29ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   a29b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a29b4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a29b8:	a94573fb 	ldp	x27, x28, [sp, #80]
   a29bc:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   a29c0:	d65f03c0 	ret
   a29c4:	7101c05f 	cmp	w2, #0x70
   a29c8:	54fff7e0 	b.eq	a28c4 <CString::FormatV(char const*, std::__va_list)+0x1f4>  // b.none
   a29cc:	7101cc5f 	cmp	w2, #0x73
   a29d0:	54001dc1 	b.ne	a2d88 <CString::FormatV(char const*, std::__va_list)+0x6b8>  // b.any
   a29d4:	37f82cb6 	tbnz	w22, #31, a2f68 <CString::FormatV(char const*, std::__va_list)+0x898>
   a29d8:	91003e81 	add	x1, x20, #0xf
   a29dc:	aa1403e0 	mov	x0, x20
   a29e0:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a29e4:	f9400018 	ldr	x24, [x0]
   a29e8:	aa1803e0 	mov	x0, x24
   a29ec:	940006e9 	bl	a4590 <strlen>
   a29f0:	aa0003fb 	mov	x27, x0
   a29f4:	35002d39 	cbnz	w25, a2f98 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   a29f8:	eb13001f 	cmp	x0, x19
   a29fc:	54003f03 	b.cc	a31dc <CString::FormatV(char const*, std::__va_list)+0xb0c>  // b.lo, b.ul, b.last
   a2a00:	aa1803e1 	mov	x1, x24
   a2a04:	aa1a03e0 	mov	x0, x26
   a2a08:	97fffdbe 	bl	a2100 <CString::PutString(char const*)>
   a2a0c:	1400005d 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2a10:	7101a45f 	cmp	w2, #0x69
   a2a14:	54001ba1 	b.ne	a2d88 <CString::FormatV(char const*, std::__va_list)+0x6b8>  // b.any
   a2a18:	34002198 	cbz	w24, a2e48 <CString::FormatV(char const*, std::__va_list)+0x778>
   a2a1c:	37f83af6 	tbnz	w22, #31, a3178 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   a2a20:	91003e81 	add	x1, x20, #0xf
   a2a24:	aa1403e0 	mov	x0, x20
   a2a28:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a2a2c:	f9400002 	ldr	x2, [x0]
   a2a30:	b6f84b42 	tbz	x2, #63, a3398 <CString::FormatV(char const*, std::__va_list)+0xcc8>
   a2a34:	cb0203e2 	neg	x2, x2
   a2a38:	f100245f 	cmp	x2, #0x9
   a2a3c:	aa0203e3 	mov	x3, x2
   a2a40:	54004a6d 	b.le	a338c <CString::FormatV(char const*, std::__va_list)+0xcbc>
   a2a44:	d2800020 	mov	x0, #0x1                   	// #1
   a2a48:	8b000800 	add	x0, x0, x0, lsl #2
   a2a4c:	d37ff800 	lsl	x0, x0, #1
   a2a50:	9ac00841 	udiv	x1, x2, x0
   a2a54:	f100243f 	cmp	x1, #0x9
   a2a58:	54ffff88 	b.hi	a2a48 <CString::FormatV(char const*, std::__va_list)+0x378>  // b.pmore
   a2a5c:	910243e9 	add	x9, sp, #0x90
   a2a60:	14000003 	b	a2a6c <CString::FormatV(char const*, std::__va_list)+0x39c>
   a2a64:	aa0103e0 	mov	x0, x1
   a2a68:	9ac10861 	udiv	x1, x3, x1
   a2a6c:	12001c22 	and	w2, w1, #0xff
   a2a70:	f100243f 	cmp	x1, #0x9
   a2a74:	1100c048 	add	w8, w2, #0x30
   a2a78:	11015c41 	add	w1, w2, #0x57
   a2a7c:	13001c21 	sxtb	w1, w1
   a2a80:	13001d02 	sxtb	w2, w8
   a2a84:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
   a2a88:	9ac0086a 	udiv	x10, x3, x0
   a2a8c:	38001521 	strb	w1, [x9], #1
   a2a90:	f100241f 	cmp	x0, #0x9
   a2a94:	9bd77c01 	umulh	x1, x0, x23
   a2a98:	d343fc21 	lsr	x1, x1, #3
   a2a9c:	9b008d43 	msub	x3, x10, x0, x3
   a2aa0:	54fffe28 	b.hi	a2a64 <CString::FormatV(char const*, std::__va_list)+0x394>  // b.pmore
   a2aa4:	910243e0 	add	x0, sp, #0x90
   a2aa8:	3900013f 	strb	wzr, [x9]
   a2aac:	b9006fe7 	str	w7, [sp, #108]
   a2ab0:	940006b8 	bl	a4590 <strlen>
   a2ab4:	b9406fe7 	ldr	w7, [sp, #108]
   a2ab8:	aa0003fb 	mov	x27, x0
   a2abc:	350021f8 	cbnz	w24, a2ef8 <CString::FormatV(char const*, std::__va_list)+0x828>
   a2ac0:	34003e19 	cbz	w25, a3280 <CString::FormatV(char const*, std::__va_list)+0xbb0>
   a2ac4:	910243e1 	add	x1, sp, #0x90
   a2ac8:	aa1a03e0 	mov	x0, x26
   a2acc:	97fffd8d 	bl	a2100 <CString::PutString(char const*)>
   a2ad0:	eb1b027f 	cmp	x19, x27
   a2ad4:	54000569 	b.ls	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>  // b.plast
   a2ad8:	cb1b0273 	sub	x19, x19, x27
   a2adc:	aa1a03e0 	mov	x0, x26
   a2ae0:	aa1303e1 	mov	x1, x19
   a2ae4:	97fffcaf 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2ae8:	d1000660 	sub	x0, x19, #0x1
   a2aec:	52800403 	mov	w3, #0x20                  	// #32
   a2af0:	f9400f41 	ldr	x1, [x26, #24]
   a2af4:	d1000400 	sub	x0, x0, #0x1
   a2af8:	b100041f 	cmn	x0, #0x1
   a2afc:	91000422 	add	x2, x1, #0x1
   a2b00:	f9000f42 	str	x2, [x26, #24]
   a2b04:	39000023 	strb	w3, [x1]
   a2b08:	54ffff41 	b.ne	a2af0 <CString::FormatV(char const*, std::__va_list)+0x420>  // b.any
   a2b0c:	1400001d 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2b10:	7101605f 	cmp	w2, #0x58
   a2b14:	540045a0 	b.eq	a33c8 <CString::FormatV(char const*, std::__va_list)+0xcf8>  // b.none
   a2b18:	71018c5f 	cmp	w2, #0x63
   a2b1c:	54001361 	b.ne	a2d88 <CString::FormatV(char const*, std::__va_list)+0x6b8>  // b.any
   a2b20:	37f82a96 	tbnz	w22, #31, a3070 <CString::FormatV(char const*, std::__va_list)+0x9a0>
   a2b24:	91002e81 	add	x1, x20, #0xb
   a2b28:	aa1403e0 	mov	x0, x20
   a2b2c:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a2b30:	39c0001b 	ldrsb	w27, [x0]
   a2b34:	35002b19 	cbnz	w25, a3094 <CString::FormatV(char const*, std::__va_list)+0x9c4>
   a2b38:	f100067f 	cmp	x19, #0x1
   a2b3c:	54003028 	b.hi	a3140 <CString::FormatV(char const*, std::__va_list)+0xa70>  // b.pmore
   a2b40:	d2800021 	mov	x1, #0x1                   	// #1
   a2b44:	aa1a03e0 	mov	x0, x26
   a2b48:	97fffc96 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2b4c:	f9400f40 	ldr	x0, [x26, #24]
   a2b50:	91000401 	add	x1, x0, #0x1
   a2b54:	f9000f41 	str	x1, [x26, #24]
   a2b58:	3900001b 	strb	w27, [x0]
   a2b5c:	14000009 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2b60:	d2800021 	mov	x1, #0x1                   	// #1
   a2b64:	aa1a03e0 	mov	x0, x26
   a2b68:	97fffc8e 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2b6c:	f9400f40 	ldr	x0, [x26, #24]
   a2b70:	aa1b03fc 	mov	x28, x27
   a2b74:	91000401 	add	x1, x0, #0x1
   a2b78:	f9000f41 	str	x1, [x26, #24]
   a2b7c:	39000013 	strb	w19, [x0]
   a2b80:	39c00393 	ldrsb	w19, [x28]
   a2b84:	35ffde73 	cbnz	w19, a2750 <CString::FormatV(char const*, std::__va_list)+0x80>
   a2b88:	17ffff86 	b	a29a0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   a2b8c:	d2800021 	mov	x1, #0x1                   	// #1
   a2b90:	aa1a03e0 	mov	x0, x26
   a2b94:	97fffc83 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2b98:	f9400f40 	ldr	x0, [x26, #24]
   a2b9c:	91000b9c 	add	x28, x28, #0x2
   a2ba0:	91000401 	add	x1, x0, #0x1
   a2ba4:	f9000f41 	str	x1, [x26, #24]
   a2ba8:	39000013 	strb	w19, [x0]
   a2bac:	17fffff5 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2bb0:	39c00762 	ldrsb	w2, [x27, #1]
   a2bb4:	91000780 	add	x0, x28, #0x1
   a2bb8:	52800028 	mov	w8, #0x1                   	// #1
   a2bbc:	7101b05f 	cmp	w2, #0x6c
   a2bc0:	540000e1 	b.ne	a2bdc <CString::FormatV(char const*, std::__va_list)+0x50c>  // b.any
   a2bc4:	39c00b62 	ldrsb	w2, [x27, #2]
   a2bc8:	91000b83 	add	x3, x28, #0x2
   a2bcc:	2a0803f8 	mov	w24, w8
   a2bd0:	aa0003fc 	mov	x28, x0
   a2bd4:	52800008 	mov	w8, #0x0                   	// #0
   a2bd8:	aa0303e0 	mov	x0, x3
   a2bdc:	7101bc5f 	cmp	w2, #0x6f
   a2be0:	aa1c03fb 	mov	x27, x28
   a2be4:	aa0003fc 	mov	x28, x0
   a2be8:	54ffe201 	b.ne	a2828 <CString::FormatV(char const*, std::__va_list)+0x158>  // b.any
   a2bec:	d2800103 	mov	x3, #0x8                   	// #8
   a2bf0:	34ffe709 	cbz	w9, a28d0 <CString::FormatV(char const*, std::__va_list)+0x200>
   a2bf4:	d2800021 	mov	x1, #0x1                   	// #1
   a2bf8:	aa1a03e0 	mov	x0, x26
   a2bfc:	b9006fe7 	str	w7, [sp, #108]
   a2c00:	b90087e8 	str	w8, [sp, #132]
   a2c04:	f90047e3 	str	x3, [sp, #136]
   a2c08:	97fffc66 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2c0c:	f9400f40 	ldr	x0, [x26, #24]
   a2c10:	52800601 	mov	w1, #0x30                  	// #48
   a2c14:	b9406fe7 	ldr	w7, [sp, #108]
   a2c18:	b94087e8 	ldr	w8, [sp, #132]
   a2c1c:	91000402 	add	x2, x0, #0x1
   a2c20:	f94047e3 	ldr	x3, [sp, #136]
   a2c24:	f9000f42 	str	x2, [x26, #24]
   a2c28:	39000001 	strb	w1, [x0]
   a2c2c:	39c00362 	ldrsb	w2, [x27]
   a2c30:	35ffe538 	cbnz	w24, a28d4 <CString::FormatV(char const*, std::__va_list)+0x204>
   a2c34:	d503201f 	nop
   a2c38:	34000ca8 	cbz	w8, a2dcc <CString::FormatV(char const*, std::__va_list)+0x6fc>
   a2c3c:	37f82af6 	tbnz	w22, #31, a3198 <CString::FormatV(char const*, std::__va_list)+0xac8>
   a2c40:	91003e81 	add	x1, x20, #0xf
   a2c44:	aa1403e0 	mov	x0, x20
   a2c48:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a2c4c:	f9400009 	ldr	x9, [x0]
   a2c50:	eb09007f 	cmp	x3, x9
   a2c54:	540030e8 	b.hi	a3270 <CString::FormatV(char const*, std::__va_list)+0xba0>  // b.pmore
   a2c58:	d2800020 	mov	x0, #0x1                   	// #1
   a2c5c:	d503201f 	nop
   a2c60:	9b037c00 	mul	x0, x0, x3
   a2c64:	9ac00928 	udiv	x8, x9, x0
   a2c68:	eb08007f 	cmp	x3, x8
   a2c6c:	aa0803e4 	mov	x4, x8
   a2c70:	54ffff89 	b.ls	a2c60 <CString::FormatV(char const*, std::__va_list)+0x590>  // b.plast
   a2c74:	7101605f 	cmp	w2, #0x58
   a2c78:	5280040b 	mov	w11, #0x20                  	// #32
   a2c7c:	1a8b03eb 	csel	w11, wzr, w11, eq  // eq = none
   a2c80:	12001d6b 	and	w11, w11, #0xff
   a2c84:	910243ea 	add	x10, sp, #0x90
   a2c88:	1100dd6b 	add	w11, w11, #0x37
   a2c8c:	14000004 	b	a2c9c <CString::FormatV(char const*, std::__va_list)+0x5cc>
   a2c90:	9ac80924 	udiv	x4, x9, x8
   a2c94:	aa0803e0 	mov	x0, x8
   a2c98:	aa0403e8 	mov	x8, x4
   a2c9c:	12001c81 	and	w1, w4, #0xff
   a2ca0:	f100249f 	cmp	x4, #0x9
   a2ca4:	9b00a509 	msub	x9, x8, x0, x9
   a2ca8:	1100c022 	add	w2, w1, #0x30
   a2cac:	0b0b0021 	add	w1, w1, w11
   a2cb0:	9ac30808 	udiv	x8, x0, x3
   a2cb4:	13001c42 	sxtb	w2, w2
   a2cb8:	13001c21 	sxtb	w1, w1
   a2cbc:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
   a2cc0:	eb00007f 	cmp	x3, x0
   a2cc4:	38001541 	strb	w1, [x10], #1
   a2cc8:	54fffe49 	b.ls	a2c90 <CString::FormatV(char const*, std::__va_list)+0x5c0>  // b.plast
   a2ccc:	910243e0 	add	x0, sp, #0x90
   a2cd0:	3900015f 	strb	wzr, [x10]
   a2cd4:	b9006fe7 	str	w7, [sp, #108]
   a2cd8:	9400062e 	bl	a4590 <strlen>
   a2cdc:	b9406fe7 	ldr	w7, [sp, #108]
   a2ce0:	aa0003fb 	mov	x27, x0
   a2ce4:	34ffe4f9 	cbz	w25, a2980 <CString::FormatV(char const*, std::__va_list)+0x2b0>
   a2ce8:	910243e1 	add	x1, sp, #0x90
   a2cec:	aa1a03e0 	mov	x0, x26
   a2cf0:	97fffd04 	bl	a2100 <CString::PutString(char const*)>
   a2cf4:	eb1b027f 	cmp	x19, x27
   a2cf8:	54fff449 	b.ls	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>  // b.plast
   a2cfc:	cb1b0273 	sub	x19, x19, x27
   a2d00:	aa1a03e0 	mov	x0, x26
   a2d04:	aa1303e1 	mov	x1, x19
   a2d08:	97fffc26 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2d0c:	d1000660 	sub	x0, x19, #0x1
   a2d10:	52800403 	mov	w3, #0x20                  	// #32
   a2d14:	d503201f 	nop
   a2d18:	f9400f41 	ldr	x1, [x26, #24]
   a2d1c:	d1000400 	sub	x0, x0, #0x1
   a2d20:	b100041f 	cmn	x0, #0x1
   a2d24:	91000422 	add	x2, x1, #0x1
   a2d28:	f9000f42 	str	x2, [x26, #24]
   a2d2c:	39000023 	strb	w3, [x1]
   a2d30:	54ffff41 	b.ne	a2d18 <CString::FormatV(char const*, std::__va_list)+0x648>  // b.any
   a2d34:	17ffff93 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2d38:	d2800143 	mov	x3, #0xa                   	// #10
   a2d3c:	17fffee5 	b	a28d0 <CString::FormatV(char const*, std::__va_list)+0x200>
   a2d40:	39c00762 	ldrsb	w2, [x27, #1]
   a2d44:	52800001 	mov	w1, #0x0                   	// #0
   a2d48:	5100c040 	sub	w0, w2, #0x30
   a2d4c:	12001c00 	and	w0, w0, #0xff
   a2d50:	7100241f 	cmp	w0, #0x9
   a2d54:	54002c08 	b.hi	a32d4 <CString::FormatV(char const*, std::__va_list)+0xc04>  // b.pmore
   a2d58:	0b010821 	add	w1, w1, w1, lsl #2
   a2d5c:	aa1c03e3 	mov	x3, x28
   a2d60:	0b010441 	add	w1, w2, w1, lsl #1
   a2d64:	38c01f82 	ldrsb	w2, [x28, #1]!
   a2d68:	5100c021 	sub	w1, w1, #0x30
   a2d6c:	5100c040 	sub	w0, w2, #0x30
   a2d70:	12001c00 	and	w0, w0, #0xff
   a2d74:	7100241f 	cmp	w0, #0x9
   a2d78:	54ffff09 	b.ls	a2d58 <CString::FormatV(char const*, std::__va_list)+0x688>  // b.plast
   a2d7c:	aa1c03fb 	mov	x27, x28
   a2d80:	9100087c 	add	x28, x3, #0x2
   a2d84:	17fffea3 	b	a2810 <CString::FormatV(char const*, std::__va_list)+0x140>
   a2d88:	d2800021 	mov	x1, #0x1                   	// #1
   a2d8c:	aa1a03e0 	mov	x0, x26
   a2d90:	97fffc04 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2d94:	f9400f42 	ldr	x2, [x26, #24]
   a2d98:	d2800021 	mov	x1, #0x1                   	// #1
   a2d9c:	528004a3 	mov	w3, #0x25                  	// #37
   a2da0:	aa1a03e0 	mov	x0, x26
   a2da4:	8b010044 	add	x4, x2, x1
   a2da8:	f9000f44 	str	x4, [x26, #24]
   a2dac:	39000043 	strb	w3, [x2]
   a2db0:	39c00373 	ldrsb	w19, [x27]
   a2db4:	97fffbfb 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2db8:	f9400f40 	ldr	x0, [x26, #24]
   a2dbc:	91000401 	add	x1, x0, #0x1
   a2dc0:	f9000f41 	str	x1, [x26, #24]
   a2dc4:	39000013 	strb	w19, [x0]
   a2dc8:	17ffff6e 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2dcc:	37f81f76 	tbnz	w22, #31, a31b8 <CString::FormatV(char const*, std::__va_list)+0xae8>
   a2dd0:	aa1403e0 	mov	x0, x20
   a2dd4:	91002e81 	add	x1, x20, #0xb
   a2dd8:	b9400009 	ldr	w9, [x0]
   a2ddc:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a2de0:	17ffff9c 	b	a2c50 <CString::FormatV(char const*, std::__va_list)+0x580>
   a2de4:	110022c1 	add	w1, w22, #0x8
   a2de8:	7100003f 	cmp	w1, #0x0
   a2dec:	5400196d 	b.le	a3118 <CString::FormatV(char const*, std::__va_list)+0xa48>
   a2df0:	91003e84 	add	x4, x20, #0xf
   a2df4:	aa1403e0 	mov	x0, x20
   a2df8:	2a0103f6 	mov	w22, w1
   a2dfc:	927df094 	and	x20, x4, #0xfffffffffffffff8
   a2e00:	17fffeb9 	b	a28e4 <CString::FormatV(char const*, std::__va_list)+0x214>
   a2e04:	cb000273 	sub	x19, x19, x0
   a2e08:	710000ff 	cmp	w7, #0x0
   a2e0c:	aa1a03e0 	mov	x0, x26
   a2e10:	52800402 	mov	w2, #0x20                  	// #32
   a2e14:	aa1303e1 	mov	x1, x19
   a2e18:	5280061b 	mov	w27, #0x30                  	// #48
   a2e1c:	1a82137b 	csel	w27, w27, w2, ne  // ne = any
   a2e20:	97fffbe0 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2e24:	d1000660 	sub	x0, x19, #0x1
   a2e28:	f9400f41 	ldr	x1, [x26, #24]
   a2e2c:	d1000400 	sub	x0, x0, #0x1
   a2e30:	b100041f 	cmn	x0, #0x1
   a2e34:	91000422 	add	x2, x1, #0x1
   a2e38:	f9000f42 	str	x2, [x26, #24]
   a2e3c:	3900003b 	strb	w27, [x1]
   a2e40:	54ffff41 	b.ne	a2e28 <CString::FormatV(char const*, std::__va_list)+0x758>  // b.any
   a2e44:	17fffed1 	b	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   a2e48:	34001708 	cbz	w8, a3128 <CString::FormatV(char const*, std::__va_list)+0xa58>
   a2e4c:	37f825d6 	tbnz	w22, #31, a3304 <CString::FormatV(char const*, std::__va_list)+0xc34>
   a2e50:	aa1403e0 	mov	x0, x20
   a2e54:	91003e81 	add	x1, x20, #0xf
   a2e58:	f9400002 	ldr	x2, [x0]
   a2e5c:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a2e60:	b6f80062 	tbz	x2, #63, a2e6c <CString::FormatV(char const*, std::__va_list)+0x79c>
   a2e64:	cb0203e2 	neg	x2, x2
   a2e68:	52800038 	mov	w24, #0x1                   	// #1
   a2e6c:	f100245f 	cmp	x2, #0x9
   a2e70:	aa0203e3 	mov	x3, x2
   a2e74:	5400286d 	b.le	a3380 <CString::FormatV(char const*, std::__va_list)+0xcb0>
   a2e78:	d2800020 	mov	x0, #0x1                   	// #1
   a2e7c:	d503201f 	nop
   a2e80:	8b000800 	add	x0, x0, x0, lsl #2
   a2e84:	d37ff800 	lsl	x0, x0, #1
   a2e88:	9ac00841 	udiv	x1, x2, x0
   a2e8c:	f100243f 	cmp	x1, #0x9
   a2e90:	54ffff88 	b.hi	a2e80 <CString::FormatV(char const*, std::__va_list)+0x7b0>  // b.pmore
   a2e94:	910243e9 	add	x9, sp, #0x90
   a2e98:	14000003 	b	a2ea4 <CString::FormatV(char const*, std::__va_list)+0x7d4>
   a2e9c:	aa0103e0 	mov	x0, x1
   a2ea0:	9ac10861 	udiv	x1, x3, x1
   a2ea4:	12001c22 	and	w2, w1, #0xff
   a2ea8:	f100243f 	cmp	x1, #0x9
   a2eac:	1100c048 	add	w8, w2, #0x30
   a2eb0:	11015c41 	add	w1, w2, #0x57
   a2eb4:	13001c21 	sxtb	w1, w1
   a2eb8:	13001d02 	sxtb	w2, w8
   a2ebc:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
   a2ec0:	9ac0086a 	udiv	x10, x3, x0
   a2ec4:	38001521 	strb	w1, [x9], #1
   a2ec8:	f100241f 	cmp	x0, #0x9
   a2ecc:	9bd77c01 	umulh	x1, x0, x23
   a2ed0:	d343fc21 	lsr	x1, x1, #3
   a2ed4:	9b008d43 	msub	x3, x10, x0, x3
   a2ed8:	54fffe28 	b.hi	a2e9c <CString::FormatV(char const*, std::__va_list)+0x7cc>  // b.pmore
   a2edc:	910243e0 	add	x0, sp, #0x90
   a2ee0:	3900013f 	strb	wzr, [x9]
   a2ee4:	b9006fe7 	str	w7, [sp, #108]
   a2ee8:	940005aa 	bl	a4590 <strlen>
   a2eec:	b9406fe7 	ldr	w7, [sp, #108]
   a2ef0:	aa0003fb 	mov	x27, x0
   a2ef4:	34ffde78 	cbz	w24, a2ac0 <CString::FormatV(char const*, std::__va_list)+0x3f0>
   a2ef8:	9100041b 	add	x27, x0, #0x1
   a2efc:	35001a19 	cbnz	w25, a323c <CString::FormatV(char const*, std::__va_list)+0xb6c>
   a2f00:	350022e7 	cbnz	w7, a335c <CString::FormatV(char const*, std::__va_list)+0xc8c>
   a2f04:	eb1b027f 	cmp	x19, x27
   a2f08:	540001e9 	b.ls	a2f44 <CString::FormatV(char const*, std::__va_list)+0x874>  // b.plast
   a2f0c:	cb1b0273 	sub	x19, x19, x27
   a2f10:	aa1a03e0 	mov	x0, x26
   a2f14:	aa1303e1 	mov	x1, x19
   a2f18:	97fffba2 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2f1c:	d1000660 	sub	x0, x19, #0x1
   a2f20:	52800403 	mov	w3, #0x20                  	// #32
   a2f24:	f9400f41 	ldr	x1, [x26, #24]
   a2f28:	d1000400 	sub	x0, x0, #0x1
   a2f2c:	b100041f 	cmn	x0, #0x1
   a2f30:	91000422 	add	x2, x1, #0x1
   a2f34:	f9000f42 	str	x2, [x26, #24]
   a2f38:	39000023 	strb	w3, [x1]
   a2f3c:	54ffff41 	b.ne	a2f24 <CString::FormatV(char const*, std::__va_list)+0x854>  // b.any
   a2f40:	34ffd258 	cbz	w24, a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   a2f44:	d2800021 	mov	x1, #0x1                   	// #1
   a2f48:	aa1a03e0 	mov	x0, x26
   a2f4c:	97fffb95 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2f50:	f9400f40 	ldr	x0, [x26, #24]
   a2f54:	528005a1 	mov	w1, #0x2d                  	// #45
   a2f58:	91000402 	add	x2, x0, #0x1
   a2f5c:	f9000f42 	str	x2, [x26, #24]
   a2f60:	39000001 	strb	w1, [x0]
   a2f64:	17fffe89 	b	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   a2f68:	110022c1 	add	w1, w22, #0x8
   a2f6c:	7100003f 	cmp	w1, #0x0
   a2f70:	5400154d 	b.le	a3218 <CString::FormatV(char const*, std::__va_list)+0xb48>
   a2f74:	aa1403e0 	mov	x0, x20
   a2f78:	91003e82 	add	x2, x20, #0xf
   a2f7c:	f9400018 	ldr	x24, [x0]
   a2f80:	2a0103f6 	mov	w22, w1
   a2f84:	927df054 	and	x20, x2, #0xfffffffffffffff8
   a2f88:	aa1803e0 	mov	x0, x24
   a2f8c:	94000581 	bl	a4590 <strlen>
   a2f90:	aa0003fb 	mov	x27, x0
   a2f94:	34ffd339 	cbz	w25, a29f8 <CString::FormatV(char const*, std::__va_list)+0x328>
   a2f98:	aa1803e1 	mov	x1, x24
   a2f9c:	aa1a03e0 	mov	x0, x26
   a2fa0:	97fffc58 	bl	a2100 <CString::PutString(char const*)>
   a2fa4:	eb13037f 	cmp	x27, x19
   a2fa8:	54ffdec2 	b.cs	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>  // b.hs, b.nlast
   a2fac:	cb1b0273 	sub	x19, x19, x27
   a2fb0:	aa1a03e0 	mov	x0, x26
   a2fb4:	aa1303e1 	mov	x1, x19
   a2fb8:	97fffb7a 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a2fbc:	d1000660 	sub	x0, x19, #0x1
   a2fc0:	52800403 	mov	w3, #0x20                  	// #32
   a2fc4:	d503201f 	nop
   a2fc8:	f9400f41 	ldr	x1, [x26, #24]
   a2fcc:	d1000400 	sub	x0, x0, #0x1
   a2fd0:	b100041f 	cmn	x0, #0x1
   a2fd4:	91000422 	add	x2, x1, #0x1
   a2fd8:	f9000f42 	str	x2, [x26, #24]
   a2fdc:	39000023 	strb	w3, [x1]
   a2fe0:	54ffff41 	b.ne	a2fc8 <CString::FormatV(char const*, std::__va_list)+0x8f8>  // b.any
   a2fe4:	17fffee7 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a2fe8:	b94083e0 	ldr	w0, [sp, #128]
   a2fec:	11004000 	add	w0, w0, #0x10
   a2ff0:	7100001f 	cmp	w0, #0x0
   a2ff4:	540011ad 	b.le	a3228 <CString::FormatV(char const*, std::__va_list)+0xb58>
   a2ff8:	aa1403e2 	mov	x2, x20
   a2ffc:	91003e83 	add	x3, x20, #0xf
   a3000:	b90083e0 	str	w0, [sp, #128]
   a3004:	910243e0 	add	x0, sp, #0x90
   a3008:	927df074 	and	x20, x3, #0xfffffffffffffff8
   a300c:	fd400040 	ldr	d0, [x2]
   a3010:	97fffd14 	bl	a2460 <CString::ftoa(char*, double, unsigned int)>
   a3014:	910243e0 	add	x0, sp, #0x90
   a3018:	9400055e 	bl	a4590 <strlen>
   a301c:	aa0003fb 	mov	x27, x0
   a3020:	34ffc299 	cbz	w25, a2870 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a3024:	910243e1 	add	x1, sp, #0x90
   a3028:	aa1a03e0 	mov	x0, x26
   a302c:	97fffc35 	bl	a2100 <CString::PutString(char const*)>
   a3030:	eb13037f 	cmp	x27, x19
   a3034:	54ffda62 	b.cs	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>  // b.hs, b.nlast
   a3038:	cb1b0273 	sub	x19, x19, x27
   a303c:	aa1a03e0 	mov	x0, x26
   a3040:	aa1303e1 	mov	x1, x19
   a3044:	97fffb57 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a3048:	d1000660 	sub	x0, x19, #0x1
   a304c:	52800403 	mov	w3, #0x20                  	// #32
   a3050:	f9400f41 	ldr	x1, [x26, #24]
   a3054:	d1000400 	sub	x0, x0, #0x1
   a3058:	b100041f 	cmn	x0, #0x1
   a305c:	91000422 	add	x2, x1, #0x1
   a3060:	f9000f42 	str	x2, [x26, #24]
   a3064:	39000023 	strb	w3, [x1]
   a3068:	54ffff41 	b.ne	a3050 <CString::FormatV(char const*, std::__va_list)+0x980>  // b.any
   a306c:	17fffec5 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a3070:	110022c1 	add	w1, w22, #0x8
   a3074:	7100003f 	cmp	w1, #0x0
   a3078:	54000f4d 	b.le	a3260 <CString::FormatV(char const*, std::__va_list)+0xb90>
   a307c:	aa1403e0 	mov	x0, x20
   a3080:	91002e82 	add	x2, x20, #0xb
   a3084:	39c0001b 	ldrsb	w27, [x0]
   a3088:	2a0103f6 	mov	w22, w1
   a308c:	927df054 	and	x20, x2, #0xfffffffffffffff8
   a3090:	34ffd559 	cbz	w25, a2b38 <CString::FormatV(char const*, std::__va_list)+0x468>
   a3094:	d2800021 	mov	x1, #0x1                   	// #1
   a3098:	aa1a03e0 	mov	x0, x26
   a309c:	97fffb41 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a30a0:	f9400f40 	ldr	x0, [x26, #24]
   a30a4:	f100067f 	cmp	x19, #0x1
   a30a8:	91000401 	add	x1, x0, #0x1
   a30ac:	f9000f41 	str	x1, [x26, #24]
   a30b0:	3900001b 	strb	w27, [x0]
   a30b4:	54ffd669 	b.ls	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>  // b.plast
   a30b8:	d1000661 	sub	x1, x19, #0x1
   a30bc:	aa1a03e0 	mov	x0, x26
   a30c0:	97fffb38 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a30c4:	d1000a73 	sub	x19, x19, #0x2
   a30c8:	52800402 	mov	w2, #0x20                  	// #32
   a30cc:	d503201f 	nop
   a30d0:	f9400f40 	ldr	x0, [x26, #24]
   a30d4:	d1000673 	sub	x19, x19, #0x1
   a30d8:	b100067f 	cmn	x19, #0x1
   a30dc:	91000401 	add	x1, x0, #0x1
   a30e0:	f9000f41 	str	x1, [x26, #24]
   a30e4:	39000002 	strb	w2, [x0]
   a30e8:	54ffff41 	b.ne	a30d0 <CString::FormatV(char const*, std::__va_list)+0xa00>  // b.any
   a30ec:	17fffea5 	b	a2b80 <CString::FormatV(char const*, std::__va_list)+0x4b0>
   a30f0:	f9403fe1 	ldr	x1, [sp, #120]
   a30f4:	aa1a03e0 	mov	x0, x26
   a30f8:	b9006fe7 	str	w7, [sp, #108]
   a30fc:	b90087e8 	str	w8, [sp, #132]
   a3100:	97fffc00 	bl	a2100 <CString::PutString(char const*)>
   a3104:	39c00362 	ldrsb	w2, [x27]
   a3108:	d2800203 	mov	x3, #0x10                  	// #16
   a310c:	b9406fe7 	ldr	w7, [sp, #108]
   a3110:	b94087e8 	ldr	w8, [sp, #132]
   a3114:	17fffdef 	b	a28d0 <CString::FormatV(char const*, std::__va_list)+0x200>
   a3118:	f9403be0 	ldr	x0, [sp, #112]
   a311c:	8b36c000 	add	x0, x0, w22, sxtw
   a3120:	2a0103f6 	mov	w22, w1
   a3124:	17fffdf0 	b	a28e4 <CString::FormatV(char const*, std::__va_list)+0x214>
   a3128:	37f81016 	tbnz	w22, #31, a3328 <CString::FormatV(char const*, std::__va_list)+0xc58>
   a312c:	aa1403e0 	mov	x0, x20
   a3130:	91002e81 	add	x1, x20, #0xb
   a3134:	b9800002 	ldrsw	x2, [x0]
   a3138:	927df034 	and	x20, x1, #0xfffffffffffffff8
   a313c:	17ffff49 	b	a2e60 <CString::FormatV(char const*, std::__va_list)+0x790>
   a3140:	d1000661 	sub	x1, x19, #0x1
   a3144:	aa1a03e0 	mov	x0, x26
   a3148:	97fffb16 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a314c:	d1000a73 	sub	x19, x19, #0x2
   a3150:	52800402 	mov	w2, #0x20                  	// #32
   a3154:	d503201f 	nop
   a3158:	f9400f40 	ldr	x0, [x26, #24]
   a315c:	d1000673 	sub	x19, x19, #0x1
   a3160:	b100067f 	cmn	x19, #0x1
   a3164:	91000401 	add	x1, x0, #0x1
   a3168:	f9000f41 	str	x1, [x26, #24]
   a316c:	39000002 	strb	w2, [x0]
   a3170:	54ffff41 	b.ne	a3158 <CString::FormatV(char const*, std::__va_list)+0xa88>  // b.any
   a3174:	17fffe73 	b	a2b40 <CString::FormatV(char const*, std::__va_list)+0x470>
   a3178:	110022c1 	add	w1, w22, #0x8
   a317c:	7100003f 	cmp	w1, #0x0
   a3180:	54000e6d 	b.le	a334c <CString::FormatV(char const*, std::__va_list)+0xc7c>
   a3184:	91003e82 	add	x2, x20, #0xf
   a3188:	aa1403e0 	mov	x0, x20
   a318c:	2a0103f6 	mov	w22, w1
   a3190:	927df054 	and	x20, x2, #0xfffffffffffffff8
   a3194:	17fffe26 	b	a2a2c <CString::FormatV(char const*, std::__va_list)+0x35c>
   a3198:	110022c1 	add	w1, w22, #0x8
   a319c:	7100003f 	cmp	w1, #0x0
   a31a0:	54000a0d 	b.le	a32e0 <CString::FormatV(char const*, std::__va_list)+0xc10>
   a31a4:	91003e84 	add	x4, x20, #0xf
   a31a8:	aa1403e0 	mov	x0, x20
   a31ac:	2a0103f6 	mov	w22, w1
   a31b0:	927df094 	and	x20, x4, #0xfffffffffffffff8
   a31b4:	17fffea6 	b	a2c4c <CString::FormatV(char const*, std::__va_list)+0x57c>
   a31b8:	110022c1 	add	w1, w22, #0x8
   a31bc:	7100003f 	cmp	w1, #0x0
   a31c0:	5400098d 	b.le	a32f0 <CString::FormatV(char const*, std::__va_list)+0xc20>
   a31c4:	aa1403e0 	mov	x0, x20
   a31c8:	91002e84 	add	x4, x20, #0xb
   a31cc:	b9400009 	ldr	w9, [x0]
   a31d0:	2a0103f6 	mov	w22, w1
   a31d4:	927df094 	and	x20, x4, #0xfffffffffffffff8
   a31d8:	17fffe9e 	b	a2c50 <CString::FormatV(char const*, std::__va_list)+0x580>
   a31dc:	cb000273 	sub	x19, x19, x0
   a31e0:	aa1a03e0 	mov	x0, x26
   a31e4:	aa1303e1 	mov	x1, x19
   a31e8:	97fffaee 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a31ec:	d1000660 	sub	x0, x19, #0x1
   a31f0:	52800404 	mov	w4, #0x20                  	// #32
   a31f4:	d503201f 	nop
   a31f8:	f9400f41 	ldr	x1, [x26, #24]
   a31fc:	d1000400 	sub	x0, x0, #0x1
   a3200:	b100041f 	cmn	x0, #0x1
   a3204:	91000422 	add	x2, x1, #0x1
   a3208:	f9000f42 	str	x2, [x26, #24]
   a320c:	39000024 	strb	w4, [x1]
   a3210:	54ffff41 	b.ne	a31f8 <CString::FormatV(char const*, std::__va_list)+0xb28>  // b.any
   a3214:	17fffdfb 	b	a2a00 <CString::FormatV(char const*, std::__va_list)+0x330>
   a3218:	f9403be0 	ldr	x0, [sp, #112]
   a321c:	8b36c000 	add	x0, x0, w22, sxtw
   a3220:	2a0103f6 	mov	w22, w1
   a3224:	17fffdf0 	b	a29e4 <CString::FormatV(char const*, std::__va_list)+0x314>
   a3228:	b94083e3 	ldr	w3, [sp, #128]
   a322c:	b90083e0 	str	w0, [sp, #128]
   a3230:	f9400aa2 	ldr	x2, [x21, #16]
   a3234:	8b23c042 	add	x2, x2, w3, sxtw
   a3238:	17fffd87 	b	a2854 <CString::FormatV(char const*, std::__va_list)+0x184>
   a323c:	d2800021 	mov	x1, #0x1                   	// #1
   a3240:	aa1a03e0 	mov	x0, x26
   a3244:	97fffad7 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a3248:	f9400f40 	ldr	x0, [x26, #24]
   a324c:	528005a1 	mov	w1, #0x2d                  	// #45
   a3250:	91000402 	add	x2, x0, #0x1
   a3254:	f9000f42 	str	x2, [x26, #24]
   a3258:	39000001 	strb	w1, [x0]
   a325c:	17fffe1a 	b	a2ac4 <CString::FormatV(char const*, std::__va_list)+0x3f4>
   a3260:	f9403be0 	ldr	x0, [sp, #112]
   a3264:	8b36c000 	add	x0, x0, w22, sxtw
   a3268:	2a0103f6 	mov	w22, w1
   a326c:	17fffe31 	b	a2b30 <CString::FormatV(char const*, std::__va_list)+0x460>
   a3270:	aa0903e4 	mov	x4, x9
   a3274:	d2800020 	mov	x0, #0x1                   	// #1
   a3278:	aa0903e8 	mov	x8, x9
   a327c:	17fffe7e 	b	a2c74 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   a3280:	34000ac7 	cbz	w7, a33d8 <CString::FormatV(char const*, std::__va_list)+0xd08>
   a3284:	eb1b027f 	cmp	x19, x27
   a3288:	54ffb809 	b.ls	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>  // b.plast
   a328c:	cb1b0273 	sub	x19, x19, x27
   a3290:	aa1a03e0 	mov	x0, x26
   a3294:	aa1303e1 	mov	x1, x19
   a3298:	97fffac2 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a329c:	d1000660 	sub	x0, x19, #0x1
   a32a0:	52800603 	mov	w3, #0x30                  	// #48
   a32a4:	f9400f41 	ldr	x1, [x26, #24]
   a32a8:	d1000400 	sub	x0, x0, #0x1
   a32ac:	b100041f 	cmn	x0, #0x1
   a32b0:	91000422 	add	x2, x1, #0x1
   a32b4:	f9000f42 	str	x2, [x26, #24]
   a32b8:	39000023 	strb	w3, [x1]
   a32bc:	54ffff41 	b.ne	a32a4 <CString::FormatV(char const*, std::__va_list)+0xbd4>  // b.any
   a32c0:	17fffdb2 	b	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   a32c4:	aa0903e4 	mov	x4, x9
   a32c8:	d2800020 	mov	x0, #0x1                   	// #1
   a32cc:	aa0903e8 	mov	x8, x9
   a32d0:	17fffd8f 	b	a290c <CString::FormatV(char const*, std::__va_list)+0x23c>
   a32d4:	aa1c03fb 	mov	x27, x28
   a32d8:	9100079c 	add	x28, x28, #0x1
   a32dc:	17fffd4d 	b	a2810 <CString::FormatV(char const*, std::__va_list)+0x140>
   a32e0:	f9403be0 	ldr	x0, [sp, #112]
   a32e4:	8b36c000 	add	x0, x0, w22, sxtw
   a32e8:	2a0103f6 	mov	w22, w1
   a32ec:	17fffe58 	b	a2c4c <CString::FormatV(char const*, std::__va_list)+0x57c>
   a32f0:	f9403be0 	ldr	x0, [sp, #112]
   a32f4:	8b36c000 	add	x0, x0, w22, sxtw
   a32f8:	2a0103f6 	mov	w22, w1
   a32fc:	b9400009 	ldr	w9, [x0]
   a3300:	17fffe54 	b	a2c50 <CString::FormatV(char const*, std::__va_list)+0x580>
   a3304:	110022c1 	add	w1, w22, #0x8
   a3308:	7100003f 	cmp	w1, #0x0
   a330c:	540004ad 	b.le	a33a0 <CString::FormatV(char const*, std::__va_list)+0xcd0>
   a3310:	91003e82 	add	x2, x20, #0xf
   a3314:	aa1403e0 	mov	x0, x20
   a3318:	2a0103f6 	mov	w22, w1
   a331c:	927df054 	and	x20, x2, #0xfffffffffffffff8
   a3320:	f9400002 	ldr	x2, [x0]
   a3324:	17fffecf 	b	a2e60 <CString::FormatV(char const*, std::__va_list)+0x790>
   a3328:	110022c1 	add	w1, w22, #0x8
   a332c:	7100003f 	cmp	w1, #0x0
   a3330:	5400042d 	b.le	a33b4 <CString::FormatV(char const*, std::__va_list)+0xce4>
   a3334:	91002e82 	add	x2, x20, #0xb
   a3338:	aa1403e0 	mov	x0, x20
   a333c:	2a0103f6 	mov	w22, w1
   a3340:	927df054 	and	x20, x2, #0xfffffffffffffff8
   a3344:	b9800002 	ldrsw	x2, [x0]
   a3348:	17fffec6 	b	a2e60 <CString::FormatV(char const*, std::__va_list)+0x790>
   a334c:	f9403be0 	ldr	x0, [sp, #112]
   a3350:	8b36c000 	add	x0, x0, w22, sxtw
   a3354:	2a0103f6 	mov	w22, w1
   a3358:	17fffdb5 	b	a2a2c <CString::FormatV(char const*, std::__va_list)+0x35c>
   a335c:	d2800021 	mov	x1, #0x1                   	// #1
   a3360:	aa1a03e0 	mov	x0, x26
   a3364:	97fffa8f 	bl	a1da0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a3368:	f9400f40 	ldr	x0, [x26, #24]
   a336c:	528005a1 	mov	w1, #0x2d                  	// #45
   a3370:	91000402 	add	x2, x0, #0x1
   a3374:	f9000f42 	str	x2, [x26, #24]
   a3378:	39000001 	strb	w1, [x0]
   a337c:	17ffffc2 	b	a3284 <CString::FormatV(char const*, std::__va_list)+0xbb4>
   a3380:	aa0303e1 	mov	x1, x3
   a3384:	d2800020 	mov	x0, #0x1                   	// #1
   a3388:	17fffec3 	b	a2e94 <CString::FormatV(char const*, std::__va_list)+0x7c4>
   a338c:	aa0303e1 	mov	x1, x3
   a3390:	d2800020 	mov	x0, #0x1                   	// #1
   a3394:	17fffdb2 	b	a2a5c <CString::FormatV(char const*, std::__va_list)+0x38c>
   a3398:	52800018 	mov	w24, #0x0                   	// #0
   a339c:	17fffda7 	b	a2a38 <CString::FormatV(char const*, std::__va_list)+0x368>
   a33a0:	f9403be0 	ldr	x0, [sp, #112]
   a33a4:	8b36c000 	add	x0, x0, w22, sxtw
   a33a8:	2a0103f6 	mov	w22, w1
   a33ac:	f9400002 	ldr	x2, [x0]
   a33b0:	17fffeac 	b	a2e60 <CString::FormatV(char const*, std::__va_list)+0x790>
   a33b4:	f9403be0 	ldr	x0, [sp, #112]
   a33b8:	8b36c000 	add	x0, x0, w22, sxtw
   a33bc:	2a0103f6 	mov	w22, w1
   a33c0:	b9800002 	ldrsw	x2, [x0]
   a33c4:	17fffea7 	b	a2e60 <CString::FormatV(char const*, std::__va_list)+0x790>
   a33c8:	34ffa809 	cbz	w9, a28c8 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   a33cc:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a33d0:	91072021 	add	x1, x1, #0x1c8
   a33d4:	17ffff48 	b	a30f4 <CString::FormatV(char const*, std::__va_list)+0xa24>
   a33d8:	eb13001f 	cmp	x0, x19
   a33dc:	54ffad62 	b.cs	a2988 <CString::FormatV(char const*, std::__va_list)+0x2b8>  // b.hs, b.nlast
   a33e0:	17fffecb 	b	a2f0c <CString::FormatV(char const*, std::__va_list)+0x83c>
   a33e4:	d503201f 	nop
   a33e8:	d503201f 	nop
   a33ec:	d503201f 	nop

00000000000a33f0 <CString::Format(char const*, ...)>:
   a33f0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   a33f4:	910403e8 	add	x8, sp, #0x100
   a33f8:	910403eb 	add	x11, sp, #0x100
   a33fc:	910003fd 	mov	x29, sp
   a3400:	910343ea 	add	x10, sp, #0xd0
   a3404:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   a3408:	a9032fe8 	stp	x8, x11, [sp, #48]
   a340c:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   a3410:	f90023ea 	str	x10, [sp, #64]
   a3414:	b9004be9 	str	w9, [sp, #72]
   a3418:	b9004fe8 	str	w8, [sp, #76]
   a341c:	a9432fea 	ldp	x10, x11, [sp, #48]
   a3420:	a94427e8 	ldp	x8, x9, [sp, #64]
   a3424:	a90d0fe2 	stp	x2, x3, [sp, #208]
   a3428:	910043e2 	add	x2, sp, #0x10
   a342c:	a9012fea 	stp	x10, x11, [sp, #16]
   a3430:	a90227e8 	stp	x8, x9, [sp, #32]
   a3434:	3d8017e0 	str	q0, [sp, #80]
   a3438:	3d801be1 	str	q1, [sp, #96]
   a343c:	3d801fe2 	str	q2, [sp, #112]
   a3440:	3d8023e3 	str	q3, [sp, #128]
   a3444:	3d8027e4 	str	q4, [sp, #144]
   a3448:	3d802be5 	str	q5, [sp, #160]
   a344c:	3d802fe6 	str	q6, [sp, #176]
   a3450:	3d8033e7 	str	q7, [sp, #192]
   a3454:	a90e17e4 	stp	x4, x5, [sp, #224]
   a3458:	a90f1fe6 	stp	x6, x7, [sp, #240]
   a345c:	97fffc9d 	bl	a26d0 <CString::FormatV(char const*, std::__va_list)>
   a3460:	a8d07bfd 	ldp	x29, x30, [sp], #256
   a3464:	d65f03c0 	ret
	...

00000000000a3470 <__aeabi_atexit>:
   a3470:	d65f03c0 	ret
   a3474:	d503201f 	nop
   a3478:	d503201f 	nop
   a347c:	d503201f 	nop

00000000000a3480 <__cxa_atexit>:
   a3480:	d65f03c0 	ret
   a3484:	d503201f 	nop
   a3488:	d503201f 	nop
   a348c:	d503201f 	nop

00000000000a3490 <__errno>:
   a3490:	f0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a3494:	913c8000 	add	x0, x0, #0xf20
   a3498:	91002000 	add	x0, x0, #0x8
   a349c:	d65f03c0 	ret

00000000000a34a0 <set_qemu_exit_status>:
   a34a0:	f0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a34a4:	b90f2c20 	str	w0, [x1, #3884]
   a34a8:	d65f03c0 	ret
   a34ac:	d503201f 	nop

00000000000a34b0 <halt>:
   a34b0:	d50342df 	msr	daifset, #0x2
   a34b4:	d50341df 	msr	daifset, #0x1
   a34b8:	d5033f9f 	dsb	sy
   a34bc:	d503207f 	wfi
   a34c0:	17fffffe 	b	a34b8 <halt+0x8>
   a34c4:	d503201f 	nop
   a34c8:	d503201f 	nop
   a34cc:	d503201f 	nop

00000000000a34d0 <reboot>:
   a34d0:	d2800482 	mov	x2, #0x24                  	// #36
   a34d4:	f2bfc202 	movk	x2, #0xfe10, lsl #16
   a34d8:	52800023 	mov	w3, #0x1                   	// #1
   a34dc:	72ab4003 	movk	w3, #0x5a00, lsl #16
   a34e0:	d2800380 	mov	x0, #0x1c                  	// #28
   a34e4:	f2bfc200 	movk	x0, #0xfe10, lsl #16
   a34e8:	52800401 	mov	w1, #0x20                  	// #32
   a34ec:	72ab4001 	movk	w1, #0x5a00, lsl #16
   a34f0:	b9000043 	str	w3, [x2]
   a34f4:	b9000001 	str	w1, [x0]
   a34f8:	14000000 	b	a34f8 <reboot+0x28>
   a34fc:	d503201f 	nop

00000000000a3500 <sysinit>:
   a3500:	d10dc3ff 	sub	sp, sp, #0x370
   a3504:	a9007bfd 	stp	x29, x30, [sp]
   a3508:	910003fd 	mov	x29, sp
   a350c:	a90153f3 	stp	x19, x20, [sp, #16]
   a3510:	d50341ff 	msr	daifclr, #0x1
   a3514:	900000a2 	adrp	x2, b7000 <CBcmMailBox::s_SpinLock+0x8>
   a3518:	91020042 	add	x2, x2, #0x80
   a351c:	f0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a3520:	91118000 	add	x0, x0, #0x460
   a3524:	cb000042 	sub	x2, x2, x0
   a3528:	52800001 	mov	w1, #0x0                   	// #0
   a352c:	940003d9 	bl	a4490 <memset>
   a3530:	910083e0 	add	x0, sp, #0x20
   a3534:	97ffeeff 	bl	9f130 <CMachineInfo::CMachineInfo()>
   a3538:	910103e0 	add	x0, sp, #0x40
   a353c:	52800021 	mov	w1, #0x1                   	// #1
   a3540:	94000a70 	bl	a5f00 <CMemorySystem::CMemorySystem(bool)>
   a3544:	d0000094 	adrp	x20, b5000 <font_data+0x1340>
   a3548:	9129c281 	add	x1, x20, #0xa70
   a354c:	d0000080 	adrp	x0, b5000 <font_data+0x1340>
   a3550:	912a2000 	add	x0, x0, #0xa88
   a3554:	eb00003f 	cmp	x1, x0
   a3558:	54000182 	b.cs	a3588 <sysinit+0x88>  // b.hs, b.nlast
   a355c:	d1000414 	sub	x20, x0, #0x1
   a3560:	aa0103f3 	mov	x19, x1
   a3564:	cb010294 	sub	x20, x20, x1
   a3568:	927df294 	and	x20, x20, #0xfffffffffffffff8
   a356c:	91002294 	add	x20, x20, #0x8
   a3570:	8b010294 	add	x20, x20, x1
   a3574:	d503201f 	nop
   a3578:	f8408660 	ldr	x0, [x19], #8
   a357c:	d63f0000 	blr	x0
   a3580:	eb14027f 	cmp	x19, x20
   a3584:	54ffffa1 	b.ne	a3578 <sysinit+0x78>  // b.any
   a3588:	97ff749e 	bl	80800 <main>
   a358c:	7100041f 	cmp	w0, #0x1
   a3590:	54000040 	b.eq	a3598 <sysinit+0x98>  // b.none
   a3594:	97ffffc7 	bl	a34b0 <halt>
   a3598:	940006d2 	bl	a50e0 <IsChainBootEnabled>
   a359c:	72001c1f 	tst	w0, #0xff
   a35a0:	54000041 	b.ne	a35a8 <sysinit+0xa8>  // b.any
   a35a4:	97ffffcb 	bl	a34d0 <reboot>
   a35a8:	910103e0 	add	x0, sp, #0x40
   a35ac:	94000ad9 	bl	a6110 <CMemorySystem::Destructor()>
   a35b0:	d50341df 	msr	daifset, #0x1
   a35b4:	940006d3 	bl	a5100 <DoChainBoot>
   a35b8:	97ffffc6 	bl	a34d0 <reboot>
   a35bc:	00000000 	.inst	0x00000000 ; undefined

00000000000a35c0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   a35c0:	11000400 	add	w0, w0, #0x1
   a35c4:	d5033fdf 	isb
   a35c8:	d53be023 	mrs	x3, cntpct_el0
   a35cc:	d53be002 	mrs	x2, cntfrq_el0
   a35d0:	d2884801 	mov	x1, #0x4240                	// #16960
   a35d4:	f2a001e1 	movk	x1, #0xf, lsl #16
   a35d8:	aa0103e4 	mov	x4, x1
   a35dc:	9b017c63 	mul	x3, x3, x1
   a35e0:	9ac20863 	udiv	x3, x3, x2
   a35e4:	d503201f 	nop
   a35e8:	d5033fdf 	isb
   a35ec:	d53be021 	mrs	x1, cntpct_el0
   a35f0:	d53be002 	mrs	x2, cntfrq_el0
   a35f4:	9b047c21 	mul	x1, x1, x4
   a35f8:	9ac20821 	udiv	x1, x1, x2
   a35fc:	4b030021 	sub	w1, w1, w3
   a3600:	6b01001f 	cmp	w0, w1
   a3604:	54ffff28 	b.hi	a35e8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x28>  // b.pmore
   a3608:	d65f03c0 	ret
   a360c:	d503201f 	nop

00000000000a3610 <CTimer::CTimer(CInterruptSystem*)>:
   a3610:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3614:	910003fd 	mov	x29, sp
   a3618:	d2800022 	mov	x2, #0x1                   	// #1
   a361c:	f9000bf3 	str	x19, [sp, #16]
   a3620:	aa0003f3 	mov	x19, x0
   a3624:	91008000 	add	x0, x0, #0x20
   a3628:	b9000e7f 	str	wzr, [x19, #12]
   a362c:	b900127f 	str	wzr, [x19, #16]
   a3630:	f9000261 	str	x1, [x19]
   a3634:	b900167f 	str	wzr, [x19, #20]
   a3638:	f9000e62 	str	x2, [x19, #24]
   a363c:	94001939 	bl	a9b20 <CPtrList::CPtrList()>
   a3640:	d2800023 	mov	x3, #0x1                   	// #1
   a3644:	52801902 	mov	w2, #0xc8                  	// #200
   a3648:	b9005a7f 	str	wzr, [x19, #88]
   a364c:	f2c1a803 	movk	x3, #0xd40, lsl #32
   a3650:	f2e00063 	movk	x3, #0x3, lsl #48
   a3654:	f0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a3658:	b9003262 	str	w2, [x19, #48]
   a365c:	f9479801 	ldr	x1, [x0, #3888]
   a3660:	f9001663 	str	x3, [x19, #40]
   a3664:	b50000a1 	cbnz	x1, a3678 <CTimer::CTimer(CInterruptSystem*)+0x68>
   a3668:	f9079813 	str	x19, [x0, #3888]
   a366c:	f9400bf3 	ldr	x19, [sp, #16]
   a3670:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3674:	d65f03c0 	ret
   a3678:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a367c:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3680:	9107e021 	add	x1, x1, #0x1f8
   a3684:	91082000 	add	x0, x0, #0x208
   a3688:	52800822 	mov	w2, #0x41                  	// #65
   a368c:	97ffe3fd 	bl	9c680 <assertion_failed>

00000000000a3690 <CTimer::~CTimer()>:
   a3690:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3694:	910003fd 	mov	x29, sp
   a3698:	a90153f3 	stp	x19, x20, [sp, #16]
   a369c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a36a0:	aa0003f5 	mov	x21, x0
   a36a4:	f9400000 	ldr	x0, [x0]
   a36a8:	b4000620 	cbz	x0, a376c <CTimer::~CTimer()+0xdc>
   a36ac:	52800001 	mov	w1, #0x0                   	// #0
   a36b0:	d51be221 	msr	cntp_ctl_el0, x1
   a36b4:	528003c1 	mov	w1, #0x1e                  	// #30
   a36b8:	910082b5 	add	x21, x21, #0x20
   a36bc:	940011fd 	bl	a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a36c0:	aa1503e0 	mov	x0, x21
   a36c4:	5289a876 	mov	w22, #0x4d43                	// #19779
   a36c8:	72a96a96 	movk	w22, #0x4b54, lsl #16
   a36cc:	94001925 	bl	a9b60 <CPtrList::GetFirst()>
   a36d0:	aa0003f3 	mov	x19, x0
   a36d4:	b4000260 	cbz	x0, a3720 <CTimer::~CTimer()+0x90>
   a36d8:	aa0003e1 	mov	x1, x0
   a36dc:	aa1503e0 	mov	x0, x21
   a36e0:	9400193c 	bl	a9bd0 <CPtrList::GetPtr(TPtrListElement*)>
   a36e4:	aa0003f4 	mov	x20, x0
   a36e8:	b40002a0 	cbz	x0, a373c <CTimer::~CTimer()+0xac>
   a36ec:	b9400000 	ldr	w0, [x0]
   a36f0:	6b16001f 	cmp	w0, w22
   a36f4:	54000301 	b.ne	a3754 <CTimer::~CTimer()+0xc4>  // b.any
   a36f8:	aa1303e1 	mov	x1, x19
   a36fc:	aa1503e0 	mov	x0, x21
   a3700:	940019cc 	bl	a9e30 <CPtrList::Remove(TPtrListElement*)>
   a3704:	aa1403e0 	mov	x0, x20
   a3708:	d2800501 	mov	x1, #0x28                  	// #40
   a370c:	94000801 	bl	a5710 <operator delete(void*, unsigned long)>
   a3710:	aa1503e0 	mov	x0, x21
   a3714:	94001913 	bl	a9b60 <CPtrList::GetFirst()>
   a3718:	aa0003f3 	mov	x19, x0
   a371c:	b5fffde0 	cbnz	x0, a36d8 <CTimer::~CTimer()+0x48>
   a3720:	f0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a3724:	aa1503e0 	mov	x0, x21
   a3728:	a94153f3 	ldp	x19, x20, [sp, #16]
   a372c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3730:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3734:	f907983f 	str	xzr, [x1, #3888]
   a3738:	140018fe 	b	a9b30 <CPtrList::~CPtrList()>
   a373c:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3740:	90000060 	adrp	x0, af000 <FromUmsd+0xb0>
   a3744:	9107e021 	add	x1, x1, #0x1f8
   a3748:	911d8000 	add	x0, x0, #0x760
   a374c:	52800b02 	mov	w2, #0x58                  	// #88
   a3750:	97ffe3cc 	bl	9c680 <assertion_failed>
   a3754:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3758:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a375c:	9107e021 	add	x1, x1, #0x1f8
   a3760:	9108c000 	add	x0, x0, #0x230
   a3764:	52800b22 	mov	w2, #0x59                  	// #89
   a3768:	97ffe3c6 	bl	9c680 <assertion_failed>
   a376c:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3770:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3774:	9107e021 	add	x1, x1, #0x1f8
   a3778:	91086000 	add	x0, x0, #0x218
   a377c:	528008e2 	mov	w2, #0x47                  	// #71
   a3780:	97ffe3c0 	bl	9c680 <assertion_failed>
   a3784:	d503201f 	nop
   a3788:	d503201f 	nop
   a378c:	d503201f 	nop

00000000000a3790 <CTimer::SetTimeZone(int)>:
   a3790:	11167c22 	add	w2, w1, #0x59f
   a3794:	712cf85f 	cmp	w2, #0xb3e
   a3798:	54000089 	b.ls	a37a8 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   a379c:	52800002 	mov	w2, #0x0                   	// #0
   a37a0:	2a0203e0 	mov	w0, w2
   a37a4:	d65f03c0 	ret
   a37a8:	52800022 	mov	w2, #0x1                   	// #1
   a37ac:	b9001c01 	str	w1, [x0, #28]
   a37b0:	2a0203e0 	mov	w0, w2
   a37b4:	d65f03c0 	ret
   a37b8:	d503201f 	nop
   a37bc:	d503201f 	nop

00000000000a37c0 <CTimer::GetTimeZone() const>:
   a37c0:	b9401c00 	ldr	w0, [x0, #28]
   a37c4:	d65f03c0 	ret
   a37c8:	d503201f 	nop
   a37cc:	d503201f 	nop

00000000000a37d0 <CTimer::SetTime(unsigned int, bool)>:
   a37d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a37d4:	910003fd 	mov	x29, sp
   a37d8:	72001c42 	ands	w2, w2, #0xff
   a37dc:	a90153f3 	stp	x19, x20, [sp, #16]
   a37e0:	aa0003f3 	mov	x19, x0
   a37e4:	2a0103f4 	mov	w20, w1
   a37e8:	540000e1 	b.ne	a3804 <CTimer::SetTime(unsigned int, bool)+0x34>  // b.any
   a37ec:	b9401c01 	ldr	w1, [x0, #28]
   a37f0:	531c6c20 	lsl	w0, w1, #4
   a37f4:	4b010000 	sub	w0, w0, w1
   a37f8:	531e7401 	lsl	w1, w0, #2
   a37fc:	37e80140 	tbnz	w0, #29, a3824 <CTimer::SetTime(unsigned int, bool)+0x54>
   a3800:	0b010294 	add	w20, w20, w1
   a3804:	b9401a60 	ldr	w0, [x19, #24]
   a3808:	35000180 	cbnz	w0, a3838 <CTimer::SetTime(unsigned int, bool)+0x68>
   a380c:	52800022 	mov	w2, #0x1                   	// #1
   a3810:	b9001674 	str	w20, [x19, #20]
   a3814:	2a0203e0 	mov	w0, w2
   a3818:	a94153f3 	ldp	x19, x20, [sp, #16]
   a381c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3820:	d65f03c0 	ret
   a3824:	4b0103e0 	neg	w0, w1
   a3828:	6b14001f 	cmp	w0, w20
   a382c:	54ffff4c 	b.gt	a3814 <CTimer::SetTime(unsigned int, bool)+0x44>
   a3830:	0b010294 	add	w20, w20, w1
   a3834:	17fffff4 	b	a3804 <CTimer::SetTime(unsigned int, bool)+0x34>
   a3838:	94000aa6 	bl	a62d0 <EnterCritical>
   a383c:	b9401a60 	ldr	w0, [x19, #24]
   a3840:	b9001674 	str	w20, [x19, #20]
   a3844:	340000e0 	cbz	w0, a3860 <CTimer::SetTime(unsigned int, bool)+0x90>
   a3848:	94000ad2 	bl	a6390 <LeaveCritical>
   a384c:	52800022 	mov	w2, #0x1                   	// #1
   a3850:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3854:	2a0203e0 	mov	w0, w2
   a3858:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a385c:	d65f03c0 	ret
   a3860:	52800022 	mov	w2, #0x1                   	// #1
   a3864:	17ffffec 	b	a3814 <CTimer::SetTime(unsigned int, bool)+0x44>
   a3868:	d503201f 	nop
   a386c:	d503201f 	nop

00000000000a3870 <CTimer::GetClockTicks()>:
   a3870:	d5033fdf 	isb
   a3874:	d53be021 	mrs	x1, cntpct_el0
   a3878:	d53be002 	mrs	x2, cntfrq_el0
   a387c:	d2884800 	mov	x0, #0x4240                	// #16960
   a3880:	f2a001e0 	movk	x0, #0xf, lsl #16
   a3884:	9b007c20 	mul	x0, x1, x0
   a3888:	9ac20800 	udiv	x0, x0, x2
   a388c:	d65f03c0 	ret

00000000000a3890 <CTimer::GetTicks() const>:
   a3890:	b9400c00 	ldr	w0, [x0, #12]
   a3894:	d65f03c0 	ret
   a3898:	d503201f 	nop
   a389c:	d503201f 	nop

00000000000a38a0 <CTimer::GetUptime() const>:
   a38a0:	b9401000 	ldr	w0, [x0, #16]
   a38a4:	d65f03c0 	ret
   a38a8:	d503201f 	nop
   a38ac:	d503201f 	nop

00000000000a38b0 <CTimer::GetTime() const>:
   a38b0:	b9401400 	ldr	w0, [x0, #20]
   a38b4:	d65f03c0 	ret
   a38b8:	d503201f 	nop
   a38bc:	d503201f 	nop

00000000000a38c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   a38c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a38c4:	910003fd 	mov	x29, sp
   a38c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a38cc:	aa0003f3 	mov	x19, x0
   a38d0:	aa0103f4 	mov	x20, x1
   a38d4:	b9401800 	ldr	w0, [x0, #24]
   a38d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a38dc:	aa0203f5 	mov	x21, x2
   a38e0:	f9001bf7 	str	x23, [sp, #48]
   a38e4:	350002a0 	cbnz	w0, a3938 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   a38e8:	b9401677 	ldr	w23, [x19, #20]
   a38ec:	b9400e76 	ldr	w22, [x19, #12]
   a38f0:	b4000334 	cbz	x20, a3954 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   a38f4:	b9000297 	str	w23, [x20]
   a38f8:	b40003b5 	cbz	x21, a396c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   a38fc:	5290a3e0 	mov	w0, #0x851f                	// #34079
   a3900:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   a3904:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3908:	52800c82 	mov	w2, #0x64                  	// #100
   a390c:	5284e201 	mov	w1, #0x2710                	// #10000
   a3910:	9ba07ec0 	umull	x0, w22, w0
   a3914:	f9401bf7 	ldr	x23, [sp, #48]
   a3918:	d365fc00 	lsr	x0, x0, #37
   a391c:	1b02d800 	msub	w0, w0, w2, w22
   a3920:	1b017c00 	mul	w0, w0, w1
   a3924:	b90002a0 	str	w0, [x21]
   a3928:	52800020 	mov	w0, #0x1                   	// #1
   a392c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3930:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3934:	d65f03c0 	ret
   a3938:	94000a66 	bl	a62d0 <EnterCritical>
   a393c:	b9401677 	ldr	w23, [x19, #20]
   a3940:	b9400e76 	ldr	w22, [x19, #12]
   a3944:	b9401a60 	ldr	w0, [x19, #24]
   a3948:	34fffd40 	cbz	w0, a38f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   a394c:	94000a91 	bl	a6390 <LeaveCritical>
   a3950:	b5fffd34 	cbnz	x20, a38f4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   a3954:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3958:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a395c:	9107e021 	add	x1, x1, #0x1f8
   a3960:	91096000 	add	x0, x0, #0x258
   a3964:	52802082 	mov	w2, #0x104                 	// #260
   a3968:	97ffe346 	bl	9c680 <assertion_failed>
   a396c:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3970:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3974:	9107e021 	add	x1, x1, #0x1f8
   a3978:	9109a000 	add	x0, x0, #0x268
   a397c:	528020e2 	mov	w2, #0x107                 	// #263
   a3980:	97ffe340 	bl	9c680 <assertion_failed>
   a3984:	d503201f 	nop
   a3988:	d503201f 	nop
   a398c:	d503201f 	nop

00000000000a3990 <CTimer::GetUniversalTime() const>:
   a3990:	b9401c02 	ldr	w2, [x0, #28]
   a3994:	b9401401 	ldr	w1, [x0, #20]
   a3998:	531c6c40 	lsl	w0, w2, #4
   a399c:	4b020000 	sub	w0, w0, w2
   a39a0:	531e7400 	lsl	w0, w0, #2
   a39a4:	6b000020 	subs	w0, w1, w0
   a39a8:	1a9fa000 	csel	w0, w0, wzr, ge  // ge = tcont
   a39ac:	d65f03c0 	ret

00000000000a39b0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   a39b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a39b4:	910003fd 	mov	x29, sp
   a39b8:	a90153f3 	stp	x19, x20, [sp, #16]
   a39bc:	aa0003f3 	mov	x19, x0
   a39c0:	aa0103f4 	mov	x20, x1
   a39c4:	b9401800 	ldr	w0, [x0, #24]
   a39c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a39cc:	aa0203f5 	mov	x21, x2
   a39d0:	f9001bf7 	str	x23, [sp, #48]
   a39d4:	35000440 	cbnz	w0, a3a5c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   a39d8:	b9401676 	ldr	w22, [x19, #20]
   a39dc:	b9400e77 	ldr	w23, [x19, #12]
   a39e0:	b9401e62 	ldr	w2, [x19, #28]
   a39e4:	531c6c40 	lsl	w0, w2, #4
   a39e8:	4b020000 	sub	w0, w0, w2
   a39ec:	6b000adf 	cmp	w22, w0, lsl #2
   a39f0:	531e7400 	lsl	w0, w0, #2
   a39f4:	5400028b 	b.lt	a3a44 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x94>  // b.tstop
   a39f8:	b4000414 	cbz	x20, a3a78 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   a39fc:	4b0002c0 	sub	w0, w22, w0
   a3a00:	b9000280 	str	w0, [x20]
   a3a04:	b4000475 	cbz	x21, a3a90 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   a3a08:	5290a3e1 	mov	w1, #0x851f                	// #34079
   a3a0c:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   a3a10:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3a14:	52800c83 	mov	w3, #0x64                  	// #100
   a3a18:	5284e202 	mov	w2, #0x2710                	// #10000
   a3a1c:	9ba17ee1 	umull	x1, w23, w1
   a3a20:	52800020 	mov	w0, #0x1                   	// #1
   a3a24:	d365fc21 	lsr	x1, x1, #37
   a3a28:	1b03dc21 	msub	w1, w1, w3, w23
   a3a2c:	f9401bf7 	ldr	x23, [sp, #48]
   a3a30:	1b027c21 	mul	w1, w1, w2
   a3a34:	b90002a1 	str	w1, [x21]
   a3a38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3a3c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3a40:	d65f03c0 	ret
   a3a44:	52800000 	mov	w0, #0x0                   	// #0
   a3a48:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3a4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3a50:	f9401bf7 	ldr	x23, [sp, #48]
   a3a54:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3a58:	d65f03c0 	ret
   a3a5c:	94000a1d 	bl	a62d0 <EnterCritical>
   a3a60:	b9401676 	ldr	w22, [x19, #20]
   a3a64:	b9400e77 	ldr	w23, [x19, #12]
   a3a68:	b9401a60 	ldr	w0, [x19, #24]
   a3a6c:	34fffba0 	cbz	w0, a39e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   a3a70:	94000a48 	bl	a6390 <LeaveCritical>
   a3a74:	17ffffdb 	b	a39e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   a3a78:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3a7c:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3a80:	9107e021 	add	x1, x1, #0x1f8
   a3a84:	91096000 	add	x0, x0, #0x258
   a3a88:	52802522 	mov	w2, #0x129                 	// #297
   a3a8c:	97ffe2fd 	bl	9c680 <assertion_failed>
   a3a90:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3a94:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3a98:	9107e021 	add	x1, x1, #0x1f8
   a3a9c:	9109a000 	add	x0, x0, #0x268
   a3aa0:	52802582 	mov	w2, #0x12c                 	// #300
   a3aa4:	97ffe2f7 	bl	9c680 <assertion_failed>
   a3aa8:	d503201f 	nop
   a3aac:	d503201f 	nop

00000000000a3ab0 <CTimer::GetTimeString()>:
   a3ab0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a3ab4:	910003fd 	mov	x29, sp
   a3ab8:	a90153f3 	stp	x19, x20, [sp, #16]
   a3abc:	aa0003f3 	mov	x19, x0
   a3ac0:	b9401800 	ldr	w0, [x0, #24]
   a3ac4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3ac8:	a9046bf9 	stp	x25, x26, [sp, #64]
   a3acc:	35000da0 	cbnz	w0, a3c80 <CTimer::GetTimeString()+0x1d0>
   a3ad0:	b9401675 	ldr	w21, [x19, #20]
   a3ad4:	b9400e7a 	ldr	w26, [x19, #12]
   a3ad8:	2a1a02a0 	orr	w0, w21, w26
   a3adc:	34000e20 	cbz	w0, a3ca0 <CTimer::GetTimeString()+0x1f0>
   a3ae0:	52911136 	mov	w22, #0x8889                	// #34953
   a3ae4:	72b11116 	movk	w22, #0x8888, lsl #16
   a3ae8:	a90363f7 	stp	x23, x24, [sp, #48]
   a3aec:	52955573 	mov	w19, #0xaaab                	// #43691
   a3af0:	72b55553 	movk	w19, #0xaaaa, lsl #16
   a3af4:	9bb67eb9 	umull	x25, w21, w22
   a3af8:	528b8527 	mov	w7, #0x5c29                	// #23593
   a3afc:	72b851e7 	movk	w7, #0xc28f, lsl #16
   a3b00:	528b8505 	mov	w5, #0x5c28                	// #23592
   a3b04:	72a051e5 	movk	w5, #0x28f, lsl #16
   a3b08:	529ae148 	mov	w8, #0xd70a                	// #55050
   a3b0c:	72a01468 	movk	w8, #0xa3, lsl #16
   a3b10:	d365ff21 	lsr	x1, x25, #37
   a3b14:	5280f654 	mov	w20, #0x7b2                 	// #1970
   a3b18:	531c6c20 	lsl	w0, w1, #4
   a3b1c:	9bb67c36 	umull	x22, w1, w22
   a3b20:	4b010019 	sub	w25, w0, w1
   a3b24:	4b190ab9 	sub	w25, w21, w25, lsl #2
   a3b28:	d365fed8 	lsr	x24, x22, #37
   a3b2c:	531c6f00 	lsl	w0, w24, #4
   a3b30:	9bb37f13 	umull	x19, w24, w19
   a3b34:	4b180016 	sub	w22, w0, w24
   a3b38:	4b160836 	sub	w22, w1, w22, lsl #2
   a3b3c:	d364fe73 	lsr	x19, x19, #36
   a3b40:	14000003 	b	a3b4c <CTimer::GetTimeString()+0x9c>
   a3b44:	4b010273 	sub	w19, w19, w1
   a3b48:	11000694 	add	w20, w20, #0x1
   a3b4c:	1b077e81 	mul	w1, w20, w7
   a3b50:	f240069f 	tst	x20, #0x3
   a3b54:	1a9f17e0 	cset	w0, eq  // eq = none
   a3b58:	13810822 	ror	w2, w1, #2
   a3b5c:	6b05005f 	cmp	w2, w5
   a3b60:	54000088 	b.hi	a3b70 <CTimer::GetTimeString()+0xc0>  // b.pmore
   a3b64:	13811021 	ror	w1, w1, #4
   a3b68:	6b08003f 	cmp	w1, w8
   a3b6c:	1a9f87e0 	cset	w0, ls  // ls = plast
   a3b70:	1105b401 	add	w1, w0, #0x16d
   a3b74:	6b01027f 	cmp	w19, w1
   a3b78:	54fffe62 	b.cs	a3b44 <CTimer::GetTimeString()+0x94>  // b.hs, b.nlast
   a3b7c:	90000082 	adrp	x2, b3000 <vtable for CSerialDevice+0x18>
   a3b80:	910ee042 	add	x2, x2, #0x3b8
   a3b84:	52800015 	mov	w21, #0x0                   	// #0
   a3b88:	14000003 	b	a3b94 <CTimer::GetTimeString()+0xe4>
   a3b8c:	4b010273 	sub	w19, w19, w1
   a3b90:	110006b5 	add	w21, w21, #0x1
   a3b94:	7100001f 	cmp	w0, #0x0
   a3b98:	7a411aa0 	ccmp	w21, #0x1, #0x0, ne  // ne = any
   a3b9c:	540003e0 	b.eq	a3c18 <CTimer::GetTimeString()+0x168>  // b.none
   a3ba0:	b8755841 	ldr	w1, [x2, w21, uxtw #2]
   a3ba4:	6b01027f 	cmp	w19, w1
   a3ba8:	54ffff22 	b.cs	a3b8c <CTimer::GetTimeString()+0xdc>  // b.hs, b.nlast
   a3bac:	5290a3f7 	mov	w23, #0x851f                	// #34079
   a3bb0:	72aa3d77 	movk	w23, #0x51eb, lsl #16
   a3bb4:	52800c81 	mov	w1, #0x64                  	// #100
   a3bb8:	d2800400 	mov	x0, #0x20                  	// #32
   a3bbc:	9bb77f57 	umull	x23, w26, w23
   a3bc0:	d365fef7 	lsr	x23, x23, #37
   a3bc4:	1b01eaf7 	msub	w23, w23, w1, w26
   a3bc8:	940006ae 	bl	a5680 <operator new(unsigned long)>
   a3bcc:	aa0003fa 	mov	x26, x0
   a3bd0:	97fff898 	bl	a1e30 <CString::CString()>
   a3bd4:	711ede9f 	cmp	w20, #0x7b7
   a3bd8:	54000248 	b.hi	a3c20 <CTimer::GetTimeString()+0x170>  // b.pmore
   a3bdc:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3be0:	2a1703e5 	mov	w5, w23
   a3be4:	2a1903e4 	mov	w4, w25
   a3be8:	2a1603e3 	mov	w3, w22
   a3bec:	2a1803e2 	mov	w2, w24
   a3bf0:	aa1a03e0 	mov	x0, x26
   a3bf4:	910a8021 	add	x1, x1, #0x2a0
   a3bf8:	97fffdfe 	bl	a33f0 <CString::Format(char const*, ...)>
   a3bfc:	aa1a03e0 	mov	x0, x26
   a3c00:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3c08:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3c0c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3c10:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3c14:	d65f03c0 	ret
   a3c18:	528003a1 	mov	w1, #0x1d                  	// #29
   a3c1c:	17ffffe2 	b	a3ba4 <CTimer::GetTimeString()+0xf4>
   a3c20:	52955564 	mov	w4, #0xaaab                	// #43691
   a3c24:	72b55544 	movk	w4, #0xaaaa, lsl #16
   a3c28:	f0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a3c2c:	910b6000 	add	x0, x0, #0x2d8
   a3c30:	9ba47f04 	umull	x4, w24, w4
   a3c34:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3c38:	2a1703e7 	mov	w7, w23
   a3c3c:	2a1903e6 	mov	w6, w25
   a3c40:	2a1603e5 	mov	w5, w22
   a3c44:	f8755802 	ldr	x2, [x0, w21, uxtw #3]
   a3c48:	11000663 	add	w3, w19, #0x1
   a3c4c:	aa1a03e0 	mov	x0, x26
   a3c50:	d364fc84 	lsr	x4, x4, #36
   a3c54:	910a0021 	add	x1, x1, #0x280
   a3c58:	0b040484 	add	w4, w4, w4, lsl #1
   a3c5c:	4b040f04 	sub	w4, w24, w4, lsl #3
   a3c60:	97fffde4 	bl	a33f0 <CString::Format(char const*, ...)>
   a3c64:	aa1a03e0 	mov	x0, x26
   a3c68:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3c70:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3c74:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3c78:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3c7c:	d65f03c0 	ret
   a3c80:	94000994 	bl	a62d0 <EnterCritical>
   a3c84:	b9401675 	ldr	w21, [x19, #20]
   a3c88:	b9400e7a 	ldr	w26, [x19, #12]
   a3c8c:	b9401a60 	ldr	w0, [x19, #24]
   a3c90:	34fff240 	cbz	w0, a3ad8 <CTimer::GetTimeString()+0x28>
   a3c94:	940009bf 	bl	a6390 <LeaveCritical>
   a3c98:	2a1a02a0 	orr	w0, w21, w26
   a3c9c:	35fff220 	cbnz	w0, a3ae0 <CTimer::GetTimeString()+0x30>
   a3ca0:	d280001a 	mov	x26, #0x0                   	// #0
   a3ca4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3ca8:	aa1a03e0 	mov	x0, x26
   a3cac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3cb0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3cb4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3cb8:	d65f03c0 	ret
   a3cbc:	d503201f 	nop

00000000000a3cc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   a3cc0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a3cc4:	910003fd 	mov	x29, sp
   a3cc8:	a90363f7 	stp	x23, x24, [sp, #48]
   a3ccc:	aa0003f7 	mov	x23, x0
   a3cd0:	d2800500 	mov	x0, #0x28                  	// #40
   a3cd4:	aa0303f8 	mov	x24, x3
   a3cd8:	a90153f3 	stp	x19, x20, [sp, #16]
   a3cdc:	aa0203f3 	mov	x19, x2
   a3ce0:	aa0403f4 	mov	x20, x4
   a3ce4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3ce8:	2a0103f6 	mov	w22, w1
   a3cec:	94000665 	bl	a5680 <operator new(unsigned long)>
   a3cf0:	b9400ee1 	ldr	w1, [x23, #12]
   a3cf4:	0b160036 	add	w22, w1, w22
   a3cf8:	b40007b3 	cbz	x19, a3dec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x12c>
   a3cfc:	aa0003f5 	mov	x21, x0
   a3d00:	5289a860 	mov	w0, #0x4d43                	// #19779
   a3d04:	72a96a80 	movk	w0, #0x4b54, lsl #16
   a3d08:	f90006b3 	str	x19, [x21, #8]
   a3d0c:	b90002a0 	str	w0, [x21]
   a3d10:	b9402ae0 	ldr	w0, [x23, #40]
   a3d14:	b90012b6 	str	w22, [x21, #16]
   a3d18:	a901d2b8 	stp	x24, x20, [x21, #24]
   a3d1c:	35000500 	cbnz	w0, a3dbc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xfc>
   a3d20:	910082f4 	add	x20, x23, #0x20
   a3d24:	aa1403e0 	mov	x0, x20
   a3d28:	9400178e 	bl	a9b60 <CPtrList::GetFirst()>
   a3d2c:	aa0003f3 	mov	x19, x0
   a3d30:	b40006e0 	cbz	x0, a3e0c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   a3d34:	aa1303e1 	mov	x1, x19
   a3d38:	aa1403e0 	mov	x0, x20
   a3d3c:	5289a878 	mov	w24, #0x4d43                	// #19779
   a3d40:	72a96a98 	movk	w24, #0x4b54, lsl #16
   a3d44:	940017a3 	bl	a9bd0 <CPtrList::GetPtr(TPtrListElement*)>
   a3d48:	b4000220 	cbz	x0, a3d8c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xcc>
   a3d4c:	b9400001 	ldr	w1, [x0]
   a3d50:	6b18003f 	cmp	w1, w24
   a3d54:	54000281 	b.ne	a3da4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe4>  // b.any
   a3d58:	b9401000 	ldr	w0, [x0, #16]
   a3d5c:	aa1303e1 	mov	x1, x19
   a3d60:	4b160000 	sub	w0, w0, w22
   a3d64:	7100001f 	cmp	w0, #0x0
   a3d68:	aa1403e0 	mov	x0, x20
   a3d6c:	540002cc 	b.gt	a3dc4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x104>
   a3d70:	94001780 	bl	a9b70 <CPtrList::GetNext(TPtrListElement*)>
   a3d74:	b40004c0 	cbz	x0, a3e0c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   a3d78:	aa0003f3 	mov	x19, x0
   a3d7c:	aa1403e0 	mov	x0, x20
   a3d80:	aa1303e1 	mov	x1, x19
   a3d84:	94001793 	bl	a9bd0 <CPtrList::GetPtr(TPtrListElement*)>
   a3d88:	b5fffe20 	cbnz	x0, a3d4c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x8c>
   a3d8c:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3d90:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3d94:	9107e021 	add	x1, x1, #0x1f8
   a3d98:	910ae000 	add	x0, x0, #0x2b8
   a3d9c:	52803262 	mov	w2, #0x193                 	// #403
   a3da0:	97ffe238 	bl	9c680 <assertion_failed>
   a3da4:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3da8:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3dac:	9107e021 	add	x1, x1, #0x1f8
   a3db0:	910b2000 	add	x0, x0, #0x2c8
   a3db4:	52803282 	mov	w2, #0x194                 	// #404
   a3db8:	97ffe232 	bl	9c680 <assertion_failed>
   a3dbc:	94000945 	bl	a62d0 <EnterCritical>
   a3dc0:	17ffffd8 	b	a3d20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x60>
   a3dc4:	aa1503e2 	mov	x2, x21
   a3dc8:	9400179a 	bl	a9c30 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   a3dcc:	b9402ae0 	ldr	w0, [x23, #40]
   a3dd0:	350001a0 	cbnz	w0, a3e04 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x144>
   a3dd4:	aa1503e0 	mov	x0, x21
   a3dd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3ddc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3de0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3de4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3de8:	d65f03c0 	ret
   a3dec:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3df0:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3df4:	9107e021 	add	x1, x1, #0x1f8
   a3df8:	912e4000 	add	x0, x0, #0xb90
   a3dfc:	52803062 	mov	w2, #0x183                 	// #387
   a3e00:	97ffe220 	bl	9c680 <assertion_failed>
   a3e04:	94000963 	bl	a6390 <LeaveCritical>
   a3e08:	17fffff3 	b	a3dd4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x114>
   a3e0c:	aa1303e1 	mov	x1, x19
   a3e10:	aa1403e0 	mov	x0, x20
   a3e14:	aa1503e2 	mov	x2, x21
   a3e18:	940017c6 	bl	a9d30 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   a3e1c:	17ffffec 	b	a3dcc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x10c>

00000000000a3e20 <CTimer::CancelKernelTimer(unsigned long)>:
   a3e20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3e24:	910003fd 	mov	x29, sp
   a3e28:	a90153f3 	stp	x19, x20, [sp, #16]
   a3e2c:	f90013f5 	str	x21, [sp, #32]
   a3e30:	b4000421 	cbz	x1, a3eb4 <CTimer::CancelKernelTimer(unsigned long)+0x94>
   a3e34:	aa0003f4 	mov	x20, x0
   a3e38:	b9402800 	ldr	w0, [x0, #40]
   a3e3c:	aa0103f3 	mov	x19, x1
   a3e40:	350002e0 	cbnz	w0, a3e9c <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   a3e44:	91008295 	add	x21, x20, #0x20
   a3e48:	aa1303e1 	mov	x1, x19
   a3e4c:	aa1503e0 	mov	x0, x21
   a3e50:	94001844 	bl	a9f60 <CPtrList::Find(void*)>
   a3e54:	aa0003e1 	mov	x1, x0
   a3e58:	b4000160 	cbz	x0, a3e84 <CTimer::CancelKernelTimer(unsigned long)+0x64>
   a3e5c:	b9400262 	ldr	w2, [x19]
   a3e60:	5289a860 	mov	w0, #0x4d43                	// #19779
   a3e64:	72a96a80 	movk	w0, #0x4b54, lsl #16
   a3e68:	6b00005f 	cmp	w2, w0
   a3e6c:	54000301 	b.ne	a3ecc <CTimer::CancelKernelTimer(unsigned long)+0xac>  // b.any
   a3e70:	aa1503e0 	mov	x0, x21
   a3e74:	940017ef 	bl	a9e30 <CPtrList::Remove(TPtrListElement*)>
   a3e78:	aa1303e0 	mov	x0, x19
   a3e7c:	d2800501 	mov	x1, #0x28                  	// #40
   a3e80:	94000624 	bl	a5710 <operator delete(void*, unsigned long)>
   a3e84:	b9402a80 	ldr	w0, [x20, #40]
   a3e88:	350000e0 	cbnz	w0, a3ea4 <CTimer::CancelKernelTimer(unsigned long)+0x84>
   a3e8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3e90:	f94013f5 	ldr	x21, [sp, #32]
   a3e94:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3e98:	d65f03c0 	ret
   a3e9c:	9400090d 	bl	a62d0 <EnterCritical>
   a3ea0:	17ffffe9 	b	a3e44 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   a3ea4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3ea8:	f94013f5 	ldr	x21, [sp, #32]
   a3eac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3eb0:	14000938 	b	a6390 <LeaveCritical>
   a3eb4:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3eb8:	90000060 	adrp	x0, af000 <FromUmsd+0xb0>
   a3ebc:	9107e021 	add	x1, x1, #0x1f8
   a3ec0:	911d8000 	add	x0, x0, #0x760
   a3ec4:	52803602 	mov	w2, #0x1b0                 	// #432
   a3ec8:	97ffe1ee 	bl	9c680 <assertion_failed>
   a3ecc:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3ed0:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3ed4:	9107e021 	add	x1, x1, #0x1f8
   a3ed8:	9108c000 	add	x0, x0, #0x230
   a3edc:	528036e2 	mov	w2, #0x1b7                 	// #439
   a3ee0:	97ffe1e8 	bl	9c680 <assertion_failed>
   a3ee4:	d503201f 	nop
   a3ee8:	d503201f 	nop
   a3eec:	d503201f 	nop

00000000000a3ef0 <CTimer::PollKernelTimers()>:
   a3ef0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a3ef4:	910003fd 	mov	x29, sp
   a3ef8:	a90153f3 	stp	x19, x20, [sp, #16]
   a3efc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3f00:	aa0003f5 	mov	x21, x0
   a3f04:	b9402800 	ldr	w0, [x0, #40]
   a3f08:	350007c0 	cbnz	w0, a4000 <CTimer::PollKernelTimers()+0x110>
   a3f0c:	910082b6 	add	x22, x21, #0x20
   a3f10:	aa1603e0 	mov	x0, x22
   a3f14:	94001713 	bl	a9b60 <CPtrList::GetFirst()>
   a3f18:	aa0003f4 	mov	x20, x0
   a3f1c:	b40004e0 	cbz	x0, a3fb8 <CTimer::PollKernelTimers()+0xc8>
   a3f20:	f9001bf7 	str	x23, [sp, #48]
   a3f24:	5289a877 	mov	w23, #0x4d43                	// #19779
   a3f28:	72a96a97 	movk	w23, #0x4b54, lsl #16
   a3f2c:	aa1403e1 	mov	x1, x20
   a3f30:	aa1603e0 	mov	x0, x22
   a3f34:	94001727 	bl	a9bd0 <CPtrList::GetPtr(TPtrListElement*)>
   a3f38:	aa0003f3 	mov	x19, x0
   a3f3c:	b4000660 	cbz	x0, a4008 <CTimer::PollKernelTimers()+0x118>
   a3f40:	b9400000 	ldr	w0, [x0]
   a3f44:	6b17001f 	cmp	w0, w23
   a3f48:	540006c1 	b.ne	a4020 <CTimer::PollKernelTimers()+0x130>  // b.any
   a3f4c:	b9401260 	ldr	w0, [x19, #16]
   a3f50:	b9400ea1 	ldr	w1, [x21, #12]
   a3f54:	4b010000 	sub	w0, w0, w1
   a3f58:	7100001f 	cmp	w0, #0x0
   a3f5c:	540002cc 	b.gt	a3fb4 <CTimer::PollKernelTimers()+0xc4>
   a3f60:	aa1403e1 	mov	x1, x20
   a3f64:	aa1603e0 	mov	x0, x22
   a3f68:	94001702 	bl	a9b70 <CPtrList::GetNext(TPtrListElement*)>
   a3f6c:	aa0003e2 	mov	x2, x0
   a3f70:	aa1403e1 	mov	x1, x20
   a3f74:	aa1603e0 	mov	x0, x22
   a3f78:	aa0203f4 	mov	x20, x2
   a3f7c:	940017ad 	bl	a9e30 <CPtrList::Remove(TPtrListElement*)>
   a3f80:	b9402aa0 	ldr	w0, [x21, #40]
   a3f84:	350002c0 	cbnz	w0, a3fdc <CTimer::PollKernelTimers()+0xec>
   a3f88:	f9400663 	ldr	x3, [x19, #8]
   a3f8c:	b40002e3 	cbz	x3, a3fe8 <CTimer::PollKernelTimers()+0xf8>
   a3f90:	a9418a61 	ldp	x1, x2, [x19, #24]
   a3f94:	aa1303e0 	mov	x0, x19
   a3f98:	d63f0060 	blr	x3
   a3f9c:	aa1303e0 	mov	x0, x19
   a3fa0:	d2800501 	mov	x1, #0x28                  	// #40
   a3fa4:	940005db 	bl	a5710 <operator delete(void*, unsigned long)>
   a3fa8:	b9402aa0 	ldr	w0, [x21, #40]
   a3fac:	35000120 	cbnz	w0, a3fd0 <CTimer::PollKernelTimers()+0xe0>
   a3fb0:	b5fffbf4 	cbnz	x20, a3f2c <CTimer::PollKernelTimers()+0x3c>
   a3fb4:	f9401bf7 	ldr	x23, [sp, #48]
   a3fb8:	b9402aa0 	ldr	w0, [x21, #40]
   a3fbc:	350003e0 	cbnz	w0, a4038 <CTimer::PollKernelTimers()+0x148>
   a3fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3fc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3fc8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3fcc:	d65f03c0 	ret
   a3fd0:	940008c0 	bl	a62d0 <EnterCritical>
   a3fd4:	b5fffad4 	cbnz	x20, a3f2c <CTimer::PollKernelTimers()+0x3c>
   a3fd8:	17fffff7 	b	a3fb4 <CTimer::PollKernelTimers()+0xc4>
   a3fdc:	940008ed 	bl	a6390 <LeaveCritical>
   a3fe0:	f9400663 	ldr	x3, [x19, #8]
   a3fe4:	b5fffd63 	cbnz	x3, a3f90 <CTimer::PollKernelTimers()+0xa0>
   a3fe8:	90000081 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a3fec:	90000080 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a3ff0:	9107e021 	add	x1, x1, #0x1f8
   a3ff4:	912e4000 	add	x0, x0, #0xb90
   a3ff8:	52803b62 	mov	w2, #0x1db                 	// #475
   a3ffc:	97ffe1a1 	bl	9c680 <assertion_failed>
   a4000:	940008b4 	bl	a62d0 <EnterCritical>
   a4004:	17ffffc2 	b	a3f0c <CTimer::PollKernelTimers()+0x1c>
   a4008:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a400c:	f0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a4010:	9107e021 	add	x1, x1, #0x1f8
   a4014:	911d8000 	add	x0, x0, #0x760
   a4018:	52803982 	mov	w2, #0x1cc                 	// #460
   a401c:	97ffe199 	bl	9c680 <assertion_failed>
   a4020:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a4024:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a4028:	9107e021 	add	x1, x1, #0x1f8
   a402c:	9108c000 	add	x0, x0, #0x230
   a4030:	528039a2 	mov	w2, #0x1cd                 	// #461
   a4034:	97ffe193 	bl	9c680 <assertion_failed>
   a4038:	a94153f3 	ldp	x19, x20, [sp, #16]
   a403c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4040:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a4044:	140008d3 	b	a6390 <LeaveCritical>
   a4048:	d503201f 	nop
   a404c:	d503201f 	nop

00000000000a4050 <CTimer::InterruptHandler()>:
   a4050:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4054:	910003fd 	mov	x29, sp
   a4058:	a90153f3 	stp	x19, x20, [sp, #16]
   a405c:	aa0003f4 	mov	x20, x0
   a4060:	f90013f5 	str	x21, [sp, #32]
   a4064:	d53be241 	mrs	x1, cntp_cval_el0
   a4068:	b9400800 	ldr	w0, [x0, #8]
   a406c:	8b010000 	add	x0, x0, x1
   a4070:	d51be240 	msr	cntp_cval_el0, x0
   a4074:	b9401a80 	ldr	w0, [x20, #24]
   a4078:	35000380 	cbnz	w0, a40e8 <CTimer::InterruptHandler()+0x98>
   a407c:	b9400e81 	ldr	w1, [x20, #12]
   a4080:	5290a3e0 	mov	w0, #0x851f                	// #34079
   a4084:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   a4088:	52800c82 	mov	w2, #0x64                  	// #100
   a408c:	11000421 	add	w1, w1, #0x1
   a4090:	9ba07c20 	umull	x0, w1, w0
   a4094:	b9000e81 	str	w1, [x20, #12]
   a4098:	d365fc00 	lsr	x0, x0, #37
   a409c:	1b028400 	msub	w0, w0, w2, w1
   a40a0:	340003e0 	cbz	w0, a411c <CTimer::InterruptHandler()+0xcc>
   a40a4:	aa1403e0 	mov	x0, x20
   a40a8:	d2800013 	mov	x19, #0x0                   	// #0
   a40ac:	97ffff91 	bl	a3ef0 <CTimer::PollKernelTimers()>
   a40b0:	b9405a80 	ldr	w0, [x20, #88]
   a40b4:	9100e295 	add	x21, x20, #0x38
   a40b8:	34000100 	cbz	w0, a40d8 <CTimer::InterruptHandler()+0x88>
   a40bc:	d503201f 	nop
   a40c0:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   a40c4:	91000673 	add	x19, x19, #0x1
   a40c8:	d63f0000 	blr	x0
   a40cc:	b9405a80 	ldr	w0, [x20, #88]
   a40d0:	6b13001f 	cmp	w0, w19
   a40d4:	54ffff68 	b.hi	a40c0 <CTimer::InterruptHandler()+0x70>  // b.pmore
   a40d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a40dc:	f94013f5 	ldr	x21, [sp, #32]
   a40e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a40e4:	d65f03c0 	ret
   a40e8:	9400087a 	bl	a62d0 <EnterCritical>
   a40ec:	b9400e82 	ldr	w2, [x20, #12]
   a40f0:	528b8521 	mov	w1, #0x5c29                	// #23593
   a40f4:	72b851e1 	movk	w1, #0xc28f, lsl #16
   a40f8:	528b8503 	mov	w3, #0x5c28                	// #23592
   a40fc:	72a051e3 	movk	w3, #0x28f, lsl #16
   a4100:	b9401a80 	ldr	w0, [x20, #24]
   a4104:	11000442 	add	w2, w2, #0x1
   a4108:	1b017c41 	mul	w1, w2, w1
   a410c:	b9000e82 	str	w2, [x20, #12]
   a4110:	13810821 	ror	w1, w1, #2
   a4114:	6b03003f 	cmp	w1, w3
   a4118:	540000e8 	b.hi	a4134 <CTimer::InterruptHandler()+0xe4>  // b.pmore
   a411c:	b9401281 	ldr	w1, [x20, #16]
   a4120:	11000421 	add	w1, w1, #0x1
   a4124:	b9001281 	str	w1, [x20, #16]
   a4128:	b9401681 	ldr	w1, [x20, #20]
   a412c:	11000421 	add	w1, w1, #0x1
   a4130:	b9001681 	str	w1, [x20, #20]
   a4134:	34fffb80 	cbz	w0, a40a4 <CTimer::InterruptHandler()+0x54>
   a4138:	94000896 	bl	a6390 <LeaveCritical>
   a413c:	17ffffda 	b	a40a4 <CTimer::InterruptHandler()+0x54>

00000000000a4140 <CTimer::InterruptHandler(void*)>:
   a4140:	b4000040 	cbz	x0, a4148 <CTimer::InterruptHandler(void*)+0x8>
   a4144:	17ffffc3 	b	a4050 <CTimer::InterruptHandler()>
   a4148:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a414c:	90000040 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a4150:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4154:	9107e021 	add	x1, x1, #0x1f8
   a4158:	910003fd 	mov	x29, sp
   a415c:	9138e000 	add	x0, x0, #0xe38
   a4160:	52804462 	mov	w2, #0x223                 	// #547
   a4164:	97ffe147 	bl	9c680 <assertion_failed>
   a4168:	d503201f 	nop
   a416c:	d503201f 	nop

00000000000a4170 <CTimer::TuneMsDelay()>:
   a4170:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4174:	910003fd 	mov	x29, sp
   a4178:	52807d01 	mov	w1, #0x3e8                 	// #1000
   a417c:	a90153f3 	stp	x19, x20, [sp, #16]
   a4180:	aa0003f3 	mov	x19, x0
   a4184:	5290a3f4 	mov	w20, #0x851f                	// #34079
   a4188:	72aa3d74 	movk	w20, #0x51eb, lsl #16
   a418c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4190:	5284e215 	mov	w21, #0x2710                	// #10000
   a4194:	b9400c16 	ldr	w22, [x0, #12]
   a4198:	b9402c00 	ldr	w0, [x0, #44]
   a419c:	1b017c00 	mul	w0, w0, w1
   a41a0:	940012b8 	bl	a8c80 <DelayLoop>
   a41a4:	b9400e65 	ldr	w5, [x19, #12]
   a41a8:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   a41ac:	72a20c42 	movk	w2, #0x1062, lsl #16
   a41b0:	b9402e60 	ldr	w0, [x19, #44]
   a41b4:	4b1600a5 	sub	w5, w5, w22
   a41b8:	1ac50ab5 	udiv	w21, w21, w5
   a41bc:	1b007ea0 	mul	w0, w21, w0
   a41c0:	9bb47c00 	umull	x0, w0, w20
   a41c4:	d365fc00 	lsr	x0, x0, #37
   a41c8:	1107d001 	add	w1, w0, #0x1f4
   a41cc:	b9002e60 	str	w0, [x19, #44]
   a41d0:	9ba27c20 	umull	x0, w1, w2
   a41d4:	d366fc00 	lsr	x0, x0, #38
   a41d8:	b9003260 	str	w0, [x19, #48]
   a41dc:	97ffeabd 	bl	9ecd0 <CLogger::Get()>
   a41e0:	9bb47ea4 	umull	x4, w21, w20
   a41e4:	52800c85 	mov	w5, #0x64                  	// #100
   a41e8:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a41ec:	910ee021 	add	x1, x1, #0x3b8
   a41f0:	f0000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a41f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a41f8:	9100c021 	add	x1, x1, #0x30
   a41fc:	910bc063 	add	x3, x3, #0x2f0
   a4200:	d365fc84 	lsr	x4, x4, #37
   a4204:	52800062 	mov	w2, #0x3                   	// #3
   a4208:	1b05d485 	msub	w5, w4, w5, w21
   a420c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4210:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4214:	17ffe9eb 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a4218:	d503201f 	nop
   a421c:	d503201f 	nop

00000000000a4220 <CTimer::Initialize()>:
   a4220:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4224:	910003fd 	mov	x29, sp
   a4228:	a90153f3 	stp	x19, x20, [sp, #16]
   a422c:	aa0003f3 	mov	x19, x0
   a4230:	f9400000 	ldr	x0, [x0]
   a4234:	b40004c0 	cbz	x0, a42cc <CTimer::Initialize()+0xac>
   a4238:	aa1303e3 	mov	x3, x19
   a423c:	528003c1 	mov	w1, #0x1e                  	// #30
   a4240:	90000002 	adrp	x2, a4000 <CTimer::PollKernelTimers()+0x110>
   a4244:	91050042 	add	x2, x2, #0x140
   a4248:	94000efa 	bl	a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a424c:	d53be001 	mrs	x1, cntfrq_el0
   a4250:	d28b8520 	mov	x0, #0x5c29                	// #23593
   a4254:	f2b851e0 	movk	x0, #0xc28f, lsl #16
   a4258:	f2c51ea0 	movk	x0, #0x28f5, lsl #32
   a425c:	f2f1eb80 	movk	x0, #0x8f5c, lsl #48
   a4260:	d291eb82 	mov	x2, #0x8f5c                	// #36700
   a4264:	f2beb842 	movk	x2, #0xf5c2, lsl #16
   a4268:	9b007c20 	mul	x0, x1, x0
   a426c:	f2cb8502 	movk	x2, #0x5c28, lsl #32
   a4270:	f2e051e2 	movk	x2, #0x28f, lsl #48
   a4274:	93c00800 	ror	x0, x0, #2
   a4278:	eb02001f 	cmp	x0, x2
   a427c:	54000348 	b.hi	a42e4 <CTimer::Initialize()+0xc4>  // b.pmore
   a4280:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   a4284:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   a4288:	d342fc21 	lsr	x1, x1, #2
   a428c:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   a4290:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   a4294:	9bc07c21 	umulh	x1, x1, x0
   a4298:	d342fc21 	lsr	x1, x1, #2
   a429c:	b9000a61 	str	w1, [x19, #8]
   a42a0:	d53be020 	mrs	x0, cntpct_el0
   a42a4:	8b214001 	add	x1, x0, w1, uxtw
   a42a8:	d51be241 	msr	cntp_cval_el0, x1
   a42ac:	52800034 	mov	w20, #0x1                   	// #1
   a42b0:	d51be234 	msr	cntp_ctl_el0, x20
   a42b4:	aa1303e0 	mov	x0, x19
   a42b8:	97ffffae 	bl	a4170 <CTimer::TuneMsDelay()>
   a42bc:	2a1403e0 	mov	w0, w20
   a42c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a42c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a42c8:	d65f03c0 	ret
   a42cc:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a42d0:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a42d4:	9107e021 	add	x1, x1, #0x1f8
   a42d8:	91086000 	add	x0, x0, #0x218
   a42dc:	52800ca2 	mov	w2, #0x65                  	// #101
   a42e0:	97ffe0e8 	bl	9c680 <assertion_failed>
   a42e4:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a42e8:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a42ec:	9107e021 	add	x1, x1, #0x1f8
   a42f0:	910c2000 	add	x0, x0, #0x308
   a42f4:	52800fa2 	mov	w2, #0x7d                  	// #125
   a42f8:	97ffe0e2 	bl	9c680 <assertion_failed>
   a42fc:	d503201f 	nop

00000000000a4300 <CTimer::RegisterPeriodicHandler(void (*)())>:
   a4300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4304:	910003fd 	mov	x29, sp
   a4308:	b40001a1 	cbz	x1, a433c <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   a430c:	b9405802 	ldr	w2, [x0, #88]
   a4310:	71000c5f 	cmp	w2, #0x3
   a4314:	54000208 	b.hi	a4354 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>  // b.pmore
   a4318:	b9405802 	ldr	w2, [x0, #88]
   a431c:	8b224c02 	add	x2, x0, w2, uxtw #3
   a4320:	f9001c41 	str	x1, [x2, #56]
   a4324:	d5033f9f 	dsb	sy
   a4328:	b9405801 	ldr	w1, [x0, #88]
   a432c:	11000421 	add	w1, w1, #0x1
   a4330:	b9005801 	str	w1, [x0, #88]
   a4334:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4338:	d65f03c0 	ret
   a433c:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a4340:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a4344:	9107e021 	add	x1, x1, #0x1f8
   a4348:	912e4000 	add	x0, x0, #0xb90
   a434c:	52804722 	mov	w2, #0x239                 	// #569
   a4350:	97ffe0cc 	bl	9c680 <assertion_failed>
   a4354:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a4358:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a435c:	9107e021 	add	x1, x1, #0x1f8
   a4360:	910c8000 	add	x0, x0, #0x320
   a4364:	52804762 	mov	w2, #0x23b                 	// #571
   a4368:	97ffe0c6 	bl	9c680 <assertion_failed>
   a436c:	d503201f 	nop

00000000000a4370 <CTimer::SimpleMsDelay(unsigned int)>:
   a4370:	340000a0 	cbz	w0, a4384 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   a4374:	52807d01 	mov	w1, #0x3e8                 	// #1000
   a4378:	1b017c00 	mul	w0, w0, w1
   a437c:	34000040 	cbz	w0, a4384 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   a4380:	17fffc90 	b	a35c0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
   a4384:	d65f03c0 	ret
   a4388:	d503201f 	nop
   a438c:	d503201f 	nop

00000000000a4390 <CTimer::SimpleusDelay(unsigned int)>:
   a4390:	34000040 	cbz	w0, a4398 <CTimer::SimpleusDelay(unsigned int)+0x8>
   a4394:	17fffc8b 	b	a35c0 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
   a4398:	d65f03c0 	ret
   a439c:	d503201f 	nop

00000000000a43a0 <CTimer::IsLeapYear(unsigned int)>:
   a43a0:	528b8521 	mov	w1, #0x5c29                	// #23593
   a43a4:	72b851e1 	movk	w1, #0xc28f, lsl #16
   a43a8:	f240041f 	tst	x0, #0x3
   a43ac:	528b8502 	mov	w2, #0x5c28                	// #23592
   a43b0:	72a051e2 	movk	w2, #0x28f, lsl #16
   a43b4:	1b017c01 	mul	w1, w0, w1
   a43b8:	1a9f17e0 	cset	w0, eq  // eq = none
   a43bc:	13810823 	ror	w3, w1, #2
   a43c0:	6b02007f 	cmp	w3, w2
   a43c4:	54000049 	b.ls	a43cc <CTimer::IsLeapYear(unsigned int)+0x2c>  // b.plast
   a43c8:	d65f03c0 	ret
   a43cc:	529ae140 	mov	w0, #0xd70a                	// #55050
   a43d0:	72a01460 	movk	w0, #0xa3, lsl #16
   a43d4:	13811021 	ror	w1, w1, #4
   a43d8:	6b00003f 	cmp	w1, w0
   a43dc:	1a9f87e0 	cset	w0, ls  // ls = plast
   a43e0:	d65f03c0 	ret
   a43e4:	d503201f 	nop
   a43e8:	d503201f 	nop
   a43ec:	d503201f 	nop

00000000000a43f0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   a43f0:	7100041f 	cmp	w0, #0x1
   a43f4:	2a0003e2 	mov	w2, w0
   a43f8:	540000a0 	b.eq	a440c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   a43fc:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a4400:	910ee000 	add	x0, x0, #0x3b8
   a4404:	b8625800 	ldr	w0, [x0, w2, uxtw #2]
   a4408:	d65f03c0 	ret
   a440c:	528b8524 	mov	w4, #0x5c29                	// #23593
   a4410:	72b851e4 	movk	w4, #0xc28f, lsl #16
   a4414:	f240043f 	tst	x1, #0x3
   a4418:	528b8500 	mov	w0, #0x5c28                	// #23592
   a441c:	72a051e0 	movk	w0, #0x28f, lsl #16
   a4420:	1a9f17e3 	cset	w3, eq  // eq = none
   a4424:	1b047c21 	mul	w1, w1, w4
   a4428:	13810824 	ror	w4, w1, #2
   a442c:	6b00009f 	cmp	w4, w0
   a4430:	540000c8 	b.hi	a4448 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>  // b.pmore
   a4434:	13811021 	ror	w1, w1, #4
   a4438:	529ae140 	mov	w0, #0xd70a                	// #55050
   a443c:	72a01460 	movk	w0, #0xa3, lsl #16
   a4440:	6b00003f 	cmp	w1, w0
   a4444:	1a9f87e3 	cset	w3, ls  // ls = plast
   a4448:	528003a0 	mov	w0, #0x1d                  	// #29
   a444c:	34fffd83 	cbz	w3, a43fc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>
   a4450:	d65f03c0 	ret
   a4454:	d503201f 	nop
   a4458:	d503201f 	nop
   a445c:	d503201f 	nop

00000000000a4460 <CTimer::Get()>:
   a4460:	d0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a4464:	f9479800 	ldr	x0, [x0, #3888]
   a4468:	b4000040 	cbz	x0, a4470 <CTimer::Get()+0x10>
   a446c:	d65f03c0 	ret
   a4470:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a4474:	90000040 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a4478:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a447c:	9107e021 	add	x1, x1, #0x1f8
   a4480:	910003fd 	mov	x29, sp
   a4484:	91248000 	add	x0, x0, #0x920
   a4488:	52804f82 	mov	w2, #0x27c                 	// #636
   a448c:	97ffe07d 	bl	9c680 <assertion_failed>

00000000000a4490 <memset>:
   a4490:	f240041f 	tst	x0, #0x3
   a4494:	aa0003e3 	mov	x3, x0
   a4498:	fa4f0840 	ccmp	x2, #0xf, #0x0, eq  // eq = none
   a449c:	54000128 	b.hi	a44c0 <memset+0x30>  // b.pmore
   a44a0:	13001c21 	sxtb	w1, w1
   a44a4:	8b020064 	add	x4, x3, x2
   a44a8:	b40000a2 	cbz	x2, a44bc <memset+0x2c>
   a44ac:	d503201f 	nop
   a44b0:	38001461 	strb	w1, [x3], #1
   a44b4:	eb04007f 	cmp	x3, x4
   a44b8:	54ffffc1 	b.ne	a44b0 <memset+0x20>  // b.any
   a44bc:	d65f03c0 	ret
   a44c0:	2a012024 	orr	w4, w1, w1, lsl #8
   a44c4:	d1004045 	sub	x5, x2, #0x10
   a44c8:	927ceca5 	and	x5, x5, #0xfffffffffffffff0
   a44cc:	910040a5 	add	x5, x5, #0x10
   a44d0:	2a044084 	orr	w4, w4, w4, lsl #16
   a44d4:	8b050005 	add	x5, x0, x5
   a44d8:	29001064 	stp	w4, w4, [x3]
   a44dc:	91004063 	add	x3, x3, #0x10
   a44e0:	b81f8064 	stur	w4, [x3, #-8]
   a44e4:	eb0300bf 	cmp	x5, x3
   a44e8:	b81fc064 	stur	w4, [x3, #-4]
   a44ec:	54ffff61 	b.ne	a44d8 <memset+0x48>  // b.any
   a44f0:	92400c42 	and	x2, x2, #0xf
   a44f4:	17ffffeb 	b	a44a0 <memset+0x10>
   a44f8:	d503201f 	nop
   a44fc:	d503201f 	nop

00000000000a4500 <memmove>:
   a4500:	eb01001f 	cmp	x0, x1
   a4504:	54000089 	b.ls	a4514 <memmove+0x14>  // b.plast
   a4508:	8b020023 	add	x3, x1, x2
   a450c:	eb03001f 	cmp	x0, x3
   a4510:	54000043 	b.cc	a4518 <memmove+0x18>  // b.lo, b.ul, b.last
   a4514:	140001f9 	b	a4cf8 <memcpy>
   a4518:	d1000443 	sub	x3, x2, #0x1
   a451c:	b40000c2 	cbz	x2, a4534 <memmove+0x34>
   a4520:	38e36822 	ldrsb	w2, [x1, x3]
   a4524:	38236802 	strb	w2, [x0, x3]
   a4528:	d1000463 	sub	x3, x3, #0x1
   a452c:	b100047f 	cmn	x3, #0x1
   a4530:	54ffff81 	b.ne	a4520 <memmove+0x20>  // b.any
   a4534:	d65f03c0 	ret
   a4538:	d503201f 	nop
   a453c:	d503201f 	nop

00000000000a4540 <memcmp>:
   a4540:	b40001a2 	cbz	x2, a4574 <memcmp+0x34>
   a4544:	d2800003 	mov	x3, #0x0                   	// #0
   a4548:	14000004 	b	a4558 <memcmp+0x18>
   a454c:	54000183 	b.cc	a457c <memcmp+0x3c>  // b.lo, b.ul, b.last
   a4550:	eb02007f 	cmp	x3, x2
   a4554:	54000100 	b.eq	a4574 <memcmp+0x34>  // b.none
   a4558:	38636805 	ldrb	w5, [x0, x3]
   a455c:	38636824 	ldrb	w4, [x1, x3]
   a4560:	91000463 	add	x3, x3, #0x1
   a4564:	6b0400bf 	cmp	w5, w4
   a4568:	54ffff29 	b.ls	a454c <memcmp+0xc>  // b.plast
   a456c:	52800020 	mov	w0, #0x1                   	// #1
   a4570:	d65f03c0 	ret
   a4574:	52800000 	mov	w0, #0x0                   	// #0
   a4578:	d65f03c0 	ret
   a457c:	12800000 	mov	w0, #0xffffffff            	// #-1
   a4580:	d65f03c0 	ret
   a4584:	d503201f 	nop
   a4588:	d503201f 	nop
   a458c:	d503201f 	nop

00000000000a4590 <strlen>:
   a4590:	aa0003e2 	mov	x2, x0
   a4594:	39c00000 	ldrsb	w0, [x0]
   a4598:	340000c0 	cbz	w0, a45b0 <strlen+0x20>
   a459c:	d2800000 	mov	x0, #0x0                   	// #0
   a45a0:	91000400 	add	x0, x0, #0x1
   a45a4:	38e06841 	ldrsb	w1, [x2, x0]
   a45a8:	35ffffc1 	cbnz	w1, a45a0 <strlen+0x10>
   a45ac:	d65f03c0 	ret
   a45b0:	d2800000 	mov	x0, #0x0                   	// #0
   a45b4:	d65f03c0 	ret
   a45b8:	d503201f 	nop
   a45bc:	d503201f 	nop

00000000000a45c0 <strcmp>:
   a45c0:	39c00002 	ldrsb	w2, [x0]
   a45c4:	39c00023 	ldrsb	w3, [x1]
   a45c8:	34000182 	cbz	w2, a45f8 <strcmp+0x38>
   a45cc:	d1000424 	sub	x4, x1, #0x1
   a45d0:	d2800021 	mov	x1, #0x1                   	// #1
   a45d4:	14000007 	b	a45f0 <strcmp+0x30>
   a45d8:	540001ac 	b.gt	a460c <strcmp+0x4c>
   a45dc:	540001cb 	b.lt	a4614 <strcmp+0x54>  // b.tstop
   a45e0:	38e16802 	ldrsb	w2, [x0, x1]
   a45e4:	91000421 	add	x1, x1, #0x1
   a45e8:	38e16883 	ldrsb	w3, [x4, x1]
   a45ec:	34000062 	cbz	w2, a45f8 <strcmp+0x38>
   a45f0:	6b03005f 	cmp	w2, w3
   a45f4:	35ffff23 	cbnz	w3, a45d8 <strcmp+0x18>
   a45f8:	6b03005f 	cmp	w2, w3
   a45fc:	52800021 	mov	w1, #0x1                   	// #1
   a4600:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   a4604:	1a81d000 	csel	w0, w0, w1, le
   a4608:	d65f03c0 	ret
   a460c:	52800020 	mov	w0, #0x1                   	// #1
   a4610:	d65f03c0 	ret
   a4614:	12800000 	mov	w0, #0xffffffff            	// #-1
   a4618:	d65f03c0 	ret
   a461c:	d503201f 	nop

00000000000a4620 <strcasecmp>:
   a4620:	39c00003 	ldrsb	w3, [x0]
   a4624:	51018462 	sub	w2, w3, #0x61
   a4628:	7100645f 	cmp	w2, #0x19
   a462c:	54000208 	b.hi	a466c <strcasecmp+0x4c>  // b.pmore
   a4630:	51008063 	sub	w3, w3, #0x20
   a4634:	39c00022 	ldrsb	w2, [x1]
   a4638:	51018444 	sub	w4, w2, #0x61
   a463c:	7100649f 	cmp	w4, #0x19
   a4640:	54000289 	b.ls	a4690 <strcasecmp+0x70>  // b.plast
   a4644:	340002a2 	cbz	w2, a4698 <strcasecmp+0x78>
   a4648:	6b02007f 	cmp	w3, w2
   a464c:	91000400 	add	x0, x0, #0x1
   a4650:	540002cc 	b.gt	a46a8 <strcasecmp+0x88>
   a4654:	540002eb 	b.lt	a46b0 <strcasecmp+0x90>  // b.tstop
   a4658:	39c00003 	ldrsb	w3, [x0]
   a465c:	91000421 	add	x1, x1, #0x1
   a4660:	51018462 	sub	w2, w3, #0x61
   a4664:	7100645f 	cmp	w2, #0x19
   a4668:	54fffe49 	b.ls	a4630 <strcasecmp+0x10>  // b.plast
   a466c:	35fffe43 	cbnz	w3, a4634 <strcasecmp+0x14>
   a4670:	39c00022 	ldrsb	w2, [x1]
   a4674:	51018440 	sub	w0, w2, #0x61
   a4678:	7100641f 	cmp	w0, #0x19
   a467c:	540000e8 	b.hi	a4698 <strcasecmp+0x78>  // b.pmore
   a4680:	51008042 	sub	w2, w2, #0x20
   a4684:	6b02007f 	cmp	w3, w2
   a4688:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   a468c:	d65f03c0 	ret
   a4690:	51008042 	sub	w2, w2, #0x20
   a4694:	17ffffed 	b	a4648 <strcasecmp+0x28>
   a4698:	6b03005f 	cmp	w2, w3
   a469c:	52800020 	mov	w0, #0x1                   	// #1
   a46a0:	54ffff2a 	b.ge	a4684 <strcasecmp+0x64>  // b.tcont
   a46a4:	d65f03c0 	ret
   a46a8:	52800020 	mov	w0, #0x1                   	// #1
   a46ac:	d65f03c0 	ret
   a46b0:	12800000 	mov	w0, #0xffffffff            	// #-1
   a46b4:	d65f03c0 	ret
   a46b8:	d503201f 	nop
   a46bc:	d503201f 	nop

00000000000a46c0 <strncmp>:
   a46c0:	b4000222 	cbz	x2, a4704 <strncmp+0x44>
   a46c4:	d2800003 	mov	x3, #0x0                   	// #0
   a46c8:	14000006 	b	a46e0 <strncmp+0x20>
   a46cc:	34000145 	cbz	w5, a46f4 <strncmp+0x34>
   a46d0:	540001ec 	b.gt	a470c <strncmp+0x4c>
   a46d4:	5400020b 	b.lt	a4714 <strncmp+0x54>  // b.tstop
   a46d8:	eb03005f 	cmp	x2, x3
   a46dc:	54000140 	b.eq	a4704 <strncmp+0x44>  // b.none
   a46e0:	38e36804 	ldrsb	w4, [x0, x3]
   a46e4:	38e36825 	ldrsb	w5, [x1, x3]
   a46e8:	91000463 	add	x3, x3, #0x1
   a46ec:	6b05009f 	cmp	w4, w5
   a46f0:	35fffee4 	cbnz	w4, a46cc <strncmp+0xc>
   a46f4:	52800021 	mov	w1, #0x1                   	// #1
   a46f8:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   a46fc:	1a81d000 	csel	w0, w0, w1, le
   a4700:	d65f03c0 	ret
   a4704:	52800000 	mov	w0, #0x0                   	// #0
   a4708:	d65f03c0 	ret
   a470c:	52800020 	mov	w0, #0x1                   	// #1
   a4710:	d65f03c0 	ret
   a4714:	12800000 	mov	w0, #0xffffffff            	// #-1
   a4718:	d65f03c0 	ret
   a471c:	d503201f 	nop

00000000000a4720 <strncasecmp>:
   a4720:	b50001e2 	cbnz	x2, a475c <strncasecmp+0x3c>
   a4724:	1400001b 	b	a4790 <strncasecmp+0x70>
   a4728:	51008063 	sub	w3, w3, #0x20
   a472c:	39c00024 	ldrsb	w4, [x1]
   a4730:	51018485 	sub	w5, w4, #0x61
   a4734:	710064bf 	cmp	w5, #0x19
   a4738:	54000308 	b.hi	a4798 <strncasecmp+0x78>  // b.pmore
   a473c:	51008084 	sub	w4, w4, #0x20
   a4740:	6b04007f 	cmp	w3, w4
   a4744:	91000400 	add	x0, x0, #0x1
   a4748:	5400036c 	b.gt	a47b4 <strncasecmp+0x94>
   a474c:	5400038b 	b.lt	a47bc <strncasecmp+0x9c>  // b.tstop
   a4750:	f1000442 	subs	x2, x2, #0x1
   a4754:	91000421 	add	x1, x1, #0x1
   a4758:	540001c0 	b.eq	a4790 <strncasecmp+0x70>  // b.none
   a475c:	39c00003 	ldrsb	w3, [x0]
   a4760:	51018464 	sub	w4, w3, #0x61
   a4764:	7100649f 	cmp	w4, #0x19
   a4768:	54fffe09 	b.ls	a4728 <strncasecmp+0x8>  // b.plast
   a476c:	35fffe03 	cbnz	w3, a472c <strncasecmp+0xc>
   a4770:	39c00024 	ldrsb	w4, [x1]
   a4774:	51018480 	sub	w0, w4, #0x61
   a4778:	7100641f 	cmp	w0, #0x19
   a477c:	54000108 	b.hi	a479c <strncasecmp+0x7c>  // b.pmore
   a4780:	51008084 	sub	w4, w4, #0x20
   a4784:	6b03009f 	cmp	w4, w3
   a4788:	5a9fd3e0 	csetm	w0, gt
   a478c:	d65f03c0 	ret
   a4790:	52800000 	mov	w0, #0x0                   	// #0
   a4794:	d65f03c0 	ret
   a4798:	35fffd44 	cbnz	w4, a4740 <strncasecmp+0x20>
   a479c:	6b04007f 	cmp	w3, w4
   a47a0:	52800020 	mov	w0, #0x1                   	// #1
   a47a4:	54ffff4c 	b.gt	a478c <strncasecmp+0x6c>
   a47a8:	6b03009f 	cmp	w4, w3
   a47ac:	5a9fd3e0 	csetm	w0, gt
   a47b0:	17fffff7 	b	a478c <strncasecmp+0x6c>
   a47b4:	52800020 	mov	w0, #0x1                   	// #1
   a47b8:	d65f03c0 	ret
   a47bc:	12800000 	mov	w0, #0xffffffff            	// #-1
   a47c0:	d65f03c0 	ret
   a47c4:	d503201f 	nop
   a47c8:	d503201f 	nop
   a47cc:	d503201f 	nop

00000000000a47d0 <strcpy>:
   a47d0:	39c00022 	ldrsb	w2, [x1]
   a47d4:	aa0003e3 	mov	x3, x0
   a47d8:	340000a2 	cbz	w2, a47ec <strcpy+0x1c>
   a47dc:	d503201f 	nop
   a47e0:	38001462 	strb	w2, [x3], #1
   a47e4:	38c01c22 	ldrsb	w2, [x1, #1]!
   a47e8:	35ffffc2 	cbnz	w2, a47e0 <strcpy+0x10>
   a47ec:	3900007f 	strb	wzr, [x3]
   a47f0:	d65f03c0 	ret
   a47f4:	d503201f 	nop
   a47f8:	d503201f 	nop
   a47fc:	d503201f 	nop

00000000000a4800 <strncpy>:
   a4800:	b4000162 	cbz	x2, a482c <strncpy+0x2c>
   a4804:	8b020024 	add	x4, x1, x2
   a4808:	aa0003e3 	mov	x3, x0
   a480c:	14000003 	b	a4818 <strncpy+0x18>
   a4810:	38001462 	strb	w2, [x3], #1
   a4814:	540000c0 	b.eq	a482c <strncpy+0x2c>  // b.none
   a4818:	39c00022 	ldrsb	w2, [x1]
   a481c:	91000421 	add	x1, x1, #0x1
   a4820:	eb01009f 	cmp	x4, x1
   a4824:	35ffff62 	cbnz	w2, a4810 <strncpy+0x10>
   a4828:	3900007f 	strb	wzr, [x3]
   a482c:	d65f03c0 	ret

00000000000a4830 <strcat>:
   a4830:	39c00003 	ldrsb	w3, [x0]
   a4834:	aa0003e2 	mov	x2, x0
   a4838:	34000083 	cbz	w3, a4848 <strcat+0x18>
   a483c:	d503201f 	nop
   a4840:	38c01c43 	ldrsb	w3, [x2, #1]!
   a4844:	35ffffe3 	cbnz	w3, a4840 <strcat+0x10>
   a4848:	39c00023 	ldrsb	w3, [x1]
   a484c:	34000083 	cbz	w3, a485c <strcat+0x2c>
   a4850:	38001443 	strb	w3, [x2], #1
   a4854:	38c01c23 	ldrsb	w3, [x1, #1]!
   a4858:	35ffffc3 	cbnz	w3, a4850 <strcat+0x20>
   a485c:	3900005f 	strb	wzr, [x2]
   a4860:	d65f03c0 	ret
   a4864:	d503201f 	nop
   a4868:	d503201f 	nop
   a486c:	d503201f 	nop

00000000000a4870 <strchr>:
   a4870:	39c00002 	ldrsb	w2, [x0]
   a4874:	35000082 	cbnz	w2, a4884 <strchr+0x14>
   a4878:	14000006 	b	a4890 <strchr+0x20>
   a487c:	38c01c02 	ldrsb	w2, [x0, #1]!
   a4880:	34000082 	cbz	w2, a4890 <strchr+0x20>
   a4884:	6b01005f 	cmp	w2, w1
   a4888:	54ffffa1 	b.ne	a487c <strchr+0xc>  // b.any
   a488c:	d65f03c0 	ret
   a4890:	d2800000 	mov	x0, #0x0                   	// #0
   a4894:	d65f03c0 	ret
   a4898:	d503201f 	nop
   a489c:	d503201f 	nop

00000000000a48a0 <strstr>:
   a48a0:	39c00002 	ldrsb	w2, [x0]
   a48a4:	39c00025 	ldrsb	w5, [x1]
   a48a8:	350000c2 	cbnz	w2, a48c0 <strstr+0x20>
   a48ac:	710000bf 	cmp	w5, #0x0
   a48b0:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
   a48b4:	d65f03c0 	ret
   a48b8:	38c01c02 	ldrsb	w2, [x0, #1]!
   a48bc:	34000182 	cbz	w2, a48ec <strstr+0x4c>
   a48c0:	34ffffa5 	cbz	w5, a48b4 <strstr+0x14>
   a48c4:	2a0503e3 	mov	w3, w5
   a48c8:	d2800002 	mov	x2, #0x0                   	// #0
   a48cc:	14000003 	b	a48d8 <strstr+0x38>
   a48d0:	38e26823 	ldrsb	w3, [x1, x2]
   a48d4:	34ffff03 	cbz	w3, a48b4 <strstr+0x14>
   a48d8:	38e26804 	ldrsb	w4, [x0, x2]
   a48dc:	91000442 	add	x2, x2, #0x1
   a48e0:	6b03009f 	cmp	w4, w3
   a48e4:	54ffff60 	b.eq	a48d0 <strstr+0x30>  // b.none
   a48e8:	17fffff4 	b	a48b8 <strstr+0x18>
   a48ec:	d2800000 	mov	x0, #0x0                   	// #0
   a48f0:	d65f03c0 	ret
   a48f4:	d503201f 	nop
   a48f8:	d503201f 	nop
   a48fc:	d503201f 	nop

00000000000a4900 <strtok_r>:
   a4900:	aa0003e7 	mov	x7, x0
   a4904:	b4000440 	cbz	x0, a498c <strtok_r+0x8c>
   a4908:	39c000e4 	ldrsb	w4, [x7]
   a490c:	340004a4 	cbz	w4, a49a0 <strtok_r+0xa0>
   a4910:	39c00026 	ldrsb	w6, [x1]
   a4914:	34000166 	cbz	w6, a4940 <strtok_r+0x40>
   a4918:	aa0103e5 	mov	x5, x1
   a491c:	2a0603e3 	mov	w3, w6
   a4920:	14000003 	b	a492c <strtok_r+0x2c>
   a4924:	38c01ca3 	ldrsb	w3, [x5, #1]!
   a4928:	340000c3 	cbz	w3, a4940 <strtok_r+0x40>
   a492c:	6b04007f 	cmp	w3, w4
   a4930:	54ffffa1 	b.ne	a4924 <strtok_r+0x24>  // b.any
   a4934:	38c01ce4 	ldrsb	w4, [x7, #1]!
   a4938:	35ffff06 	cbnz	w6, a4918 <strtok_r+0x18>
   a493c:	d503201f 	nop
   a4940:	34000304 	cbz	w4, a49a0 <strtok_r+0xa0>
   a4944:	aa0703e8 	mov	x8, x7
   a4948:	34000186 	cbz	w6, a4978 <strtok_r+0x78>
   a494c:	2a0603e3 	mov	w3, w6
   a4950:	aa0103e5 	mov	x5, x1
   a4954:	14000003 	b	a4960 <strtok_r+0x60>
   a4958:	38c01ca3 	ldrsb	w3, [x5, #1]!
   a495c:	340000e3 	cbz	w3, a4978 <strtok_r+0x78>
   a4960:	6b04007f 	cmp	w3, w4
   a4964:	54ffffa1 	b.ne	a4958 <strtok_r+0x58>  // b.any
   a4968:	aa0703e0 	mov	x0, x7
   a496c:	3800151f 	strb	wzr, [x8], #1
   a4970:	f9000048 	str	x8, [x2]
   a4974:	d65f03c0 	ret
   a4978:	38c01d04 	ldrsb	w4, [x8, #1]!
   a497c:	35fffe64 	cbnz	w4, a4948 <strtok_r+0x48>
   a4980:	aa0703e0 	mov	x0, x7
   a4984:	f9000048 	str	x8, [x2]
   a4988:	17fffffb 	b	a4974 <strtok_r+0x74>
   a498c:	f9400047 	ldr	x7, [x2]
   a4990:	d2800000 	mov	x0, #0x0                   	// #0
   a4994:	b4ffff07 	cbz	x7, a4974 <strtok_r+0x74>
   a4998:	39c000e4 	ldrsb	w4, [x7]
   a499c:	35fffba4 	cbnz	w4, a4910 <strtok_r+0x10>
   a49a0:	d2800000 	mov	x0, #0x0                   	// #0
   a49a4:	f900005f 	str	xzr, [x2]
   a49a8:	d65f03c0 	ret
   a49ac:	d503201f 	nop

00000000000a49b0 <strtoul>:
   a49b0:	aa0003e5 	mov	x5, x0
   a49b4:	b4000041 	cbz	x1, a49bc <strtoul+0xc>
   a49b8:	f9000020 	str	x0, [x1]
   a49bc:	51000843 	sub	w3, w2, #0x2
   a49c0:	d2800000 	mov	x0, #0x0                   	// #0
   a49c4:	7100887f 	cmp	w3, #0x22
   a49c8:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   a49cc:	54000941 	b.ne	a4af4 <strtoul+0x144>  // b.any
   a49d0:	39c000a3 	ldrsb	w3, [x5]
   a49d4:	51002464 	sub	w4, w3, #0x9
   a49d8:	7100807f 	cmp	w3, #0x20
   a49dc:	12001c84 	and	w4, w4, #0xff
   a49e0:	54000060 	b.eq	a49ec <strtoul+0x3c>  // b.none
   a49e4:	7100109f 	cmp	w4, #0x4
   a49e8:	54000068 	b.hi	a49f4 <strtoul+0x44>  // b.pmore
   a49ec:	910004a5 	add	x5, x5, #0x1
   a49f0:	17fffff8 	b	a49d0 <strtoul+0x20>
   a49f4:	7100ac7f 	cmp	w3, #0x2b
   a49f8:	540002a0 	b.eq	a4a4c <strtoul+0x9c>  // b.none
   a49fc:	7100b47f 	cmp	w3, #0x2d
   a4a00:	52800009 	mov	w9, #0x0                   	// #0
   a4a04:	540002a1 	b.ne	a4a58 <strtoul+0xa8>  // b.any
   a4a08:	39c004a3 	ldrsb	w3, [x5, #1]
   a4a0c:	52800029 	mov	w9, #0x1                   	// #1
   a4a10:	910004a5 	add	x5, x5, #0x1
   a4a14:	7100c07f 	cmp	w3, #0x30
   a4a18:	54000241 	b.ne	a4a60 <strtoul+0xb0>  // b.any
   a4a1c:	39c004a3 	ldrsb	w3, [x5, #1]
   a4a20:	910004a4 	add	x4, x5, #0x1
   a4a24:	121a7860 	and	w0, w3, #0xffffffdf
   a4a28:	7101601f 	cmp	w0, #0x58
   a4a2c:	54000661 	b.ne	a4af8 <strtoul+0x148>  // b.any
   a4a30:	721b785f 	tst	w2, #0xffffffef
   a4a34:	d2800000 	mov	x0, #0x0                   	// #0
   a4a38:	540005e1 	b.ne	a4af4 <strtoul+0x144>  // b.any
   a4a3c:	39c008a3 	ldrsb	w3, [x5, #2]
   a4a40:	52800202 	mov	w2, #0x10                  	// #16
   a4a44:	910008a5 	add	x5, x5, #0x2
   a4a48:	14000009 	b	a4a6c <strtoul+0xbc>
   a4a4c:	39c004a3 	ldrsb	w3, [x5, #1]
   a4a50:	52800009 	mov	w9, #0x0                   	// #0
   a4a54:	910004a5 	add	x5, x5, #0x1
   a4a58:	7100c07f 	cmp	w3, #0x30
   a4a5c:	54fffe00 	b.eq	a4a1c <strtoul+0x6c>  // b.none
   a4a60:	7100005f 	cmp	w2, #0x0
   a4a64:	52800140 	mov	w0, #0xa                   	// #10
   a4a68:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   a4a6c:	7100bc7f 	cmp	w3, #0x2f
   a4a70:	2a0303e4 	mov	w4, w3
   a4a74:	5400058d 	b.le	a4b24 <strtoul+0x174>
   a4a78:	52800027 	mov	w7, #0x1                   	// #1
   a4a7c:	d2800006 	mov	x6, #0x0                   	// #0
   a4a80:	93407c48 	sxtw	x8, w2
   a4a84:	1400000a 	b	a4aac <strtoul+0xfc>
   a4a88:	9b060100 	madd	x0, x8, x6, x0
   a4a8c:	52800007 	mov	w7, #0x0                   	// #0
   a4a90:	eb06001f 	cmp	x0, x6
   a4a94:	aa0003e6 	mov	x6, x0
   a4a98:	540003a3 	b.cc	a4b0c <strtoul+0x15c>  // b.lo, b.ul, b.last
   a4a9c:	38c01ca4 	ldrsb	w4, [x5, #1]!
   a4aa0:	7100bc9f 	cmp	w4, #0x2f
   a4aa4:	2a0403e3 	mov	w3, w4
   a4aa8:	540003ad 	b.le	a4b1c <strtoul+0x16c>
   a4aac:	51018463 	sub	w3, w3, #0x61
   a4ab0:	51008080 	sub	w0, w4, #0x20
   a4ab4:	7100687f 	cmp	w3, #0x1a
   a4ab8:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   a4abc:	51001c80 	sub	w0, w4, #0x7
   a4ac0:	7101009f 	cmp	w4, #0x40
   a4ac4:	1a84c004 	csel	w4, w0, w4, gt
   a4ac8:	5100c084 	sub	w4, w4, #0x30
   a4acc:	6b02009f 	cmp	w4, w2
   a4ad0:	93407c80 	sxtw	x0, w4
   a4ad4:	54fffdab 	b.lt	a4a88 <strtoul+0xd8>  // b.tstop
   a4ad8:	520000e2 	eor	w2, w7, #0x1
   a4adc:	aa0603e0 	mov	x0, x6
   a4ae0:	0a090042 	and	w2, w2, w9
   a4ae4:	b4000041 	cbz	x1, a4aec <strtoul+0x13c>
   a4ae8:	f9000025 	str	x5, [x1]
   a4aec:	7100005f 	cmp	w2, #0x0
   a4af0:	da800400 	cneg	x0, x0, ne  // ne = any
   a4af4:	d65f03c0 	ret
   a4af8:	7100005f 	cmp	w2, #0x0
   a4afc:	52800100 	mov	w0, #0x8                   	// #8
   a4b00:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   a4b04:	aa0403e5 	mov	x5, x4
   a4b08:	17ffffd9 	b	a4a6c <strtoul+0xbc>
   a4b0c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a4b10:	b4ffff21 	cbz	x1, a4af4 <strtoul+0x144>
   a4b14:	f9000025 	str	x5, [x1]
   a4b18:	d65f03c0 	ret
   a4b1c:	52800022 	mov	w2, #0x1                   	// #1
   a4b20:	17fffff0 	b	a4ae0 <strtoul+0x130>
   a4b24:	d2800000 	mov	x0, #0x0                   	// #0
   a4b28:	b4fffe61 	cbz	x1, a4af4 <strtoul+0x144>
   a4b2c:	f9000025 	str	x5, [x1]
   a4b30:	17fffffa 	b	a4b18 <strtoul+0x168>
   a4b34:	d503201f 	nop
   a4b38:	d503201f 	nop
   a4b3c:	d503201f 	nop

00000000000a4b40 <strtoull>:
   a4b40:	aa0003e5 	mov	x5, x0
   a4b44:	b4000041 	cbz	x1, a4b4c <strtoull+0xc>
   a4b48:	f9000020 	str	x0, [x1]
   a4b4c:	51000843 	sub	w3, w2, #0x2
   a4b50:	d2800000 	mov	x0, #0x0                   	// #0
   a4b54:	7100887f 	cmp	w3, #0x22
   a4b58:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   a4b5c:	54000941 	b.ne	a4c84 <strtoull+0x144>  // b.any
   a4b60:	39c000a3 	ldrsb	w3, [x5]
   a4b64:	51002464 	sub	w4, w3, #0x9
   a4b68:	7100807f 	cmp	w3, #0x20
   a4b6c:	12001c84 	and	w4, w4, #0xff
   a4b70:	54000060 	b.eq	a4b7c <strtoull+0x3c>  // b.none
   a4b74:	7100109f 	cmp	w4, #0x4
   a4b78:	54000068 	b.hi	a4b84 <strtoull+0x44>  // b.pmore
   a4b7c:	910004a5 	add	x5, x5, #0x1
   a4b80:	17fffff8 	b	a4b60 <strtoull+0x20>
   a4b84:	7100ac7f 	cmp	w3, #0x2b
   a4b88:	540002a0 	b.eq	a4bdc <strtoull+0x9c>  // b.none
   a4b8c:	7100b47f 	cmp	w3, #0x2d
   a4b90:	52800009 	mov	w9, #0x0                   	// #0
   a4b94:	540002a1 	b.ne	a4be8 <strtoull+0xa8>  // b.any
   a4b98:	39c004a3 	ldrsb	w3, [x5, #1]
   a4b9c:	52800029 	mov	w9, #0x1                   	// #1
   a4ba0:	910004a5 	add	x5, x5, #0x1
   a4ba4:	7100c07f 	cmp	w3, #0x30
   a4ba8:	54000241 	b.ne	a4bf0 <strtoull+0xb0>  // b.any
   a4bac:	39c004a3 	ldrsb	w3, [x5, #1]
   a4bb0:	910004a4 	add	x4, x5, #0x1
   a4bb4:	121a7860 	and	w0, w3, #0xffffffdf
   a4bb8:	7101601f 	cmp	w0, #0x58
   a4bbc:	54000661 	b.ne	a4c88 <strtoull+0x148>  // b.any
   a4bc0:	721b785f 	tst	w2, #0xffffffef
   a4bc4:	d2800000 	mov	x0, #0x0                   	// #0
   a4bc8:	540005e1 	b.ne	a4c84 <strtoull+0x144>  // b.any
   a4bcc:	39c008a3 	ldrsb	w3, [x5, #2]
   a4bd0:	52800202 	mov	w2, #0x10                  	// #16
   a4bd4:	910008a5 	add	x5, x5, #0x2
   a4bd8:	14000009 	b	a4bfc <strtoull+0xbc>
   a4bdc:	39c004a3 	ldrsb	w3, [x5, #1]
   a4be0:	52800009 	mov	w9, #0x0                   	// #0
   a4be4:	910004a5 	add	x5, x5, #0x1
   a4be8:	7100c07f 	cmp	w3, #0x30
   a4bec:	54fffe00 	b.eq	a4bac <strtoull+0x6c>  // b.none
   a4bf0:	7100005f 	cmp	w2, #0x0
   a4bf4:	52800140 	mov	w0, #0xa                   	// #10
   a4bf8:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   a4bfc:	7100bc7f 	cmp	w3, #0x2f
   a4c00:	2a0303e4 	mov	w4, w3
   a4c04:	5400058d 	b.le	a4cb4 <strtoull+0x174>
   a4c08:	52800027 	mov	w7, #0x1                   	// #1
   a4c0c:	d2800006 	mov	x6, #0x0                   	// #0
   a4c10:	93407c48 	sxtw	x8, w2
   a4c14:	1400000a 	b	a4c3c <strtoull+0xfc>
   a4c18:	9b060100 	madd	x0, x8, x6, x0
   a4c1c:	52800007 	mov	w7, #0x0                   	// #0
   a4c20:	eb06001f 	cmp	x0, x6
   a4c24:	aa0003e6 	mov	x6, x0
   a4c28:	540003a3 	b.cc	a4c9c <strtoull+0x15c>  // b.lo, b.ul, b.last
   a4c2c:	38c01ca4 	ldrsb	w4, [x5, #1]!
   a4c30:	7100bc9f 	cmp	w4, #0x2f
   a4c34:	2a0403e3 	mov	w3, w4
   a4c38:	540003ad 	b.le	a4cac <strtoull+0x16c>
   a4c3c:	51018463 	sub	w3, w3, #0x61
   a4c40:	51008080 	sub	w0, w4, #0x20
   a4c44:	7100687f 	cmp	w3, #0x1a
   a4c48:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   a4c4c:	51001c80 	sub	w0, w4, #0x7
   a4c50:	7101009f 	cmp	w4, #0x40
   a4c54:	1a84c004 	csel	w4, w0, w4, gt
   a4c58:	5100c084 	sub	w4, w4, #0x30
   a4c5c:	6b02009f 	cmp	w4, w2
   a4c60:	93407c80 	sxtw	x0, w4
   a4c64:	54fffdab 	b.lt	a4c18 <strtoull+0xd8>  // b.tstop
   a4c68:	520000e2 	eor	w2, w7, #0x1
   a4c6c:	aa0603e0 	mov	x0, x6
   a4c70:	0a090042 	and	w2, w2, w9
   a4c74:	b4000041 	cbz	x1, a4c7c <strtoull+0x13c>
   a4c78:	f9000025 	str	x5, [x1]
   a4c7c:	7100005f 	cmp	w2, #0x0
   a4c80:	da800400 	cneg	x0, x0, ne  // ne = any
   a4c84:	d65f03c0 	ret
   a4c88:	7100005f 	cmp	w2, #0x0
   a4c8c:	52800100 	mov	w0, #0x8                   	// #8
   a4c90:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   a4c94:	aa0403e5 	mov	x5, x4
   a4c98:	17ffffd9 	b	a4bfc <strtoull+0xbc>
   a4c9c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a4ca0:	b4ffff21 	cbz	x1, a4c84 <strtoull+0x144>
   a4ca4:	f9000025 	str	x5, [x1]
   a4ca8:	d65f03c0 	ret
   a4cac:	52800022 	mov	w2, #0x1                   	// #1
   a4cb0:	17fffff0 	b	a4c70 <strtoull+0x130>
   a4cb4:	d2800000 	mov	x0, #0x0                   	// #0
   a4cb8:	b4fffe61 	cbz	x1, a4c84 <strtoull+0x144>
   a4cbc:	f9000025 	str	x5, [x1]
   a4cc0:	17fffffa 	b	a4ca8 <strtoull+0x168>
   a4cc4:	d503201f 	nop
   a4cc8:	d503201f 	nop
   a4ccc:	d503201f 	nop

00000000000a4cd0 <atoi>:
   a4cd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4cd4:	52800142 	mov	w2, #0xa                   	// #10
   a4cd8:	910003fd 	mov	x29, sp
   a4cdc:	d2800001 	mov	x1, #0x0                   	// #0
   a4ce0:	97ffff34 	bl	a49b0 <strtoul>
   a4ce4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4ce8:	d65f03c0 	ret
   a4cec:	d503201f 	nop

00000000000a4cf0 <char2int>:
   a4cf0:	13001c00 	sxtb	w0, w0
   a4cf4:	d65f03c0 	ret

00000000000a4cf8 <memcpy>:
   a4cf8:	aa0003e8 	mov	x8, x0
   a4cfc:	f101fc5f 	cmp	x2, #0x7f
   a4d00:	540001c9 	b.ls	a4d38 <memcpy+0x40>  // b.plast
   a4d04:	f240083f 	tst	x1, #0x7
   a4d08:	54000181 	b.ne	a4d38 <memcpy+0x40>  // b.any
   a4d0c:	f240083f 	tst	x1, #0x7
   a4d10:	54000141 	b.ne	a4d38 <memcpy+0x40>  // b.any
   a4d14:	d2800803 	mov	x3, #0x40                  	// #64
   a4d18:	a8c11424 	ldp	x4, x5, [x1], #16
   a4d1c:	a8c11c26 	ldp	x6, x7, [x1], #16
   a4d20:	d1008042 	sub	x2, x2, #0x20
   a4d24:	a8811404 	stp	x4, x5, [x0], #16
   a4d28:	a8811c06 	stp	x6, x7, [x0], #16
   a4d2c:	f8a36821 	prfm	pldl1strm, [x1, x3]
   a4d30:	f1007c5f 	cmp	x2, #0x1f
   a4d34:	54ffff28 	b.hi	a4d18 <memcpy+0x20>  // b.pmore
   a4d38:	f100005f 	cmp	x2, #0x0
   a4d3c:	540000a0 	b.eq	a4d50 <memcpy+0x58>  // b.none
   a4d40:	38401423 	ldrb	w3, [x1], #1
   a4d44:	f1000442 	subs	x2, x2, #0x1
   a4d48:	38001403 	strb	w3, [x0], #1
   a4d4c:	54ffffa1 	b.ne	a4d40 <memcpy+0x48>  // b.any
   a4d50:	aa0803e0 	mov	x0, x8
   a4d54:	d65f03c0 	ret
	...

00000000000a4d60 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   a4d60:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a4d64:	910003fd 	mov	x29, sp
   a4d68:	72001c42 	ands	w2, w2, #0xff
   a4d6c:	7a410822 	ccmp	w1, #0x1, #0x2, eq  // eq = none
   a4d70:	a90153f3 	stp	x19, x20, [sp, #16]
   a4d74:	aa0003f3 	mov	x19, x0
   a4d78:	f0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a4d7c:	91100000 	add	x0, x0, #0x400
   a4d80:	f9000260 	str	x0, [x19]
   a4d84:	39002262 	strb	w2, [x19, #8]
   a4d88:	b9000e61 	str	w1, [x19, #12]
   a4d8c:	b900167f 	str	wzr, [x19, #20]
   a4d90:	54000089 	b.ls	a4da0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>  // b.plast
   a4d94:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4d98:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4d9c:	d65f03c0 	ret
   a4da0:	f90013f5 	str	x21, [sp, #32]
   a4da4:	d0000094 	adrp	x20, b6000 <s_OldInfo+0x68>
   a4da8:	913ce295 	add	x21, x20, #0xf38
   a4dac:	b9400aa0 	ldr	w0, [x21, #8]
   a4db0:	350001e0 	cbnz	w0, a4dec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x8c>
   a4db4:	f9479e80 	ldr	x0, [x20, #3896]
   a4db8:	b4000200 	cbz	x0, a4df8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x98>
   a4dbc:	b9400e61 	ldr	w1, [x19, #12]
   a4dc0:	531e7421 	lsl	w1, w1, #2
   a4dc4:	b821481f 	str	wzr, [x0, w1, uxtw]
   a4dc8:	b9400aa0 	ldr	w0, [x21, #8]
   a4dcc:	35000480 	cbnz	w0, a4e5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xfc>
   a4dd0:	aa1303e0 	mov	x0, x19
   a4dd4:	52800001 	mov	w1, #0x0                   	// #0
   a4dd8:	9400003a 	bl	a4ec0 <CVirtualGPIOPin::Write(unsigned int)>
   a4ddc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4de0:	f94013f5 	ldr	x21, [sp, #32]
   a4de4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4de8:	d65f03c0 	ret
   a4dec:	94000539 	bl	a62d0 <EnterCritical>
   a4df0:	f9479e80 	ldr	x0, [x20, #3896]
   a4df4:	b5fffe40 	cbnz	x0, a4dbc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x5c>
   a4df8:	52800020 	mov	w0, #0x1                   	// #1
   a4dfc:	94000519 	bl	a6260 <CMemorySystem::GetCoherentPage(unsigned int)>
   a4e00:	aa0003e2 	mov	x2, x0
   a4e04:	52800001 	mov	w1, #0x0                   	// #0
   a4e08:	9100e3e0 	add	x0, sp, #0x38
   a4e0c:	f9079e82 	str	x2, [x20, #3896]
   a4e10:	97ffde40 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a4e14:	f9479e85 	ldr	x5, [x20, #3896]
   a4e18:	9100e3e0 	add	x0, sp, #0x38
   a4e1c:	910103e2 	add	x2, sp, #0x40
   a4e20:	52900401 	mov	w1, #0x8020                	// #32800
   a4e24:	72a00081 	movk	w1, #0x4, lsl #16
   a4e28:	52800084 	mov	w4, #0x4                   	// #4
   a4e2c:	52800203 	mov	w3, #0x10                  	// #16
   a4e30:	320204a5 	orr	w5, w5, #0xc0000000
   a4e34:	b9004fe5 	str	w5, [sp, #76]
   a4e38:	97ffde3e 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4e3c:	72001c1f 	tst	w0, #0xff
   a4e40:	54000120 	b.eq	a4e64 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x104>  // b.none
   a4e44:	9100e3e0 	add	x0, sp, #0x38
   a4e48:	97ffde36 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4e4c:	f9479e80 	ldr	x0, [x20, #3896]
   a4e50:	b5fffb60 	cbnz	x0, a4dbc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x5c>
   a4e54:	b9400aa0 	ldr	w0, [x21, #8]
   a4e58:	34fffbc0 	cbz	w0, a4dd0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   a4e5c:	9400054d 	bl	a6390 <LeaveCritical>
   a4e60:	17ffffdc 	b	a4dd0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   a4e64:	910103e2 	add	x2, sp, #0x40
   a4e68:	52800201 	mov	w1, #0x10                  	// #16
   a4e6c:	72a00081 	movk	w1, #0x4, lsl #16
   a4e70:	52800004 	mov	w4, #0x0                   	// #0
   a4e74:	52800203 	mov	w3, #0x10                  	// #16
   a4e78:	9100e3e0 	add	x0, sp, #0x38
   a4e7c:	97ffde2d 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4e80:	72001c1f 	tst	w0, #0xff
   a4e84:	540000a0 	b.eq	a4e98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>  // b.none
   a4e88:	b9404fe0 	ldr	w0, [sp, #76]
   a4e8c:	92407400 	and	x0, x0, #0x3fffffff
   a4e90:	f9079e80 	str	x0, [x20, #3896]
   a4e94:	17ffffec 	b	a4e44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe4>
   a4e98:	f9079e9f 	str	xzr, [x20, #3896]
   a4e9c:	17ffffea 	b	a4e44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe4>

00000000000a4ea0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   a4ea0:	d65f03c0 	ret
   a4ea4:	d503201f 	nop
   a4ea8:	d503201f 	nop
   a4eac:	d503201f 	nop

00000000000a4eb0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   a4eb0:	d2800301 	mov	x1, #0x18                  	// #24
   a4eb4:	14000217 	b	a5710 <operator delete(void*, unsigned long)>
   a4eb8:	d503201f 	nop
   a4ebc:	d503201f 	nop

00000000000a4ec0 <CVirtualGPIOPin::Write(unsigned int)>:
   a4ec0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a4ec4:	910003fd 	mov	x29, sp
   a4ec8:	a90153f3 	stp	x19, x20, [sp, #16]
   a4ecc:	2a0103f4 	mov	w20, w1
   a4ed0:	aa0003f3 	mov	x19, x0
   a4ed4:	39402001 	ldrb	w1, [x0, #8]
   a4ed8:	b9400c00 	ldr	w0, [x0, #12]
   a4edc:	34000261 	cbz	w1, a4f28 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   a4ee0:	350006c0 	cbnz	w0, a4fb8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   a4ee4:	52800001 	mov	w1, #0x0                   	// #0
   a4ee8:	9100c3e0 	add	x0, sp, #0x30
   a4eec:	97ffde09 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a4ef0:	52801042 	mov	w2, #0x82                  	// #130
   a4ef4:	9100c3e0 	add	x0, sp, #0x30
   a4ef8:	52900821 	mov	w1, #0x8041                	// #32833
   a4efc:	72a00061 	movk	w1, #0x3, lsl #16
   a4f00:	52800104 	mov	w4, #0x8                   	// #8
   a4f04:	52800283 	mov	w3, #0x14                  	// #20
   a4f08:	2908d3e2 	stp	w2, w20, [sp, #68]
   a4f0c:	9100e3e2 	add	x2, sp, #0x38
   a4f10:	97ffde08 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4f14:	9100c3e0 	add	x0, sp, #0x30
   a4f18:	97ffde02 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4f1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4f20:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4f24:	d65f03c0 	ret
   a4f28:	7100041f 	cmp	w0, #0x1
   a4f2c:	54ffff88 	b.hi	a4f1c <CVirtualGPIOPin::Write(unsigned int)+0x5c>  // b.pmore
   a4f30:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4f34:	d0000095 	adrp	x21, b6000 <s_OldInfo+0x68>
   a4f38:	913ce2b6 	add	x22, x21, #0xf38
   a4f3c:	f9479ea0 	ldr	x0, [x21, #3896]
   a4f40:	f100001f 	cmp	x0, #0x0
   a4f44:	7a411a82 	ccmp	w20, #0x1, #0x2, ne  // ne = any
   a4f48:	540000a9 	b.ls	a4f5c <CVirtualGPIOPin::Write(unsigned int)+0x9c>  // b.plast
   a4f4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4f50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4f54:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4f58:	d65f03c0 	ret
   a4f5c:	b9400ac0 	ldr	w0, [x22, #8]
   a4f60:	35000420 	cbnz	w0, a4fe4 <CVirtualGPIOPin::Write(unsigned int)+0x124>
   a4f64:	79402a60 	ldrh	w0, [x19, #20]
   a4f68:	b9001274 	str	w20, [x19, #16]
   a4f6c:	79402e61 	ldrh	w1, [x19, #22]
   a4f70:	4b010002 	sub	w2, w0, w1
   a4f74:	13003c42 	sxth	w2, w2
   a4f78:	7100005f 	cmp	w2, #0x0
   a4f7c:	540002ad 	b.le	a4fd0 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   a4f80:	35000134 	cbnz	w20, a4fa4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   a4f84:	11000421 	add	w1, w1, #0x1
   a4f88:	12003c21 	and	w1, w1, #0xffff
   a4f8c:	79002e61 	strh	w1, [x19, #22]
   a4f90:	b9400e62 	ldr	w2, [x19, #12]
   a4f94:	2a004020 	orr	w0, w1, w0, lsl #16
   a4f98:	f9479ea3 	ldr	x3, [x21, #3896]
   a4f9c:	531e7441 	lsl	w1, w2, #2
   a4fa0:	b8214860 	str	w0, [x3, w1, uxtw]
   a4fa4:	b9400ac0 	ldr	w0, [x22, #8]
   a4fa8:	34fffd20 	cbz	w0, a4f4c <CVirtualGPIOPin::Write(unsigned int)+0x8c>
   a4fac:	940004f9 	bl	a6390 <LeaveCritical>
   a4fb0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4fb4:	17ffffda 	b	a4f1c <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   a4fb8:	f0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a4fbc:	91104021 	add	x1, x1, #0x410
   a4fc0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4fc4:	91006020 	add	x0, x1, #0x18
   a4fc8:	52800b62 	mov	w2, #0x5b                  	// #91
   a4fcc:	97ffddad 	bl	9c680 <assertion_failed>
   a4fd0:	34fffeb4 	cbz	w20, a4fa4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   a4fd4:	11000400 	add	w0, w0, #0x1
   a4fd8:	12003c00 	and	w0, w0, #0xffff
   a4fdc:	79002a60 	strh	w0, [x19, #20]
   a4fe0:	17ffffec 	b	a4f90 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   a4fe4:	940004bb 	bl	a62d0 <EnterCritical>
   a4fe8:	17ffffdf 	b	a4f64 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   a4fec:	d503201f 	nop

00000000000a4ff0 <CVirtualGPIOPin::Invert()>:
   a4ff0:	b9401001 	ldr	w1, [x0, #16]
   a4ff4:	52000021 	eor	w1, w1, #0x1
   a4ff8:	17ffffb2 	b	a4ec0 <CVirtualGPIOPin::Write(unsigned int)>
   a4ffc:	d503201f 	nop

00000000000a5000 <__static_initialization_and_destruction_0(int, int)>:
   a5000:	529fffe2 	mov	w2, #0xffff                	// #65535
   a5004:	6b02003f 	cmp	w1, w2
   a5008:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   a500c:	54000040 	b.eq	a5014 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   a5010:	d65f03c0 	ret
   a5014:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5018:	b90f401f 	str	wzr, [x0, #3904]
   a501c:	d65f03c0 	ret

00000000000a5020 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   a5020:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5024:	b90f401f 	str	wzr, [x0, #3904]
   a5028:	d65f03c0 	ret
   a502c:	00000000 	.inst	0x00000000 ; undefined

00000000000a5030 <ChainBootStub(void const*, unsigned long)>:
   a5030:	91000c21 	add	x1, x1, #0x3
   a5034:	eb410bff 	cmp	xzr, x1, lsr #2
   a5038:	d342fc21 	lsr	x1, x1, #2
   a503c:	540001a0 	b.eq	a5070 <ChainBootStub(void const*, unsigned long)+0x40>  // b.none
   a5040:	d1420004 	sub	x4, x0, #0x80, lsl #12
   a5044:	91408021 	add	x1, x1, #0x20, lsl #12
   a5048:	d1001084 	sub	x4, x4, #0x4
   a504c:	d37ef421 	lsl	x1, x1, #2
   a5050:	d2a00100 	mov	x0, #0x80000               	// #524288
   a5054:	d503201f 	nop
   a5058:	aa0003e2 	mov	x2, x0
   a505c:	91001000 	add	x0, x0, #0x4
   a5060:	b8646803 	ldr	w3, [x0, x4]
   a5064:	eb01001f 	cmp	x0, x1
   a5068:	b9000043 	str	w3, [x2]
   a506c:	54ffff61 	b.ne	a5058 <ChainBootStub(void const*, unsigned long)+0x28>  // b.any
   a5070:	d508751f 	ic	iallu
   a5074:	d5033f9f 	dsb	sy
   a5078:	d5033fdf 	isb
   a507c:	d2a00100 	mov	x0, #0x80000               	// #524288
   a5080:	aa0003f0 	mov	x16, x0
   a5084:	d61f0200 	br	x16
   a5088:	d503201f 	nop
   a508c:	d503201f 	nop

00000000000a5090 <EnableChainBoot>:
   a5090:	aa0003e6 	mov	x6, x0
   a5094:	aa0103e5 	mov	x5, x1
   a5098:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a509c:	b0000083 	adrp	x3, b6000 <s_OldInfo+0x68>
   a50a0:	913d2064 	add	x4, x3, #0xf48
   a50a4:	90000001 	adrp	x1, a5000 <__static_initialization_and_destruction_0(int, int)>
   a50a8:	910003fd 	mov	x29, sp
   a50ac:	d2808002 	mov	x2, #0x400                 	// #1024
   a50b0:	9100c021 	add	x1, x1, #0x30
   a50b4:	f907a466 	str	x6, [x3, #3912]
   a50b8:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   a50bc:	f9000485 	str	x5, [x4, #8]
   a50c0:	97ffff0e 	bl	a4cf8 <memcpy>
   a50c4:	d508751f 	ic	iallu
   a50c8:	d5033f9f 	dsb	sy
   a50cc:	d5033fdf 	isb
   a50d0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a50d4:	d65f03c0 	ret
   a50d8:	d503201f 	nop
   a50dc:	d503201f 	nop

00000000000a50e0 <IsChainBootEnabled>:
   a50e0:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a50e4:	f947a400 	ldr	x0, [x0, #3912]
   a50e8:	f100001f 	cmp	x0, #0x0
   a50ec:	1a9f07e0 	cset	w0, ne  // ne = any
   a50f0:	d65f03c0 	ret
   a50f4:	d503201f 	nop
   a50f8:	d503201f 	nop
   a50fc:	d503201f 	nop

00000000000a5100 <DoChainBoot>:
   a5100:	d4000002 	hvc	#0x0
   a5104:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5108:	913d2001 	add	x1, x0, #0xf48
   a510c:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   a5110:	f947a400 	ldr	x0, [x0, #3912]
   a5114:	aa0203f0 	mov	x16, x2
   a5118:	f9400421 	ldr	x1, [x1, #8]
   a511c:	d61f0200 	br	x16

00000000000a5120 <CMACAddress::CMACAddress()>:
   a5120:	3900001f 	strb	wzr, [x0]
   a5124:	d65f03c0 	ret
   a5128:	d503201f 	nop
   a512c:	d503201f 	nop

00000000000a5130 <CMACAddress::~CMACAddress()>:
   a5130:	d65f03c0 	ret
   a5134:	d503201f 	nop
   a5138:	d503201f 	nop
   a513c:	d503201f 	nop

00000000000a5140 <CMACAddress::operator==(CMACAddress const&) const>:
   a5140:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5144:	910003fd 	mov	x29, sp
   a5148:	39400002 	ldrb	w2, [x0]
   a514c:	34000162 	cbz	w2, a5178 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   a5150:	39400022 	ldrb	w2, [x1]
   a5154:	91000400 	add	x0, x0, #0x1
   a5158:	340001c2 	cbz	w2, a5190 <CMACAddress::operator==(CMACAddress const&) const+0x50>
   a515c:	91000421 	add	x1, x1, #0x1
   a5160:	d28000c2 	mov	x2, #0x6                   	// #6
   a5164:	97fffcf7 	bl	a4540 <memcmp>
   a5168:	7100001f 	cmp	w0, #0x0
   a516c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a5170:	1a9f17e0 	cset	w0, eq  // eq = none
   a5174:	d65f03c0 	ret
   a5178:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a517c:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a5180:	9110e021 	add	x1, x1, #0x438
   a5184:	91386000 	add	x0, x0, #0xe18
   a5188:	52800522 	mov	w2, #0x29                  	// #41
   a518c:	97ffdd3d 	bl	9c680 <assertion_failed>
   a5190:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5194:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a5198:	9110e021 	add	x1, x1, #0x438
   a519c:	91386000 	add	x0, x0, #0xe18
   a51a0:	52800822 	mov	w2, #0x41                  	// #65
   a51a4:	97ffdd37 	bl	9c680 <assertion_failed>
   a51a8:	d503201f 	nop
   a51ac:	d503201f 	nop

00000000000a51b0 <CMACAddress::operator!=(CMACAddress const&) const>:
   a51b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a51b4:	910003fd 	mov	x29, sp
   a51b8:	97ffffe2 	bl	a5140 <CMACAddress::operator==(CMACAddress const&) const>
   a51bc:	12001c00 	and	w0, w0, #0xff
   a51c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a51c4:	52000000 	eor	w0, w0, #0x1
   a51c8:	d65f03c0 	ret
   a51cc:	d503201f 	nop

00000000000a51d0 <CMACAddress::Set(unsigned char const*)>:
   a51d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a51d4:	910003fd 	mov	x29, sp
   a51d8:	f9000bf3 	str	x19, [sp, #16]
   a51dc:	b4000141 	cbz	x1, a5204 <CMACAddress::Set(unsigned char const*)+0x34>
   a51e0:	aa0003f3 	mov	x19, x0
   a51e4:	d28000c2 	mov	x2, #0x6                   	// #6
   a51e8:	91000400 	add	x0, x0, #0x1
   a51ec:	97fffec3 	bl	a4cf8 <memcpy>
   a51f0:	52800020 	mov	w0, #0x1                   	// #1
   a51f4:	39000260 	strb	w0, [x19]
   a51f8:	f9400bf3 	ldr	x19, [sp, #16]
   a51fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5200:	d65f03c0 	ret
   a5204:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5208:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a520c:	9110e021 	add	x1, x1, #0x438
   a5210:	91112000 	add	x0, x0, #0x448
   a5214:	52800682 	mov	w2, #0x34                  	// #52
   a5218:	97ffdd1a 	bl	9c680 <assertion_failed>
   a521c:	d503201f 	nop

00000000000a5220 <CMACAddress::CMACAddress(unsigned char const*)>:
   a5220:	17ffffec 	b	a51d0 <CMACAddress::Set(unsigned char const*)>
   a5224:	d503201f 	nop
   a5228:	d503201f 	nop
   a522c:	d503201f 	nop

00000000000a5230 <CMACAddress::SetBroadcast()>:
   a5230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5234:	910003fd 	mov	x29, sp
   a5238:	d28000c2 	mov	x2, #0x6                   	// #6
   a523c:	52801fe1 	mov	w1, #0xff                  	// #255
   a5240:	f9000bf3 	str	x19, [sp, #16]
   a5244:	aa0003f3 	mov	x19, x0
   a5248:	91000400 	add	x0, x0, #0x1
   a524c:	97fffc91 	bl	a4490 <memset>
   a5250:	52800020 	mov	w0, #0x1                   	// #1
   a5254:	39000260 	strb	w0, [x19]
   a5258:	f9400bf3 	ldr	x19, [sp, #16]
   a525c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5260:	d65f03c0 	ret
   a5264:	d503201f 	nop
   a5268:	d503201f 	nop
   a526c:	d503201f 	nop

00000000000a5270 <CMACAddress::Get() const>:
   a5270:	39400001 	ldrb	w1, [x0]
   a5274:	34000061 	cbz	w1, a5280 <CMACAddress::Get() const+0x10>
   a5278:	91000400 	add	x0, x0, #0x1
   a527c:	d65f03c0 	ret
   a5280:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5284:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a5288:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a528c:	9110e021 	add	x1, x1, #0x438
   a5290:	910003fd 	mov	x29, sp
   a5294:	91386000 	add	x0, x0, #0xe18
   a5298:	52800822 	mov	w2, #0x41                  	// #65
   a529c:	97ffdcf9 	bl	9c680 <assertion_failed>

00000000000a52a0 <CMACAddress::CopyTo(unsigned char*) const>:
   a52a0:	aa0003e2 	mov	x2, x0
   a52a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a52a8:	aa0103e0 	mov	x0, x1
   a52ac:	910003fd 	mov	x29, sp
   a52b0:	39400041 	ldrb	w1, [x2]
   a52b4:	340000c1 	cbz	w1, a52cc <CMACAddress::CopyTo(unsigned char*) const+0x2c>
   a52b8:	b4000160 	cbz	x0, a52e4 <CMACAddress::CopyTo(unsigned char*) const+0x44>
   a52bc:	91000441 	add	x1, x2, #0x1
   a52c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a52c4:	d28000c2 	mov	x2, #0x6                   	// #6
   a52c8:	17fffe8c 	b	a4cf8 <memcpy>
   a52cc:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a52d0:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a52d4:	9110e021 	add	x1, x1, #0x438
   a52d8:	91386000 	add	x0, x0, #0xe18
   a52dc:	528008e2 	mov	w2, #0x47                  	// #71
   a52e0:	97ffdce8 	bl	9c680 <assertion_failed>
   a52e4:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a52e8:	b0000040 	adrp	x0, ae000 <FromDevice+0x108>
   a52ec:	9110e021 	add	x1, x1, #0x438
   a52f0:	91326000 	add	x0, x0, #0xc98
   a52f4:	52800902 	mov	w2, #0x48                  	// #72
   a52f8:	97ffdce2 	bl	9c680 <assertion_failed>
   a52fc:	d503201f 	nop

00000000000a5300 <CMACAddress::IsBroadcast() const>:
   a5300:	aa0003e1 	mov	x1, x0
   a5304:	91001c03 	add	x3, x0, #0x7
   a5308:	38401420 	ldrb	w0, [x1], #1
   a530c:	34000140 	cbz	w0, a5334 <CMACAddress::IsBroadcast() const+0x34>
   a5310:	39400022 	ldrb	w2, [x1]
   a5314:	7103fc5f 	cmp	w2, #0xff
   a5318:	540000a1 	b.ne	a532c <CMACAddress::IsBroadcast() const+0x2c>  // b.any
   a531c:	91000421 	add	x1, x1, #0x1
   a5320:	eb03003f 	cmp	x1, x3
   a5324:	54ffff61 	b.ne	a5310 <CMACAddress::IsBroadcast() const+0x10>  // b.any
   a5328:	d65f03c0 	ret
   a532c:	52800000 	mov	w0, #0x0                   	// #0
   a5330:	d65f03c0 	ret
   a5334:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5338:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a533c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5340:	9110e021 	add	x1, x1, #0x438
   a5344:	910003fd 	mov	x29, sp
   a5348:	91386000 	add	x0, x0, #0xe18
   a534c:	528009c2 	mov	w2, #0x4e                  	// #78
   a5350:	97ffdccc 	bl	9c680 <assertion_failed>
   a5354:	d503201f 	nop
   a5358:	d503201f 	nop
   a535c:	d503201f 	nop

00000000000a5360 <CMACAddress::GetSize() const>:
   a5360:	528000c0 	mov	w0, #0x6                   	// #6
   a5364:	d65f03c0 	ret
   a5368:	d503201f 	nop
   a536c:	d503201f 	nop

00000000000a5370 <CMACAddress::Format(CString*) const>:
   a5370:	aa0003e2 	mov	x2, x0
   a5374:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5378:	aa0103e0 	mov	x0, x1
   a537c:	910003fd 	mov	x29, sp
   a5380:	39400041 	ldrb	w1, [x2]
   a5384:	34000181 	cbz	w1, a53b4 <CMACAddress::Format(CString*) const+0x44>
   a5388:	b4000220 	cbz	x0, a53cc <CMACAddress::Format(CString*) const+0x5c>
   a538c:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5390:	39401847 	ldrb	w7, [x2, #6]
   a5394:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a5398:	9111a021 	add	x1, x1, #0x468
   a539c:	39401446 	ldrb	w6, [x2, #5]
   a53a0:	39401045 	ldrb	w5, [x2, #4]
   a53a4:	39400c44 	ldrb	w4, [x2, #3]
   a53a8:	39400843 	ldrb	w3, [x2, #2]
   a53ac:	39400442 	ldrb	w2, [x2, #1]
   a53b0:	17fff810 	b	a33f0 <CString::Format(char const*, ...)>
   a53b4:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a53b8:	d0000040 	adrp	x0, af000 <FromUmsd+0xb0>
   a53bc:	9110e021 	add	x1, x1, #0x438
   a53c0:	91386000 	add	x0, x0, #0xe18
   a53c4:	52800c42 	mov	w2, #0x62                  	// #98
   a53c8:	97ffdcae 	bl	9c680 <assertion_failed>
   a53cc:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a53d0:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a53d4:	9110e021 	add	x1, x1, #0x438
   a53d8:	91116000 	add	x0, x0, #0x458
   a53dc:	52800c62 	mov	w2, #0x63                  	// #99
   a53e0:	97ffdca8 	bl	9c680 <assertion_failed>
	...

00000000000a53f0 <CNetDevice::AddNetDevice()>:
   a53f0:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a53f4:	913d6023 	add	x3, x1, #0xf58
   a53f8:	b94f5822 	ldr	w2, [x1, #3928]
   a53fc:	7100105f 	cmp	w2, #0x4
   a5400:	540000a8 	b.hi	a5414 <CNetDevice::AddNetDevice()+0x24>  // b.pmore
   a5404:	91002063 	add	x3, x3, #0x8
   a5408:	11000444 	add	w4, w2, #0x1
   a540c:	b90f5824 	str	w4, [x1, #3928]
   a5410:	f8225860 	str	x0, [x3, w2, uxtw #3]
   a5414:	d65f03c0 	ret
   a5418:	d503201f 	nop
   a541c:	d503201f 	nop

00000000000a5420 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   a5420:	7100141f 	cmp	w0, #0x5
   a5424:	540000ac 	b.gt	a5438 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   a5428:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a542c:	910ce021 	add	x1, x1, #0x338
   a5430:	f860d820 	ldr	x0, [x1, w0, sxtw #3]
   a5434:	d65f03c0 	ret
   a5438:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a543c:	91122000 	add	x0, x0, #0x488
   a5440:	d65f03c0 	ret
   a5444:	d503201f 	nop
   a5448:	d503201f 	nop
   a544c:	d503201f 	nop

00000000000a5450 <CNetDevice::GetNetDevice(unsigned int)>:
   a5450:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a5454:	913d6022 	add	x2, x1, #0xf58
   a5458:	b94f5821 	ldr	w1, [x1, #3928]
   a545c:	6b00003f 	cmp	w1, w0
   a5460:	54000089 	b.ls	a5470 <CNetDevice::GetNetDevice(unsigned int)+0x20>  // b.plast
   a5464:	91002042 	add	x2, x2, #0x8
   a5468:	f8605840 	ldr	x0, [x2, w0, uxtw #3]
   a546c:	d65f03c0 	ret
   a5470:	d2800000 	mov	x0, #0x0                   	// #0
   a5474:	d65f03c0 	ret
   a5478:	d503201f 	nop
   a547c:	d503201f 	nop

00000000000a5480 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   a5480:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a5484:	910003fd 	mov	x29, sp
   a5488:	a9025bf5 	stp	x21, x22, [sp, #32]
   a548c:	b0000096 	adrp	x22, b6000 <s_OldInfo+0x68>
   a5490:	b94f5ac1 	ldr	w1, [x22, #3928]
   a5494:	a90153f3 	stp	x19, x20, [sp, #16]
   a5498:	34000461 	cbz	w1, a5524 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa4>
   a549c:	913d62d6 	add	x22, x22, #0xf58
   a54a0:	2a0003f5 	mov	w21, w0
   a54a4:	d2800013 	mov	x19, #0x0                   	// #0
   a54a8:	a90363f7 	stp	x23, x24, [sp, #48]
   a54ac:	d0ffff57 	adrp	x23, 8f000 <CLAN7800Device::Configure()+0x360>
   a54b0:	910442f7 	add	x23, x23, #0x110
   a54b4:	910022d8 	add	x24, x22, #0x8
   a54b8:	14000006 	b	a54d0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x50>
   a54bc:	6b15001f 	cmp	w0, w21
   a54c0:	54000240 	b.eq	a5508 <CNetDevice::GetNetDevice(TNetDeviceType)+0x88>  // b.none
   a54c4:	b94002c0 	ldr	w0, [x22]
   a54c8:	6b13001f 	cmp	w0, w19
   a54cc:	540002a9 	b.ls	a5520 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa0>  // b.plast
   a54d0:	f8737b14 	ldr	x20, [x24, x19, lsl #3]
   a54d4:	71000abf 	cmp	w21, #0x2
   a54d8:	91000673 	add	x19, x19, #0x1
   a54dc:	b4000234 	cbz	x20, a5520 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa0>
   a54e0:	54000140 	b.eq	a5508 <CNetDevice::GetNetDevice(TNetDeviceType)+0x88>  // b.none
   a54e4:	f9400281 	ldr	x1, [x20]
   a54e8:	52800000 	mov	w0, #0x0                   	// #0
   a54ec:	f9400821 	ldr	x1, [x1, #16]
   a54f0:	eb17003f 	cmp	x1, x23
   a54f4:	54fffe40 	b.eq	a54bc <CNetDevice::GetNetDevice(TNetDeviceType)+0x3c>  // b.none
   a54f8:	aa1403e0 	mov	x0, x20
   a54fc:	d63f0020 	blr	x1
   a5500:	6b15001f 	cmp	w0, w21
   a5504:	54fffe01 	b.ne	a54c4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x44>  // b.any
   a5508:	aa1403e0 	mov	x0, x20
   a550c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5510:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5514:	a94363f7 	ldp	x23, x24, [sp, #48]
   a5518:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a551c:	d65f03c0 	ret
   a5520:	a94363f7 	ldp	x23, x24, [sp, #48]
   a5524:	d2800014 	mov	x20, #0x0                   	// #0
   a5528:	aa1403e0 	mov	x0, x20
   a552c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5530:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5534:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5538:	d65f03c0 	ret
   a553c:	00000000 	.inst	0x00000000 ; undefined

00000000000a5540 <operator new(unsigned long, int)>:
   a5540:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5544:	910003fd 	mov	x29, sp
   a5548:	7100043f 	cmp	w1, #0x1
   a554c:	a90153f3 	stp	x19, x20, [sp, #16]
   a5550:	aa0003f3 	mov	x19, x0
   a5554:	54000100 	b.eq	a5574 <operator new(unsigned long, int)+0x34>  // b.none
   a5558:	7100083f 	cmp	w1, #0x2
   a555c:	54000280 	b.eq	a55ac <operator new(unsigned long, int)+0x6c>  // b.none
   a5560:	d2800000 	mov	x0, #0x0                   	// #0
   a5564:	34000161 	cbz	w1, a5590 <operator new(unsigned long, int)+0x50>
   a5568:	a94153f3 	ldp	x19, x20, [sp, #16]
   a556c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5570:	d65f03c0 	ret
   a5574:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5578:	aa1303e1 	mov	x1, x19
   a557c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5580:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5584:	f947c800 	ldr	x0, [x0, #3984]
   a5588:	91064000 	add	x0, x0, #0x190
   a558c:	140000a1 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5590:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5594:	aa1303e1 	mov	x1, x19
   a5598:	a94153f3 	ldp	x19, x20, [sp, #16]
   a559c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a55a0:	f947c800 	ldr	x0, [x0, #3984]
   a55a4:	91006000 	add	x0, x0, #0x18
   a55a8:	1400009a 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a55ac:	b0000094 	adrp	x20, b6000 <s_OldInfo+0x68>
   a55b0:	aa0003e1 	mov	x1, x0
   a55b4:	f947ca80 	ldr	x0, [x20, #3984]
   a55b8:	91064000 	add	x0, x0, #0x190
   a55bc:	94000095 	bl	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a55c0:	b5fffd40 	cbnz	x0, a5568 <operator new(unsigned long, int)+0x28>
   a55c4:	f947ca80 	ldr	x0, [x20, #3984]
   a55c8:	aa1303e1 	mov	x1, x19
   a55cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a55d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a55d4:	91006000 	add	x0, x0, #0x18
   a55d8:	1400008e 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a55dc:	d503201f 	nop

00000000000a55e0 <operator new[](unsigned long, int)>:
   a55e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a55e4:	910003fd 	mov	x29, sp
   a55e8:	7100043f 	cmp	w1, #0x1
   a55ec:	a90153f3 	stp	x19, x20, [sp, #16]
   a55f0:	aa0003f3 	mov	x19, x0
   a55f4:	54000100 	b.eq	a5614 <operator new[](unsigned long, int)+0x34>  // b.none
   a55f8:	7100083f 	cmp	w1, #0x2
   a55fc:	54000280 	b.eq	a564c <operator new[](unsigned long, int)+0x6c>  // b.none
   a5600:	d2800000 	mov	x0, #0x0                   	// #0
   a5604:	34000161 	cbz	w1, a5630 <operator new[](unsigned long, int)+0x50>
   a5608:	a94153f3 	ldp	x19, x20, [sp, #16]
   a560c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5610:	d65f03c0 	ret
   a5614:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5618:	aa1303e1 	mov	x1, x19
   a561c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5620:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5624:	f947c800 	ldr	x0, [x0, #3984]
   a5628:	91064000 	add	x0, x0, #0x190
   a562c:	14000079 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5630:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5634:	aa1303e1 	mov	x1, x19
   a5638:	a94153f3 	ldp	x19, x20, [sp, #16]
   a563c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5640:	f947c800 	ldr	x0, [x0, #3984]
   a5644:	91006000 	add	x0, x0, #0x18
   a5648:	14000072 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a564c:	b0000094 	adrp	x20, b6000 <s_OldInfo+0x68>
   a5650:	aa0003e1 	mov	x1, x0
   a5654:	f947ca80 	ldr	x0, [x20, #3984]
   a5658:	91064000 	add	x0, x0, #0x190
   a565c:	9400006d 	bl	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5660:	b5fffd40 	cbnz	x0, a5608 <operator new[](unsigned long, int)+0x28>
   a5664:	f947ca80 	ldr	x0, [x20, #3984]
   a5668:	aa1303e1 	mov	x1, x19
   a566c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5670:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5674:	91006000 	add	x0, x0, #0x18
   a5678:	14000066 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a567c:	d503201f 	nop

00000000000a5680 <operator new(unsigned long)>:
   a5680:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a5684:	f947c822 	ldr	x2, [x1, #3984]
   a5688:	aa0003e1 	mov	x1, x0
   a568c:	91006040 	add	x0, x2, #0x18
   a5690:	14000060 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5694:	d503201f 	nop
   a5698:	d503201f 	nop
   a569c:	d503201f 	nop

00000000000a56a0 <operator new[](unsigned long)>:
   a56a0:	17fffff8 	b	a5680 <operator new(unsigned long)>
   a56a4:	d503201f 	nop
   a56a8:	d503201f 	nop
   a56ac:	d503201f 	nop

00000000000a56b0 <operator delete(void*)>:
   a56b0:	aa0003e1 	mov	x1, x0
   a56b4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a56b8:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a56bc:	eb02003f 	cmp	x1, x2
   a56c0:	f947c800 	ldr	x0, [x0, #3984]
   a56c4:	54000068 	b.hi	a56d0 <operator delete(void*)+0x20>  // b.pmore
   a56c8:	91006000 	add	x0, x0, #0x18
   a56cc:	140000b5 	b	a59a0 <CHeapAllocator::Free(void*)>
   a56d0:	91064000 	add	x0, x0, #0x190
   a56d4:	140000b3 	b	a59a0 <CHeapAllocator::Free(void*)>
   a56d8:	d503201f 	nop
   a56dc:	d503201f 	nop

00000000000a56e0 <operator delete[](void*)>:
   a56e0:	aa0003e1 	mov	x1, x0
   a56e4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a56e8:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a56ec:	eb02003f 	cmp	x1, x2
   a56f0:	f947c800 	ldr	x0, [x0, #3984]
   a56f4:	54000068 	b.hi	a5700 <operator delete[](void*)+0x20>  // b.pmore
   a56f8:	91006000 	add	x0, x0, #0x18
   a56fc:	140000a9 	b	a59a0 <CHeapAllocator::Free(void*)>
   a5700:	91064000 	add	x0, x0, #0x190
   a5704:	140000a7 	b	a59a0 <CHeapAllocator::Free(void*)>
   a5708:	d503201f 	nop
   a570c:	d503201f 	nop

00000000000a5710 <operator delete(void*, unsigned long)>:
   a5710:	aa0003e1 	mov	x1, x0
   a5714:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a5718:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a571c:	eb02003f 	cmp	x1, x2
   a5720:	f947c800 	ldr	x0, [x0, #3984]
   a5724:	54000068 	b.hi	a5730 <operator delete(void*, unsigned long)+0x20>  // b.pmore
   a5728:	91006000 	add	x0, x0, #0x18
   a572c:	1400009d 	b	a59a0 <CHeapAllocator::Free(void*)>
   a5730:	91064000 	add	x0, x0, #0x190
   a5734:	1400009b 	b	a59a0 <CHeapAllocator::Free(void*)>
   a5738:	d503201f 	nop
   a573c:	d503201f 	nop

00000000000a5740 <operator delete[](void*, unsigned long)>:
   a5740:	aa0003e1 	mov	x1, x0
   a5744:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a5748:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a574c:	eb02003f 	cmp	x1, x2
   a5750:	f947c800 	ldr	x0, [x0, #3984]
   a5754:	54000068 	b.hi	a5760 <operator delete[](void*, unsigned long)+0x20>  // b.pmore
   a5758:	91006000 	add	x0, x0, #0x18
   a575c:	14000091 	b	a59a0 <CHeapAllocator::Free(void*)>
   a5760:	91064000 	add	x0, x0, #0x190
   a5764:	1400008f 	b	a59a0 <CHeapAllocator::Free(void*)>
	...

00000000000a5770 <CHeapAllocator::CHeapAllocator(char const*)>:
   a5770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5774:	aa0003e3 	mov	x3, x0
   a5778:	aa0103e5 	mov	x5, x1
   a577c:	910003fd 	mov	x29, sp
   a5780:	52800024 	mov	w4, #0x1                   	// #1
   a5784:	52800001 	mov	w1, #0x0                   	// #0
   a5788:	d2802a02 	mov	x2, #0x150                 	// #336
   a578c:	f9000bf3 	str	x19, [sp, #16]
   a5790:	91008013 	add	x19, x0, #0x20
   a5794:	aa1303e0 	mov	x0, x19
   a5798:	a9007c65 	stp	x5, xzr, [x3]
   a579c:	a9017c7f 	stp	xzr, xzr, [x3, #16]
   a57a0:	b9017064 	str	w4, [x3, #368]
   a57a4:	97fffb3b 	bl	a4490 <memset>
   a57a8:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a57ac:	910da021 	add	x1, x1, #0x368
   a57b0:	aa1303e0 	mov	x0, x19
   a57b4:	91007023 	add	x3, x1, #0x1c
   a57b8:	b8404422 	ldr	w2, [x1], #4
   a57bc:	eb03003f 	cmp	x1, x3
   a57c0:	b8010402 	str	w2, [x0], #16
   a57c4:	54ffffa1 	b.ne	a57b8 <CHeapAllocator::CHeapAllocator(char const*)+0x48>  // b.any
   a57c8:	f9400bf3 	ldr	x19, [sp, #16]
   a57cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a57d0:	d65f03c0 	ret
   a57d4:	d503201f 	nop
   a57d8:	d503201f 	nop
   a57dc:	d503201f 	nop

00000000000a57e0 <CHeapAllocator::~CHeapAllocator()>:
   a57e0:	d65f03c0 	ret
   a57e4:	d503201f 	nop
   a57e8:	d503201f 	nop
   a57ec:	d503201f 	nop

00000000000a57f0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>:
   a57f0:	8b020022 	add	x2, x1, x2
   a57f4:	f9000c03 	str	x3, [x0, #24]
   a57f8:	a9008801 	stp	x1, x2, [x0, #8]
   a57fc:	d65f03c0 	ret

00000000000a5800 <CHeapAllocator::GetFreeSpace() const>:
   a5800:	a9408001 	ldp	x1, x0, [x0, #8]
   a5804:	cb010000 	sub	x0, x0, x1
   a5808:	d65f03c0 	ret
   a580c:	d503201f 	nop

00000000000a5810 <CHeapAllocator::Allocate(unsigned long)>:
   a5810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5814:	910003fd 	mov	x29, sp
   a5818:	a90153f3 	stp	x19, x20, [sp, #16]
   a581c:	aa0003f4 	mov	x20, x0
   a5820:	f9400400 	ldr	x0, [x0, #8]
   a5824:	b40005a0 	cbz	x0, a58d8 <CHeapAllocator::Allocate(unsigned long)+0xc8>
   a5828:	b9417280 	ldr	w0, [x20, #368]
   a582c:	aa0103f3 	mov	x19, x1
   a5830:	f90013f5 	str	x21, [sp, #32]
   a5834:	35000720 	cbnz	w0, a5918 <CHeapAllocator::Allocate(unsigned long)+0x108>
   a5838:	b9402282 	ldr	w2, [x20, #32]
   a583c:	91008283 	add	x3, x20, #0x20
   a5840:	35000082 	cbnz	w2, a5850 <CHeapAllocator::Allocate(unsigned long)+0x40>
   a5844:	1400001a 	b	a58ac <CHeapAllocator::Allocate(unsigned long)+0x9c>
   a5848:	b8410c62 	ldr	w2, [x3, #16]!
   a584c:	34000302 	cbz	w2, a58ac <CHeapAllocator::Allocate(unsigned long)+0x9c>
   a5850:	eb22427f 	cmp	x19, w2, uxtw
   a5854:	2a0203e2 	mov	w2, w2
   a5858:	54ffff88 	b.hi	a5848 <CHeapAllocator::Allocate(unsigned long)+0x38>  // b.pmore
   a585c:	f9400475 	ldr	x21, [x3, #8]
   a5860:	aa0203f3 	mov	x19, x2
   a5864:	b4000255 	cbz	x21, a58ac <CHeapAllocator::Allocate(unsigned long)+0x9c>
   a5868:	b94002a1 	ldr	w1, [x21]
   a586c:	5289a860 	mov	w0, #0x4d43                	// #19779
   a5870:	72a84980 	movk	w0, #0x424c, lsl #16
   a5874:	6b00003f 	cmp	w1, w0
   a5878:	54000861 	b.ne	a5984 <CHeapAllocator::Allocate(unsigned long)+0x174>  // b.any
   a587c:	f94006a0 	ldr	x0, [x21, #8]
   a5880:	f9000460 	str	x0, [x3, #8]
   a5884:	b9417280 	ldr	w0, [x20, #368]
   a5888:	35000440 	cbnz	w0, a5910 <CHeapAllocator::Allocate(unsigned long)+0x100>
   a588c:	f2400ebf 	tst	x21, #0xf
   a5890:	f90006bf 	str	xzr, [x21, #8]
   a5894:	910042a0 	add	x0, x21, #0x10
   a5898:	540006a1 	b.ne	a596c <CHeapAllocator::Allocate(unsigned long)+0x15c>  // b.any
   a589c:	f94013f5 	ldr	x21, [sp, #32]
   a58a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a58a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a58a8:	d65f03c0 	ret
   a58ac:	f9400695 	ldr	x21, [x20, #8]
   a58b0:	91007e60 	add	x0, x19, #0x1f
   a58b4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   a58b8:	f9400e81 	ldr	x1, [x20, #24]
   a58bc:	8b0002a0 	add	x0, x21, x0
   a58c0:	eb0002bf 	cmp	x21, x0
   a58c4:	54000123 	b.cc	a58e8 <CHeapAllocator::Allocate(unsigned long)+0xd8>  // b.lo, b.ul, b.last
   a58c8:	b9417280 	ldr	w0, [x20, #368]
   a58cc:	b50002a1 	cbnz	x1, a5920 <CHeapAllocator::Allocate(unsigned long)+0x110>
   a58d0:	35000460 	cbnz	w0, a595c <CHeapAllocator::Allocate(unsigned long)+0x14c>
   a58d4:	f94013f5 	ldr	x21, [sp, #32]
   a58d8:	d2800000 	mov	x0, #0x0                   	// #0
   a58dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a58e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a58e4:	d65f03c0 	ret
   a58e8:	f9400a82 	ldr	x2, [x20, #16]
   a58ec:	cb010042 	sub	x2, x2, x1
   a58f0:	eb02001f 	cmp	x0, x2
   a58f4:	54fffea8 	b.hi	a58c8 <CHeapAllocator::Allocate(unsigned long)+0xb8>  // b.pmore
   a58f8:	5289a861 	mov	w1, #0x4d43                	// #19779
   a58fc:	72a84981 	movk	w1, #0x424c, lsl #16
   a5900:	f9000680 	str	x0, [x20, #8]
   a5904:	29004ea1 	stp	w1, w19, [x21]
   a5908:	b9417280 	ldr	w0, [x20, #368]
   a590c:	34fffc00 	cbz	w0, a588c <CHeapAllocator::Allocate(unsigned long)+0x7c>
   a5910:	940002a0 	bl	a6390 <LeaveCritical>
   a5914:	17ffffde 	b	a588c <CHeapAllocator::Allocate(unsigned long)+0x7c>
   a5918:	9400026e 	bl	a62d0 <EnterCritical>
   a591c:	17ffffc7 	b	a5838 <CHeapAllocator::Allocate(unsigned long)+0x28>
   a5920:	f9000e9f 	str	xzr, [x20, #24]
   a5924:	35000180 	cbnz	w0, a5954 <CHeapAllocator::Allocate(unsigned long)+0x144>
   a5928:	97ffe4ea 	bl	9ecd0 <CLogger::Get()>
   a592c:	52800002 	mov	w2, #0x0                   	// #0
   a5930:	d0000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a5934:	9115a063 	add	x3, x3, #0x568
   a5938:	f9400281 	ldr	x1, [x20]
   a593c:	97ffe421 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a5940:	d2800000 	mov	x0, #0x0                   	// #0
   a5944:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5948:	f94013f5 	ldr	x21, [sp, #32]
   a594c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5950:	d65f03c0 	ret
   a5954:	9400028f 	bl	a6390 <LeaveCritical>
   a5958:	17fffff4 	b	a5928 <CHeapAllocator::Allocate(unsigned long)+0x118>
   a595c:	9400028d 	bl	a6390 <LeaveCritical>
   a5960:	d2800000 	mov	x0, #0x0                   	// #0
   a5964:	f94013f5 	ldr	x21, [sp, #32]
   a5968:	17ffffce 	b	a58a0 <CHeapAllocator::Allocate(unsigned long)+0x90>
   a596c:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5970:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a5974:	91148021 	add	x1, x1, #0x520
   a5978:	9115e000 	add	x0, x0, #0x578
   a597c:	528011c2 	mov	w2, #0x8e                  	// #142
   a5980:	97ffdb40 	bl	9c680 <assertion_failed>
   a5984:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5988:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a598c:	91148021 	add	x1, x1, #0x520
   a5990:	9114e000 	add	x0, x0, #0x538
   a5994:	52800bc2 	mov	w2, #0x5e                  	// #94
   a5998:	97ffdb3a 	bl	9c680 <assertion_failed>
   a599c:	d503201f 	nop

00000000000a59a0 <CHeapAllocator::Free(void*)>:
   a59a0:	b40003c1 	cbz	x1, a5a18 <CHeapAllocator::Free(void*)+0x78>
   a59a4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a59a8:	910003fd 	mov	x29, sp
   a59ac:	b85f0022 	ldur	w2, [x1, #-16]
   a59b0:	a90157f3 	stp	x19, x21, [sp, #16]
   a59b4:	aa0003f5 	mov	x21, x0
   a59b8:	5289a860 	mov	w0, #0x4d43                	// #19779
   a59bc:	72a84980 	movk	w0, #0x424c, lsl #16
   a59c0:	f90013f6 	str	x22, [sp, #32]
   a59c4:	d1004036 	sub	x22, x1, #0x10
   a59c8:	6b00005f 	cmp	w2, w0
   a59cc:	54000401 	b.ne	a5a4c <CHeapAllocator::Free(void*)+0xac>  // b.any
   a59d0:	b94022a2 	ldr	w2, [x21, #32]
   a59d4:	910082b3 	add	x19, x21, #0x20
   a59d8:	34000182 	cbz	w2, a5a08 <CHeapAllocator::Free(void*)+0x68>
   a59dc:	b85f4023 	ldur	w3, [x1, #-12]
   a59e0:	14000003 	b	a59ec <CHeapAllocator::Free(void*)+0x4c>
   a59e4:	b8410e62 	ldr	w2, [x19, #16]!
   a59e8:	34000102 	cbz	w2, a5a08 <CHeapAllocator::Free(void*)+0x68>
   a59ec:	6b03005f 	cmp	w2, w3
   a59f0:	54ffffa1 	b.ne	a59e4 <CHeapAllocator::Free(void*)+0x44>  // b.any
   a59f4:	b94172a0 	ldr	w0, [x21, #368]
   a59f8:	35000120 	cbnz	w0, a5a1c <CHeapAllocator::Free(void*)+0x7c>
   a59fc:	f9400660 	ldr	x0, [x19, #8]
   a5a00:	f81f8020 	stur	x0, [x1, #-8]
   a5a04:	f9000676 	str	x22, [x19, #8]
   a5a08:	a94157f3 	ldp	x19, x21, [sp, #16]
   a5a0c:	f94013f6 	ldr	x22, [sp, #32]
   a5a10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5a14:	d65f03c0 	ret
   a5a18:	d65f03c0 	ret
   a5a1c:	f9001fe1 	str	x1, [sp, #56]
   a5a20:	9400022c 	bl	a62d0 <EnterCritical>
   a5a24:	f9400662 	ldr	x2, [x19, #8]
   a5a28:	f9401fe1 	ldr	x1, [sp, #56]
   a5a2c:	b94172a0 	ldr	w0, [x21, #368]
   a5a30:	f81f8022 	stur	x2, [x1, #-8]
   a5a34:	f9000676 	str	x22, [x19, #8]
   a5a38:	34fffe80 	cbz	w0, a5a08 <CHeapAllocator::Free(void*)+0x68>
   a5a3c:	a94157f3 	ldp	x19, x21, [sp, #16]
   a5a40:	f94013f6 	ldr	x22, [sp, #32]
   a5a44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5a48:	14000252 	b	a6390 <LeaveCritical>
   a5a4c:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5a50:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a5a54:	91148021 	add	x1, x1, #0x520
   a5a58:	9114e000 	add	x0, x0, #0x538
   a5a5c:	528017e2 	mov	w2, #0xbf                  	// #191
   a5a60:	97ffdb08 	bl	9c680 <assertion_failed>
   a5a64:	d503201f 	nop
   a5a68:	d503201f 	nop
   a5a6c:	d503201f 	nop

00000000000a5a70 <CHeapAllocator::ReAllocate(void*, unsigned long)>:
   a5a70:	b40004a1 	cbz	x1, a5b04 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x94>
   a5a74:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5a78:	910003fd 	mov	x29, sp
   a5a7c:	f90013f5 	str	x21, [sp, #32]
   a5a80:	b4000462 	cbz	x2, a5b0c <CHeapAllocator::ReAllocate(void*, unsigned long)+0x9c>
   a5a84:	a90153f3 	stp	x19, x20, [sp, #16]
   a5a88:	aa0103f3 	mov	x19, x1
   a5a8c:	5289a861 	mov	w1, #0x4d43                	// #19779
   a5a90:	72a84981 	movk	w1, #0x424c, lsl #16
   a5a94:	b85f0263 	ldur	w3, [x19, #-16]
   a5a98:	6b01007f 	cmp	w3, w1
   a5a9c:	540003e1 	b.ne	a5b18 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xa8>  // b.any
   a5aa0:	b85f4261 	ldur	w1, [x19, #-12]
   a5aa4:	aa1303f5 	mov	x21, x19
   a5aa8:	eb02003f 	cmp	x1, x2
   a5aac:	540000c3 	b.cc	a5ac4 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x54>  // b.lo, b.ul, b.last
   a5ab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5ab4:	aa1503e0 	mov	x0, x21
   a5ab8:	f94013f5 	ldr	x21, [sp, #32]
   a5abc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5ac0:	d65f03c0 	ret
   a5ac4:	aa0203e1 	mov	x1, x2
   a5ac8:	aa0003f4 	mov	x20, x0
   a5acc:	97ffff51 	bl	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5ad0:	aa0003f5 	mov	x21, x0
   a5ad4:	b4fffee0 	cbz	x0, a5ab0 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x40>
   a5ad8:	b85f4262 	ldur	w2, [x19, #-12]
   a5adc:	aa1303e1 	mov	x1, x19
   a5ae0:	97fffc86 	bl	a4cf8 <memcpy>
   a5ae4:	aa1303e1 	mov	x1, x19
   a5ae8:	aa1403e0 	mov	x0, x20
   a5aec:	97ffffad 	bl	a59a0 <CHeapAllocator::Free(void*)>
   a5af0:	aa1503e0 	mov	x0, x21
   a5af4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5af8:	f94013f5 	ldr	x21, [sp, #32]
   a5afc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5b00:	d65f03c0 	ret
   a5b04:	aa0203e1 	mov	x1, x2
   a5b08:	17ffff42 	b	a5810 <CHeapAllocator::Allocate(unsigned long)>
   a5b0c:	d2800015 	mov	x21, #0x0                   	// #0
   a5b10:	97ffffa4 	bl	a59a0 <CHeapAllocator::Free(void*)>
   a5b14:	17ffffe8 	b	a5ab4 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x44>
   a5b18:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5b1c:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a5b20:	91148021 	add	x1, x1, #0x520
   a5b24:	9114e000 	add	x0, x0, #0x538
   a5b28:	52801462 	mov	w2, #0xa3                  	// #163
   a5b2c:	97ffdad5 	bl	9c680 <assertion_failed>

00000000000a5b30 <CPageAllocator::CPageAllocator()>:
   a5b30:	52800021 	mov	w1, #0x1                   	// #1
   a5b34:	a9007c1f 	stp	xzr, xzr, [x0]
   a5b38:	f900081f 	str	xzr, [x0, #16]
   a5b3c:	b9001801 	str	w1, [x0, #24]
   a5b40:	d65f03c0 	ret
   a5b44:	d503201f 	nop
   a5b48:	d503201f 	nop
   a5b4c:	d503201f 	nop

00000000000a5b50 <CPageAllocator::~CPageAllocator()>:
   a5b50:	d65f03c0 	ret
   a5b54:	d503201f 	nop
   a5b58:	d503201f 	nop
   a5b5c:	d503201f 	nop

00000000000a5b60 <CPageAllocator::Setup(unsigned long, unsigned long)>:
   a5b60:	d10083ff 	sub	sp, sp, #0x20
   a5b64:	f9000fe0 	str	x0, [sp, #24]
   a5b68:	f9000be1 	str	x1, [sp, #16]
   a5b6c:	f90007e2 	str	x2, [sp, #8]
   a5b70:	f9400be1 	ldr	x1, [sp, #16]
   a5b74:	d29fffe0 	mov	x0, #0xffff                	// #65535
   a5b78:	8b000020 	add	x0, x1, x0
   a5b7c:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   a5b80:	aa0003e1 	mov	x1, x0
   a5b84:	f9400fe0 	ldr	x0, [sp, #24]
   a5b88:	f9000001 	str	x1, [x0]
   a5b8c:	f9400be1 	ldr	x1, [sp, #16]
   a5b90:	f94007e0 	ldr	x0, [sp, #8]
   a5b94:	8b000020 	add	x0, x1, x0
   a5b98:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   a5b9c:	aa0003e1 	mov	x1, x0
   a5ba0:	f9400fe0 	ldr	x0, [sp, #24]
   a5ba4:	f9000401 	str	x1, [x0, #8]
   a5ba8:	d503201f 	nop
   a5bac:	910083ff 	add	sp, sp, #0x20
   a5bb0:	d65f03c0 	ret
   a5bb4:	d503201f 	nop
   a5bb8:	d503201f 	nop
   a5bbc:	d503201f 	nop

00000000000a5bc0 <CPageAllocator::GetFreeSpace() const>:
   a5bc0:	a9400001 	ldp	x1, x0, [x0]
   a5bc4:	cb010000 	sub	x0, x0, x1
   a5bc8:	d65f03c0 	ret
   a5bcc:	d503201f 	nop

00000000000a5bd0 <CPageAllocator::Allocate()>:
   a5bd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5bd4:	910003fd 	mov	x29, sp
   a5bd8:	a90153f3 	stp	x19, x20, [sp, #16]
   a5bdc:	aa0003f3 	mov	x19, x0
   a5be0:	f9400000 	ldr	x0, [x0]
   a5be4:	b4000460 	cbz	x0, a5c70 <CPageAllocator::Allocate()+0xa0>
   a5be8:	b9401a60 	ldr	w0, [x19, #24]
   a5bec:	35000220 	cbnz	w0, a5c30 <CPageAllocator::Allocate()+0x60>
   a5bf0:	f9400a74 	ldr	x20, [x19, #16]
   a5bf4:	b4000254 	cbz	x20, a5c3c <CPageAllocator::Allocate()+0x6c>
   a5bf8:	b9400281 	ldr	w1, [x20]
   a5bfc:	5289a860 	mov	w0, #0x4d43                	// #19779
   a5c00:	72aa08e0 	movk	w0, #0x5047, lsl #16
   a5c04:	6b00003f 	cmp	w1, w0
   a5c08:	540003e1 	b.ne	a5c84 <CPageAllocator::Allocate()+0xb4>  // b.any
   a5c0c:	f9400680 	ldr	x0, [x20, #8]
   a5c10:	f9000a60 	str	x0, [x19, #16]
   a5c14:	b900029f 	str	wzr, [x20]
   a5c18:	b9401a60 	ldr	w0, [x19, #24]
   a5c1c:	35000200 	cbnz	w0, a5c5c <CPageAllocator::Allocate()+0x8c>
   a5c20:	aa1403e0 	mov	x0, x20
   a5c24:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5c28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5c2c:	d65f03c0 	ret
   a5c30:	940001a8 	bl	a62d0 <EnterCritical>
   a5c34:	f9400a74 	ldr	x20, [x19, #16]
   a5c38:	b5fffe14 	cbnz	x20, a5bf8 <CPageAllocator::Allocate()+0x28>
   a5c3c:	a9400e62 	ldp	x2, x3, [x19]
   a5c40:	b9401a60 	ldr	w0, [x19, #24]
   a5c44:	91404041 	add	x1, x2, #0x10, lsl #12
   a5c48:	eb03003f 	cmp	x1, x3
   a5c4c:	f9000261 	str	x1, [x19]
   a5c50:	54fffe68 	b.hi	a5c1c <CPageAllocator::Allocate()+0x4c>  // b.pmore
   a5c54:	aa0203f4 	mov	x20, x2
   a5c58:	34fffe40 	cbz	w0, a5c20 <CPageAllocator::Allocate()+0x50>
   a5c5c:	940001cd 	bl	a6390 <LeaveCritical>
   a5c60:	aa1403e0 	mov	x0, x20
   a5c64:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5c68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5c6c:	d65f03c0 	ret
   a5c70:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5c74:	9116a021 	add	x1, x1, #0x5a8
   a5c78:	91006020 	add	x0, x1, #0x18
   a5c7c:	528006c2 	mov	w2, #0x36                  	// #54
   a5c80:	97ffda80 	bl	9c680 <assertion_failed>
   a5c84:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5c88:	9116a021 	add	x1, x1, #0x5a8
   a5c8c:	9100a020 	add	x0, x1, #0x28
   a5c90:	52800882 	mov	w2, #0x44                  	// #68
   a5c94:	97ffda7b 	bl	9c680 <assertion_failed>
   a5c98:	d503201f 	nop
   a5c9c:	d503201f 	nop

00000000000a5ca0 <CPageAllocator::Free(void*)>:
   a5ca0:	b40003e1 	cbz	x1, a5d1c <CPageAllocator::Free(void*)+0x7c>
   a5ca4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5ca8:	910003fd 	mov	x29, sp
   a5cac:	a90153f3 	stp	x19, x20, [sp, #16]
   a5cb0:	aa0003f4 	mov	x20, x0
   a5cb4:	aa0103f3 	mov	x19, x1
   a5cb8:	b9401800 	ldr	w0, [x0, #24]
   a5cbc:	35000180 	cbnz	w0, a5cec <CPageAllocator::Free(void*)+0x4c>
   a5cc0:	f9400a81 	ldr	x1, [x20, #16]
   a5cc4:	5289a860 	mov	w0, #0x4d43                	// #19779
   a5cc8:	72aa08e0 	movk	w0, #0x5047, lsl #16
   a5ccc:	b9000260 	str	w0, [x19]
   a5cd0:	b9401a80 	ldr	w0, [x20, #24]
   a5cd4:	f9000661 	str	x1, [x19, #8]
   a5cd8:	f9000a93 	str	x19, [x20, #16]
   a5cdc:	350001a0 	cbnz	w0, a5d10 <CPageAllocator::Free(void*)+0x70>
   a5ce0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5ce4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5ce8:	d65f03c0 	ret
   a5cec:	94000179 	bl	a62d0 <EnterCritical>
   a5cf0:	f9400a81 	ldr	x1, [x20, #16]
   a5cf4:	5289a860 	mov	w0, #0x4d43                	// #19779
   a5cf8:	72aa08e0 	movk	w0, #0x5047, lsl #16
   a5cfc:	b9000260 	str	w0, [x19]
   a5d00:	b9401a80 	ldr	w0, [x20, #24]
   a5d04:	f9000661 	str	x1, [x19, #8]
   a5d08:	f9000a93 	str	x19, [x20, #16]
   a5d0c:	34fffea0 	cbz	w0, a5ce0 <CPageAllocator::Free(void*)+0x40>
   a5d10:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5d14:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5d18:	1400019e 	b	a6390 <LeaveCritical>
   a5d1c:	d65f03c0 	ret

00000000000a5d20 <CExceptionHandler::CExceptionHandler()>:
   a5d20:	b0000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a5d24:	f947c422 	ldr	x2, [x1, #3976]
   a5d28:	b5000062 	cbnz	x2, a5d34 <CExceptionHandler::CExceptionHandler()+0x14>
   a5d2c:	f907c420 	str	x0, [x1, #3976]
   a5d30:	d65f03c0 	ret
   a5d34:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5d38:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a5d3c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5d40:	9117e021 	add	x1, x1, #0x5f8
   a5d44:	910003fd 	mov	x29, sp
   a5d48:	91082000 	add	x0, x0, #0x208
   a5d4c:	52800562 	mov	w2, #0x2b                  	// #43
   a5d50:	97ffda4c 	bl	9c680 <assertion_failed>
   a5d54:	d503201f 	nop
   a5d58:	d503201f 	nop
   a5d5c:	d503201f 	nop

00000000000a5d60 <CExceptionHandler::~CExceptionHandler()>:
   a5d60:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5d64:	f907c41f 	str	xzr, [x0, #3976]
   a5d68:	d65f03c0 	ret
   a5d6c:	d503201f 	nop

00000000000a5d70 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   a5d70:	d101c3ff 	sub	sp, sp, #0x70
   a5d74:	a9027bfd 	stp	x29, x30, [sp, #32]
   a5d78:	910083fd 	add	x29, sp, #0x20
   a5d7c:	a90353f3 	stp	x19, x20, [sp, #48]
   a5d80:	a9045bf5 	stp	x21, x22, [sp, #64]
   a5d84:	a90563f7 	stp	x23, x24, [sp, #80]
   a5d88:	f90033f9 	str	x25, [sp, #96]
   a5d8c:	b4000622 	cbz	x2, a5e50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   a5d90:	f9400440 	ldr	x0, [x2, #8]
   a5d94:	aa0203f3 	mov	x19, x2
   a5d98:	2a0103f6 	mov	w22, w1
   a5d9c:	f9401058 	ldr	x24, [x2, #32]
   a5da0:	92400c00 	and	x0, x0, #0xf
   a5da4:	f100141f 	cmp	x0, #0x5
   a5da8:	54000041 	b.ne	a5db0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x40>  // b.any
   a5dac:	f9401458 	ldr	x24, [x2, #40]
   a5db0:	d2800019 	mov	x25, #0x0                   	// #0
   a5db4:	f9400267 	ldr	x7, [x19]
   a5db8:	531a7cf7 	lsr	w23, w7, #26
   a5dbc:	924060f4 	and	x20, x7, #0x1ffffff
   a5dc0:	d10082e1 	sub	x1, x23, #0x20
   a5dc4:	d100d2e0 	sub	x0, x23, #0x34
   a5dc8:	f100143f 	cmp	x1, #0x5
   a5dcc:	fa418800 	ccmp	x0, #0x1, #0x0, hi  // hi = pmore
   a5dd0:	54000048 	b.hi	a5dd8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x68>  // b.pmore
   a5dd4:	f9401a79 	ldr	x25, [x19, #48]
   a5dd8:	d0000075 	adrp	x21, b3000 <vtable for CSerialDevice+0x18>
   a5ddc:	911ac2b5 	add	x21, x21, #0x6b0
   a5de0:	aa1503e1 	mov	x1, x21
   a5de4:	aa1803e0 	mov	x0, x24
   a5de8:	97ffdbc6 	bl	9cd00 <debug_stacktrace(unsigned long const*, char const*)>
   a5dec:	97ffe3b9 	bl	9ecd0 <CLogger::Get()>
   a5df0:	f9400665 	ldr	x5, [x19, #8]
   a5df4:	b0000084 	adrp	x4, b6000 <s_OldInfo+0x68>
   a5df8:	910e2084 	add	x4, x4, #0x388
   a5dfc:	f90003f9 	str	x25, [sp]
   a5e00:	d0000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a5e04:	aa1503e1 	mov	x1, x21
   a5e08:	f9400a68 	ldr	x8, [x19, #16]
   a5e0c:	aa1403e7 	mov	x7, x20
   a5e10:	aa1703e6 	mov	x6, x23
   a5e14:	91188063 	add	x3, x3, #0x620
   a5e18:	52800002 	mov	w2, #0x0                   	// #0
   a5e1c:	f90007f8 	str	x24, [sp, #8]
   a5e20:	f8765884 	ldr	x4, [x4, w22, uxtw #3]
   a5e24:	f9000fe5 	str	x5, [sp, #24]
   a5e28:	f9400e65 	ldr	x5, [x19, #24]
   a5e2c:	f9000be8 	str	x8, [sp, #16]
   a5e30:	97ffe2e4 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a5e34:	a9427bfd 	ldp	x29, x30, [sp, #32]
   a5e38:	a94353f3 	ldp	x19, x20, [sp, #48]
   a5e3c:	a9445bf5 	ldp	x21, x22, [sp, #64]
   a5e40:	a94563f7 	ldp	x23, x24, [sp, #80]
   a5e44:	f94033f9 	ldr	x25, [sp, #96]
   a5e48:	9101c3ff 	add	sp, sp, #0x70
   a5e4c:	d65f03c0 	ret
   a5e50:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5e54:	d0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a5e58:	9117e021 	add	x1, x1, #0x5f8
   a5e5c:	91184000 	add	x0, x0, #0x610
   a5e60:	528006c2 	mov	w2, #0x36                  	// #54
   a5e64:	97ffda07 	bl	9c680 <assertion_failed>
   a5e68:	d503201f 	nop
   a5e6c:	d503201f 	nop

00000000000a5e70 <CExceptionHandler::Get()>:
   a5e70:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5e74:	f947c400 	ldr	x0, [x0, #3976]
   a5e78:	b4000040 	cbz	x0, a5e80 <CExceptionHandler::Get()+0x10>
   a5e7c:	d65f03c0 	ret
   a5e80:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5e84:	f0000020 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a5e88:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5e8c:	9117e021 	add	x1, x1, #0x5f8
   a5e90:	910003fd 	mov	x29, sp
   a5e94:	91248000 	add	x0, x0, #0x920
   a5e98:	52800a82 	mov	w2, #0x54                  	// #84
   a5e9c:	97ffd9f9 	bl	9c680 <assertion_failed>

00000000000a5ea0 <ExceptionHandler>:
   a5ea0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5ea4:	910003fd 	mov	x29, sp
   a5ea8:	a90153f3 	stp	x19, x20, [sp, #16]
   a5eac:	aa0003f3 	mov	x19, x0
   a5eb0:	aa0103f4 	mov	x20, x1
   a5eb4:	940008af 	bl	a8170 <CInterruptSystem::DisableFIQ()>
   a5eb8:	d50341ff 	msr	daifclr, #0x1
   a5ebc:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5ec0:	f947c400 	ldr	x0, [x0, #3976]
   a5ec4:	b40000c0 	cbz	x0, a5edc <ExceptionHandler+0x3c>
   a5ec8:	aa1403e2 	mov	x2, x20
   a5ecc:	2a1303e1 	mov	w1, w19
   a5ed0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5ed4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5ed8:	17ffffa6 	b	a5d70 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   a5edc:	d0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a5ee0:	f0000020 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a5ee4:	9117e021 	add	x1, x1, #0x5f8
   a5ee8:	91248000 	add	x0, x0, #0x920
   a5eec:	52800a82 	mov	w2, #0x54                  	// #84
   a5ef0:	97ffd9e4 	bl	9c680 <assertion_failed>
	...

00000000000a5f00 <CMemorySystem::CMemorySystem(bool)>:
   a5f00:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a5f04:	910003fd 	mov	x29, sp
   a5f08:	a90153f3 	stp	x19, x20, [sp, #16]
   a5f0c:	aa0003f3 	mov	x19, x0
   a5f10:	d0000074 	adrp	x20, b3000 <vtable for CSerialDevice+0x18>
   a5f14:	911ae294 	add	x20, x20, #0x6b8
   a5f18:	a9025bf5 	stp	x21, x22, [sp, #32]
   a5f1c:	91006015 	add	x21, x0, #0x18
   a5f20:	910c2016 	add	x22, x0, #0x308
   a5f24:	f9001bf7 	str	x23, [sp, #48]
   a5f28:	91064017 	add	x23, x0, #0x190
   a5f2c:	aa1503e0 	mov	x0, x21
   a5f30:	39000261 	strb	w1, [x19]
   a5f34:	aa1403e1 	mov	x1, x20
   a5f38:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   a5f3c:	97fffe0d 	bl	a5770 <CHeapAllocator::CHeapAllocator(char const*)>
   a5f40:	91002281 	add	x1, x20, #0x8
   a5f44:	aa1703e0 	mov	x0, x23
   a5f48:	97fffe0a 	bl	a5770 <CHeapAllocator::CHeapAllocator(char const*)>
   a5f4c:	aa1603e0 	mov	x0, x22
   a5f50:	97fffef8 	bl	a5b30 <CPageAllocator::CPageAllocator()>
   a5f54:	b0000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a5f58:	f901967f 	str	xzr, [x19, #808]
   a5f5c:	f947c801 	ldr	x1, [x0, #3984]
   a5f60:	b40000c1 	cbz	x1, a5f78 <CMemorySystem::CMemorySystem(bool)+0x78>
   a5f64:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5f68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5f6c:	f9401bf7 	ldr	x23, [sp, #48]
   a5f70:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a5f74:	d65f03c0 	ret
   a5f78:	52800021 	mov	w1, #0x1                   	// #1
   a5f7c:	f907c813 	str	x19, [x0, #3984]
   a5f80:	910103e0 	add	x0, sp, #0x40
   a5f84:	97ffd9e3 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a5f88:	910103e0 	add	x0, sp, #0x40
   a5f8c:	528000a1 	mov	w1, #0x5                   	// #5
   a5f90:	72a00021 	movk	w1, #0x1, lsl #16
   a5f94:	52800004 	mov	w4, #0x0                   	// #0
   a5f98:	52800283 	mov	w3, #0x14                  	// #20
   a5f9c:	910123e2 	add	x2, sp, #0x48
   a5fa0:	97ffd9e4 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a5fa4:	72001c1f 	tst	w0, #0xff
   a5fa8:	540003e0 	b.eq	a6024 <CMemorySystem::CMemorySystem(bool)+0x124>  // b.none
   a5fac:	b94057e0 	ldr	w0, [sp, #84]
   a5fb0:	350006e0 	cbnz	w0, a608c <CMemorySystem::CMemorySystem(bool)+0x18c>
   a5fb4:	b9405be1 	ldr	w1, [sp, #88]
   a5fb8:	b2689ff4 	mov	x20, #0xffffffffff000000    	// #-16777216
   a5fbc:	929fffe2 	mov	x2, #0xffffffffffff0000    	// #-65536
   a5fc0:	f2bfce02 	movk	x2, #0xfe70, lsl #16
   a5fc4:	8b140034 	add	x20, x1, x20
   a5fc8:	8b020022 	add	x2, x1, x2
   a5fcc:	d2a00083 	mov	x3, #0x40000               	// #262144
   a5fd0:	aa1503e0 	mov	x0, x21
   a5fd4:	f9000661 	str	x1, [x19, #8]
   a5fd8:	d2a01201 	mov	x1, #0x900000              	// #9437184
   a5fdc:	97fffe05 	bl	a57f0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   a5fe0:	97ffe690 	bl	9fa20 <CMachineInfo::Get()>
   a5fe4:	97ffe57f 	bl	9f5e0 <CMachineInfo::GetRAMSize() const>
   a5fe8:	7110001f 	cmp	w0, #0x400
   a5fec:	540003a8 	b.hi	a6060 <CMemorySystem::CMemorySystem(bool)+0x160>  // b.pmore
   a5ff0:	aa1603e0 	mov	x0, x22
   a5ff4:	aa1403e1 	mov	x1, x20
   a5ff8:	d2a02002 	mov	x2, #0x1000000             	// #16777216
   a5ffc:	97fffed9 	bl	a5b60 <CPageAllocator::Setup(unsigned long, unsigned long)>
   a6000:	39400260 	ldrb	w0, [x19]
   a6004:	350001c0 	cbnz	w0, a603c <CMemorySystem::CMemorySystem(bool)+0x13c>
   a6008:	910103e0 	add	x0, sp, #0x40
   a600c:	97ffd9c5 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a6010:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6014:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6018:	f9401bf7 	ldr	x23, [sp, #48]
   a601c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a6020:	d65f03c0 	ret
   a6024:	d2e38000 	mov	x0, #0x1c00000000000000    	// #2017612633061982208
   a6028:	d2a34e02 	mov	x2, #0x1a700000            	// #443547648
   a602c:	d2a36014 	mov	x20, #0x1b000000            	// #452984832
   a6030:	d2a38001 	mov	x1, #0x1c000000            	// #469762048
   a6034:	f80543e0 	stur	x0, [sp, #84]
   a6038:	17ffffe5 	b	a5fcc <CMemorySystem::CMemorySystem(bool)+0xcc>
   a603c:	d2800200 	mov	x0, #0x10                  	// #16
   a6040:	97fffd90 	bl	a5680 <operator new(unsigned long)>
   a6044:	f9400661 	ldr	x1, [x19, #8]
   a6048:	aa0003f4 	mov	x20, x0
   a604c:	940001cd 	bl	a6780 <CTranslationTable::CTranslationTable(unsigned long)>
   a6050:	aa1303e0 	mov	x0, x19
   a6054:	f9019674 	str	x20, [x19, #808]
   a6058:	94000056 	bl	a61b0 <CMemorySystem::EnableMMU()>
   a605c:	17ffffeb 	b	a6008 <CMemorySystem::CMemorySystem(bool)+0x108>
   a6060:	51100002 	sub	w2, w0, #0x400
   a6064:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
   a6068:	530c2c42 	lsl	w2, w2, #20
   a606c:	aa1703e0 	mov	x0, x23
   a6070:	eb01005f 	cmp	x2, x1
   a6074:	d2800003 	mov	x3, #0x0                   	// #0
   a6078:	9a819042 	csel	x2, x2, x1, ls  // ls = plast
   a607c:	d2a80001 	mov	x1, #0x40000000            	// #1073741824
   a6080:	f9000a62 	str	x2, [x19, #16]
   a6084:	97fffddb 	bl	a57f0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   a6088:	17ffffda 	b	a5ff0 <CMemorySystem::CMemorySystem(bool)+0xf0>
   a608c:	528006e2 	mov	w2, #0x37                  	// #55
   a6090:	91006281 	add	x1, x20, #0x18
   a6094:	9100a280 	add	x0, x20, #0x28
   a6098:	97ffd97a 	bl	9c680 <assertion_failed>
   a609c:	d503201f 	nop

00000000000a60a0 <CMemorySystem::~CMemorySystem()>:
   a60a0:	90000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a60a4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a60a8:	910003fd 	mov	x29, sp
   a60ac:	f947c822 	ldr	x2, [x1, #3984]
   a60b0:	f9000bf3 	str	x19, [sp, #16]
   a60b4:	aa0003f3 	mov	x19, x0
   a60b8:	eb02001f 	cmp	x0, x2
   a60bc:	54000120 	b.eq	a60e0 <CMemorySystem::~CMemorySystem()+0x40>  // b.none
   a60c0:	910c2260 	add	x0, x19, #0x308
   a60c4:	97fffea3 	bl	a5b50 <CPageAllocator::~CPageAllocator()>
   a60c8:	91064260 	add	x0, x19, #0x190
   a60cc:	97fffdc5 	bl	a57e0 <CHeapAllocator::~CHeapAllocator()>
   a60d0:	91006260 	add	x0, x19, #0x18
   a60d4:	f9400bf3 	ldr	x19, [sp, #16]
   a60d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a60dc:	17fffdc1 	b	a57e0 <CHeapAllocator::~CHeapAllocator()>
   a60e0:	39400000 	ldrb	w0, [x0]
   a60e4:	f907c83f 	str	xzr, [x1, #3984]
   a60e8:	34fffec0 	cbz	w0, a60c0 <CMemorySystem::~CMemorySystem()+0x20>
   a60ec:	94000061 	bl	a6270 <CMemorySystem::Destructor() [clone .part.0]>
   a60f0:	910c2260 	add	x0, x19, #0x308
   a60f4:	97fffe97 	bl	a5b50 <CPageAllocator::~CPageAllocator()>
   a60f8:	91064260 	add	x0, x19, #0x190
   a60fc:	97fffdb9 	bl	a57e0 <CHeapAllocator::~CHeapAllocator()>
   a6100:	91006260 	add	x0, x19, #0x18
   a6104:	f9400bf3 	ldr	x19, [sp, #16]
   a6108:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a610c:	17fffdb5 	b	a57e0 <CHeapAllocator::~CHeapAllocator()>

00000000000a6110 <CMemorySystem::Destructor()>:
   a6110:	90000082 	adrp	x2, b6000 <s_OldInfo+0x68>
   a6114:	f947c841 	ldr	x1, [x2, #3984]
   a6118:	eb00003f 	cmp	x1, x0
   a611c:	54000040 	b.eq	a6124 <CMemorySystem::Destructor()+0x14>  // b.none
   a6120:	d65f03c0 	ret
   a6124:	39400020 	ldrb	w0, [x1]
   a6128:	f907c85f 	str	xzr, [x2, #3984]
   a612c:	34ffffa0 	cbz	w0, a6120 <CMemorySystem::Destructor()+0x10>
   a6130:	14000050 	b	a6270 <CMemorySystem::Destructor() [clone .part.0]>
   a6134:	d503201f 	nop
   a6138:	d503201f 	nop
   a613c:	d503201f 	nop

00000000000a6140 <CMemorySystem::GetMemSize() const>:
   a6140:	90000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a6144:	f947c801 	ldr	x1, [x0, #3984]
   a6148:	b4000081 	cbz	x1, a6158 <CMemorySystem::GetMemSize() const+0x18>
   a614c:	a9408022 	ldp	x2, x0, [x1, #8]
   a6150:	8b000040 	add	x0, x2, x0
   a6154:	d65f03c0 	ret
   a6158:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a615c:	911ae000 	add	x0, x0, #0x6b8
   a6160:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6164:	91006001 	add	x1, x0, #0x18
   a6168:	910003fd 	mov	x29, sp
   a616c:	91012000 	add	x0, x0, #0x48
   a6170:	52801162 	mov	w2, #0x8b                  	// #139
   a6174:	97ffd943 	bl	9c680 <assertion_failed>
   a6178:	d503201f 	nop
   a617c:	d503201f 	nop

00000000000a6180 <CMemorySystem::Get()>:
   a6180:	90000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a6184:	f947c800 	ldr	x0, [x0, #3984]
   a6188:	b4000040 	cbz	x0, a6190 <CMemorySystem::Get()+0x10>
   a618c:	d65f03c0 	ret
   a6190:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6194:	911ae000 	add	x0, x0, #0x6b8
   a6198:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a619c:	91006001 	add	x1, x0, #0x18
   a61a0:	910003fd 	mov	x29, sp
   a61a4:	91012000 	add	x0, x0, #0x48
   a61a8:	52801222 	mov	w2, #0x91                  	// #145
   a61ac:	97ffd935 	bl	9c680 <assertion_failed>

00000000000a61b0 <CMemorySystem::EnableMMU()>:
   a61b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a61b4:	910003fd 	mov	x29, sp
   a61b8:	39400001 	ldrb	w1, [x0]
   a61bc:	34000341 	cbz	w1, a6224 <CMemorySystem::EnableMMU()+0x74>
   a61c0:	d2809fe1 	mov	x1, #0x4ff                 	// #1279
   a61c4:	d518a201 	msr	mair_el1, x1
   a61c8:	f9419400 	ldr	x0, [x0, #808]
   a61cc:	b4000380 	cbz	x0, a623c <CMemorySystem::EnableMMU()+0x8c>
   a61d0:	940001f4 	bl	a69a0 <CTranslationTable::GetBaseAddress() const>
   a61d4:	d5182000 	msr	ttbr0_el1, x0
   a61d8:	d5382040 	mrs	x0, tcr_el1
   a61dc:	929ff7e2 	mov	x2, #0xffffffffffff0040    	// #-65472
   a61e0:	f2bff7e2 	movk	x2, #0xffbf, lsl #16
   a61e4:	f2dfff02 	movk	x2, #0xfff8, lsl #32
   a61e8:	d28ea381 	mov	x1, #0x751c                	// #29980
   a61ec:	f2a01001 	movk	x1, #0x80, lsl #16
   a61f0:	8a020000 	and	x0, x0, x2
   a61f4:	f2c00021 	movk	x1, #0x1, lsl #32
   a61f8:	aa010000 	orr	x0, x0, x1
   a61fc:	d5182040 	msr	tcr_el1, x0
   a6200:	d5381000 	mrs	x0, sctlr_el1
   a6204:	529fffa2 	mov	w2, #0xfffd                	// #65533
   a6208:	72bffee2 	movk	w2, #0xfff7, lsl #16
   a620c:	528200a1 	mov	w1, #0x1005                	// #4101
   a6210:	0a020000 	and	w0, w0, w2
   a6214:	2a010000 	orr	w0, w0, w1
   a6218:	d5181000 	msr	sctlr_el1, x0
   a621c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a6220:	d65f03c0 	ret
   a6224:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6228:	911ae000 	add	x0, x0, #0x6b8
   a622c:	91006001 	add	x1, x0, #0x18
   a6230:	528012e2 	mov	w2, #0x97                  	// #151
   a6234:	91016000 	add	x0, x0, #0x58
   a6238:	97ffd912 	bl	9c680 <assertion_failed>
   a623c:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6240:	911ae000 	add	x0, x0, #0x6b8
   a6244:	91006001 	add	x1, x0, #0x18
   a6248:	528013c2 	mov	w2, #0x9e                  	// #158
   a624c:	9101a000 	add	x0, x0, #0x68
   a6250:	97ffd90c 	bl	9c680 <assertion_failed>
   a6254:	d503201f 	nop
   a6258:	d503201f 	nop
   a625c:	d503201f 	nop

00000000000a6260 <CMemorySystem::GetCoherentPage(unsigned int)>:
   a6260:	53103c00 	lsl	w0, w0, #16
   a6264:	91540000 	add	x0, x0, #0x500, lsl #12
   a6268:	d65f03c0 	ret
   a626c:	d503201f 	nop

00000000000a6270 <CMemorySystem::Destructor() [clone .part.0]>:
   a6270:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6274:	910003fd 	mov	x29, sp
   a6278:	d5381000 	mrs	x0, sctlr_el1
   a627c:	128000a1 	mov	w1, #0xfffffffa            	// #-6
   a6280:	0a010000 	and	w0, w0, w1
   a6284:	d5181000 	msr	sctlr_el1, x0
   a6288:	d5033f9f 	dsb	sy
   a628c:	d5033fdf 	isb
   a6290:	940000b4 	bl	a6560 <CleanDataCache>
   a6294:	94000057 	bl	a63f0 <InvalidateDataCache>
   a6298:	d508871f 	tlbi	vmalle1
   a629c:	d5033f9f 	dsb	sy
   a62a0:	d5033fdf 	isb
   a62a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a62a8:	d65f03c0 	ret
   a62ac:	00000000 	.inst	0x00000000 ; undefined

00000000000a62b0 <CurrentExecutionLevel>:
   a62b0:	d53b4221 	mrs	x1, daif
   a62b4:	52800040 	mov	w0, #0x2                   	// #2
   a62b8:	f27a003f 	tst	x1, #0x40
   a62bc:	d3471c21 	ubfx	x1, x1, #7, #1
   a62c0:	1a800020 	csel	w0, w1, w0, eq  // eq = none
   a62c4:	d65f03c0 	ret
   a62c8:	d503201f 	nop
   a62cc:	d503201f 	nop

00000000000a62d0 <EnterCritical>:
   a62d0:	51000401 	sub	w1, w0, #0x1
   a62d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a62d8:	910003fd 	mov	x29, sp
   a62dc:	7100043f 	cmp	w1, #0x1
   a62e0:	540002c8 	b.hi	a6338 <EnterCritical+0x68>  // b.pmore
   a62e4:	d53b4224 	mrs	x4, daif
   a62e8:	7100081f 	cmp	w0, #0x2
   a62ec:	54000321 	b.ne	a6350 <EnterCritical+0x80>  // b.any
   a62f0:	d50343df 	msr	daifset, #0x3
   a62f4:	90000081 	adrp	x1, b6000 <s_OldInfo+0x68>
   a62f8:	913e6023 	add	x3, x1, #0xf98
   a62fc:	b94f9822 	ldr	w2, [x1, #3992]
   a6300:	71004c5f 	cmp	w2, #0x13
   a6304:	54000348 	b.hi	a636c <EnterCritical+0x9c>  // b.pmore
   a6308:	b94f9822 	ldr	w2, [x1, #3992]
   a630c:	7100041f 	cmp	w0, #0x1
   a6310:	91002063 	add	x3, x3, #0x8
   a6314:	11000440 	add	w0, w2, #0x1
   a6318:	2a0203e2 	mov	w2, w2
   a631c:	b90f9820 	str	w0, [x1, #3992]
   a6320:	b8227864 	str	w4, [x3, x2, lsl #2]
   a6324:	54000041 	b.ne	a632c <EnterCritical+0x5c>  // b.any
   a6328:	d50341ff 	msr	daifclr, #0x1
   a632c:	d5033fbf 	dmb	sy
   a6330:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a6334:	d65f03c0 	ret
   a6338:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a633c:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6340:	911d0021 	add	x1, x1, #0x740
   a6344:	911d6000 	add	x0, x0, #0x758
   a6348:	52800c62 	mov	w2, #0x63                  	// #99
   a634c:	97ffd8cd 	bl	9c680 <assertion_failed>
   a6350:	3637fd04 	tbz	w4, #6, a62f0 <EnterCritical+0x20>
   a6354:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6358:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a635c:	911d0021 	add	x1, x1, #0x740
   a6360:	911e4000 	add	x0, x0, #0x790
   a6364:	52800d22 	mov	w2, #0x69                  	// #105
   a6368:	97ffd8c6 	bl	9c680 <assertion_failed>
   a636c:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6370:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6374:	911d0021 	add	x1, x1, #0x740
   a6378:	911f0000 	add	x0, x0, #0x7c0
   a637c:	52800da2 	mov	w2, #0x6d                  	// #109
   a6380:	97ffd8c0 	bl	9c680 <assertion_failed>
   a6384:	d503201f 	nop
   a6388:	d503201f 	nop
   a638c:	d503201f 	nop

00000000000a6390 <LeaveCritical>:
   a6390:	d5033fbf 	dmb	sy
   a6394:	d50341df 	msr	daifset, #0x1
   a6398:	90000080 	adrp	x0, b6000 <s_OldInfo+0x68>
   a639c:	b94f9801 	ldr	w1, [x0, #3992]
   a63a0:	34000121 	cbz	w1, a63c4 <LeaveCritical+0x34>
   a63a4:	b94f9801 	ldr	w1, [x0, #3992]
   a63a8:	913e6002 	add	x2, x0, #0xf98
   a63ac:	91002042 	add	x2, x2, #0x8
   a63b0:	51000423 	sub	w3, w1, #0x1
   a63b4:	b90f9803 	str	w3, [x0, #3992]
   a63b8:	b8637840 	ldr	w0, [x2, x3, lsl #2]
   a63bc:	d51b4220 	msr	daif, x0
   a63c0:	d65f03c0 	ret
   a63c4:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a63c8:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a63cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a63d0:	911d0021 	add	x1, x1, #0x740
   a63d4:	910003fd 	mov	x29, sp
   a63d8:	911fa000 	add	x0, x0, #0x7e8
   a63dc:	52800fc2 	mov	w2, #0x7e                  	// #126
   a63e0:	97ffd8a8 	bl	9c680 <assertion_failed>
   a63e4:	d503201f 	nop
   a63e8:	d503201f 	nop
   a63ec:	d503201f 	nop

00000000000a63f0 <InvalidateDataCache>:
   a63f0:	d2800000 	mov	x0, #0x0                   	// #0
   a63f4:	d503201f 	nop
   a63f8:	d5087640 	dc	isw, x0
   a63fc:	32010001 	orr	w1, w0, #0x80000000
   a6400:	d5087641 	dc	isw, x1
   a6404:	91010000 	add	x0, x0, #0x40
   a6408:	f140101f 	cmp	x0, #0x4, lsl #12
   a640c:	54ffff61 	b.ne	a63f8 <InvalidateDataCache+0x8>  // b.any
   a6410:	52800050 	mov	w16, #0x2                   	// #2
   a6414:	72a20010 	movk	w16, #0x1000, lsl #16
   a6418:	5280004f 	mov	w15, #0x2                   	// #2
   a641c:	72a4000f 	movk	w15, #0x2000, lsl #16
   a6420:	5280004e 	mov	w14, #0x2                   	// #2
   a6424:	72a6000e 	movk	w14, #0x3000, lsl #16
   a6428:	5280004d 	mov	w13, #0x2                   	// #2
   a642c:	72a8000d 	movk	w13, #0x4000, lsl #16
   a6430:	5280004c 	mov	w12, #0x2                   	// #2
   a6434:	72aa000c 	movk	w12, #0x5000, lsl #16
   a6438:	5280004b 	mov	w11, #0x2                   	// #2
   a643c:	72ac000b 	movk	w11, #0x6000, lsl #16
   a6440:	5280004a 	mov	w10, #0x2                   	// #2
   a6444:	72ae000a 	movk	w10, #0x7000, lsl #16
   a6448:	52800049 	mov	w9, #0x2                   	// #2
   a644c:	72b00009 	movk	w9, #0x8000, lsl #16
   a6450:	52800048 	mov	w8, #0x2                   	// #2
   a6454:	72b20008 	movk	w8, #0x9000, lsl #16
   a6458:	52800047 	mov	w7, #0x2                   	// #2
   a645c:	72b40007 	movk	w7, #0xa000, lsl #16
   a6460:	52800046 	mov	w6, #0x2                   	// #2
   a6464:	72b60006 	movk	w6, #0xb000, lsl #16
   a6468:	52800045 	mov	w5, #0x2                   	// #2
   a646c:	72b80005 	movk	w5, #0xc000, lsl #16
   a6470:	52800044 	mov	w4, #0x2                   	// #2
   a6474:	72ba0004 	movk	w4, #0xd000, lsl #16
   a6478:	52800043 	mov	w3, #0x2                   	// #2
   a647c:	72bc0003 	movk	w3, #0xe000, lsl #16
   a6480:	52800042 	mov	w2, #0x2                   	// #2
   a6484:	72be0002 	movk	w2, #0xf000, lsl #16
   a6488:	52800000 	mov	w0, #0x0                   	// #0
   a648c:	d503201f 	nop
   a6490:	321f0001 	orr	w1, w0, #0x2
   a6494:	d5087641 	dc	isw, x1
   a6498:	2a100001 	orr	w1, w0, w16
   a649c:	d5087641 	dc	isw, x1
   a64a0:	2a0f0001 	orr	w1, w0, w15
   a64a4:	d5087641 	dc	isw, x1
   a64a8:	2a0e0001 	orr	w1, w0, w14
   a64ac:	d5087641 	dc	isw, x1
   a64b0:	2a0d0001 	orr	w1, w0, w13
   a64b4:	d5087641 	dc	isw, x1
   a64b8:	2a0c0001 	orr	w1, w0, w12
   a64bc:	d5087641 	dc	isw, x1
   a64c0:	2a0b0001 	orr	w1, w0, w11
   a64c4:	d5087641 	dc	isw, x1
   a64c8:	2a0a0001 	orr	w1, w0, w10
   a64cc:	d5087641 	dc	isw, x1
   a64d0:	2a090001 	orr	w1, w0, w9
   a64d4:	d5087641 	dc	isw, x1
   a64d8:	2a080001 	orr	w1, w0, w8
   a64dc:	d5087641 	dc	isw, x1
   a64e0:	2a070001 	orr	w1, w0, w7
   a64e4:	d5087641 	dc	isw, x1
   a64e8:	2a060001 	orr	w1, w0, w6
   a64ec:	d5087641 	dc	isw, x1
   a64f0:	2a050001 	orr	w1, w0, w5
   a64f4:	d5087641 	dc	isw, x1
   a64f8:	2a040001 	orr	w1, w0, w4
   a64fc:	d5087641 	dc	isw, x1
   a6500:	2a030001 	orr	w1, w0, w3
   a6504:	d5087641 	dc	isw, x1
   a6508:	2a020001 	orr	w1, w0, w2
   a650c:	d5087641 	dc	isw, x1
   a6510:	11010000 	add	w0, w0, #0x40
   a6514:	7140401f 	cmp	w0, #0x10, lsl #12
   a6518:	54fffbc1 	b.ne	a6490 <InvalidateDataCache+0xa0>  // b.any
   a651c:	d5033f9f 	dsb	sy
   a6520:	d65f03c0 	ret
   a6524:	d503201f 	nop
   a6528:	d503201f 	nop
   a652c:	d503201f 	nop

00000000000a6530 <InvalidateDataCacheL1Only>:
   a6530:	d2800000 	mov	x0, #0x0                   	// #0
   a6534:	d503201f 	nop
   a6538:	d5087640 	dc	isw, x0
   a653c:	32010001 	orr	w1, w0, #0x80000000
   a6540:	d5087641 	dc	isw, x1
   a6544:	91010000 	add	x0, x0, #0x40
   a6548:	f140101f 	cmp	x0, #0x4, lsl #12
   a654c:	54ffff61 	b.ne	a6538 <InvalidateDataCacheL1Only+0x8>  // b.any
   a6550:	d5033f9f 	dsb	sy
   a6554:	d65f03c0 	ret
   a6558:	d503201f 	nop
   a655c:	d503201f 	nop

00000000000a6560 <CleanDataCache>:
   a6560:	d2800000 	mov	x0, #0x0                   	// #0
   a6564:	d503201f 	nop
   a6568:	d5087a40 	dc	csw, x0
   a656c:	32010001 	orr	w1, w0, #0x80000000
   a6570:	d5087a41 	dc	csw, x1
   a6574:	91010000 	add	x0, x0, #0x40
   a6578:	f140101f 	cmp	x0, #0x4, lsl #12
   a657c:	54ffff61 	b.ne	a6568 <CleanDataCache+0x8>  // b.any
   a6580:	52800050 	mov	w16, #0x2                   	// #2
   a6584:	72a20010 	movk	w16, #0x1000, lsl #16
   a6588:	5280004f 	mov	w15, #0x2                   	// #2
   a658c:	72a4000f 	movk	w15, #0x2000, lsl #16
   a6590:	5280004e 	mov	w14, #0x2                   	// #2
   a6594:	72a6000e 	movk	w14, #0x3000, lsl #16
   a6598:	5280004d 	mov	w13, #0x2                   	// #2
   a659c:	72a8000d 	movk	w13, #0x4000, lsl #16
   a65a0:	5280004c 	mov	w12, #0x2                   	// #2
   a65a4:	72aa000c 	movk	w12, #0x5000, lsl #16
   a65a8:	5280004b 	mov	w11, #0x2                   	// #2
   a65ac:	72ac000b 	movk	w11, #0x6000, lsl #16
   a65b0:	5280004a 	mov	w10, #0x2                   	// #2
   a65b4:	72ae000a 	movk	w10, #0x7000, lsl #16
   a65b8:	52800049 	mov	w9, #0x2                   	// #2
   a65bc:	72b00009 	movk	w9, #0x8000, lsl #16
   a65c0:	52800048 	mov	w8, #0x2                   	// #2
   a65c4:	72b20008 	movk	w8, #0x9000, lsl #16
   a65c8:	52800047 	mov	w7, #0x2                   	// #2
   a65cc:	72b40007 	movk	w7, #0xa000, lsl #16
   a65d0:	52800046 	mov	w6, #0x2                   	// #2
   a65d4:	72b60006 	movk	w6, #0xb000, lsl #16
   a65d8:	52800045 	mov	w5, #0x2                   	// #2
   a65dc:	72b80005 	movk	w5, #0xc000, lsl #16
   a65e0:	52800044 	mov	w4, #0x2                   	// #2
   a65e4:	72ba0004 	movk	w4, #0xd000, lsl #16
   a65e8:	52800043 	mov	w3, #0x2                   	// #2
   a65ec:	72bc0003 	movk	w3, #0xe000, lsl #16
   a65f0:	52800042 	mov	w2, #0x2                   	// #2
   a65f4:	72be0002 	movk	w2, #0xf000, lsl #16
   a65f8:	52800000 	mov	w0, #0x0                   	// #0
   a65fc:	d503201f 	nop
   a6600:	321f0001 	orr	w1, w0, #0x2
   a6604:	d5087a41 	dc	csw, x1
   a6608:	2a100001 	orr	w1, w0, w16
   a660c:	d5087a41 	dc	csw, x1
   a6610:	2a0f0001 	orr	w1, w0, w15
   a6614:	d5087a41 	dc	csw, x1
   a6618:	2a0e0001 	orr	w1, w0, w14
   a661c:	d5087a41 	dc	csw, x1
   a6620:	2a0d0001 	orr	w1, w0, w13
   a6624:	d5087a41 	dc	csw, x1
   a6628:	2a0c0001 	orr	w1, w0, w12
   a662c:	d5087a41 	dc	csw, x1
   a6630:	2a0b0001 	orr	w1, w0, w11
   a6634:	d5087a41 	dc	csw, x1
   a6638:	2a0a0001 	orr	w1, w0, w10
   a663c:	d5087a41 	dc	csw, x1
   a6640:	2a090001 	orr	w1, w0, w9
   a6644:	d5087a41 	dc	csw, x1
   a6648:	2a080001 	orr	w1, w0, w8
   a664c:	d5087a41 	dc	csw, x1
   a6650:	2a070001 	orr	w1, w0, w7
   a6654:	d5087a41 	dc	csw, x1
   a6658:	2a060001 	orr	w1, w0, w6
   a665c:	d5087a41 	dc	csw, x1
   a6660:	2a050001 	orr	w1, w0, w5
   a6664:	d5087a41 	dc	csw, x1
   a6668:	2a040001 	orr	w1, w0, w4
   a666c:	d5087a41 	dc	csw, x1
   a6670:	2a030001 	orr	w1, w0, w3
   a6674:	d5087a41 	dc	csw, x1
   a6678:	2a020001 	orr	w1, w0, w2
   a667c:	d5087a41 	dc	csw, x1
   a6680:	11010000 	add	w0, w0, #0x40
   a6684:	7140401f 	cmp	w0, #0x10, lsl #12
   a6688:	54fffbc1 	b.ne	a6600 <CleanDataCache+0xa0>  // b.any
   a668c:	d5033f9f 	dsb	sy
   a6690:	d65f03c0 	ret
   a6694:	d503201f 	nop
   a6698:	d503201f 	nop
   a669c:	d503201f 	nop

00000000000a66a0 <InvalidateDataCacheRange>:
   a66a0:	d5087620 	dc	ivac, x0
   a66a4:	91010022 	add	x2, x1, #0x40
   a66a8:	f100fc5f 	cmp	x2, #0x3f
   a66ac:	54000129 	b.ls	a66d0 <InvalidateDataCacheRange+0x30>  // b.plast
   a66b0:	91010000 	add	x0, x0, #0x40
   a66b4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a66b8:	8b010001 	add	x1, x0, x1
   a66bc:	d503201f 	nop
   a66c0:	d5087620 	dc	ivac, x0
   a66c4:	eb00003f 	cmp	x1, x0
   a66c8:	91010000 	add	x0, x0, #0x40
   a66cc:	54ffffa1 	b.ne	a66c0 <InvalidateDataCacheRange+0x20>  // b.any
   a66d0:	d5033f9f 	dsb	sy
   a66d4:	d65f03c0 	ret
   a66d8:	d503201f 	nop
   a66dc:	d503201f 	nop

00000000000a66e0 <CleanDataCacheRange>:
   a66e0:	d50b7a20 	dc	cvac, x0
   a66e4:	91010022 	add	x2, x1, #0x40
   a66e8:	f100fc5f 	cmp	x2, #0x3f
   a66ec:	54000129 	b.ls	a6710 <CleanDataCacheRange+0x30>  // b.plast
   a66f0:	91010000 	add	x0, x0, #0x40
   a66f4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a66f8:	8b010001 	add	x1, x0, x1
   a66fc:	d503201f 	nop
   a6700:	d50b7a20 	dc	cvac, x0
   a6704:	eb00003f 	cmp	x1, x0
   a6708:	91010000 	add	x0, x0, #0x40
   a670c:	54ffffa1 	b.ne	a6700 <CleanDataCacheRange+0x20>  // b.any
   a6710:	d5033f9f 	dsb	sy
   a6714:	d65f03c0 	ret
   a6718:	d503201f 	nop
   a671c:	d503201f 	nop

00000000000a6720 <CleanAndInvalidateDataCacheRange>:
   a6720:	d50b7e20 	dc	civac, x0
   a6724:	91010022 	add	x2, x1, #0x40
   a6728:	f100fc5f 	cmp	x2, #0x3f
   a672c:	54000129 	b.ls	a6750 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   a6730:	91010000 	add	x0, x0, #0x40
   a6734:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a6738:	8b010001 	add	x1, x0, x1
   a673c:	d503201f 	nop
   a6740:	d50b7e20 	dc	civac, x0
   a6744:	eb00003f 	cmp	x1, x0
   a6748:	91010000 	add	x0, x0, #0x40
   a674c:	54ffffa1 	b.ne	a6740 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   a6750:	d5033f9f 	dsb	sy
   a6754:	d65f03c0 	ret
   a6758:	d503201f 	nop
   a675c:	d503201f 	nop

00000000000a6760 <SyncDataAndInstructionCache>:
   a6760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6764:	910003fd 	mov	x29, sp
   a6768:	97ffff7e 	bl	a6560 <CleanDataCache>
   a676c:	d508751f 	ic	iallu
   a6770:	d5033f9f 	dsb	sy
   a6774:	d5033fdf 	isb
   a6778:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a677c:	d65f03c0 	ret

00000000000a6780 <CTranslationTable::CTranslationTable(unsigned long)>:
   a6780:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6784:	910003fd 	mov	x29, sp
   a6788:	f9000fe0 	str	x0, [sp, #24]
   a678c:	f9000be1 	str	x1, [sp, #16]
   a6790:	f9400fe0 	ldr	x0, [sp, #24]
   a6794:	f9400be1 	ldr	x1, [sp, #16]
   a6798:	f9000001 	str	x1, [x0]
   a679c:	f9400fe0 	ldr	x0, [sp, #24]
   a67a0:	f900041f 	str	xzr, [x0, #8]
   a67a4:	97ffd7ab 	bl	9c650 <palloc>
   a67a8:	aa0003e1 	mov	x1, x0
   a67ac:	f9400fe0 	ldr	x0, [sp, #24]
   a67b0:	f9000401 	str	x1, [x0, #8]
   a67b4:	f9400fe0 	ldr	x0, [sp, #24]
   a67b8:	f9400400 	ldr	x0, [x0, #8]
   a67bc:	f100001f 	cmp	x0, #0x0
   a67c0:	1a9f07e0 	cset	w0, ne  // ne = any
   a67c4:	12001c00 	and	w0, w0, #0xff
   a67c8:	92401c00 	and	x0, x0, #0xff
   a67cc:	f100001f 	cmp	x0, #0x0
   a67d0:	540000e1 	b.ne	a67ec <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   a67d4:	528005e2 	mov	w2, #0x2f                  	// #47
   a67d8:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a67dc:	91200001 	add	x1, x0, #0x800
   a67e0:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a67e4:	91206000 	add	x0, x0, #0x818
   a67e8:	97ffd7a6 	bl	9c680 <assertion_failed>
   a67ec:	f9400fe0 	ldr	x0, [sp, #24]
   a67f0:	f9400400 	ldr	x0, [x0, #8]
   a67f4:	d2a00022 	mov	x2, #0x10000               	// #65536
   a67f8:	52800001 	mov	w1, #0x0                   	// #0
   a67fc:	97fff725 	bl	a4490 <memset>
   a6800:	b9003fff 	str	wzr, [sp, #60]
   a6804:	b9403fe0 	ldr	w0, [sp, #60]
   a6808:	7101fc1f 	cmp	w0, #0x7f
   a680c:	54000b88 	b.hi	a697c <CTranslationTable::CTranslationTable(unsigned long)+0x1fc>  // b.pmore
   a6810:	b9403fe0 	ldr	w0, [sp, #60]
   a6814:	d3638800 	lsl	x0, x0, #29
   a6818:	f9001be0 	str	x0, [sp, #48]
   a681c:	f9401be1 	ldr	x1, [sp, #48]
   a6820:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   a6824:	eb00003f 	cmp	x1, x0
   a6828:	54000149 	b.ls	a6850 <CTranslationTable::CTranslationTable(unsigned long)+0xd0>  // b.plast
   a682c:	f9401be1 	ldr	x1, [sp, #48]
   a6830:	d2c000c0 	mov	x0, #0x600000000           	// #25769803776
   a6834:	eb00003f 	cmp	x1, x0
   a6838:	54000983 	b.cc	a6968 <CTranslationTable::CTranslationTable(unsigned long)+0x1e8>  // b.lo, b.ul, b.last
   a683c:	f9401be1 	ldr	x1, [sp, #48]
   a6840:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   a6844:	f2c000c0 	movk	x0, #0x6, lsl #32
   a6848:	eb00003f 	cmp	x1, x0
   a684c:	540008e8 	b.hi	a6968 <CTranslationTable::CTranslationTable(unsigned long)+0x1e8>  // b.pmore
   a6850:	f9401be1 	ldr	x1, [sp, #48]
   a6854:	f9400fe0 	ldr	x0, [sp, #24]
   a6858:	9400005e 	bl	a69d0 <CTranslationTable::CreateLevel3Table(unsigned long)>
   a685c:	f90017e0 	str	x0, [sp, #40]
   a6860:	f94017e0 	ldr	x0, [sp, #40]
   a6864:	f100001f 	cmp	x0, #0x0
   a6868:	1a9f07e0 	cset	w0, ne  // ne = any
   a686c:	12001c00 	and	w0, w0, #0xff
   a6870:	92401c00 	and	x0, x0, #0xff
   a6874:	f100001f 	cmp	x0, #0x0
   a6878:	540000e1 	b.ne	a6894 <CTranslationTable::CTranslationTable(unsigned long)+0x114>  // b.any
   a687c:	52800822 	mov	w2, #0x41                  	// #65
   a6880:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6884:	91200001 	add	x1, x0, #0x800
   a6888:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a688c:	9120a000 	add	x0, x0, #0x828
   a6890:	97ffd77c 	bl	9c680 <assertion_failed>
   a6894:	f9400fe0 	ldr	x0, [sp, #24]
   a6898:	f9400401 	ldr	x1, [x0, #8]
   a689c:	b9403fe0 	ldr	w0, [sp, #60]
   a68a0:	d37df000 	lsl	x0, x0, #3
   a68a4:	8b000020 	add	x0, x1, x0
   a68a8:	f90013e0 	str	x0, [sp, #32]
   a68ac:	f94013e0 	ldr	x0, [sp, #32]
   a68b0:	39400001 	ldrb	w1, [x0]
   a68b4:	32000421 	orr	w1, w1, #0x3
   a68b8:	39000001 	strb	w1, [x0]
   a68bc:	f94013e0 	ldr	x0, [sp, #32]
   a68c0:	39400001 	ldrb	w1, [x0]
   a68c4:	12000421 	and	w1, w1, #0x3
   a68c8:	39000001 	strb	w1, [x0]
   a68cc:	39400401 	ldrb	w1, [x0, #1]
   a68d0:	52800002 	mov	w2, #0x0                   	// #0
   a68d4:	0a020021 	and	w1, w1, w2
   a68d8:	39000401 	strb	w1, [x0, #1]
   a68dc:	f94017e0 	ldr	x0, [sp, #40]
   a68e0:	d350fc00 	lsr	x0, x0, #16
   a68e4:	2a0003e2 	mov	w2, w0
   a68e8:	f94013e1 	ldr	x1, [sp, #32]
   a68ec:	f9400020 	ldr	x0, [x1]
   a68f0:	b3707c40 	bfi	x0, x2, #16, #32
   a68f4:	f9000020 	str	x0, [x1]
   a68f8:	f94013e0 	ldr	x0, [sp, #32]
   a68fc:	39401801 	ldrb	w1, [x0, #6]
   a6900:	121c6c21 	and	w1, w1, #0xfffffff0
   a6904:	39001801 	strb	w1, [x0, #6]
   a6908:	f94013e0 	ldr	x0, [sp, #32]
   a690c:	39401801 	ldrb	w1, [x0, #6]
   a6910:	12000c21 	and	w1, w1, #0xf
   a6914:	39001801 	strb	w1, [x0, #6]
   a6918:	39401c01 	ldrb	w1, [x0, #7]
   a691c:	121d7021 	and	w1, w1, #0xfffffff8
   a6920:	39001c01 	strb	w1, [x0, #7]
   a6924:	f94013e0 	ldr	x0, [sp, #32]
   a6928:	39401c01 	ldrb	w1, [x0, #7]
   a692c:	121c7821 	and	w1, w1, #0xfffffff7
   a6930:	39001c01 	strb	w1, [x0, #7]
   a6934:	f94013e0 	ldr	x0, [sp, #32]
   a6938:	39401c01 	ldrb	w1, [x0, #7]
   a693c:	121b7821 	and	w1, w1, #0xffffffef
   a6940:	39001c01 	strb	w1, [x0, #7]
   a6944:	f94013e0 	ldr	x0, [sp, #32]
   a6948:	39401c01 	ldrb	w1, [x0, #7]
   a694c:	12197421 	and	w1, w1, #0xffffff9f
   a6950:	39001c01 	strb	w1, [x0, #7]
   a6954:	f94013e0 	ldr	x0, [sp, #32]
   a6958:	39401c01 	ldrb	w1, [x0, #7]
   a695c:	12001821 	and	w1, w1, #0x7f
   a6960:	39001c01 	strb	w1, [x0, #7]
   a6964:	14000002 	b	a696c <CTranslationTable::CTranslationTable(unsigned long)+0x1ec>
   a6968:	d503201f 	nop
   a696c:	b9403fe0 	ldr	w0, [sp, #60]
   a6970:	11000400 	add	w0, w0, #0x1
   a6974:	b9003fe0 	str	w0, [sp, #60]
   a6978:	17ffffa3 	b	a6804 <CTranslationTable::CTranslationTable(unsigned long)+0x84>
   a697c:	d5033f9f 	dsb	sy
   a6980:	d503201f 	nop
   a6984:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6988:	d65f03c0 	ret
   a698c:	d503201f 	nop

00000000000a6990 <CTranslationTable::~CTranslationTable()>:
   a6990:	f9400400 	ldr	x0, [x0, #8]
   a6994:	17ffd733 	b	9c660 <pfree>
   a6998:	d503201f 	nop
   a699c:	d503201f 	nop

00000000000a69a0 <CTranslationTable::GetBaseAddress() const>:
   a69a0:	f9400400 	ldr	x0, [x0, #8]
   a69a4:	b4000040 	cbz	x0, a69ac <CTranslationTable::GetBaseAddress() const+0xc>
   a69a8:	d65f03c0 	ret
   a69ac:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a69b0:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a69b4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a69b8:	91200021 	add	x1, x1, #0x800
   a69bc:	910003fd 	mov	x29, sp
   a69c0:	91206000 	add	x0, x0, #0x818
   a69c4:	52800b62 	mov	w2, #0x5b                  	// #91
   a69c8:	97ffd72e 	bl	9c680 <assertion_failed>
   a69cc:	d503201f 	nop

00000000000a69d0 <CTranslationTable::CreateLevel3Table(unsigned long)>:
   a69d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a69d4:	910003fd 	mov	x29, sp
   a69d8:	f9000fe0 	str	x0, [sp, #24]
   a69dc:	f9000be1 	str	x1, [sp, #16]
   a69e0:	97ffd71c 	bl	9c650 <palloc>
   a69e4:	f9001be0 	str	x0, [sp, #48]
   a69e8:	f9401be0 	ldr	x0, [sp, #48]
   a69ec:	f100001f 	cmp	x0, #0x0
   a69f0:	1a9f07e0 	cset	w0, ne  // ne = any
   a69f4:	12001c00 	and	w0, w0, #0xff
   a69f8:	92401c00 	and	x0, x0, #0xff
   a69fc:	f100001f 	cmp	x0, #0x0
   a6a00:	540000e1 	b.ne	a6a1c <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   a6a04:	52800c42 	mov	w2, #0x62                  	// #98
   a6a08:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6a0c:	91200001 	add	x1, x0, #0x800
   a6a10:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6a14:	9120a000 	add	x0, x0, #0x828
   a6a18:	97ffd71a 	bl	9c680 <assertion_failed>
   a6a1c:	b9003fff 	str	wzr, [sp, #60]
   a6a20:	b9403fe1 	ldr	w1, [sp, #60]
   a6a24:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   a6a28:	6b00003f 	cmp	w1, w0
   a6a2c:	54000fe8 	b.hi	a6c28 <CTranslationTable::CreateLevel3Table(unsigned long)+0x258>  // b.pmore
   a6a30:	b9403fe0 	ldr	w0, [sp, #60]
   a6a34:	d37df000 	lsl	x0, x0, #3
   a6a38:	f9401be1 	ldr	x1, [sp, #48]
   a6a3c:	8b000020 	add	x0, x1, x0
   a6a40:	f90017e0 	str	x0, [sp, #40]
   a6a44:	f94017e0 	ldr	x0, [sp, #40]
   a6a48:	39400001 	ldrb	w1, [x0]
   a6a4c:	32000421 	orr	w1, w1, #0x3
   a6a50:	39000001 	strb	w1, [x0]
   a6a54:	f94017e0 	ldr	x0, [sp, #40]
   a6a58:	39400001 	ldrb	w1, [x0]
   a6a5c:	121b7021 	and	w1, w1, #0xffffffe3
   a6a60:	39000001 	strb	w1, [x0]
   a6a64:	f94017e0 	ldr	x0, [sp, #40]
   a6a68:	39400001 	ldrb	w1, [x0]
   a6a6c:	121a7821 	and	w1, w1, #0xffffffdf
   a6a70:	39000001 	strb	w1, [x0]
   a6a74:	f94017e0 	ldr	x0, [sp, #40]
   a6a78:	39400001 	ldrb	w1, [x0]
   a6a7c:	12001421 	and	w1, w1, #0x3f
   a6a80:	39000001 	strb	w1, [x0]
   a6a84:	f94017e0 	ldr	x0, [sp, #40]
   a6a88:	39400401 	ldrb	w1, [x0, #1]
   a6a8c:	32000421 	orr	w1, w1, #0x3
   a6a90:	39000401 	strb	w1, [x0, #1]
   a6a94:	f94017e0 	ldr	x0, [sp, #40]
   a6a98:	39400401 	ldrb	w1, [x0, #1]
   a6a9c:	321e0021 	orr	w1, w1, #0x4
   a6aa0:	39000401 	strb	w1, [x0, #1]
   a6aa4:	f94017e0 	ldr	x0, [sp, #40]
   a6aa8:	39400401 	ldrb	w1, [x0, #1]
   a6aac:	121c7821 	and	w1, w1, #0xfffffff7
   a6ab0:	39000401 	strb	w1, [x0, #1]
   a6ab4:	f94017e0 	ldr	x0, [sp, #40]
   a6ab8:	39400401 	ldrb	w1, [x0, #1]
   a6abc:	12000c21 	and	w1, w1, #0xf
   a6ac0:	39000401 	strb	w1, [x0, #1]
   a6ac4:	f9400be0 	ldr	x0, [sp, #16]
   a6ac8:	d350fc00 	lsr	x0, x0, #16
   a6acc:	2a0003e2 	mov	w2, w0
   a6ad0:	f94017e1 	ldr	x1, [sp, #40]
   a6ad4:	f9400020 	ldr	x0, [x1]
   a6ad8:	b3707c40 	bfi	x0, x2, #16, #32
   a6adc:	f9000020 	str	x0, [x1]
   a6ae0:	f94017e0 	ldr	x0, [sp, #40]
   a6ae4:	39401801 	ldrb	w1, [x0, #6]
   a6ae8:	121c6c21 	and	w1, w1, #0xfffffff0
   a6aec:	39001801 	strb	w1, [x0, #6]
   a6af0:	f94017e0 	ldr	x0, [sp, #40]
   a6af4:	39401801 	ldrb	w1, [x0, #6]
   a6af8:	121b7821 	and	w1, w1, #0xffffffef
   a6afc:	39001801 	strb	w1, [x0, #6]
   a6b00:	f94017e0 	ldr	x0, [sp, #40]
   a6b04:	39401801 	ldrb	w1, [x0, #6]
   a6b08:	121a7821 	and	w1, w1, #0xffffffdf
   a6b0c:	39001801 	strb	w1, [x0, #6]
   a6b10:	f94017e0 	ldr	x0, [sp, #40]
   a6b14:	39401801 	ldrb	w1, [x0, #6]
   a6b18:	321a0021 	orr	w1, w1, #0x40
   a6b1c:	39001801 	strb	w1, [x0, #6]
   a6b20:	f94017e0 	ldr	x0, [sp, #40]
   a6b24:	39401801 	ldrb	w1, [x0, #6]
   a6b28:	12001821 	and	w1, w1, #0x7f
   a6b2c:	39001801 	strb	w1, [x0, #6]
   a6b30:	39401c01 	ldrb	w1, [x0, #7]
   a6b34:	52800002 	mov	w2, #0x0                   	// #0
   a6b38:	0a020021 	and	w1, w1, w2
   a6b3c:	39001c01 	strb	w1, [x0, #7]
   a6b40:	d0000020 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a6b44:	911fd000 	add	x0, x0, #0x7f4
   a6b48:	f9400be1 	ldr	x1, [sp, #16]
   a6b4c:	eb00003f 	cmp	x1, x0
   a6b50:	540005e3 	b.cc	a6c0c <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.lo, b.ul, b.last
   a6b54:	f94017e0 	ldr	x0, [sp, #40]
   a6b58:	39401801 	ldrb	w1, [x0, #6]
   a6b5c:	321b0021 	orr	w1, w1, #0x20
   a6b60:	39001801 	strb	w1, [x0, #6]
   a6b64:	f9400fe0 	ldr	x0, [sp, #24]
   a6b68:	f9400000 	ldr	x0, [x0]
   a6b6c:	f9400be1 	ldr	x1, [sp, #16]
   a6b70:	eb00003f 	cmp	x1, x0
   a6b74:	540000a3 	b.cc	a6b88 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1b8>  // b.lo, b.ul, b.last
   a6b78:	f9400be1 	ldr	x1, [sp, #16]
   a6b7c:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   a6b80:	eb00003f 	cmp	x1, x0
   a6b84:	540000a9 	b.ls	a6b98 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1c8>  // b.plast
   a6b88:	f9400be1 	ldr	x1, [sp, #16]
   a6b8c:	12a80000 	mov	w0, #0xbfffffff            	// #-1073741825
   a6b90:	eb00003f 	cmp	x1, x0
   a6b94:	54000189 	b.ls	a6bc4 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1f4>  // b.plast
   a6b98:	f94017e1 	ldr	x1, [sp, #40]
   a6b9c:	39400020 	ldrb	w0, [x1]
   a6ba0:	52800022 	mov	w2, #0x1                   	// #1
   a6ba4:	331e0840 	bfi	w0, w2, #2, #3
   a6ba8:	39000020 	strb	w0, [x1]
   a6bac:	f94017e1 	ldr	x1, [sp, #40]
   a6bb0:	39400420 	ldrb	w0, [x1, #1]
   a6bb4:	52800042 	mov	w2, #0x2                   	// #2
   a6bb8:	33000440 	bfxil	w0, w2, #0, #2
   a6bbc:	39000420 	strb	w0, [x1, #1]
   a6bc0:	14000013 	b	a6c0c <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>
   a6bc4:	f9400be1 	ldr	x1, [sp, #16]
   a6bc8:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   a6bcc:	eb00003f 	cmp	x1, x0
   a6bd0:	540001e9 	b.ls	a6c0c <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.plast
   a6bd4:	f9400be1 	ldr	x1, [sp, #16]
   a6bd8:	12bfee00 	mov	w0, #0x8fffff              	// #9437183
   a6bdc:	eb00003f 	cmp	x1, x0
   a6be0:	54000168 	b.hi	a6c0c <CTranslationTable::CreateLevel3Table(unsigned long)+0x23c>  // b.pmore
   a6be4:	f94017e1 	ldr	x1, [sp, #40]
   a6be8:	39400020 	ldrb	w0, [x1]
   a6bec:	52800042 	mov	w2, #0x2                   	// #2
   a6bf0:	331e0840 	bfi	w0, w2, #2, #3
   a6bf4:	39000020 	strb	w0, [x1]
   a6bf8:	f94017e1 	ldr	x1, [sp, #40]
   a6bfc:	39400420 	ldrb	w0, [x1, #1]
   a6c00:	52800042 	mov	w2, #0x2                   	// #2
   a6c04:	33000440 	bfxil	w0, w2, #0, #2
   a6c08:	39000420 	strb	w0, [x1, #1]
   a6c0c:	f9400be0 	ldr	x0, [sp, #16]
   a6c10:	91404000 	add	x0, x0, #0x10, lsl #12
   a6c14:	f9000be0 	str	x0, [sp, #16]
   a6c18:	b9403fe0 	ldr	w0, [sp, #60]
   a6c1c:	11000400 	add	w0, w0, #0x1
   a6c20:	b9003fe0 	str	w0, [sp, #60]
   a6c24:	17ffff7f 	b	a6a20 <CTranslationTable::CreateLevel3Table(unsigned long)+0x50>
   a6c28:	f9401be0 	ldr	x0, [sp, #48]
   a6c2c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6c30:	d65f03c0 	ret
	...

00000000000a6c40 <CBcmPCIeHostBridge::InterruptHandler(void*)>:
   a6c40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6c44:	910003fd 	mov	x29, sp
   a6c48:	a90153f3 	stp	x19, x20, [sp, #16]
   a6c4c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6c50:	b40004e0 	cbz	x0, a6cec <CBcmPCIeHostBridge::InterruptHandler(void*)+0xac>
   a6c54:	aa0003f5 	mov	x21, x0
   a6c58:	f9400800 	ldr	x0, [x0, #16]
   a6c5c:	b9400014 	ldr	w20, [x0]
   a6c60:	34000374 	cbz	w20, a6ccc <CBcmPCIeHostBridge::InterruptHandler(void*)+0x8c>
   a6c64:	52800036 	mov	w22, #0x1                   	// #1
   a6c68:	52800013 	mov	w19, #0x0                   	// #0
   a6c6c:	1400000a 	b	a6c94 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x54>
   a6c70:	2a1303e0 	mov	w0, w19
   a6c74:	f94016a1 	ldr	x1, [x21, #40]
   a6c78:	0a220294 	bic	w20, w20, w2
   a6c7c:	d63f0060 	blr	x3
   a6c80:	f9400aa0 	ldr	x0, [x21, #16]
   a6c84:	11000673 	add	w19, w19, #0x1
   a6c88:	7100029f 	cmp	w20, #0x0
   a6c8c:	7a5f1a62 	ccmp	w19, #0x1f, #0x2, ne  // ne = any
   a6c90:	540001a8 	b.hi	a6cc4 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x84>  // b.pmore
   a6c94:	1ad322c2 	lsl	w2, w22, w19
   a6c98:	6a14005f 	tst	w2, w20
   a6c9c:	54ffff40 	b.eq	a6c84 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x44>  // b.none
   a6ca0:	f94012a3 	ldr	x3, [x21, #32]
   a6ca4:	b9000802 	str	w2, [x0, #8]
   a6ca8:	b5fffe43 	cbnz	x3, a6c70 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x30>
   a6cac:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6cb0:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6cb4:	9120e021 	add	x1, x1, #0x838
   a6cb8:	91218000 	add	x0, x0, #0x860
   a6cbc:	52806a22 	mov	w2, #0x351                 	// #849
   a6cc0:	97ffd670 	bl	9c680 <assertion_failed>
   a6cc4:	b9400014 	ldr	w20, [x0]
   a6cc8:	35fffd14 	cbnz	w20, a6c68 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x28>
   a6ccc:	f94002a1 	ldr	x1, [x21]
   a6cd0:	d2880c00 	mov	x0, #0x4060                	// #16480
   a6cd4:	52800022 	mov	w2, #0x1                   	// #1
   a6cd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6cdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6ce0:	b8206822 	str	w2, [x1, x0]
   a6ce4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6ce8:	d65f03c0 	ret
   a6cec:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6cf0:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6cf4:	9120e021 	add	x1, x1, #0x838
   a6cf8:	91214000 	add	x0, x0, #0x850
   a6cfc:	52806802 	mov	w2, #0x340                 	// #832
   a6d00:	97ffd660 	bl	9c680 <assertion_failed>
   a6d04:	d503201f 	nop
   a6d08:	d503201f 	nop
   a6d0c:	d503201f 	nop

00000000000a6d10 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int) [clone .part.0]>:
   a6d10:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6d14:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6d18:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6d1c:	9120e021 	add	x1, x1, #0x838
   a6d20:	910003fd 	mov	x29, sp
   a6d24:	9121e000 	add	x0, x0, #0x878
   a6d28:	52806ba2 	mov	w2, #0x35d                 	// #861
   a6d2c:	97ffd655 	bl	9c680 <assertion_failed>

00000000000a6d30 <CBcmPCIeHostBridge::CBcmPCIeHostBridge(CInterruptSystem*)>:
   a6d30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a6d34:	910003fd 	mov	x29, sp
   a6d38:	f9000bf3 	str	x19, [sp, #16]
   a6d3c:	aa0003f3 	mov	x19, x0
   a6d40:	f9000001 	str	x1, [x0]
   a6d44:	97fff5c7 	bl	a4460 <CTimer::Get()>
   a6d48:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6d4c:	912b8021 	add	x1, x1, #0xae0
   a6d50:	b9004a7f 	str	wzr, [x19, #72]
   a6d54:	d2bfaa03 	mov	x3, #0xfd500000            	// #4249878528
   a6d58:	91004022 	add	x2, x1, #0x10
   a6d5c:	b9006a7f 	str	wzr, [x19, #104]
   a6d60:	b9007a7f 	str	wzr, [x19, #120]
   a6d64:	a9008e60 	stp	x0, x3, [x19, #8]
   a6d68:	a9020a61 	stp	x1, x2, [x19, #32]
   a6d6c:	f900467f 	str	xzr, [x19, #136]
   a6d70:	f9400bf3 	ldr	x19, [sp, #16]
   a6d74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6d78:	d65f03c0 	ret
   a6d7c:	d503201f 	nop

00000000000a6d80 <CBcmPCIeHostBridge::DisconnectMSI()>:
   a6d80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a6d84:	910003fd 	mov	x29, sp
   a6d88:	12800004 	mov	w4, #0xffffffff            	// #-1
   a6d8c:	d2880882 	mov	x2, #0x4044                	// #16452
   a6d90:	f9404401 	ldr	x1, [x0, #136]
   a6d94:	f9400823 	ldr	x3, [x1, #16]
   a6d98:	f9400021 	ldr	x1, [x1]
   a6d9c:	f9000bf3 	str	x19, [sp, #16]
   a6da0:	aa0003f3 	mov	x19, x0
   a6da4:	f9400000 	ldr	x0, [x0]
   a6da8:	b9001064 	str	w4, [x3, #16]
   a6dac:	b822683f 	str	wzr, [x1, x2]
   a6db0:	b4000160 	cbz	x0, a6ddc <CBcmPCIeHostBridge::DisconnectMSI()+0x5c>
   a6db4:	52801681 	mov	w1, #0xb4                  	// #180
   a6db8:	9400043e 	bl	a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a6dbc:	f9404660 	ldr	x0, [x19, #136]
   a6dc0:	b4000060 	cbz	x0, a6dcc <CBcmPCIeHostBridge::DisconnectMSI()+0x4c>
   a6dc4:	d2800601 	mov	x1, #0x30                  	// #48
   a6dc8:	97fffa52 	bl	a5710 <operator delete(void*, unsigned long)>
   a6dcc:	f900467f 	str	xzr, [x19, #136]
   a6dd0:	f9400bf3 	ldr	x19, [sp, #16]
   a6dd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6dd8:	d65f03c0 	ret
   a6ddc:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6de0:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6de4:	9120e021 	add	x1, x1, #0x838
   a6de8:	91222000 	add	x0, x0, #0x888
   a6dec:	528025a2 	mov	w2, #0x12d                 	// #301
   a6df0:	97ffd624 	bl	9c680 <assertion_failed>
   a6df4:	d503201f 	nop
   a6df8:	d503201f 	nop
   a6dfc:	d503201f 	nop

00000000000a6e00 <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()>:
   a6e00:	f9404401 	ldr	x1, [x0, #136]
   a6e04:	b4000041 	cbz	x1, a6e0c <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()+0xc>
   a6e08:	17ffffde 	b	a6d80 <CBcmPCIeHostBridge::DisconnectMSI()>
   a6e0c:	d65f03c0 	ret

00000000000a6e10 <CBcmPCIeHostBridge::enable_bridge()>:
   a6e10:	f9400801 	ldr	x1, [x0, #16]
   a6e14:	b4000461 	cbz	x1, a6ea0 <CBcmPCIeHostBridge::enable_bridge()+0x90>
   a6e18:	b9400822 	ldr	w2, [x1, #8]
   a6e1c:	52808000 	mov	w0, #0x400                 	// #1024
   a6e20:	72a000c0 	movk	w0, #0x6, lsl #16
   a6e24:	6b42201f 	cmp	w0, w2, lsr #8
   a6e28:	540003c1 	b.ne	a6ea0 <CBcmPCIeHostBridge::enable_bridge()+0x90>  // b.any
   a6e2c:	39403820 	ldrb	w0, [x1, #14]
   a6e30:	12001c00 	and	w0, w0, #0xff
   a6e34:	7100041f 	cmp	w0, #0x1
   a6e38:	54000341 	b.ne	a6ea0 <CBcmPCIeHostBridge::enable_bridge()+0x90>  // b.any
   a6e3c:	52800203 	mov	w3, #0x10                  	// #16
   a6e40:	1280ffe2 	mov	w2, #0xfffff800            	// #-2048
   a6e44:	39003023 	strb	w3, [x1, #12]
   a6e48:	39006420 	strb	w0, [x1, #25]
   a6e4c:	39006820 	strb	w0, [x1, #26]
   a6e50:	79004022 	strh	w2, [x1, #32]
   a6e54:	79004422 	strh	w2, [x1, #34]
   a6e58:	3900f820 	strb	w0, [x1, #62]
   a6e5c:	3942b020 	ldrb	w0, [x1, #172]
   a6e60:	12001c00 	and	w0, w0, #0xff
   a6e64:	7100401f 	cmp	w0, #0x10
   a6e68:	540000c1 	b.ne	a6e80 <CBcmPCIeHostBridge::enable_bridge()+0x70>  // b.any
   a6e6c:	528028c2 	mov	w2, #0x146                 	// #326
   a6e70:	39032020 	strb	w0, [x1, #200]
   a6e74:	52800000 	mov	w0, #0x0                   	// #0
   a6e78:	79000822 	strh	w2, [x1, #4]
   a6e7c:	d65f03c0 	ret
   a6e80:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6e84:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6e88:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6e8c:	9120e021 	add	x1, x1, #0x838
   a6e90:	910003fd 	mov	x29, sp
   a6e94:	91228000 	add	x0, x0, #0x8a0
   a6e98:	528040e2 	mov	w2, #0x207                 	// #519
   a6e9c:	97ffd5f9 	bl	9c680 <assertion_failed>
   a6ea0:	12800000 	mov	w0, #0xffffffff            	// #-1
   a6ea4:	d65f03c0 	ret
   a6ea8:	d503201f 	nop
   a6eac:	d503201f 	nop

00000000000a6eb0 <CBcmPCIeHostBridge::pcie_set_pci_ranges()>:
   a6eb0:	aa0003e1 	mov	x1, x0
   a6eb4:	b9404800 	ldr	w0, [x0, #72]
   a6eb8:	35000140 	cbnz	w0, a6ee0 <CBcmPCIeHostBridge::pcie_set_pci_ranges()+0x30>
   a6ebc:	d2c000c4 	mov	x4, #0x600000000           	// #25769803776
   a6ec0:	d2bf0005 	mov	x5, #0xf8000000            	// #4160749568
   a6ec4:	d2a08003 	mov	x3, #0x4000000             	// #67108864
   a6ec8:	52800022 	mov	w2, #0x1                   	// #1
   a6ecc:	52800000 	mov	w0, #0x0                   	// #0
   a6ed0:	a9031025 	stp	x5, x4, [x1, #48]
   a6ed4:	f9002023 	str	x3, [x1, #64]
   a6ed8:	b9004822 	str	w2, [x1, #72]
   a6edc:	d65f03c0 	ret
   a6ee0:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6ee4:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6ee8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6eec:	9120e021 	add	x1, x1, #0x838
   a6ef0:	910003fd 	mov	x29, sp
   a6ef4:	9123a000 	add	x0, x0, #0x8e8
   a6ef8:	528047c2 	mov	w2, #0x23e                 	// #574
   a6efc:	97ffd5e1 	bl	9c680 <assertion_failed>

00000000000a6f00 <CBcmPCIeHostBridge::pcie_set_dma_ranges()>:
   a6f00:	aa0003e1 	mov	x1, x0
   a6f04:	b9406800 	ldr	w0, [x0, #104]
   a6f08:	35000100 	cbnz	w0, a6f28 <CBcmPCIeHostBridge::pcie_set_dma_ranges()+0x28>
   a6f0c:	d2c00023 	mov	x3, #0x100000000           	// #4294967296
   a6f10:	52800022 	mov	w2, #0x1                   	// #1
   a6f14:	a9057c3f 	stp	xzr, xzr, [x1, #80]
   a6f18:	52800000 	mov	w0, #0x0                   	// #0
   a6f1c:	f9003023 	str	x3, [x1, #96]
   a6f20:	b9006822 	str	w2, [x1, #104]
   a6f24:	d65f03c0 	ret
   a6f28:	b0000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a6f2c:	b0000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a6f30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6f34:	9120e021 	add	x1, x1, #0x838
   a6f38:	910003fd 	mov	x29, sp
   a6f3c:	91240000 	add	x0, x0, #0x900
   a6f40:	52804962 	mov	w2, #0x24b                 	// #587
   a6f44:	97ffd5cf 	bl	9c680 <assertion_failed>
   a6f48:	d503201f 	nop
   a6f4c:	d503201f 	nop

00000000000a6f50 <CBcmPCIeHostBridge::pcie_set_outbound_win(unsigned int, unsigned long, unsigned long, unsigned long)>:
   a6f50:	f9400806 	ldr	x6, [x0, #16]
   a6f54:	531d7020 	lsl	w0, w1, #3
   a6f58:	d2880189 	mov	x9, #0x400c                	// #16396
   a6f5c:	d360fc68 	lsr	x8, x3, #32
   a6f60:	d2880207 	mov	x7, #0x4010                	// #16400
   a6f64:	531e7421 	lsl	w1, w1, #2
   a6f68:	d2880e05 	mov	x5, #0x4070                	// #16496
   a6f6c:	d1000484 	sub	x4, x4, #0x1
   a6f70:	8b020084 	add	x4, x4, x2
   a6f74:	8b060000 	add	x0, x0, x6
   a6f78:	8b060021 	add	x1, x1, x6
   a6f7c:	d2881086 	mov	x6, #0x4084                	// #16516
   a6f80:	b8296803 	str	w3, [x0, x9]
   a6f84:	d354fc49 	lsr	x9, x2, #20
   a6f88:	d360fc42 	lsr	x2, x2, #32
   a6f8c:	b8276808 	str	w8, [x0, x7]
   a6f90:	d354fc88 	lsr	x8, x4, #20
   a6f94:	d2881007 	mov	x7, #0x4080                	// #16512
   a6f98:	b8656823 	ldr	w3, [x1, x5]
   a6f9c:	d360fc84 	lsr	x4, x4, #32
   a6fa0:	331c2d23 	bfi	w3, w9, #4, #12
   a6fa4:	b8256823 	str	w3, [x1, x5]
   a6fa8:	b8656823 	ldr	w3, [x1, x5]
   a6fac:	330c2d03 	bfi	w3, w8, #20, #12
   a6fb0:	b8256823 	str	w3, [x1, x5]
   a6fb4:	b8676801 	ldr	w1, [x0, x7]
   a6fb8:	33001c41 	bfxil	w1, w2, #0, #8
   a6fbc:	b8276801 	str	w1, [x0, x7]
   a6fc0:	b8666801 	ldr	w1, [x0, x6]
   a6fc4:	33001c81 	bfxil	w1, w4, #0, #8
   a6fc8:	b8266801 	str	w1, [x0, x6]
   a6fcc:	d65f03c0 	ret

00000000000a6fd0 <CBcmPCIeHostBridge::pcie_setup()>:
   a6fd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6fd4:	910003fd 	mov	x29, sp
   a6fd8:	52800021 	mov	w1, #0x1                   	// #1
   a6fdc:	a9421404 	ldp	x4, x5, [x0, #32]
   a6fe0:	a90153f3 	stp	x19, x20, [sp, #16]
   a6fe4:	aa0003f3 	mov	x19, x0
   a6fe8:	b9800083 	ldrsw	x3, [x4]
   a6fec:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6ff0:	f9400802 	ldr	x2, [x0, #16]
   a6ff4:	294000a7 	ldp	w7, w0, [x5]
   a6ff8:	f9400666 	ldr	x6, [x19, #8]
   a6ffc:	b8626865 	ldr	w5, [x3, x2]
   a7000:	1ac02020 	lsl	w0, w1, w0
   a7004:	4a050000 	eor	w0, w0, w5
   a7008:	0a070000 	and	w0, w0, w7
   a700c:	4a050000 	eor	w0, w0, w5
   a7010:	b8226860 	str	w0, [x3, x2]
   a7014:	b9800081 	ldrsw	x1, [x4]
   a7018:	b8626860 	ldr	w0, [x3, x2]
   a701c:	b8626823 	ldr	w3, [x1, x2]
   a7020:	2a2303e0 	mvn	w0, w3
   a7024:	12000000 	and	w0, w0, #0x1
   a7028:	4a030000 	eor	w0, w0, w3
   a702c:	b8226820 	str	w0, [x1, x2]
   a7030:	b8626820 	ldr	w0, [x1, x2]
   a7034:	b4001a66 	cbz	x6, a7380 <CBcmPCIeHostBridge::pcie_setup()+0x3b0>
   a7038:	52800c80 	mov	w0, #0x64                  	// #100
   a703c:	97fff4d5 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   a7040:	a9420e62 	ldp	x2, x3, [x19, #32]
   a7044:	d2884081 	mov	x1, #0x4204                	// #16900
   a7048:	a9408264 	ldp	x4, x0, [x19, #8]
   a704c:	b9800042 	ldrsw	x2, [x2]
   a7050:	b9400063 	ldr	w3, [x3]
   a7054:	b8606845 	ldr	w5, [x2, x0]
   a7058:	0a2300a3 	bic	w3, w5, w3
   a705c:	b8206843 	str	w3, [x2, x0]
   a7060:	b8606842 	ldr	w2, [x2, x0]
   a7064:	b8616802 	ldr	w2, [x0, x1]
   a7068:	12047842 	and	w2, w2, #0xf7ffffff
   a706c:	b8216802 	str	w2, [x0, x1]
   a7070:	b8616800 	ldr	w0, [x0, x1]
   a7074:	b4001864 	cbz	x4, a7380 <CBcmPCIeHostBridge::pcie_setup()+0x3b0>
   a7078:	52800c80 	mov	w0, #0x64                  	// #100
   a707c:	97fff4c5 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   a7080:	f9400a61 	ldr	x1, [x19, #16]
   a7084:	d2880d80 	mov	x0, #0x406c                	// #16492
   a7088:	d2880102 	mov	x2, #0x4008                	// #16392
   a708c:	52860003 	mov	w3, #0x3000                	// #12288
   a7090:	b8606820 	ldr	w0, [x1, x0]
   a7094:	8b020028 	add	x8, x1, x2
   a7098:	12003c00 	and	w0, w0, #0xffff
   a709c:	b9001a60 	str	w0, [x19, #24]
   a70a0:	b8226823 	str	w3, [x1, x2]
   a70a4:	b9406a60 	ldr	w0, [x19, #104]
   a70a8:	7100041f 	cmp	w0, #0x1
   a70ac:	54001781 	b.ne	a739c <CBcmPCIeHostBridge::pcie_setup()+0x3cc>  // b.any
   a70b0:	f9403262 	ldr	x2, [x19, #96]
   a70b4:	b9007a60 	str	w0, [x19, #120]
   a70b8:	f9402a66 	ldr	x6, [x19, #80]
   a70bc:	d1000440 	sub	x0, x2, #0x1
   a70c0:	f9003a62 	str	x2, [x19, #112]
   a70c4:	ea06001f 	tst	x0, x6
   a70c8:	54001761 	b.ne	a73b4 <CBcmPCIeHostBridge::pcie_setup()+0x3e4>  // b.any
   a70cc:	b27e77e0 	mov	x0, #0xfffffffc            	// #4294967292
   a70d0:	eb0000df 	cmp	x6, x0
   a70d4:	54000b09 	b.ls	a7234 <CBcmPCIeHostBridge::pcie_setup()+0x264>  // b.plast
   a70d8:	f100045f 	cmp	x2, #0x1
   a70dc:	f9004260 	str	x0, [x19, #128]
   a70e0:	121b68c7 	and	w7, w6, #0xffffffe0
   a70e4:	d2800025 	mov	x5, #0x1                   	// #1
   a70e8:	52800000 	mov	w0, #0x0                   	// #0
   a70ec:	54001709 	b.ls	a73cc <CBcmPCIeHostBridge::pcie_setup()+0x3fc>  // b.plast
   a70f0:	2a0003e4 	mov	w4, w0
   a70f4:	11000400 	add	w0, w0, #0x1
   a70f8:	9ac020a3 	lsl	x3, x5, x0
   a70fc:	eb03005f 	cmp	x2, x3
   a7100:	54ffff88 	b.hi	a70f0 <CBcmPCIeHostBridge::pcie_setup()+0x120>  // b.pmore
   a7104:	51002c80 	sub	w0, w4, #0xb
   a7108:	71000c1f 	cmp	w0, #0x3
   a710c:	540009e9 	b.ls	a7248 <CBcmPCIeHostBridge::pcie_setup()+0x278>  // b.plast
   a7110:	51003c80 	sub	w0, w4, #0xf
   a7114:	51003884 	sub	w4, w4, #0xe
   a7118:	7100581f 	cmp	w0, #0x16
   a711c:	2a0400e4 	orr	w4, w7, w4
   a7120:	1a873087 	csel	w7, w4, w7, cc  // cc = lo, ul, last
   a7124:	d2880684 	mov	x4, #0x4034                	// #16436
   a7128:	d360fcc6 	lsr	x6, x6, #32
   a712c:	d2880703 	mov	x3, #0x4038                	// #16440
   a7130:	52800000 	mov	w0, #0x0                   	// #0
   a7134:	d2800025 	mov	x5, #0x1                   	// #1
   a7138:	b8246827 	str	w7, [x1, x4]
   a713c:	b8236826 	str	w6, [x1, x3]
   a7140:	2a0003e3 	mov	w3, w0
   a7144:	11000400 	add	w0, w0, #0x1
   a7148:	9ac020a4 	lsl	x4, x5, x0
   a714c:	eb04005f 	cmp	x2, x4
   a7150:	54ffff88 	b.hi	a7140 <CBcmPCIeHostBridge::pcie_setup()+0x170>  // b.pmore
   a7154:	51003863 	sub	w3, w3, #0xe
   a7158:	53051063 	lsl	w3, w3, #27
   a715c:	b9400100 	ldr	w0, [x8]
   a7160:	33006803 	bfxil	w3, w0, #0, #27
   a7164:	b9000103 	str	w3, [x8]
   a7168:	b9407a74 	ldr	w20, [x19, #120]
   a716c:	7100069f 	cmp	w20, #0x1
   a7170:	54001401 	b.ne	a73f0 <CBcmPCIeHostBridge::pcie_setup()+0x420>  // b.any
   a7174:	d2880587 	mov	x7, #0x402c                	// #16428
   a7178:	d2880786 	mov	x6, #0x403c                	// #16444
   a717c:	f9401268 	ldr	x8, [x19, #32]
   a7180:	12800004 	mov	w4, #0xffffffff            	// #-1
   a7184:	d2886105 	mov	x5, #0x4308                	// #17160
   a7188:	b8676822 	ldr	w2, [x1, x7]
   a718c:	d2886203 	mov	x3, #0x4310                	// #17168
   a7190:	d2880d16 	mov	x22, #0x4068                	// #16488
   a7194:	52800000 	mov	w0, #0x0                   	// #0
   a7198:	121b6842 	and	w2, w2, #0xffffffe0
   a719c:	b8276822 	str	w2, [x1, x7]
   a71a0:	b8666822 	ldr	w2, [x1, x6]
   a71a4:	121b6842 	and	w2, w2, #0xffffffe0
   a71a8:	b8266822 	str	w2, [x1, x6]
   a71ac:	b8256824 	str	w4, [x1, x5]
   a71b0:	b8656822 	ldr	w2, [x1, x5]
   a71b4:	b8236824 	str	w4, [x1, x3]
   a71b8:	8b160024 	add	x4, x1, x22
   a71bc:	b8636822 	ldr	w2, [x1, x3]
   a71c0:	b940b823 	ldr	w3, [x1, #184]
   a71c4:	7941b822 	ldrh	w2, [x1, #220]
   a71c8:	121c6c63 	and	w3, w3, #0xfffffff0
   a71cc:	321f0063 	orr	w3, w3, #0x2
   a71d0:	121c2c42 	and	w2, w2, #0xfff0
   a71d4:	b900b823 	str	w3, [x1, #184]
   a71d8:	321f0042 	orr	w2, w2, #0x2
   a71dc:	b9800103 	ldrsw	x3, [x8]
   a71e0:	7901b822 	strh	w2, [x1, #220]
   a71e4:	b8616862 	ldr	w2, [x3, x1]
   a71e8:	121f7842 	and	w2, w2, #0xfffffffe
   a71ec:	b8216862 	str	w2, [x3, x1]
   a71f0:	b8616862 	ldr	w2, [x3, x1]
   a71f4:	b8766822 	ldr	w2, [x1, x22]
   a71f8:	53047c43 	lsr	w3, w2, #4
   a71fc:	0a421462 	and	w2, w3, w2, lsr #5
   a7200:	37000442 	tbnz	w2, #0, a7288 <CBcmPCIeHostBridge::pcie_setup()+0x2b8>
   a7204:	d503201f 	nop
   a7208:	0b000295 	add	w21, w20, w0
   a720c:	f9400661 	ldr	x1, [x19, #8]
   a7210:	710192bf 	cmp	w21, #0x64
   a7214:	5400020d 	b.le	a7254 <CBcmPCIeHostBridge::pcie_setup()+0x284>
   a7218:	b5000b61 	cbnz	x1, a7384 <CBcmPCIeHostBridge::pcie_setup()+0x3b4>
   a721c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7220:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7224:	9120e021 	add	x1, x1, #0x838
   a7228:	9121e000 	add	x0, x0, #0x878
   a722c:	52806c62 	mov	w2, #0x363                 	// #867
   a7230:	97ffd514 	bl	9c680 <assertion_failed>
   a7234:	8b060043 	add	x3, x2, x6
   a7238:	b27e87e4 	mov	x4, #0xffffffffc           	// #68719476732
   a723c:	eb00007f 	cmp	x3, x0
   a7240:	9a849000 	csel	x0, x0, x4, ls  // ls = plast
   a7244:	17ffffa5 	b	a70d8 <CBcmPCIeHostBridge::pcie_setup()+0x108>
   a7248:	11004484 	add	w4, w4, #0x11
   a724c:	2a0400e7 	orr	w7, w7, w4
   a7250:	17ffffb5 	b	a7124 <CBcmPCIeHostBridge::pcie_setup()+0x154>
   a7254:	b4fffe41 	cbz	x1, a721c <CBcmPCIeHostBridge::pcie_setup()+0x24c>
   a7258:	2a1403e0 	mov	w0, w20
   a725c:	531f7a94 	lsl	w20, w20, #1
   a7260:	97fff444 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   a7264:	710192bf 	cmp	w21, #0x64
   a7268:	54000940 	b.eq	a7390 <CBcmPCIeHostBridge::pcie_setup()+0x3c0>  // b.none
   a726c:	f9400a61 	ldr	x1, [x19, #16]
   a7270:	2a1503e0 	mov	w0, w21
   a7274:	b8766822 	ldr	w2, [x1, x22]
   a7278:	8b160024 	add	x4, x1, x22
   a727c:	53047c43 	lsr	w3, w2, #4
   a7280:	0a421462 	and	w2, w3, w2, lsr #5
   a7284:	3607fc22 	tbz	w2, #0, a7208 <CBcmPCIeHostBridge::pcie_setup()+0x238>
   a7288:	b9400080 	ldr	w0, [x4]
   a728c:	53047c02 	lsr	w2, w0, #4
   a7290:	0a401440 	and	w0, w2, w0, lsr #5
   a7294:	36000ce0 	tbz	w0, #0, a7430 <CBcmPCIeHostBridge::pcie_setup()+0x460>
   a7298:	b9400080 	ldr	w0, [x4]
   a729c:	36380b60 	tbz	w0, #7, a7408 <CBcmPCIeHostBridge::pcie_setup()+0x438>
   a72a0:	b9404a60 	ldr	w0, [x19, #72]
   a72a4:	7100001f 	cmp	w0, #0x0
   a72a8:	540000ed 	b.le	a72c4 <CBcmPCIeHostBridge::pcie_setup()+0x2f4>
   a72ac:	52800001 	mov	w1, #0x0                   	// #0
   a72b0:	aa1303e0 	mov	x0, x19
   a72b4:	a9430a63 	ldp	x3, x2, [x19, #48]
   a72b8:	f9402264 	ldr	x4, [x19, #64]
   a72bc:	97ffff25 	bl	a6f50 <CBcmPCIeHostBridge::pcie_set_outbound_win(unsigned int, unsigned long, unsigned long, unsigned long)>
   a72c0:	f9400a61 	ldr	x1, [x19, #16]
   a72c4:	52808002 	mov	w2, #0x400                 	// #1024
   a72c8:	72a000c2 	movk	w2, #0x6, lsl #16
   a72cc:	b9443c20 	ldr	w0, [x1, #1084]
   a72d0:	12081c00 	and	w0, w0, #0xff000000
   a72d4:	2a020000 	orr	w0, w0, w2
   a72d8:	b9043c20 	str	w0, [x1, #1084]
   a72dc:	b9443c20 	ldr	w0, [x1, #1084]
   a72e0:	79417c25 	ldrh	w5, [x1, #190]
   a72e4:	12003cb4 	and	w20, w5, #0xffff
   a72e8:	d34424b5 	ubfx	x21, x5, #4, #6
   a72ec:	97ffde79 	bl	9ecd0 <CLogger::Get()>
   a72f0:	12000e82 	and	w2, w20, #0xf
   a72f4:	51000442 	sub	w2, w2, #0x1
   a72f8:	7100085f 	cmp	w2, #0x2
   a72fc:	54000388 	b.hi	a736c <CBcmPCIeHostBridge::pcie_setup()+0x39c>  // b.pmore
   a7300:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7304:	912b8021 	add	x1, x1, #0xae0
   a7308:	91008023 	add	x3, x1, #0x20
   a730c:	f8625864 	ldr	x4, [x3, w2, uxtw #3]
   a7310:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7314:	91006021 	add	x1, x1, #0x18
   a7318:	9126a063 	add	x3, x3, #0x9a8
   a731c:	52800062 	mov	w2, #0x3                   	// #3
   a7320:	2a1503e5 	mov	w5, w21
   a7324:	97ffdda7 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7328:	f9400a61 	ldr	x1, [x19, #16]
   a732c:	d2884083 	mov	x3, #0x4204                	// #16900
   a7330:	52800000 	mov	w0, #0x0                   	// #0
   a7334:	b9418822 	ldr	w2, [x1, #392]
   a7338:	121c7442 	and	w2, w2, #0xfffffff3
   a733c:	b9018822 	str	w2, [x1, #392]
   a7340:	b9418822 	ldr	w2, [x1, #392]
   a7344:	b8636824 	ldr	w4, [x1, x3]
   a7348:	2a2403e2 	mvn	w2, w4
   a734c:	121f0042 	and	w2, w2, #0x2
   a7350:	4a040042 	eor	w2, w2, w4
   a7354:	b8236822 	str	w2, [x1, x3]
   a7358:	b8636821 	ldr	w1, [x1, x3]
   a735c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7360:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7364:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7368:	d65f03c0 	ret
   a736c:	90000064 	adrp	x4, b3000 <vtable for CSerialDevice+0x18>
   a7370:	91246084 	add	x4, x4, #0x918
   a7374:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7378:	912b8021 	add	x1, x1, #0xae0
   a737c:	17ffffe5 	b	a7310 <CBcmPCIeHostBridge::pcie_setup()+0x340>
   a7380:	97fffe64 	bl	a6d10 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int) [clone .part.0]>
   a7384:	52800c81 	mov	w1, #0x64                  	// #100
   a7388:	4b000020 	sub	w0, w1, w0
   a738c:	97fff3f9 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   a7390:	f9400a61 	ldr	x1, [x19, #16]
   a7394:	8b160024 	add	x4, x1, x22
   a7398:	17ffffbc 	b	a7288 <CBcmPCIeHostBridge::pcie_setup()+0x2b8>
   a739c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a73a0:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a73a4:	9120e021 	add	x1, x1, #0x838
   a73a8:	91248000 	add	x0, x0, #0x920
   a73ac:	52803142 	mov	w2, #0x18a                 	// #394
   a73b0:	97ffd4b4 	bl	9c680 <assertion_failed>
   a73b4:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a73b8:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a73bc:	9120e021 	add	x1, x1, #0x838
   a73c0:	9124e000 	add	x0, x0, #0x938
   a73c4:	52803282 	mov	w2, #0x194                 	// #404
   a73c8:	97ffd4ae 	bl	9c680 <assertion_failed>
   a73cc:	d2880683 	mov	x3, #0x4034                	// #16436
   a73d0:	d360fcc6 	lsr	x6, x6, #32
   a73d4:	d2880700 	mov	x0, #0x4038                	// #16440
   a73d8:	f100005f 	cmp	x2, #0x0
   a73dc:	b8236827 	str	w7, [x1, x3]
   a73e0:	52af0003 	mov	w3, #0x78000000            	// #2013265920
   a73e4:	5a830463 	cneg	w3, w3, ne  // ne = any
   a73e8:	b8206826 	str	w6, [x1, x0]
   a73ec:	17ffff5c 	b	a715c <CBcmPCIeHostBridge::pcie_setup()+0x18c>
   a73f0:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a73f4:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a73f8:	9120e021 	add	x1, x1, #0x838
   a73fc:	91258000 	add	x0, x0, #0x960
   a7400:	52803542 	mov	w2, #0x1aa                 	// #426
   a7404:	97ffd49f 	bl	9c680 <assertion_failed>
   a7408:	97ffde32 	bl	9ecd0 <CLogger::Get()>
   a740c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7410:	912b8021 	add	x1, x1, #0xae0
   a7414:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7418:	91006021 	add	x1, x1, #0x18
   a741c:	91260063 	add	x3, x3, #0x980
   a7420:	52800022 	mov	w2, #0x1                   	// #1
   a7424:	97ffdd67 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7428:	12800000 	mov	w0, #0xffffffff            	// #-1
   a742c:	17ffffcc 	b	a735c <CBcmPCIeHostBridge::pcie_setup()+0x38c>
   a7430:	97ffde28 	bl	9ecd0 <CLogger::Get()>
   a7434:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7438:	912b8021 	add	x1, x1, #0xae0
   a743c:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7440:	91006021 	add	x1, x1, #0x18
   a7444:	9125c063 	add	x3, x3, #0x970
   a7448:	52800022 	mov	w2, #0x1                   	// #1
   a744c:	97ffdd5d 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7450:	12800000 	mov	w0, #0xffffffff            	// #-1
   a7454:	17ffffc2 	b	a735c <CBcmPCIeHostBridge::pcie_setup()+0x38c>
   a7458:	d503201f 	nop
   a745c:	d503201f 	nop

00000000000a7460 <CBcmPCIeHostBridge::pcie_probe()>:
   a7460:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7464:	910003fd 	mov	x29, sp
   a7468:	b9404802 	ldr	w2, [x0, #72]
   a746c:	35000202 	cbnz	w2, a74ac <CBcmPCIeHostBridge::pcie_probe()+0x4c>
   a7470:	d2c000c5 	mov	x5, #0x600000000           	// #25769803776
   a7474:	d2bf0006 	mov	x6, #0xf8000000            	// #4160749568
   a7478:	b9406803 	ldr	w3, [x0, #104]
   a747c:	d2a08004 	mov	x4, #0x4000000             	// #67108864
   a7480:	52800022 	mov	w2, #0x1                   	// #1
   a7484:	a9031406 	stp	x6, x5, [x0, #48]
   a7488:	f9002004 	str	x4, [x0, #64]
   a748c:	b9004802 	str	w2, [x0, #72]
   a7490:	350001a3 	cbnz	w3, a74c4 <CBcmPCIeHostBridge::pcie_probe()+0x64>
   a7494:	d2c00023 	mov	x3, #0x100000000           	// #4294967296
   a7498:	a9057c1f 	stp	xzr, xzr, [x0, #80]
   a749c:	f9003003 	str	x3, [x0, #96]
   a74a0:	b9006802 	str	w2, [x0, #104]
   a74a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a74a8:	17fffeca 	b	a6fd0 <CBcmPCIeHostBridge::pcie_setup()>
   a74ac:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a74b0:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a74b4:	9120e021 	add	x1, x1, #0x838
   a74b8:	9123a000 	add	x0, x0, #0x8e8
   a74bc:	528047c2 	mov	w2, #0x23e                 	// #574
   a74c0:	97ffd470 	bl	9c680 <assertion_failed>
   a74c4:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a74c8:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a74cc:	9120e021 	add	x1, x1, #0x838
   a74d0:	91240000 	add	x0, x0, #0x900
   a74d4:	52804962 	mov	w2, #0x24b                 	// #587
   a74d8:	97ffd46a 	bl	9c680 <assertion_failed>
   a74dc:	d503201f 	nop

00000000000a74e0 <CBcmPCIeHostBridge::Initialize()>:
   a74e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a74e4:	910003fd 	mov	x29, sp
   a74e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a74ec:	aa0003f4 	mov	x20, x0
   a74f0:	97ffffdc 	bl	a7460 <CBcmPCIeHostBridge::pcie_probe()>
   a74f4:	35000140 	cbnz	w0, a751c <CBcmPCIeHostBridge::Initialize()+0x3c>
   a74f8:	aa1403e0 	mov	x0, x20
   a74fc:	52800034 	mov	w20, #0x1                   	// #1
   a7500:	97fffe44 	bl	a6e10 <CBcmPCIeHostBridge::enable_bridge()>
   a7504:	2a0003f3 	mov	w19, w0
   a7508:	35000280 	cbnz	w0, a7558 <CBcmPCIeHostBridge::Initialize()+0x78>
   a750c:	2a1403e0 	mov	w0, w20
   a7510:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7514:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7518:	d65f03c0 	ret
   a751c:	2a0003f3 	mov	w19, w0
   a7520:	52800014 	mov	w20, #0x0                   	// #0
   a7524:	97ffddeb 	bl	9ecd0 <CLogger::Get()>
   a7528:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a752c:	912b8021 	add	x1, x1, #0xae0
   a7530:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7534:	2a1303e4 	mov	w4, w19
   a7538:	91006021 	add	x1, x1, #0x18
   a753c:	91270063 	add	x3, x3, #0x9c0
   a7540:	52800022 	mov	w2, #0x1                   	// #1
   a7544:	97ffdd1f 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7548:	2a1403e0 	mov	w0, w20
   a754c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7550:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7554:	d65f03c0 	ret
   a7558:	97ffddde 	bl	9ecd0 <CLogger::Get()>
   a755c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7560:	912b8021 	add	x1, x1, #0xae0
   a7564:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7568:	2a1303e4 	mov	w4, w19
   a756c:	2a1403e2 	mov	w2, w20
   a7570:	91006021 	add	x1, x1, #0x18
   a7574:	9127a063 	add	x3, x3, #0x9e8
   a7578:	52800014 	mov	w20, #0x0                   	// #0
   a757c:	97ffdd11 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7580:	2a1403e0 	mov	w0, w20
   a7584:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7588:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a758c:	d65f03c0 	ret

00000000000a7590 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)>:
   a7590:	aa0003e4 	mov	x4, x0
   a7594:	340001c1 	cbz	w1, a75cc <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)+0x3c>
   a7598:	f9401000 	ldr	x0, [x0, #32]
   a759c:	53140845 	ubfiz	w5, w2, #12, #3
   a75a0:	13037c42 	asr	w2, w2, #3
   a75a4:	2a0150a1 	orr	w1, w5, w1, lsl #20
   a75a8:	53111042 	ubfiz	w2, w2, #15, #5
   a75ac:	f9400884 	ldr	x4, [x4, #16]
   a75b0:	8b23c083 	add	x3, x4, w3, sxtw
   a75b4:	2a020021 	orr	w1, w1, w2
   a75b8:	b9800402 	ldrsw	x2, [x0, #4]
   a75bc:	b8246841 	str	w1, [x2, x4]
   a75c0:	b9800800 	ldrsw	x0, [x0, #8]
   a75c4:	8b030000 	add	x0, x0, x3
   a75c8:	d65f03c0 	ret
   a75cc:	f27d105f 	tst	x2, #0xf8
   a75d0:	d2800000 	mov	x0, #0x0                   	// #0
   a75d4:	54ffffa1 	b.ne	a75c8 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)+0x38>  // b.any
   a75d8:	f9400880 	ldr	x0, [x4, #16]
   a75dc:	8b23c000 	add	x0, x0, w3, sxtw
   a75e0:	d65f03c0 	ret
   a75e4:	d503201f 	nop
   a75e8:	d503201f 	nop
   a75ec:	d503201f 	nop

00000000000a75f0 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)>:
   a75f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a75f4:	910003fd 	mov	x29, sp
   a75f8:	a90153f3 	stp	x19, x20, [sp, #16]
   a75fc:	aa0003f4 	mov	x20, x0
   a7600:	a9025bf5 	stp	x21, x22, [sp, #32]
   a7604:	2a0103f5 	mov	w21, w1
   a7608:	2a0203f6 	mov	w22, w2
   a760c:	f9400813 	ldr	x19, [x0, #16]
   a7610:	97ffddb0 	bl	9ecd0 <CLogger::Get()>
   a7614:	12800004 	mov	w4, #0xffffffff            	// #-1
   a7618:	b4000073 	cbz	x19, a7624 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0x34>
   a761c:	79400e64 	ldrh	w4, [x19, #6]
   a7620:	12003c84 	and	w4, w4, #0xffff
   a7624:	90000073 	adrp	x19, b3000 <vtable for CSerialDevice+0x18>
   a7628:	912b8273 	add	x19, x19, #0xae0
   a762c:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7630:	91006261 	add	x1, x19, #0x18
   a7634:	91282063 	add	x3, x3, #0xa08
   a7638:	52800082 	mov	w2, #0x4                   	// #4
   a763c:	97ffdce1 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a7640:	71007ebf 	cmp	w21, #0x1f
   a7644:	540002c8 	b.hi	a769c <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0xac>  // b.pmore
   a7648:	71001edf 	cmp	w22, #0x7
   a764c:	54000348 	b.hi	a76b4 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0xc4>  // b.pmore
   a7650:	2a150ec2 	orr	w2, w22, w21, lsl #3
   a7654:	aa1403e0 	mov	x0, x20
   a7658:	52800003 	mov	w3, #0x0                   	// #0
   a765c:	52800021 	mov	w1, #0x1                   	// #1
   a7660:	97ffffcc 	bl	a7590 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)>
   a7664:	aa0003f4 	mov	x20, x0
   a7668:	97ffdd9a 	bl	9ecd0 <CLogger::Get()>
   a766c:	12800004 	mov	w4, #0xffffffff            	// #-1
   a7670:	b4000074 	cbz	x20, a767c <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0x8c>
   a7674:	79400e84 	ldrh	w4, [x20, #6]
   a7678:	12003c84 	and	w4, w4, #0xffff
   a767c:	90000063 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a7680:	91006261 	add	x1, x19, #0x18
   a7684:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7688:	91290063 	add	x3, x3, #0xa40
   a768c:	52800082 	mov	w2, #0x4                   	// #4
   a7690:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7694:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7698:	17ffdcca 	b	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a769c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a76a0:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a76a4:	9120e021 	add	x1, x1, #0x838
   a76a8:	91288000 	add	x0, x0, #0xa20
   a76ac:	52802782 	mov	w2, #0x13c                 	// #316
   a76b0:	97ffd3f4 	bl	9c680 <assertion_failed>
   a76b4:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a76b8:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a76bc:	9120e021 	add	x1, x1, #0x838
   a76c0:	9128c000 	add	x0, x0, #0xa30
   a76c4:	528027a2 	mov	w2, #0x13d                 	// #317
   a76c8:	97ffd3ee 	bl	9c680 <assertion_failed>
   a76cc:	d503201f 	nop

00000000000a76d0 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)>:
   a76d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a76d4:	910003fd 	mov	x29, sp
   a76d8:	b4000300 	cbz	x0, a7738 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x68>
   a76dc:	12001c21 	and	w1, w1, #0xff
   a76e0:	34000381 	cbz	w1, a7750 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x80>
   a76e4:	79400c02 	ldrh	w2, [x0, #6]
   a76e8:	aa0003e3 	mov	x3, x0
   a76ec:	d2800000 	mov	x0, #0x0                   	// #0
   a76f0:	362001a2 	tbz	w2, #4, a7724 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x54>
   a76f4:	3940d062 	ldrb	w2, [x3, #52]
   a76f8:	72001c42 	ands	w2, w2, #0xff
   a76fc:	540000a1 	b.ne	a7710 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x40>  // b.any
   a7700:	14000009 	b	a7724 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x54>
   a7704:	39400402 	ldrb	w2, [x0, #1]
   a7708:	72001c42 	ands	w2, w2, #0xff
   a770c:	54000100 	b.eq	a772c <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x5c>  // b.none
   a7710:	92401c44 	and	x4, x2, #0xff
   a7714:	8b220060 	add	x0, x3, w2, uxtb
   a7718:	38636882 	ldrb	w2, [x4, x3]
   a771c:	6b22003f 	cmp	w1, w2, uxtb
   a7720:	54ffff21 	b.ne	a7704 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x34>  // b.any
   a7724:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7728:	d65f03c0 	ret
   a772c:	d2800000 	mov	x0, #0x0                   	// #0
   a7730:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7734:	d65f03c0 	ret
   a7738:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a773c:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7740:	9120e021 	add	x1, x1, #0x838
   a7744:	91296000 	add	x0, x0, #0xa58
   a7748:	52805142 	mov	w2, #0x28a                 	// #650
   a774c:	97ffd3cd 	bl	9c680 <assertion_failed>
   a7750:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7754:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7758:	9120e021 	add	x1, x1, #0x838
   a775c:	9129a000 	add	x0, x0, #0xa68
   a7760:	52805162 	mov	w2, #0x28b                 	// #651
   a7764:	97ffd3c7 	bl	9c680 <assertion_failed>
   a7768:	d503201f 	nop
   a776c:	d503201f 	nop

00000000000a7770 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)>:
   a7770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7774:	910003fd 	mov	x29, sp
   a7778:	6b4163ff 	cmp	wzr, w1, lsr #24
   a777c:	a90153f3 	stp	x19, x20, [sp, #16]
   a7780:	540005e1 	b.ne	a783c <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xcc>  // b.any
   a7784:	71007c5f 	cmp	w2, #0x1f
   a7788:	54000668 	b.hi	a7854 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xe4>  // b.pmore
   a778c:	71001c7f 	cmp	w3, #0x7
   a7790:	540006e8 	b.hi	a786c <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xfc>  // b.pmore
   a7794:	2a020c62 	orr	w2, w3, w2, lsl #3
   a7798:	2a0103e6 	mov	w6, w1
   a779c:	52800003 	mov	w3, #0x0                   	// #0
   a77a0:	52800021 	mov	w1, #0x1                   	// #1
   a77a4:	aa0003f4 	mov	x20, x0
   a77a8:	97ffff7a 	bl	a7590 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)>
   a77ac:	aa0003f3 	mov	x19, x0
   a77b0:	b40006a0 	cbz	x0, a7884 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x114>
   a77b4:	b9400801 	ldr	w1, [x0, #8]
   a77b8:	6b4120df 	cmp	w6, w1, lsr #8
   a77bc:	54000641 	b.ne	a7884 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x114>  // b.any
   a77c0:	39403801 	ldrb	w1, [x0, #14]
   a77c4:	72001c3f 	tst	w1, #0xff
   a77c8:	540005e1 	b.ne	a7884 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x114>  // b.any
   a77cc:	52800203 	mov	w3, #0x10                  	// #16
   a77d0:	52800082 	mov	w2, #0x4                   	// #4
   a77d4:	72bf0002 	movk	w2, #0xf800, lsl #16
   a77d8:	528000a1 	mov	w1, #0x5                   	// #5
   a77dc:	39003003 	strb	w3, [x0, #12]
   a77e0:	b9001002 	str	w2, [x0, #16]
   a77e4:	b900141f 	str	wzr, [x0, #20]
   a77e8:	97ffffba 	bl	a76d0 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)>
   a77ec:	aa0003e2 	mov	x2, x0
   a77f0:	b40004a0 	cbz	x0, a7884 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x114>
   a77f4:	f9404281 	ldr	x1, [x20, #128]
   a77f8:	528ca804 	mov	w4, #0x6540                	// #25920
   a77fc:	5280a8c3 	mov	w3, #0x546                 	// #1350
   a7800:	52800000 	mov	w0, #0x0                   	// #0
   a7804:	d360fc25 	lsr	x5, x1, #32
   a7808:	b9000441 	str	w1, [x2, #4]
   a780c:	b9000845 	str	w5, [x2, #8]
   a7810:	79001844 	strh	w4, [x2, #12]
   a7814:	39400841 	ldrb	w1, [x2, #2]
   a7818:	d3410c21 	ubfx	x1, x1, #1, #3
   a781c:	531c6c21 	lsl	w1, w1, #4
   a7820:	32196421 	orr	w1, w1, #0xffffff81
   a7824:	12001c21 	and	w1, w1, #0xff
   a7828:	39000841 	strb	w1, [x2, #2]
   a782c:	79000a63 	strh	w3, [x19, #4]
   a7830:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7834:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7838:	d65f03c0 	ret
   a783c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7840:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7844:	9120e021 	add	x1, x1, #0x838
   a7848:	9129e000 	add	x0, x0, #0xa78
   a784c:	52804282 	mov	w2, #0x214                 	// #532
   a7850:	97ffd38c 	bl	9c680 <assertion_failed>
   a7854:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7858:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a785c:	9120e021 	add	x1, x1, #0x838
   a7860:	91288000 	add	x0, x0, #0xa20
   a7864:	528042a2 	mov	w2, #0x215                 	// #533
   a7868:	97ffd386 	bl	9c680 <assertion_failed>
   a786c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7870:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7874:	9120e021 	add	x1, x1, #0x838
   a7878:	9128c000 	add	x0, x0, #0xa30
   a787c:	528042c2 	mov	w2, #0x216                 	// #534
   a7880:	97ffd380 	bl	9c680 <assertion_failed>
   a7884:	12800000 	mov	w0, #0xffffffff            	// #-1
   a7888:	17ffffea 	b	a7830 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xc0>
   a788c:	d503201f 	nop

00000000000a7890 <CBcmPCIeHostBridge::EnableDevice(unsigned int, unsigned int, unsigned int)>:
   a7890:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7894:	910003fd 	mov	x29, sp
   a7898:	97ffffb6 	bl	a7770 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)>
   a789c:	7100001f 	cmp	w0, #0x0
   a78a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a78a4:	1a9f17e0 	cset	w0, eq  // eq = none
   a78a8:	d65f03c0 	ret
   a78ac:	d503201f 	nop

00000000000a78b0 <CBcmPCIeHostBridge::pcie_bridge_sw_init_set(unsigned int)>:
   a78b0:	a9420c02 	ldp	x2, x3, [x0, #32]
   a78b4:	f9400800 	ldr	x0, [x0, #16]
   a78b8:	b9800042 	ldrsw	x2, [x2]
   a78bc:	29401464 	ldp	w4, w5, [x3]
   a78c0:	b8606843 	ldr	w3, [x2, x0]
   a78c4:	1ac52021 	lsl	w1, w1, w5
   a78c8:	4a030021 	eor	w1, w1, w3
   a78cc:	0a040021 	and	w1, w1, w4
   a78d0:	4a030021 	eor	w1, w1, w3
   a78d4:	b8206841 	str	w1, [x2, x0]
   a78d8:	b8606840 	ldr	w0, [x2, x0]
   a78dc:	d65f03c0 	ret

00000000000a78e0 <CBcmPCIeHostBridge::pcie_perst_set(unsigned int)>:
   a78e0:	f9401002 	ldr	x2, [x0, #32]
   a78e4:	f9400800 	ldr	x0, [x0, #16]
   a78e8:	b9800042 	ldrsw	x2, [x2]
   a78ec:	b8606843 	ldr	w3, [x2, x0]
   a78f0:	33000023 	bfxil	w3, w1, #0, #1
   a78f4:	b8206843 	str	w3, [x2, x0]
   a78f8:	b8606840 	ldr	w0, [x2, x0]
   a78fc:	d65f03c0 	ret

00000000000a7900 <CBcmPCIeHostBridge::pcie_link_up()>:
   a7900:	f9400800 	ldr	x0, [x0, #16]
   a7904:	d2880d01 	mov	x1, #0x4068                	// #16488
   a7908:	b8616800 	ldr	w0, [x0, x1]
   a790c:	53047c01 	lsr	w1, w0, #4
   a7910:	0a401420 	and	w0, w1, w0, lsr #5
   a7914:	12000000 	and	w0, w0, #0x1
   a7918:	d65f03c0 	ret
   a791c:	d503201f 	nop

00000000000a7920 <CBcmPCIeHostBridge::pcie_rc_mode()>:
   a7920:	f9400800 	ldr	x0, [x0, #16]
   a7924:	d2880d01 	mov	x1, #0x4068                	// #16488
   a7928:	b8616800 	ldr	w0, [x0, x1]
   a792c:	53071c00 	ubfx	w0, w0, #7, #1
   a7930:	d65f03c0 	ret
   a7934:	d503201f 	nop
   a7938:	d503201f 	nop
   a793c:	d503201f 	nop

00000000000a7940 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)>:
   a7940:	b9401801 	ldr	w1, [x0, #24]
   a7944:	710c083f 	cmp	w1, #0x302
   a7948:	54000209 	b.ls	a7988 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)+0x48>  // b.plast
   a794c:	a9409c01 	ldp	x1, x7, [x0, #8]
   a7950:	12800008 	mov	w8, #0xffffffff            	// #-1
   a7954:	d2880885 	mov	x5, #0x4044                	// #16452
   a7958:	d2880904 	mov	x4, #0x4048                	// #16456
   a795c:	d2880982 	mov	x2, #0x404c                	// #16460
   a7960:	528ca803 	mov	w3, #0x6540                	// #25920
   a7964:	72bffc03 	movk	w3, #0xffe0, lsl #16
   a7968:	f9400000 	ldr	x0, [x0]
   a796c:	32000026 	orr	w6, w1, #0x1
   a7970:	d360fc21 	lsr	x1, x1, #32
   a7974:	b90014e8 	str	w8, [x7, #20]
   a7978:	b8256806 	str	w6, [x0, x5]
   a797c:	b8246801 	str	w1, [x0, x4]
   a7980:	b8226803 	str	w3, [x0, x2]
   a7984:	d65f03c0 	ret
   a7988:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a798c:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7990:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7994:	9120e021 	add	x1, x1, #0x838
   a7998:	910003fd 	mov	x29, sp
   a799c:	912a4000 	add	x0, x0, #0xa90
   a79a0:	52805b62 	mov	w2, #0x2db                 	// #731
   a79a4:	97ffd337 	bl	9c680 <assertion_failed>
   a79a8:	d503201f 	nop
   a79ac:	d503201f 	nop

00000000000a79b0 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)>:
   a79b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a79b4:	910003fd 	mov	x29, sp
   a79b8:	a90153f3 	stp	x19, x20, [sp, #16]
   a79bc:	f90013f5 	str	x21, [sp, #32]
   a79c0:	b4000481 	cbz	x1, a7a50 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0xa0>
   a79c4:	aa0003f3 	mov	x19, x0
   a79c8:	d2800600 	mov	x0, #0x30                  	// #48
   a79cc:	aa0103f4 	mov	x20, x1
   a79d0:	aa0203f5 	mov	x21, x2
   a79d4:	97fff72b 	bl	a5680 <operator new(unsigned long)>
   a79d8:	d2800602 	mov	x2, #0x30                  	// #48
   a79dc:	52800001 	mov	w1, #0x0                   	// #0
   a79e0:	f9004660 	str	x0, [x19, #136]
   a79e4:	97fff2ab 	bl	a4490 <memset>
   a79e8:	b9401a61 	ldr	w1, [x19, #24]
   a79ec:	a9480e62 	ldp	x2, x3, [x19, #128]
   a79f0:	f9400a64 	ldr	x4, [x19, #16]
   a79f4:	f9400260 	ldr	x0, [x19]
   a79f8:	b9001861 	str	w1, [x3, #24]
   a79fc:	a9025474 	stp	x20, x21, [x3, #32]
   a7a00:	a9000864 	stp	x4, x2, [x3]
   a7a04:	b4000320 	cbz	x0, a7a68 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0xb8>
   a7a08:	f0ffffe2 	adrp	x2, a6000 <CMemorySystem::CMemorySystem(bool)+0x100>
   a7a0c:	91310042 	add	x2, x2, #0xc40
   a7a10:	52801681 	mov	w1, #0xb4                  	// #180
   a7a14:	94000107 	bl	a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a7a18:	b9401a60 	ldr	w0, [x19, #24]
   a7a1c:	710c081f 	cmp	w0, #0x302
   a7a20:	54000309 	b.ls	a7a80 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0xd0>  // b.plast
   a7a24:	f9404660 	ldr	x0, [x19, #136]
   a7a28:	d288a002 	mov	x2, #0x4500                	// #17664
   a7a2c:	f9400001 	ldr	x1, [x0]
   a7a30:	8b020021 	add	x1, x1, x2
   a7a34:	f9000801 	str	x1, [x0, #16]
   a7a38:	97ffffc2 	bl	a7940 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)>
   a7a3c:	52800000 	mov	w0, #0x0                   	// #0
   a7a40:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7a44:	f94013f5 	ldr	x21, [sp, #32]
   a7a48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7a4c:	d65f03c0 	ret
   a7a50:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7a54:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7a58:	9120e021 	add	x1, x1, #0x838
   a7a5c:	912e4000 	add	x0, x0, #0xb90
   a7a60:	52805822 	mov	w2, #0x2c1                 	// #705
   a7a64:	97ffd307 	bl	9c680 <assertion_failed>
   a7a68:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7a6c:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7a70:	9120e021 	add	x1, x1, #0x838
   a7a74:	91222000 	add	x0, x0, #0x888
   a7a78:	528059c2 	mov	w2, #0x2ce                 	// #718
   a7a7c:	97ffd301 	bl	9c680 <assertion_failed>
   a7a80:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7a84:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7a88:	9120e021 	add	x1, x1, #0x838
   a7a8c:	912ac000 	add	x0, x0, #0xab0
   a7a90:	52805a22 	mov	w2, #0x2d1                 	// #721
   a7a94:	97ffd2fb 	bl	9c680 <assertion_failed>
   a7a98:	d503201f 	nop
   a7a9c:	d503201f 	nop

00000000000a7aa0 <CBcmPCIeHostBridge::ConnectMSI(void (*)(unsigned int, void*), void*)>:
   a7aa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7aa4:	910003fd 	mov	x29, sp
   a7aa8:	97ffffc2 	bl	a79b0 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)>
   a7aac:	7100001f 	cmp	w0, #0x0
   a7ab0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7ab4:	1a9f17e0 	cset	w0, eq  // eq = none
   a7ab8:	d65f03c0 	ret
   a7abc:	d503201f 	nop

00000000000a7ac0 <CBcmPCIeHostBridge::cfg_index(int, int, int)>:
   a7ac0:	121e7442 	and	w2, w2, #0xfffffffc
   a7ac4:	53141c21 	ubfiz	w1, w1, #12, #8
   a7ac8:	2a005040 	orr	w0, w2, w0, lsl #20
   a7acc:	2a000020 	orr	w0, w1, w0
   a7ad0:	d65f03c0 	ret
   a7ad4:	d503201f 	nop
   a7ad8:	d503201f 	nop
   a7adc:	d503201f 	nop

00000000000a7ae0 <CBcmPCIeHostBridge::set_gen(unsigned long, int)>:
   a7ae0:	b940b803 	ldr	w3, [x0, #184]
   a7ae4:	7941b802 	ldrh	w2, [x0, #220]
   a7ae8:	121c6c63 	and	w3, w3, #0xfffffff0
   a7aec:	2a010063 	orr	w3, w3, w1
   a7af0:	121c2c42 	and	w2, w2, #0xfff0
   a7af4:	2a010041 	orr	w1, w2, w1
   a7af8:	b900b803 	str	w3, [x0, #184]
   a7afc:	12003c21 	and	w1, w1, #0xffff
   a7b00:	7901b801 	strh	w1, [x0, #220]
   a7b04:	d65f03c0 	ret
   a7b08:	d503201f 	nop
   a7b0c:	d503201f 	nop

00000000000a7b10 <CBcmPCIeHostBridge::link_speed_to_str(int)>:
   a7b10:	51000400 	sub	w0, w0, #0x1
   a7b14:	7100081f 	cmp	w0, #0x2
   a7b18:	540000c8 	b.hi	a7b30 <CBcmPCIeHostBridge::link_speed_to_str(int)+0x20>  // b.pmore
   a7b1c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7b20:	912b8021 	add	x1, x1, #0xae0
   a7b24:	91008021 	add	x1, x1, #0x20
   a7b28:	f8605820 	ldr	x0, [x1, w0, uxtw #3]
   a7b2c:	d65f03c0 	ret
   a7b30:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7b34:	91246000 	add	x0, x0, #0x918
   a7b38:	d65f03c0 	ret
   a7b3c:	d503201f 	nop

00000000000a7b40 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)>:
   a7b40:	f100041f 	cmp	x0, #0x1
   a7b44:	54000249 	b.ls	a7b8c <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x4c>  // b.plast
   a7b48:	52800001 	mov	w1, #0x0                   	// #0
   a7b4c:	d2800024 	mov	x4, #0x1                   	// #1
   a7b50:	2a0103e3 	mov	w3, w1
   a7b54:	11000421 	add	w1, w1, #0x1
   a7b58:	9ac12082 	lsl	x2, x4, x1
   a7b5c:	eb02001f 	cmp	x0, x2
   a7b60:	54ffff88 	b.hi	a7b50 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x10>  // b.pmore
   a7b64:	51002c60 	sub	w0, w3, #0xb
   a7b68:	71000c1f 	cmp	w0, #0x3
   a7b6c:	540000c9 	b.ls	a7b84 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x44>  // b.plast
   a7b70:	51003c60 	sub	w0, w3, #0xf
   a7b74:	51003863 	sub	w3, w3, #0xe
   a7b78:	7100581f 	cmp	w0, #0x16
   a7b7c:	1a9f3060 	csel	w0, w3, wzr, cc  // cc = lo, ul, last
   a7b80:	d65f03c0 	ret
   a7b84:	11004460 	add	w0, w3, #0x11
   a7b88:	d65f03c0 	ret
   a7b8c:	52800000 	mov	w0, #0x0                   	// #0
   a7b90:	d65f03c0 	ret
   a7b94:	d503201f 	nop
   a7b98:	d503201f 	nop
   a7b9c:	d503201f 	nop

00000000000a7ba0 <CBcmPCIeHostBridge::rd_fld(unsigned long, unsigned int, int)>:
   a7ba0:	b9400000 	ldr	w0, [x0]
   a7ba4:	0a000020 	and	w0, w1, w0
   a7ba8:	1ac22400 	lsr	w0, w0, w2
   a7bac:	d65f03c0 	ret

00000000000a7bb0 <CBcmPCIeHostBridge::wr_fld(unsigned long, unsigned int, int, unsigned int)>:
   a7bb0:	b9400004 	ldr	w4, [x0]
   a7bb4:	1ac22062 	lsl	w2, w3, w2
   a7bb8:	4a040042 	eor	w2, w2, w4
   a7bbc:	0a010042 	and	w2, w2, w1
   a7bc0:	4a040042 	eor	w2, w2, w4
   a7bc4:	b9000002 	str	w2, [x0]
   a7bc8:	d65f03c0 	ret
   a7bcc:	d503201f 	nop

00000000000a7bd0 <CBcmPCIeHostBridge::wr_fld_rb(unsigned long, unsigned int, int, unsigned int)>:
   a7bd0:	b9400004 	ldr	w4, [x0]
   a7bd4:	1ac22062 	lsl	w2, w3, w2
   a7bd8:	4a040042 	eor	w2, w2, w4
   a7bdc:	0a010042 	and	w2, w2, w1
   a7be0:	4a040042 	eor	w2, w2, w4
   a7be4:	b9000002 	str	w2, [x0]
   a7be8:	b9400000 	ldr	w0, [x0]
   a7bec:	d65f03c0 	ret

00000000000a7bf0 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int)>:
   a7bf0:	f9400402 	ldr	x2, [x0, #8]
   a7bf4:	b4000062 	cbz	x2, a7c00 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int)+0x10>
   a7bf8:	2a0103e0 	mov	w0, w1
   a7bfc:	17fff1e5 	b	a4390 <CTimer::SimpleusDelay(unsigned int)>
   a7c00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7c04:	910003fd 	mov	x29, sp
   a7c08:	97fffc42 	bl	a6d10 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int) [clone .part.0]>
   a7c0c:	d503201f 	nop

00000000000a7c10 <CBcmPCIeHostBridge::msleep(unsigned int)>:
   a7c10:	f9400402 	ldr	x2, [x0, #8]
   a7c14:	b4000062 	cbz	x2, a7c20 <CBcmPCIeHostBridge::msleep(unsigned int)+0x10>
   a7c18:	2a0103e0 	mov	w0, w1
   a7c1c:	17fff1d5 	b	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   a7c20:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7c24:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7c28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7c2c:	9120e021 	add	x1, x1, #0x838
   a7c30:	910003fd 	mov	x29, sp
   a7c34:	9121e000 	add	x0, x0, #0x878
   a7c38:	52806c62 	mov	w2, #0x363                 	// #867
   a7c3c:	97ffd291 	bl	9c680 <assertion_failed>

00000000000a7c40 <CBcmPCIeHostBridge::ilog2(unsigned long)>:
   a7c40:	aa0003e2 	mov	x2, x0
   a7c44:	52800000 	mov	w0, #0x0                   	// #0
   a7c48:	f100045f 	cmp	x2, #0x1
   a7c4c:	540000e9 	b.ls	a7c68 <CBcmPCIeHostBridge::ilog2(unsigned long)+0x28>  // b.plast
   a7c50:	d2800023 	mov	x3, #0x1                   	// #1
   a7c54:	d503201f 	nop
   a7c58:	11000400 	add	w0, w0, #0x1
   a7c5c:	9ac02061 	lsl	x1, x3, x0
   a7c60:	eb02003f 	cmp	x1, x2
   a7c64:	54ffffa3 	b.cc	a7c58 <CBcmPCIeHostBridge::ilog2(unsigned long)+0x18>  // b.lo, b.ul, b.last
   a7c68:	d65f03c0 	ret
   a7c6c:	00000000 	.inst	0x00000000 ; undefined

00000000000a7c70 <CInterruptSystem::DisableFIQ() [clone .part.0]>:
   a7c70:	f0000062 	adrp	x2, b6000 <s_OldInfo+0x68>
   a7c74:	91104042 	add	x2, x2, #0x410
   a7c78:	b9401043 	ldr	w3, [x2, #16]
   a7c7c:	340000c3 	cbz	w3, a7c94 <CInterruptSystem::DisableFIQ() [clone .part.0]+0x24>
   a7c80:	52800024 	mov	w4, #0x1                   	// #1
   a7c84:	aa0403e0 	mov	x0, x4
   a7c88:	aa0303e1 	mov	x1, x3
   a7c8c:	d4000003 	smc	#0x0
   a7c90:	b900105f 	str	wzr, [x2, #16]
   a7c94:	d65f03c0 	ret
   a7c98:	d503201f 	nop
   a7c9c:	d503201f 	nop

00000000000a7ca0 <CInterruptSystem::CInterruptSystem()>:
   a7ca0:	aa0003e1 	mov	x1, x0
   a7ca4:	91200002 	add	x2, x0, #0x800
   a7ca8:	91002021 	add	x1, x1, #0x8
   a7cac:	f81f803f 	stur	xzr, [x1, #-8]
   a7cb0:	f903fc3f 	str	xzr, [x1, #2040]
   a7cb4:	eb02003f 	cmp	x1, x2
   a7cb8:	54ffff81 	b.ne	a7ca8 <CInterruptSystem::CInterruptSystem()+0x8>  // b.any
   a7cbc:	f0000061 	adrp	x1, b6000 <s_OldInfo+0x68>
   a7cc0:	f907f820 	str	x0, [x1, #4080]
   a7cc4:	d65f03c0 	ret
   a7cc8:	d503201f 	nop
   a7ccc:	d503201f 	nop

00000000000a7cd0 <CInterruptSystem::~CInterruptSystem()>:
   a7cd0:	d50342df 	msr	daifset, #0x2
   a7cd4:	d2820001 	mov	x1, #0x1000                	// #4096
   a7cd8:	f2bff081 	movk	x1, #0xff84, lsl #16
   a7cdc:	f0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a7ce0:	b900003f 	str	wzr, [x1]
   a7ce4:	f907f81f 	str	xzr, [x0, #4080]
   a7ce8:	d65f03c0 	ret
   a7cec:	d503201f 	nop

00000000000a7cf0 <CInterruptSystem::Initialize()>:
   a7cf0:	d2a000e3 	mov	x3, #0x70000               	// #458752
   a7cf4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7cf8:	f0000005 	adrp	x5, aa000 <VectorTable>
   a7cfc:	911e10a5 	add	x5, x5, #0x784
   a7d00:	910003fd 	mov	x29, sp
   a7d04:	f0000006 	adrp	x6, aa000 <VectorTable>
   a7d08:	912620c6 	add	x6, x6, #0x988
   a7d0c:	aa0303e7 	mov	x7, x3
   a7d10:	52800002 	mov	w2, #0x0                   	// #0
   a7d14:	52a28004 	mov	w4, #0x14000000            	// #335544320
   a7d18:	14000006 	b	a7d30 <CInterruptSystem::Initialize()+0x40>
   a7d1c:	71003c5f 	cmp	w2, #0xf
   a7d20:	b9000001 	str	w1, [x0]
   a7d24:	540001e0 	b.eq	a7d60 <CInterruptSystem::Initialize()+0x70>  // b.none
   a7d28:	11000442 	add	w2, w2, #0x1
   a7d2c:	91020063 	add	x3, x3, #0x80
   a7d30:	cb0300a1 	sub	x1, x5, x3
   a7d34:	d3797c40 	ubfiz	x0, x2, #7, #32
   a7d38:	9342fc21 	asr	x1, x1, #2
   a7d3c:	7100205f 	cmp	w2, #0x8
   a7d40:	9141c000 	add	x0, x0, #0x70, lsl #12
   a7d44:	2a040021 	orr	w1, w1, w4
   a7d48:	54fffea1 	b.ne	a7d1c <CInterruptSystem::Initialize()+0x2c>  // b.any
   a7d4c:	cb0300c0 	sub	x0, x6, x3
   a7d50:	9342fc00 	asr	x0, x0, #2
   a7d54:	2a040000 	orr	w0, w0, w4
   a7d58:	b90400e0 	str	w0, [x7, #1024]
   a7d5c:	17fffff3 	b	a7d28 <CInterruptSystem::Initialize()+0x38>
   a7d60:	97fffa80 	bl	a6760 <SyncDataAndInstructionCache>
   a7d64:	d2820003 	mov	x3, #0x1000                	// #4096
   a7d68:	f2bff083 	movk	x3, #0xff84, lsl #16
   a7d6c:	d2823000 	mov	x0, #0x1180                	// #4480
   a7d70:	f2bff080 	movk	x0, #0xff84, lsl #16
   a7d74:	d2823402 	mov	x2, #0x11a0                	// #4512
   a7d78:	f2bff082 	movk	x2, #0xff84, lsl #16
   a7d7c:	b900007f 	str	wzr, [x3]
   a7d80:	12800001 	mov	w1, #0xffffffff            	// #-1
   a7d84:	d503201f 	nop
   a7d88:	b9000001 	str	w1, [x0]
   a7d8c:	91001000 	add	x0, x0, #0x4
   a7d90:	b900fc01 	str	w1, [x0, #252]
   a7d94:	b901fc01 	str	w1, [x0, #508]
   a7d98:	eb02001f 	cmp	x0, x2
   a7d9c:	54ffff61 	b.ne	a7d88 <CInterruptSystem::Initialize()+0x98>  // b.any
   a7da0:	d2828000 	mov	x0, #0x1400                	// #5120
   a7da4:	f2bff080 	movk	x0, #0xff84, lsl #16
   a7da8:	52941403 	mov	w3, #0xa0a0                	// #41120
   a7dac:	72b41403 	movk	w3, #0xa0a0, lsl #16
   a7db0:	d282a001 	mov	x1, #0x1500                	// #5376
   a7db4:	f2bff081 	movk	x1, #0xff84, lsl #16
   a7db8:	3200c3e2 	mov	w2, #0x1010101             	// #16843009
   a7dbc:	d503201f 	nop
   a7dc0:	b9000003 	str	w3, [x0]
   a7dc4:	91001000 	add	x0, x0, #0x4
   a7dc8:	b903fc02 	str	w2, [x0, #1020]
   a7dcc:	eb01001f 	cmp	x0, x1
   a7dd0:	54ffff81 	b.ne	a7dc0 <CInterruptSystem::Initialize()+0xd0>  // b.any
   a7dd4:	d2838000 	mov	x0, #0x1c00                	// #7168
   a7dd8:	f2bff080 	movk	x0, #0xff84, lsl #16
   a7ddc:	d2838801 	mov	x1, #0x1c40                	// #7232
   a7de0:	f2bff081 	movk	x1, #0xff84, lsl #16
   a7de4:	d503201f 	nop
   a7de8:	b800441f 	str	wzr, [x0], #4
   a7dec:	eb01001f 	cmp	x0, x1
   a7df0:	54ffffc1 	b.ne	a7de8 <CInterruptSystem::Initialize()+0xf8>  // b.any
   a7df4:	52800020 	mov	w0, #0x1                   	// #1
   a7df8:	d2820004 	mov	x4, #0x1000                	// #4096
   a7dfc:	f2bff084 	movk	x4, #0xff84, lsl #16
   a7e00:	52801e03 	mov	w3, #0xf0                  	// #240
   a7e04:	d2840082 	mov	x2, #0x2004                	// #8196
   a7e08:	f2bff082 	movk	x2, #0xff84, lsl #16
   a7e0c:	d2840001 	mov	x1, #0x2000                	// #8192
   a7e10:	f2bff081 	movk	x1, #0xff84, lsl #16
   a7e14:	b9000080 	str	w0, [x4]
   a7e18:	b9000043 	str	w3, [x2]
   a7e1c:	b9000020 	str	w0, [x1]
   a7e20:	d50342ff 	msr	daifclr, #0x2
   a7e24:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7e28:	d65f03c0 	ret
   a7e2c:	d503201f 	nop

00000000000a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   a7e30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7e34:	7103fc3f 	cmp	w1, #0xff
   a7e38:	910003fd 	mov	x29, sp
   a7e3c:	54000208 	b.hi	a7e7c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x4c>  // b.pmore
   a7e40:	2a0103e6 	mov	w6, w1
   a7e44:	8b214c07 	add	x7, x0, w1, uxtw #3
   a7e48:	f8667804 	ldr	x4, [x0, x6, lsl #3]
   a7e4c:	b5000244 	cbnz	x4, a7e94 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   a7e50:	52808804 	mov	w4, #0x440                 	// #1088
   a7e54:	72a7fc24 	movk	w4, #0x3fe1, lsl #16
   a7e58:	f8267802 	str	x2, [x0, x6, lsl #3]
   a7e5c:	0b411480 	add	w0, w4, w1, lsr #5
   a7e60:	52800025 	mov	w5, #0x1                   	// #1
   a7e64:	f90400e3 	str	x3, [x7, #2048]
   a7e68:	1ac120a1 	lsl	w1, w5, w1
   a7e6c:	531e7400 	lsl	w0, w0, #2
   a7e70:	b9000001 	str	w1, [x0]
   a7e74:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7e78:	d65f03c0 	ret
   a7e7c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7e80:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7e84:	912c6021 	add	x1, x1, #0xb18
   a7e88:	912cc000 	add	x0, x0, #0xb30
   a7e8c:	52801642 	mov	w2, #0xb2                  	// #178
   a7e90:	97ffd1fc 	bl	9c680 <assertion_failed>
   a7e94:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7e98:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7e9c:	912c6021 	add	x1, x1, #0xb18
   a7ea0:	912d2000 	add	x0, x0, #0xb48
   a7ea4:	52801662 	mov	w2, #0xb3                  	// #179
   a7ea8:	97ffd1f6 	bl	9c680 <assertion_failed>
   a7eac:	d503201f 	nop

00000000000a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   a7eb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7eb4:	7103fc3f 	cmp	w1, #0xff
   a7eb8:	910003fd 	mov	x29, sp
   a7ebc:	54000208 	b.hi	a7efc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>  // b.pmore
   a7ec0:	2a0103e4 	mov	w4, w1
   a7ec4:	8b214c05 	add	x5, x0, w1, uxtw #3
   a7ec8:	f8647802 	ldr	x2, [x0, x4, lsl #3]
   a7ecc:	b4000242 	cbz	x2, a7f14 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   a7ed0:	52808c02 	mov	w2, #0x460                 	// #1120
   a7ed4:	72a7fc22 	movk	w2, #0x3fe1, lsl #16
   a7ed8:	0b411442 	add	w2, w2, w1, lsr #5
   a7edc:	52800023 	mov	w3, #0x1                   	// #1
   a7ee0:	1ac12061 	lsl	w1, w3, w1
   a7ee4:	531e7442 	lsl	w2, w2, #2
   a7ee8:	b9000041 	str	w1, [x2]
   a7eec:	f824781f 	str	xzr, [x0, x4, lsl #3]
   a7ef0:	f90400bf 	str	xzr, [x5, #2048]
   a7ef4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7ef8:	d65f03c0 	ret
   a7efc:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7f00:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7f04:	912c6021 	add	x1, x1, #0xb18
   a7f08:	912cc000 	add	x0, x0, #0xb30
   a7f0c:	528017a2 	mov	w2, #0xbd                  	// #189
   a7f10:	97ffd1dc 	bl	9c680 <assertion_failed>
   a7f14:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7f18:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7f1c:	912c6021 	add	x1, x1, #0xb18
   a7f20:	912da000 	add	x0, x0, #0xb68
   a7f24:	528017c2 	mov	w2, #0xbe                  	// #190
   a7f28:	97ffd1d6 	bl	9c680 <assertion_failed>
   a7f2c:	d503201f 	nop

00000000000a7f30 <CInterruptSystem::DisconnectFIQ()>:
   a7f30:	f0000065 	adrp	x5, b6000 <s_OldInfo+0x68>
   a7f34:	911040a5 	add	x5, x5, #0x410
   a7f38:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7f3c:	910003fd 	mov	x29, sp
   a7f40:	f94000a0 	ldr	x0, [x5]
   a7f44:	b40001c0 	cbz	x0, a7f7c <CInterruptSystem::DisconnectFIQ()+0x4c>
   a7f48:	d2801a81 	mov	x1, #0xd4                  	// #212
   a7f4c:	528928c0 	mov	w0, #0x4946                	// #18758
   a7f50:	72aa6a20 	movk	w0, #0x5351, lsl #16
   a7f54:	b9400021 	ldr	w1, [x1]
   a7f58:	6b00003f 	cmp	w1, w0
   a7f5c:	54000080 	b.eq	a7f6c <CInterruptSystem::DisconnectFIQ()+0x3c>  // b.none
   a7f60:	a9007cbf 	stp	xzr, xzr, [x5]
   a7f64:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7f68:	d65f03c0 	ret
   a7f6c:	97ffff41 	bl	a7c70 <CInterruptSystem::DisableFIQ() [clone .part.0]>
   a7f70:	a9007cbf 	stp	xzr, xzr, [x5]
   a7f74:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7f78:	d65f03c0 	ret
   a7f7c:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7f80:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7f84:	912c6021 	add	x1, x1, #0xb18
   a7f88:	912e2000 	add	x0, x0, #0xb88
   a7f8c:	52801a82 	mov	w2, #0xd4                  	// #212
   a7f90:	97ffd1bc 	bl	9c680 <assertion_failed>
   a7f94:	d503201f 	nop
   a7f98:	d503201f 	nop
   a7f9c:	d503201f 	nop

00000000000a7fa0 <CInterruptSystem::EnableIRQ(unsigned int)>:
   a7fa0:	7103fc1f 	cmp	w0, #0xff
   a7fa4:	54000128 	b.hi	a7fc8 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>  // b.pmore
   a7fa8:	52808801 	mov	w1, #0x440                 	// #1088
   a7fac:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   a7fb0:	0b401421 	add	w1, w1, w0, lsr #5
   a7fb4:	52800022 	mov	w2, #0x1                   	// #1
   a7fb8:	1ac02040 	lsl	w0, w2, w0
   a7fbc:	531e7421 	lsl	w1, w1, #2
   a7fc0:	b9000020 	str	w0, [x1]
   a7fc4:	d65f03c0 	ret
   a7fc8:	90000061 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a7fcc:	90000060 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a7fd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7fd4:	912c6021 	add	x1, x1, #0xb18
   a7fd8:	910003fd 	mov	x29, sp
   a7fdc:	912cc000 	add	x0, x0, #0xb30
   a7fe0:	52801bc2 	mov	w2, #0xde                  	// #222
   a7fe4:	97ffd1a7 	bl	9c680 <assertion_failed>
   a7fe8:	d503201f 	nop
   a7fec:	d503201f 	nop

00000000000a7ff0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   a7ff0:	7103fc1f 	cmp	w0, #0xff
   a7ff4:	54000128 	b.hi	a8018 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>  // b.pmore
   a7ff8:	52808c01 	mov	w1, #0x460                 	// #1120
   a7ffc:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   a8000:	0b401421 	add	w1, w1, w0, lsr #5
   a8004:	52800022 	mov	w2, #0x1                   	// #1
   a8008:	1ac02040 	lsl	w0, w2, w0
   a800c:	531e7421 	lsl	w1, w1, #2
   a8010:	b9000020 	str	w0, [x1]
   a8014:	d65f03c0 	ret
   a8018:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a801c:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8020:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8024:	912c6021 	add	x1, x1, #0xb18
   a8028:	910003fd 	mov	x29, sp
   a802c:	912cc000 	add	x0, x0, #0xb30
   a8030:	52801ca2 	mov	w2, #0xe5                  	// #229
   a8034:	97ffd193 	bl	9c680 <assertion_failed>
   a8038:	d503201f 	nop
   a803c:	d503201f 	nop

00000000000a8040 <CInterruptSystem::EnableFIQ(unsigned int)>:
   a8040:	d2801a82 	mov	x2, #0xd4                  	// #212
   a8044:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8048:	910003fd 	mov	x29, sp
   a804c:	528928c1 	mov	w1, #0x4946                	// #18758
   a8050:	72aa6a21 	movk	w1, #0x5351, lsl #16
   a8054:	b9400042 	ldr	w2, [x2]
   a8058:	f9000bf3 	str	x19, [sp, #16]
   a805c:	2a0003f3 	mov	w19, w0
   a8060:	6b01005f 	cmp	w2, w1
   a8064:	54000100 	b.eq	a8084 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>  // b.none
   a8068:	97ffdb1a 	bl	9ecd0 <CLogger::Get()>
   a806c:	f0000043 	adrp	x3, b3000 <vtable for CSerialDevice+0x18>
   a8070:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8074:	912e8063 	add	x3, x3, #0xba0
   a8078:	912f2021 	add	x1, x1, #0xbc8
   a807c:	52800002 	mov	w2, #0x0                   	// #0
   a8080:	97ffda50 	bl	9e9c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a8084:	71003e7f 	cmp	w19, #0xf
   a8088:	540001a9 	b.ls	a80bc <CInterruptSystem::EnableFIQ(unsigned int)+0x7c>  // b.plast
   a808c:	7103fe7f 	cmp	w19, #0xff
   a8090:	54000228 	b.hi	a80d4 <CInterruptSystem::EnableFIQ(unsigned int)+0x94>  // b.pmore
   a8094:	d0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a8098:	91104000 	add	x0, x0, #0x410
   a809c:	52800002 	mov	w2, #0x0                   	// #0
   a80a0:	b9001013 	str	w19, [x0, #16]
   a80a4:	aa0203e0 	mov	x0, x2
   a80a8:	aa1303e1 	mov	x1, x19
   a80ac:	d4000003 	smc	#0x0
   a80b0:	f9400bf3 	ldr	x19, [sp, #16]
   a80b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a80b8:	d65f03c0 	ret
   a80bc:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a80c0:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a80c4:	912c6021 	add	x1, x1, #0xb18
   a80c8:	912f4000 	add	x0, x0, #0xbd0
   a80cc:	52801e82 	mov	w2, #0xf4                  	// #244
   a80d0:	97ffd16c 	bl	9c680 <assertion_failed>
   a80d4:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a80d8:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a80dc:	912c6021 	add	x1, x1, #0xb18
   a80e0:	912f8000 	add	x0, x0, #0xbe0
   a80e4:	52801ea2 	mov	w2, #0xf5                  	// #245
   a80e8:	97ffd166 	bl	9c680 <assertion_failed>
   a80ec:	d503201f 	nop

00000000000a80f0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   a80f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a80f4:	7104003f 	cmp	w1, #0x100
   a80f8:	910003fd 	mov	x29, sp
   a80fc:	54000148 	b.hi	a8124 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x34>  // b.pmore
   a8100:	b40001e2 	cbz	x2, a813c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   a8104:	2a0103e0 	mov	w0, w1
   a8108:	d0000061 	adrp	x1, b6000 <s_OldInfo+0x68>
   a810c:	91104021 	add	x1, x1, #0x410
   a8110:	f9400024 	ldr	x4, [x1]
   a8114:	b5000204 	cbnz	x4, a8154 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x64>
   a8118:	a9000c22 	stp	x2, x3, [x1]
   a811c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8120:	17ffffc8 	b	a8040 <CInterruptSystem::EnableFIQ(unsigned int)>
   a8124:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8128:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a812c:	912c6021 	add	x1, x1, #0xb18
   a8130:	912fe000 	add	x0, x0, #0xbf8
   a8134:	52801902 	mov	w2, #0xc8                  	// #200
   a8138:	97ffd152 	bl	9c680 <assertion_failed>
   a813c:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8140:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8144:	912c6021 	add	x1, x1, #0xb18
   a8148:	912e4000 	add	x0, x0, #0xb90
   a814c:	52801922 	mov	w2, #0xc9                  	// #201
   a8150:	97ffd14c 	bl	9c680 <assertion_failed>
   a8154:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8158:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a815c:	912c6021 	add	x1, x1, #0xb18
   a8160:	91304000 	add	x0, x0, #0xc10
   a8164:	52801942 	mov	w2, #0xca                  	// #202
   a8168:	97ffd146 	bl	9c680 <assertion_failed>
   a816c:	d503201f 	nop

00000000000a8170 <CInterruptSystem::DisableFIQ()>:
   a8170:	d2801a81 	mov	x1, #0xd4                  	// #212
   a8174:	528928c0 	mov	w0, #0x4946                	// #18758
   a8178:	72aa6a20 	movk	w0, #0x5351, lsl #16
   a817c:	b9400021 	ldr	w1, [x1]
   a8180:	6b00003f 	cmp	w1, w0
   a8184:	54000041 	b.ne	a818c <CInterruptSystem::DisableFIQ()+0x1c>  // b.any
   a8188:	17fffeba 	b	a7c70 <CInterruptSystem::DisableFIQ() [clone .part.0]>
   a818c:	d65f03c0 	ret

00000000000a8190 <CInterruptSystem::Get()>:
   a8190:	d0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a8194:	f947f800 	ldr	x0, [x0, #4080]
   a8198:	b4000040 	cbz	x0, a81a0 <CInterruptSystem::Get()+0x10>
   a819c:	d65f03c0 	ret
   a81a0:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a81a4:	90000020 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a81a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a81ac:	912c6021 	add	x1, x1, #0xb18
   a81b0:	910003fd 	mov	x29, sp
   a81b4:	91248000 	add	x0, x0, #0x920
   a81b8:	528021e2 	mov	w2, #0x10f                 	// #271
   a81bc:	97ffd131 	bl	9c680 <assertion_failed>

00000000000a81c0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   a81c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a81c4:	7103fc3f 	cmp	w1, #0xff
   a81c8:	910003fd 	mov	x29, sp
   a81cc:	54000268 	b.hi	a8218 <CInterruptSystem::CallIRQHandler(unsigned int)+0x58>  // b.pmore
   a81d0:	f8615802 	ldr	x2, [x0, w1, uxtw #3]
   a81d4:	8b214c00 	add	x0, x0, w1, uxtw #3
   a81d8:	b40000c2 	cbz	x2, a81f0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x30>
   a81dc:	f9440000 	ldr	x0, [x0, #2048]
   a81e0:	d63f0040 	blr	x2
   a81e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a81e8:	52800020 	mov	w0, #0x1                   	// #1
   a81ec:	d65f03c0 	ret
   a81f0:	52808c02 	mov	w2, #0x460                 	// #1120
   a81f4:	72a7fc22 	movk	w2, #0x3fe1, lsl #16
   a81f8:	0b411442 	add	w2, w2, w1, lsr #5
   a81fc:	52800020 	mov	w0, #0x1                   	// #1
   a8200:	1ac12001 	lsl	w1, w0, w1
   a8204:	52800000 	mov	w0, #0x0                   	// #0
   a8208:	531e7442 	lsl	w2, w2, #2
   a820c:	b9000041 	str	w1, [x2]
   a8210:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8214:	d65f03c0 	ret
   a8218:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a821c:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8220:	912c6021 	add	x1, x1, #0xb18
   a8224:	912cc000 	add	x0, x0, #0xb30
   a8228:	528022a2 	mov	w2, #0x115                 	// #277
   a822c:	97ffd115 	bl	9c680 <assertion_failed>

00000000000a8230 <CInterruptSystem::InterruptHandler()>:
   a8230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8234:	d2840180 	mov	x0, #0x200c                	// #8204
   a8238:	f2bff080 	movk	x0, #0xff84, lsl #16
   a823c:	910003fd 	mov	x29, sp
   a8240:	f9000bf3 	str	x19, [sp, #16]
   a8244:	b9400013 	ldr	w19, [x0]
   a8248:	7218067f 	tst	w19, #0x300
   a824c:	12002661 	and	w1, w19, #0x3ff
   a8250:	540001a1 	b.ne	a8284 <CInterruptSystem::InterruptHandler()+0x54>  // b.any
   a8254:	721c167f 	tst	w19, #0x3f0
   a8258:	540000a0 	b.eq	a826c <CInterruptSystem::InterruptHandler()+0x3c>  // b.none
   a825c:	d0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a8260:	f947f800 	ldr	x0, [x0, #4080]
   a8264:	b4000200 	cbz	x0, a82a4 <CInterruptSystem::InterruptHandler()+0x74>
   a8268:	97ffffd6 	bl	a81c0 <CInterruptSystem::CallIRQHandler(unsigned int)>
   a826c:	d2840200 	mov	x0, #0x2010                	// #8208
   a8270:	f2bff080 	movk	x0, #0xff84, lsl #16
   a8274:	b9000013 	str	w19, [x0]
   a8278:	f9400bf3 	ldr	x19, [sp, #16]
   a827c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8280:	d65f03c0 	ret
   a8284:	710fec3f 	cmp	w1, #0x3fb
   a8288:	54ffff88 	b.hi	a8278 <CInterruptSystem::InterruptHandler()+0x48>  // b.pmore
   a828c:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8290:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8294:	912c6021 	add	x1, x1, #0xb18
   a8298:	9130a000 	add	x0, x0, #0xc28
   a829c:	52802842 	mov	w2, #0x142                 	// #322
   a82a0:	97ffd0f8 	bl	9c680 <assertion_failed>
   a82a4:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a82a8:	90000020 	adrp	x0, ac000 <CEMMCDevice::CardReset()+0x7b0>
   a82ac:	912c6021 	add	x1, x1, #0xb18
   a82b0:	91248000 	add	x0, x0, #0x920
   a82b4:	52802602 	mov	w2, #0x130                 	// #304
   a82b8:	97ffd0f2 	bl	9c680 <assertion_failed>
   a82bc:	d503201f 	nop

00000000000a82c0 <InterruptHandler>:
   a82c0:	17ffffdc 	b	a8230 <CInterruptSystem::InterruptHandler()>
   a82c4:	d503201f 	nop
   a82c8:	d503201f 	nop
   a82cc:	d503201f 	nop

00000000000a82d0 <CInterruptSystem::InitializeSecondary()>:
   a82d0:	52801e03 	mov	w3, #0xf0                  	// #240
   a82d4:	d2840082 	mov	x2, #0x2004                	// #8196
   a82d8:	f2bff082 	movk	x2, #0xff84, lsl #16
   a82dc:	52800021 	mov	w1, #0x1                   	// #1
   a82e0:	d2840000 	mov	x0, #0x2000                	// #8192
   a82e4:	f2bff080 	movk	x0, #0xff84, lsl #16
   a82e8:	b9000043 	str	w3, [x2]
   a82ec:	b9000001 	str	w1, [x0]
   a82f0:	d65f03c0 	ret
   a82f4:	d503201f 	nop
   a82f8:	d503201f 	nop
   a82fc:	d503201f 	nop

00000000000a8300 <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   a8300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8304:	71001c1f 	cmp	w0, #0x7
   a8308:	910003fd 	mov	x29, sp
   a830c:	54000188 	b.hi	a833c <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x3c>  // b.pmore
   a8310:	71003c3f 	cmp	w1, #0xf
   a8314:	54000208 	b.hi	a8354 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x54>  // b.pmore
   a8318:	52800022 	mov	w2, #0x1                   	// #1
   a831c:	11004000 	add	w0, w0, #0x10
   a8320:	1ac02040 	lsl	w0, w2, w0
   a8324:	d283e002 	mov	x2, #0x1f00                	// #7936
   a8328:	f2bff082 	movk	x2, #0xff84, lsl #16
   a832c:	2a010000 	orr	w0, w0, w1
   a8330:	b9000040 	str	w0, [x2]
   a8334:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8338:	d65f03c0 	ret
   a833c:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8340:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8344:	912c6021 	add	x1, x1, #0xb18
   a8348:	9130e000 	add	x0, x0, #0xc38
   a834c:	52802aa2 	mov	w2, #0x155                 	// #341
   a8350:	97ffd0cc 	bl	9c680 <assertion_failed>
   a8354:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8358:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a835c:	912c6021 	add	x1, x1, #0xb18
   a8360:	91312000 	add	x0, x0, #0xc48
   a8364:	52802ac2 	mov	w2, #0x156                 	// #342
   a8368:	97ffd0c6 	bl	9c680 <assertion_failed>
   a836c:	d503201f 	nop

00000000000a8370 <CInterruptSystem::CallSecureMonitor(unsigned int, unsigned int)>:
   a8370:	2a0003e2 	mov	w2, w0
   a8374:	2a0103e3 	mov	w3, w1
   a8378:	aa0203e0 	mov	x0, x2
   a837c:	aa0303e1 	mov	x1, x3
   a8380:	d4000003 	smc	#0x0
   a8384:	d65f03c0 	ret
   a8388:	d503201f 	nop
   a838c:	d503201f 	nop

00000000000a8390 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>:
   a8390:	121e7423 	and	w3, w1, #0xfffffffc
   a8394:	53057c22 	lsr	w2, w1, #5
   a8398:	531d0424 	ubfiz	w4, w1, #3, #2
   a839c:	52800026 	mov	w6, #0x1                   	// #1
   a83a0:	52801fe5 	mov	w5, #0xff                  	// #255
   a83a4:	515ef863 	sub	w3, w3, #0x7be, lsl #12
   a83a8:	531e7442 	lsl	w2, w2, #2
   a83ac:	51300063 	sub	w3, w3, #0xc00
   a83b0:	1ac120c1 	lsl	w1, w6, w1
   a83b4:	1ac420a7 	lsl	w7, w5, w4
   a83b8:	35000300 	cbnz	w0, a8418 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x88>
   a83bc:	d2820008 	mov	x8, #0x1000                	// #4096
   a83c0:	f2bff088 	movk	x8, #0xff84, lsl #16
   a83c4:	52800069 	mov	w9, #0x3                   	// #3
   a83c8:	52800166 	mov	w6, #0xb                   	// #11
   a83cc:	515ef845 	sub	w5, w2, #0x7be, lsl #12
   a83d0:	d2840000 	mov	x0, #0x2000                	// #8192
   a83d4:	f2bff080 	movk	x0, #0xff84, lsl #16
   a83d8:	513e00a5 	sub	w5, w5, #0xf80
   a83dc:	b9000109 	str	w9, [x8]
   a83e0:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   a83e4:	b9000006 	str	w6, [x0]
   a83e8:	52800800 	mov	w0, #0x40                  	// #64
   a83ec:	513c0042 	sub	w2, w2, #0xf00
   a83f0:	b94000a6 	ldr	w6, [x5]
   a83f4:	1ac42004 	lsl	w4, w0, w4
   a83f8:	0a2100c6 	bic	w6, w6, w1
   a83fc:	b90000a6 	str	w6, [x5]
   a8400:	b9400060 	ldr	w0, [x3]
   a8404:	0a270000 	bic	w0, w0, w7
   a8408:	2a040000 	orr	w0, w0, w4
   a840c:	b9000060 	str	w0, [x3]
   a8410:	b9000041 	str	w1, [x2]
   a8414:	d65f03c0 	ret
   a8418:	7100041f 	cmp	w0, #0x1
   a841c:	54ffffc1 	b.ne	a8414 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x84>  // b.any
   a8420:	515ef845 	sub	w5, w2, #0x7be, lsl #12
   a8424:	52801400 	mov	w0, #0xa0                  	// #160
   a8428:	513a00a5 	sub	w5, w5, #0xe80
   a842c:	1ac42000 	lsl	w0, w0, w4
   a8430:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   a8434:	d2840008 	mov	x8, #0x2000                	// #8192
   a8438:	f2bff088 	movk	x8, #0xff84, lsl #16
   a843c:	b90000a1 	str	w1, [x5]
   a8440:	513e0042 	sub	w2, w2, #0xf80
   a8444:	b9400064 	ldr	w4, [x3]
   a8448:	52800045 	mov	w5, #0x2                   	// #2
   a844c:	d2820006 	mov	x6, #0x1000                	// #4096
   a8450:	f2bff086 	movk	x6, #0xff84, lsl #16
   a8454:	0a270084 	bic	w4, w4, w7
   a8458:	2a000084 	orr	w4, w4, w0
   a845c:	b9000064 	str	w4, [x3]
   a8460:	b9400040 	ldr	w0, [x2]
   a8464:	2a000021 	orr	w1, w1, w0
   a8468:	b9000041 	str	w1, [x2]
   a846c:	b9000105 	str	w5, [x8]
   a8470:	b90000c5 	str	w5, [x6]
   a8474:	d65f03c0 	ret
   a8478:	d503201f 	nop
   a847c:	d503201f 	nop

00000000000a8480 <SecureMonitorHandler>:
   a8480:	17ffffc4 	b	a8390 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>
	...

00000000000a8490 <__cxa_pure_virtual>:
   a8490:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8494:	b0000020 	adrp	x0, ad000 <From+0x4c0>
   a8498:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a849c:	91316021 	add	x1, x1, #0xc58
   a84a0:	910003fd 	mov	x29, sp
   a84a4:	912f4000 	add	x0, x0, #0xbd0
   a84a8:	52800302 	mov	w2, #0x18                  	// #24
   a84ac:	97ffd075 	bl	9c680 <assertion_failed>

00000000000a84b0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   a84b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a84b4:	910003fd 	mov	x29, sp
   a84b8:	d2c02003 	mov	x3, #0x10000000000         	// #1099511627776
   a84bc:	52800001 	mov	w1, #0x0                   	// #0
   a84c0:	f9401002 	ldr	x2, [x0, #32]
   a84c4:	a90153f3 	stp	x19, x20, [sp, #16]
   a84c8:	aa0003f4 	mov	x20, x0
   a84cc:	9100a3e0 	add	x0, sp, #0x28
   a84d0:	f800c043 	stur	x3, [x2, #12]
   a84d4:	97ffd08f 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a84d8:	9100a3e0 	add	x0, sp, #0x28
   a84dc:	52900161 	mov	w1, #0x800b                	// #32779
   a84e0:	72a00081 	movk	w1, #0x4, lsl #16
   a84e4:	52808104 	mov	w4, #0x408                 	// #1032
   a84e8:	f9401282 	ldr	x2, [x20, #32]
   a84ec:	52808283 	mov	w3, #0x414                 	// #1044
   a84f0:	97ffd090 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a84f4:	72001c13 	ands	w19, w0, #0xff
   a84f8:	54000080 	b.eq	a8508 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x58>  // b.none
   a84fc:	f9401280 	ldr	x0, [x20, #32]
   a8500:	b9400c00 	ldr	w0, [x0, #12]
   a8504:	34000100 	cbz	w0, a8524 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
   a8508:	9100a3e0 	add	x0, sp, #0x28
   a850c:	52800013 	mov	w19, #0x0                   	// #0
   a8510:	97ffd084 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a8514:	2a1303e0 	mov	w0, w19
   a8518:	a94153f3 	ldp	x19, x20, [sp, #16]
   a851c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8520:	d65f03c0 	ret
   a8524:	9100a3e0 	add	x0, sp, #0x28
   a8528:	97ffd07e 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a852c:	2a1303e0 	mov	w0, w19
   a8530:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8534:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8538:	d65f03c0 	ret
   a853c:	d503201f 	nop

00000000000a8540 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   a8540:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a8544:	910003fd 	mov	x29, sp
   a8548:	7100003f 	cmp	w1, #0x0
   a854c:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
   a8550:	f9000bf3 	str	x19, [sp, #16]
   a8554:	aa0003f3 	mov	x19, x0
   a8558:	29000801 	stp	w1, w2, [x0]
   a855c:	29011404 	stp	w4, w5, [x0, #8]
   a8560:	29027c03 	stp	w3, wzr, [x0, #16]
   a8564:	a901fc1f 	stp	xzr, xzr, [x0, #24]
   a8568:	54000281 	b.ne	a85b8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>  // b.any
   a856c:	52800001 	mov	w1, #0x0                   	// #0
   a8570:	910083e0 	add	x0, sp, #0x20
   a8574:	97ffd067 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a8578:	910083e0 	add	x0, sp, #0x20
   a857c:	52800061 	mov	w1, #0x3                   	// #3
   a8580:	72a00081 	movk	w1, #0x4, lsl #16
   a8584:	52800004 	mov	w4, #0x0                   	// #0
   a8588:	52800283 	mov	w3, #0x14                  	// #20
   a858c:	9100a3e2 	add	x2, sp, #0x28
   a8590:	97ffd068 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a8594:	72001c1f 	tst	w0, #0xff
   a8598:	540004e1 	b.ne	a8634 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf4>  // b.any
   a859c:	d2805000 	mov	x0, #0x280                 	// #640
   a85a0:	f2c03c00 	movk	x0, #0x1e0, lsl #32
   a85a4:	f9000260 	str	x0, [x19]
   a85a8:	910083e0 	add	x0, sp, #0x20
   a85ac:	97ffd05d 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a85b0:	b9400a64 	ldr	w4, [x19, #8]
   a85b4:	b9401263 	ldr	w3, [x19, #16]
   a85b8:	34000244 	cbz	w4, a8600 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   a85bc:	b9400e60 	ldr	w0, [x19, #12]
   a85c0:	34000200 	cbz	w0, a8600 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   a85c4:	7100207f 	cmp	w3, #0x8
   a85c8:	54000249 	b.ls	a8610 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd0>  // b.plast
   a85cc:	d0000061 	adrp	x1, b6000 <s_OldInfo+0x68>
   a85d0:	d2800e02 	mov	x2, #0x70                  	// #112
   a85d4:	910e8021 	add	x1, x1, #0x3a0
   a85d8:	9100a260 	add	x0, x19, #0x28
   a85dc:	97fff1c7 	bl	a4cf8 <memcpy>
   a85e0:	b9401260 	ldr	w0, [x19, #16]
   a85e4:	a9400662 	ldp	x2, x1, [x19]
   a85e8:	b9005e60 	str	w0, [x19, #92]
   a85ec:	f8034262 	stur	x2, [x19, #52]
   a85f0:	f9002661 	str	x1, [x19, #72]
   a85f4:	f9400bf3 	ldr	x19, [sp, #16]
   a85f8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a85fc:	d65f03c0 	ret
   a8600:	f9400260 	ldr	x0, [x19]
   a8604:	7100207f 	cmp	w3, #0x8
   a8608:	f9000660 	str	x0, [x19, #8]
   a860c:	54fffe08 	b.hi	a85cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>  // b.pmore
   a8610:	d2808280 	mov	x0, #0x414                 	// #1044
   a8614:	97fff423 	bl	a56a0 <operator new[](unsigned long)>
   a8618:	aa0003e3 	mov	x3, x0
   a861c:	d2808002 	mov	x2, #0x400                 	// #1024
   a8620:	52800001 	mov	w1, #0x0                   	// #0
   a8624:	91005000 	add	x0, x0, #0x14
   a8628:	f9001263 	str	x3, [x19, #32]
   a862c:	97ffef99 	bl	a4490 <memset>
   a8630:	17ffffe7 	b	a85cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   a8634:	294683e1 	ldp	w1, w0, [sp, #52]
   a8638:	52804b02 	mov	w2, #0x258                 	// #600
   a863c:	510a0023 	sub	w3, w1, #0x280
   a8640:	29000261 	stp	w1, w0, [x19]
   a8644:	51078001 	sub	w1, w0, #0x1e0
   a8648:	7114007f 	cmp	w3, #0x500
   a864c:	7a429022 	ccmp	w1, w2, #0x2, ls  // ls = plast
   a8650:	54fffa68 	b.hi	a859c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x5c>  // b.pmore
   a8654:	17ffffd5 	b	a85a8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x68>
   a8658:	d503201f 	nop
   a865c:	d503201f 	nop

00000000000a8660 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   a8660:	f9401000 	ldr	x0, [x0, #32]
   a8664:	b4000060 	cbz	x0, a8670 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x10>
   a8668:	d2800281 	mov	x1, #0x14                  	// #20
   a866c:	17fff429 	b	a5710 <operator delete(void*, unsigned long)>
   a8670:	d65f03c0 	ret
   a8674:	d503201f 	nop
   a8678:	d503201f 	nop
   a867c:	d503201f 	nop

00000000000a8680 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   a8680:	b9401003 	ldr	w3, [x0, #16]
   a8684:	12001c21 	and	w1, w1, #0xff
   a8688:	12003c42 	and	w2, w2, #0xffff
   a868c:	7100207f 	cmp	w3, #0x8
   a8690:	54000168 	b.hi	a86bc <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x3c>  // b.pmore
   a8694:	13057c43 	asr	w3, w2, #5
   a8698:	530d1044 	ubfiz	w4, w2, #19, #5
   a869c:	f9401000 	ldr	x0, [x0, #32]
   a86a0:	530b7c42 	lsr	w2, w2, #11
   a86a4:	53161463 	ubfiz	w3, w3, #10, #6
   a86a8:	8b21c801 	add	x1, x0, w1, sxtw #2
   a86ac:	2a020c82 	orr	w2, w4, w2, lsl #3
   a86b0:	32081c63 	orr	w3, w3, #0xff000000
   a86b4:	2a020062 	orr	w2, w3, w2
   a86b8:	b9001422 	str	w2, [x1, #20]
   a86bc:	d65f03c0 	ret

00000000000a86c0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   a86c0:	b9401003 	ldr	w3, [x0, #16]
   a86c4:	12001c21 	and	w1, w1, #0xff
   a86c8:	7100207f 	cmp	w3, #0x8
   a86cc:	54000088 	b.hi	a86dc <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x1c>  // b.pmore
   a86d0:	f9401000 	ldr	x0, [x0, #32]
   a86d4:	8b21c801 	add	x1, x0, w1, sxtw #2
   a86d8:	b9001422 	str	w2, [x1, #20]
   a86dc:	d65f03c0 	ret

00000000000a86e0 <CBcmFrameBuffer::Initialize()>:
   a86e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a86e4:	910003fd 	mov	x29, sp
   a86e8:	52800001 	mov	w1, #0x0                   	// #0
   a86ec:	a90153f3 	stp	x19, x20, [sp, #16]
   a86f0:	aa0003f3 	mov	x19, x0
   a86f4:	9100a3e0 	add	x0, sp, #0x28
   a86f8:	97ffd006 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a86fc:	9100a261 	add	x1, x19, #0x28
   a8700:	9100a3e0 	add	x0, sp, #0x28
   a8704:	52800e02 	mov	w2, #0x70                  	// #112
   a8708:	97ffd02e 	bl	9c7c0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   a870c:	72001c14 	ands	w20, w0, #0xff
   a8710:	54000340 	b.eq	a8778 <CBcmFrameBuffer::Initialize()+0x98>  // b.none
   a8714:	b9403660 	ldr	w0, [x19, #52]
   a8718:	340002e0 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a871c:	b9403a60 	ldr	w0, [x19, #56]
   a8720:	340002a0 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a8724:	b9404a60 	ldr	w0, [x19, #72]
   a8728:	34000260 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a872c:	b9404e60 	ldr	w0, [x19, #76]
   a8730:	34000220 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a8734:	b9405e60 	ldr	w0, [x19, #92]
   a8738:	340001e0 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a873c:	b9408260 	ldr	w0, [x19, #128]
   a8740:	340001a0 	cbz	w0, a8774 <CBcmFrameBuffer::Initialize()+0x94>
   a8744:	b9408661 	ldr	w1, [x19, #132]
   a8748:	12007400 	and	w0, w0, #0x3fffffff
   a874c:	b9401262 	ldr	w2, [x19, #16]
   a8750:	29028660 	stp	w0, w1, [x19, #20]
   a8754:	b9409660 	ldr	w0, [x19, #148]
   a8758:	7100205f 	cmp	w2, #0x8
   a875c:	b9001e60 	str	w0, [x19, #28]
   a8760:	540000c8 	b.hi	a8778 <CBcmFrameBuffer::Initialize()+0x98>  // b.pmore
   a8764:	aa1303e0 	mov	x0, x19
   a8768:	97ffff52 	bl	a84b0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   a876c:	12001c14 	and	w20, w0, #0xff
   a8770:	14000002 	b	a8778 <CBcmFrameBuffer::Initialize()+0x98>
   a8774:	52800014 	mov	w20, #0x0                   	// #0
   a8778:	9100a3e0 	add	x0, sp, #0x28
   a877c:	97ffcfe9 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a8780:	2a1403e0 	mov	w0, w20
   a8784:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8788:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a878c:	d65f03c0 	ret

00000000000a8790 <CBcmFrameBuffer::GetWidth() const>:
   a8790:	b9400000 	ldr	w0, [x0]
   a8794:	d65f03c0 	ret
   a8798:	d503201f 	nop
   a879c:	d503201f 	nop

00000000000a87a0 <CBcmFrameBuffer::GetHeight() const>:
   a87a0:	b9400400 	ldr	w0, [x0, #4]
   a87a4:	d65f03c0 	ret
   a87a8:	d503201f 	nop
   a87ac:	d503201f 	nop

00000000000a87b0 <CBcmFrameBuffer::GetVirtWidth() const>:
   a87b0:	b9400800 	ldr	w0, [x0, #8]
   a87b4:	d65f03c0 	ret
   a87b8:	d503201f 	nop
   a87bc:	d503201f 	nop

00000000000a87c0 <CBcmFrameBuffer::GetVirtHeight() const>:
   a87c0:	b9400c00 	ldr	w0, [x0, #12]
   a87c4:	d65f03c0 	ret
   a87c8:	d503201f 	nop
   a87cc:	d503201f 	nop

00000000000a87d0 <CBcmFrameBuffer::GetPitch() const>:
   a87d0:	b9401c00 	ldr	w0, [x0, #28]
   a87d4:	d65f03c0 	ret
   a87d8:	d503201f 	nop
   a87dc:	d503201f 	nop

00000000000a87e0 <CBcmFrameBuffer::GetDepth() const>:
   a87e0:	b9401000 	ldr	w0, [x0, #16]
   a87e4:	d65f03c0 	ret
   a87e8:	d503201f 	nop
   a87ec:	d503201f 	nop

00000000000a87f0 <CBcmFrameBuffer::GetBuffer() const>:
   a87f0:	b9401400 	ldr	w0, [x0, #20]
   a87f4:	d65f03c0 	ret
   a87f8:	d503201f 	nop
   a87fc:	d503201f 	nop

00000000000a8800 <CBcmFrameBuffer::GetSize() const>:
   a8800:	b9401800 	ldr	w0, [x0, #24]
   a8804:	d65f03c0 	ret
   a8808:	d503201f 	nop
   a880c:	d503201f 	nop

00000000000a8810 <CBcmFrameBuffer::UpdatePalette()>:
   a8810:	b9401001 	ldr	w1, [x0, #16]
   a8814:	7100203f 	cmp	w1, #0x8
   a8818:	54000069 	b.ls	a8824 <CBcmFrameBuffer::UpdatePalette()+0x14>  // b.plast
   a881c:	52800020 	mov	w0, #0x1                   	// #1
   a8820:	d65f03c0 	ret
   a8824:	17ffff23 	b	a84b0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   a8828:	d503201f 	nop
   a882c:	d503201f 	nop

00000000000a8830 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   a8830:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a8834:	910003fd 	mov	x29, sp
   a8838:	9100c3e0 	add	x0, sp, #0x30
   a883c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8840:	2a0103f4 	mov	w20, w1
   a8844:	52800001 	mov	w1, #0x0                   	// #0
   a8848:	f90013f5 	str	x21, [sp, #32]
   a884c:	2a0203f5 	mov	w21, w2
   a8850:	97ffcfb0 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a8854:	9100c3e0 	add	x0, sp, #0x30
   a8858:	52900121 	mov	w1, #0x8009                	// #32777
   a885c:	72a00081 	movk	w1, #0x4, lsl #16
   a8860:	52800104 	mov	w4, #0x8                   	// #8
   a8864:	2908d7f4 	stp	w20, w21, [sp, #68]
   a8868:	52800283 	mov	w3, #0x14                  	// #20
   a886c:	9100e3e2 	add	x2, sp, #0x38
   a8870:	97ffcfb0 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a8874:	72001c13 	ands	w19, w0, #0xff
   a8878:	540000a0 	b.eq	a888c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x5c>  // b.none
   a887c:	b94047e0 	ldr	w0, [sp, #68]
   a8880:	52800013 	mov	w19, #0x0                   	// #0
   a8884:	6b14001f 	cmp	w0, w20
   a8888:	54000100 	b.eq	a88a8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>  // b.none
   a888c:	9100c3e0 	add	x0, sp, #0x30
   a8890:	97ffcfa4 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a8894:	2a1303e0 	mov	w0, w19
   a8898:	a94153f3 	ldp	x19, x20, [sp, #16]
   a889c:	f94013f5 	ldr	x21, [sp, #32]
   a88a0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a88a4:	d65f03c0 	ret
   a88a8:	b9404be0 	ldr	w0, [sp, #72]
   a88ac:	6b15001f 	cmp	w0, w21
   a88b0:	9100c3e0 	add	x0, sp, #0x30
   a88b4:	1a9f17f3 	cset	w19, eq  // eq = none
   a88b8:	97ffcf9a 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a88bc:	2a1303e0 	mov	w0, w19
   a88c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a88c4:	f94013f5 	ldr	x21, [sp, #32]
   a88c8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a88cc:	d65f03c0 	ret

00000000000a88d0 <CBcmFrameBuffer::WaitForVerticalSync()>:
   a88d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a88d4:	52800001 	mov	w1, #0x0                   	// #0
   a88d8:	910003fd 	mov	x29, sp
   a88dc:	9100a3e0 	add	x0, sp, #0x28
   a88e0:	f9000bf3 	str	x19, [sp, #16]
   a88e4:	97ffcf8b 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a88e8:	9100c3e2 	add	x2, sp, #0x30
   a88ec:	52800004 	mov	w4, #0x0                   	// #0
   a88f0:	52800203 	mov	w3, #0x10                  	// #16
   a88f4:	9100a3e0 	add	x0, sp, #0x28
   a88f8:	529001c1 	mov	w1, #0x800e                	// #32782
   a88fc:	72a00081 	movk	w1, #0x4, lsl #16
   a8900:	97ffcf8c 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a8904:	2a0003f3 	mov	w19, w0
   a8908:	9100a3e0 	add	x0, sp, #0x28
   a890c:	97ffcf85 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a8910:	2a1303e0 	mov	w0, w19
   a8914:	f9400bf3 	ldr	x19, [sp, #16]
   a8918:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a891c:	d65f03c0 	ret

00000000000a8920 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   a8920:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a8924:	910003fd 	mov	x29, sp
   a8928:	9100a3e0 	add	x0, sp, #0x28
   a892c:	f9000bf3 	str	x19, [sp, #16]
   a8930:	2a0103f3 	mov	w19, w1
   a8934:	52800001 	mov	w1, #0x0                   	// #0
   a8938:	97ffcf76 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a893c:	9100c3e2 	add	x2, sp, #0x30
   a8940:	52800084 	mov	w4, #0x4                   	// #4
   a8944:	b9003ff3 	str	w19, [sp, #60]
   a8948:	52800203 	mov	w3, #0x10                  	// #16
   a894c:	9100a3e0 	add	x0, sp, #0x28
   a8950:	529001e1 	mov	w1, #0x800f                	// #32783
   a8954:	72a00081 	movk	w1, #0x4, lsl #16
   a8958:	97ffcf76 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a895c:	2a0003f3 	mov	w19, w0
   a8960:	9100a3e0 	add	x0, sp, #0x28
   a8964:	97ffcf6f 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   a8968:	2a1303e0 	mov	w0, w19
   a896c:	f9400bf3 	ldr	x19, [sp, #16]
   a8970:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a8974:	d65f03c0 	ret
	...

00000000000a8980 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   a8980:	b9000001 	str	w1, [x0]
   a8984:	39001002 	strb	w2, [x0, #4]
   a8988:	d65f03c0 	ret
   a898c:	d503201f 	nop

00000000000a8990 <CBcmMailBox::~CBcmMailBox()>:
   a8990:	d65f03c0 	ret
   a8994:	d503201f 	nop
   a8998:	d503201f 	nop
   a899c:	d503201f 	nop

00000000000a89a0 <CBcmMailBox::WriteRead(unsigned int)>:
   a89a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a89a4:	910003fd 	mov	x29, sp
   a89a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a89ac:	aa0003f4 	mov	x20, x0
   a89b0:	39401000 	ldrb	w0, [x0, #4]
   a89b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a89b8:	2a0103f6 	mov	w22, w1
   a89bc:	35000080 	cbnz	w0, a89cc <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   a89c0:	d0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a89c4:	b94ff800 	ldr	w0, [x0, #4088]
   a89c8:	350005c0 	cbnz	w0, a8a80 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   a89cc:	d2971313 	mov	x19, #0xb898                	// #47256
   a89d0:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   a89d4:	b9400260 	ldr	w0, [x19]
   a89d8:	d2971015 	mov	x21, #0xb880                	// #47232
   a89dc:	f2bfc015 	movk	x21, #0xfe00, lsl #16
   a89e0:	37f000e0 	tbnz	w0, #30, a89fc <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   a89e4:	d503201f 	nop
   a89e8:	b94002a1 	ldr	w1, [x21]
   a89ec:	52800280 	mov	w0, #0x14                  	// #20
   a89f0:	97ffee60 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   a89f4:	b9400262 	ldr	w2, [x19]
   a89f8:	36f7ff82 	tbz	w2, #30, a89e8 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   a89fc:	d2971703 	mov	x3, #0xb8b8                	// #47288
   a8a00:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   a8a04:	d503201f 	nop
   a8a08:	b9400062 	ldr	w2, [x3]
   a8a0c:	37ffffe2 	tbnz	w2, #31, a8a08 <CBcmMailBox::WriteRead(unsigned int)+0x68>
   a8a10:	f2400edf 	tst	x22, #0xf
   a8a14:	54000481 	b.ne	a8aa4 <CBcmMailBox::WriteRead(unsigned int)+0x104>  // b.any
   a8a18:	b9400281 	ldr	w1, [x20]
   a8a1c:	d2971400 	mov	x0, #0xb8a0                	// #47264
   a8a20:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   a8a24:	d2971302 	mov	x2, #0xb898                	// #47256
   a8a28:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   a8a2c:	d2971004 	mov	x4, #0xb880                	// #47232
   a8a30:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   a8a34:	2a0102d6 	orr	w22, w22, w1
   a8a38:	b9000016 	str	w22, [x0]
   a8a3c:	b9400280 	ldr	w0, [x20]
   a8a40:	b9400041 	ldr	w1, [x2]
   a8a44:	37f7ffe1 	tbnz	w1, #30, a8a40 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
   a8a48:	b9400081 	ldr	w1, [x4]
   a8a4c:	12000c23 	and	w3, w1, #0xf
   a8a50:	6b00007f 	cmp	w3, w0
   a8a54:	54ffff61 	b.ne	a8a40 <CBcmMailBox::WriteRead(unsigned int)+0xa0>  // b.any
   a8a58:	39401282 	ldrb	w2, [x20, #4]
   a8a5c:	121c6c20 	and	w0, w1, #0xfffffff0
   a8a60:	35000082 	cbnz	w2, a8a70 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   a8a64:	d0000061 	adrp	x1, b6000 <s_OldInfo+0x68>
   a8a68:	b94ff821 	ldr	w1, [x1, #4088]
   a8a6c:	350000e1 	cbnz	w1, a8a88 <CBcmMailBox::WriteRead(unsigned int)+0xe8>
   a8a70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8a74:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8a78:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a8a7c:	d65f03c0 	ret
   a8a80:	97fff614 	bl	a62d0 <EnterCritical>
   a8a84:	17ffffd2 	b	a89cc <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   a8a88:	b9003fe0 	str	w0, [sp, #60]
   a8a8c:	97fff641 	bl	a6390 <LeaveCritical>
   a8a90:	b9403fe0 	ldr	w0, [sp, #60]
   a8a94:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8a98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8a9c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a8aa0:	d65f03c0 	ret
   a8aa4:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8aa8:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8aac:	9131a021 	add	x1, x1, #0xc68
   a8ab0:	9131e000 	add	x0, x0, #0xc78
   a8ab4:	52800c42 	mov	w2, #0x62                  	// #98
   a8ab8:	97ffcef2 	bl	9c680 <assertion_failed>
   a8abc:	d503201f 	nop

00000000000a8ac0 <CBcmMailBox::Flush()>:
   a8ac0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8ac4:	910003fd 	mov	x29, sp
   a8ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   a8acc:	d2971313 	mov	x19, #0xb898                	// #47256
   a8ad0:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   a8ad4:	b9400260 	ldr	w0, [x19]
   a8ad8:	37f00120 	tbnz	w0, #30, a8afc <CBcmMailBox::Flush()+0x3c>
   a8adc:	d2971014 	mov	x20, #0xb880                	// #47232
   a8ae0:	f2bfc014 	movk	x20, #0xfe00, lsl #16
   a8ae4:	d503201f 	nop
   a8ae8:	b9400281 	ldr	w1, [x20]
   a8aec:	52800280 	mov	w0, #0x14                  	// #20
   a8af0:	97ffee20 	bl	a4370 <CTimer::SimpleMsDelay(unsigned int)>
   a8af4:	b9400260 	ldr	w0, [x19]
   a8af8:	36f7ff80 	tbz	w0, #30, a8ae8 <CBcmMailBox::Flush()+0x28>
   a8afc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8b00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8b04:	d65f03c0 	ret
   a8b08:	d503201f 	nop
   a8b0c:	d503201f 	nop

00000000000a8b10 <CBcmMailBox::Read()>:
   a8b10:	b9400004 	ldr	w4, [x0]
   a8b14:	d2971301 	mov	x1, #0xb898                	// #47256
   a8b18:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   a8b1c:	d2971003 	mov	x3, #0xb880                	// #47232
   a8b20:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   a8b24:	d503201f 	nop
   a8b28:	b9400020 	ldr	w0, [x1]
   a8b2c:	37f7ffe0 	tbnz	w0, #30, a8b28 <CBcmMailBox::Read()+0x18>
   a8b30:	b9400060 	ldr	w0, [x3]
   a8b34:	12000c02 	and	w2, w0, #0xf
   a8b38:	6b04005f 	cmp	w2, w4
   a8b3c:	54ffff61 	b.ne	a8b28 <CBcmMailBox::Read()+0x18>  // b.any
   a8b40:	121c6c00 	and	w0, w0, #0xfffffff0
   a8b44:	d65f03c0 	ret
   a8b48:	d503201f 	nop
   a8b4c:	d503201f 	nop

00000000000a8b50 <CBcmMailBox::Write(unsigned int)>:
   a8b50:	d2971703 	mov	x3, #0xb8b8                	// #47288
   a8b54:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   a8b58:	b9400062 	ldr	w2, [x3]
   a8b5c:	37ffffe2 	tbnz	w2, #31, a8b58 <CBcmMailBox::Write(unsigned int)+0x8>
   a8b60:	f2400c3f 	tst	x1, #0xf
   a8b64:	540000e1 	b.ne	a8b80 <CBcmMailBox::Write(unsigned int)+0x30>  // b.any
   a8b68:	b9400002 	ldr	w2, [x0]
   a8b6c:	d2971400 	mov	x0, #0xb8a0                	// #47264
   a8b70:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   a8b74:	2a020021 	orr	w1, w1, w2
   a8b78:	b9000001 	str	w1, [x0]
   a8b7c:	d65f03c0 	ret
   a8b80:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8b84:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8b88:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8b8c:	9131a021 	add	x1, x1, #0xc68
   a8b90:	910003fd 	mov	x29, sp
   a8b94:	9131e000 	add	x0, x0, #0xc78
   a8b98:	52800c42 	mov	w2, #0x62                  	// #98
   a8b9c:	97ffceb9 	bl	9c680 <assertion_failed>

00000000000a8ba0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   a8ba0:	d0000060 	adrp	x0, b6000 <s_OldInfo+0x68>
   a8ba4:	b90ff81f 	str	wzr, [x0, #4088]
   a8ba8:	d65f03c0 	ret
   a8bac:	00000000 	.inst	0x00000000 ; undefined

00000000000a8bb0 <CCharGenerator::CCharGenerator()>:
   a8bb0:	52800101 	mov	w1, #0x8                   	// #8
   a8bb4:	b9000001 	str	w1, [x0]
   a8bb8:	d65f03c0 	ret
   a8bbc:	d503201f 	nop

00000000000a8bc0 <CCharGenerator::~CCharGenerator()>:
   a8bc0:	d65f03c0 	ret
   a8bc4:	d503201f 	nop
   a8bc8:	d503201f 	nop
   a8bcc:	d503201f 	nop

00000000000a8bd0 <CCharGenerator::GetCharWidth() const>:
   a8bd0:	b9400000 	ldr	w0, [x0]
   a8bd4:	d65f03c0 	ret
   a8bd8:	d503201f 	nop
   a8bdc:	d503201f 	nop

00000000000a8be0 <CCharGenerator::GetCharHeight() const>:
   a8be0:	52800260 	mov	w0, #0x13                  	// #19
   a8be4:	d65f03c0 	ret
   a8be8:	d503201f 	nop
   a8bec:	d503201f 	nop

00000000000a8bf0 <CCharGenerator::GetUnderline() const>:
   a8bf0:	52800200 	mov	w0, #0x10                  	// #16
   a8bf4:	d65f03c0 	ret
   a8bf8:	d503201f 	nop
   a8bfc:	d503201f 	nop

00000000000a8c00 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   a8c00:	12001c21 	and	w1, w1, #0xff
   a8c04:	51008421 	sub	w1, w1, #0x21
   a8c08:	7103783f 	cmp	w1, #0xde
   a8c0c:	54000228 	b.hi	a8c50 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>  // b.pmore
   a8c10:	b9400000 	ldr	w0, [x0]
   a8c14:	6b02001f 	cmp	w0, w2
   a8c18:	54000209 	b.ls	a8c58 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>  // b.plast
   a8c1c:	71003c7f 	cmp	w3, #0xf
   a8c20:	52800000 	mov	w0, #0x0                   	// #0
   a8c24:	54000188 	b.hi	a8c54 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>  // b.pmore
   a8c28:	d37c7c21 	ubfiz	x1, x1, #4, #32
   a8c2c:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8c30:	91330000 	add	x0, x0, #0xcc0
   a8c34:	52801004 	mov	w4, #0x80                  	// #128
   a8c38:	8b010001 	add	x1, x0, x1
   a8c3c:	1ac22882 	asr	w2, w4, w2
   a8c40:	38634820 	ldrb	w0, [x1, w3, uxtw]
   a8c44:	6a02001f 	tst	w0, w2
   a8c48:	1a9f07e0 	cset	w0, ne  // ne = any
   a8c4c:	d65f03c0 	ret
   a8c50:	52800000 	mov	w0, #0x0                   	// #0
   a8c54:	d65f03c0 	ret
   a8c58:	f0000041 	adrp	x1, b3000 <vtable for CSerialDevice+0x18>
   a8c5c:	f0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a8c60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8c64:	91324021 	add	x1, x1, #0xc90
   a8c68:	910003fd 	mov	x29, sp
   a8c6c:	9132a000 	add	x0, x0, #0xca8
   a8c70:	528009c2 	mov	w2, #0x4e                  	// #78
   a8c74:	97ffce83 	bl	9c680 <assertion_failed>
	...

00000000000a8c80 <DelayLoop>:
   a8c80:	2a0103e1 	mov	w1, w1
   a8c84:	2a0203e2 	mov	w2, w2
   a8c88:	71000400 	subs	w0, w0, #0x1
   a8c8c:	54ffffa1 	b.ne	a8c80 <DelayLoop>  // b.any
   a8c90:	d65f03c0 	ret
	...

00000000000a8ca0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   a8ca0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8ca4:	910003fd 	mov	x29, sp
   a8ca8:	a90153f3 	stp	x19, x20, [sp, #16]
   a8cac:	aa0003f3 	mov	x19, x0
   a8cb0:	aa0203f4 	mov	x20, x2
   a8cb4:	f90013f5 	str	x21, [sp, #32]
   a8cb8:	2a0103f5 	mov	w21, w1
   a8cbc:	97ffdb59 	bl	9fa20 <CMachineInfo::Get()>
   a8cc0:	2a1503e1 	mov	w1, w21
   a8cc4:	97ffdaf7 	bl	9f8a0 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   a8cc8:	7102001f 	cmp	w0, #0x80
   a8ccc:	b9000260 	str	w0, [x19]
   a8cd0:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   a8cd4:	f9000e74 	str	x20, [x19, #24]
   a8cd8:	3900827f 	strb	wzr, [x19, #32]
   a8cdc:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   a8ce0:	3900e27f 	strb	wzr, [x19, #56]
   a8ce4:	54000460 	b.eq	a8d70 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd0>  // b.none
   a8ce8:	71001c1f 	cmp	w0, #0x7
   a8cec:	540004c8 	b.hi	a8d84 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe4>  // b.pmore
   a8cf0:	52800001 	mov	w1, #0x0                   	// #0
   a8cf4:	d28007e0 	mov	x0, #0x3f                  	// #63
   a8cf8:	97fff23a 	bl	a55e0 <operator new[](unsigned long, int)>
   a8cfc:	91007c02 	add	x2, x0, #0x1f
   a8d00:	aa0003e3 	mov	x3, x0
   a8d04:	b9400265 	ldr	w5, [x19]
   a8d08:	927be842 	and	x2, x2, #0xffffffffffffffe0
   a8d0c:	d28ffe04 	mov	x4, #0x7ff0                	// #32752
   a8d10:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   a8d14:	f9000663 	str	x3, [x19, #8]
   a8d18:	52800021 	mov	w1, #0x1                   	// #1
   a8d1c:	f9000c5f 	str	xzr, [x2, #24]
   a8d20:	52807d00 	mov	w0, #0x3e8                 	// #1000
   a8d24:	b9400083 	ldr	w3, [x4]
   a8d28:	1ac52021 	lsl	w1, w1, w5
   a8d2c:	f9000a62 	str	x2, [x19, #16]
   a8d30:	2a030021 	orr	w1, w1, w3
   a8d34:	b9000081 	str	w1, [x4]
   a8d38:	97ffed96 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   a8d3c:	b9400261 	ldr	w1, [x19]
   a8d40:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   a8d44:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   a8d48:	1101c021 	add	w1, w1, #0x70
   a8d4c:	53185c21 	lsl	w1, w1, #8
   a8d50:	b9000020 	str	w0, [x1]
   a8d54:	d503201f 	nop
   a8d58:	b9400020 	ldr	w0, [x1]
   a8d5c:	37ffffe0 	tbnz	w0, #31, a8d58 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb8>
   a8d60:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8d64:	f94013f5 	ldr	x21, [sp, #32]
   a8d68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8d6c:	d65f03c0 	ret
   a8d70:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8d74:	912ac021 	add	x1, x1, #0xab0
   a8d78:	91004020 	add	x0, x1, #0x10
   a8d7c:	52800ac2 	mov	w2, #0x56                  	// #86
   a8d80:	97ffce40 	bl	9c680 <assertion_failed>
   a8d84:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8d88:	912ac021 	add	x1, x1, #0xab0
   a8d8c:	9100c020 	add	x0, x1, #0x30
   a8d90:	52800ae2 	mov	w2, #0x57                  	// #87
   a8d94:	97ffce3b 	bl	9c680 <assertion_failed>
   a8d98:	d503201f 	nop
   a8d9c:	d503201f 	nop

00000000000a8da0 <CDMAChannel::~CDMAChannel()>:
   a8da0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8da4:	910003fd 	mov	x29, sp
   a8da8:	f9000bf3 	str	x19, [sp, #16]
   a8dac:	aa0003f3 	mov	x19, x0
   a8db0:	b9400000 	ldr	w0, [x0]
   a8db4:	71001c1f 	cmp	w0, #0x7
   a8db8:	54000548 	b.hi	a8e60 <CDMAChannel::~CDMAChannel()+0xc0>  // b.pmore
   a8dbc:	52800e02 	mov	w2, #0x70                  	// #112
   a8dc0:	72a01fc2 	movk	w2, #0xfe, lsl #16
   a8dc4:	0b020000 	add	w0, w0, w2
   a8dc8:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   a8dcc:	53185c00 	lsl	w0, w0, #8
   a8dd0:	b9000001 	str	w1, [x0]
   a8dd4:	b9400263 	ldr	w3, [x19]
   a8dd8:	0b020062 	add	w2, w3, w2
   a8ddc:	53185c42 	lsl	w2, w2, #8
   a8de0:	b9400041 	ldr	w1, [x2]
   a8de4:	37ffffe1 	tbnz	w1, #31, a8de0 <CDMAChannel::~CDMAChannel()+0x40>
   a8de8:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   a8dec:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   a8df0:	f9400e60 	ldr	x0, [x19, #24]
   a8df4:	52800021 	mov	w1, #0x1                   	// #1
   a8df8:	1ac32021 	lsl	w1, w1, w3
   a8dfc:	b9400043 	ldr	w3, [x2]
   a8e00:	0a210061 	bic	w1, w3, w1
   a8e04:	b9000041 	str	w1, [x2]
   a8e08:	f900167f 	str	xzr, [x19, #40]
   a8e0c:	b4000120 	cbz	x0, a8e30 <CDMAChannel::~CDMAChannel()+0x90>
   a8e10:	39408261 	ldrb	w1, [x19, #32]
   a8e14:	340000c1 	cbz	w1, a8e2c <CDMAChannel::~CDMAChannel()+0x8c>
   a8e18:	b9400261 	ldr	w1, [x19]
   a8e1c:	7100303f 	cmp	w1, #0xc
   a8e20:	540002a8 	b.hi	a8e74 <CDMAChannel::~CDMAChannel()+0xd4>  // b.pmore
   a8e24:	1101c021 	add	w1, w1, #0x70
   a8e28:	97fffc22 	bl	a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a8e2c:	f9000e7f 	str	xzr, [x19, #24]
   a8e30:	97ffdafc 	bl	9fa20 <CMachineInfo::Get()>
   a8e34:	b9400261 	ldr	w1, [x19]
   a8e38:	97ffdad2 	bl	9f980 <CMachineInfo::FreeDMAChannel(unsigned int)>
   a8e3c:	f9000a7f 	str	xzr, [x19, #16]
   a8e40:	f9400660 	ldr	x0, [x19, #8]
   a8e44:	b4000080 	cbz	x0, a8e54 <CDMAChannel::~CDMAChannel()+0xb4>
   a8e48:	f9400bf3 	ldr	x19, [sp, #16]
   a8e4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8e50:	17fff224 	b	a56e0 <operator delete[](void*)>
   a8e54:	f9400bf3 	ldr	x19, [sp, #16]
   a8e58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8e5c:	d65f03c0 	ret
   a8e60:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8e64:	912ac021 	add	x1, x1, #0xab0
   a8e68:	9100c020 	add	x0, x1, #0x30
   a8e6c:	52800e22 	mov	w2, #0x71                  	// #113
   a8e70:	97ffce04 	bl	9c680 <assertion_failed>
   a8e74:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8e78:	912ac021 	add	x1, x1, #0xab0
   a8e7c:	91014020 	add	x0, x1, #0x50
   a8e80:	52801062 	mov	w2, #0x83                  	// #131
   a8e84:	97ffcdff 	bl	9c680 <assertion_failed>
   a8e88:	d503201f 	nop
   a8e8c:	d503201f 	nop

00000000000a8e90 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   a8e90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8e94:	910003fd 	mov	x29, sp
   a8e98:	a90153f3 	stp	x19, x20, [sp, #16]
   a8e9c:	b40005c1 	cbz	x1, a8f54 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xc4>
   a8ea0:	b4000642 	cbz	x2, a8f68 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xd8>
   a8ea4:	aa0303f3 	mov	x19, x3
   a8ea8:	b40006a3 	cbz	x3, a8f7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xec>
   a8eac:	71003c9f 	cmp	w4, #0xf
   a8eb0:	54000708 	b.hi	a8f90 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x100>  // b.pmore
   a8eb4:	aa0003e6 	mov	x6, x0
   a8eb8:	f9400800 	ldr	x0, [x0, #16]
   a8ebc:	b4000740 	cbz	x0, a8fa4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x114>
   a8ec0:	aa0103f4 	mov	x20, x1
   a8ec4:	b24077e1 	mov	x1, #0x3fffffff            	// #1073741823
   a8ec8:	eb01007f 	cmp	x3, x1
   a8ecc:	54000768 	b.hi	a8fb8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x128>  // b.pmore
   a8ed0:	b94000c3 	ldr	w3, [x6]
   a8ed4:	d29fffe1 	mov	x1, #0xffff                	// #65535
   a8ed8:	117f8063 	add	w3, w3, #0xfe0, lsl #12
   a8edc:	1101c063 	add	w3, w3, #0x70
   a8ee0:	53185c63 	lsl	w3, w3, #8
   a8ee4:	11008063 	add	w3, w3, #0x20
   a8ee8:	2a0303e3 	mov	w3, w3
   a8eec:	b9400063 	ldr	w3, [x3]
   a8ef0:	f264007f 	tst	x3, #0x10000000
   a8ef4:	fa411260 	ccmp	x19, x1, #0x0, ne  // ne = any
   a8ef8:	540006a8 	b.hi	a8fcc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x13c>  // b.pmore
   a8efc:	52806601 	mov	w1, #0x330                 	// #816
   a8f00:	32020443 	orr	w3, w2, #0xc0000000
   a8f04:	f900081f 	str	xzr, [x0, #16]
   a8f08:	2a043024 	orr	w4, w1, w4, lsl #12
   a8f0c:	32020681 	orr	w1, w20, #0xc0000000
   a8f10:	12001ca5 	and	w5, w5, #0xff
   a8f14:	29014c01 	stp	w1, w19, [x0, #8]
   a8f18:	29000c04 	stp	w4, w3, [x0]
   a8f1c:	350000a5 	cbnz	w5, a8f30 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0xa0>
   a8f20:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8f24:	f90020df 	str	xzr, [x6, #64]
   a8f28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8f2c:	d65f03c0 	ret
   a8f30:	aa0203e0 	mov	x0, x2
   a8f34:	aa1303e1 	mov	x1, x19
   a8f38:	a9044cd4 	stp	x20, x19, [x6, #64]
   a8f3c:	97fff5f9 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   a8f40:	aa1303e1 	mov	x1, x19
   a8f44:	aa1403e0 	mov	x0, x20
   a8f48:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8f4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8f50:	17fff5f4 	b	a6720 <CleanAndInvalidateDataCacheRange>
   a8f54:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8f58:	912ac021 	add	x1, x1, #0xab0
   a8f5c:	9101a020 	add	x0, x1, #0x68
   a8f60:	528012a2 	mov	w2, #0x95                  	// #149
   a8f64:	97ffcdc7 	bl	9c680 <assertion_failed>
   a8f68:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8f6c:	912ac021 	add	x1, x1, #0xab0
   a8f70:	91020020 	add	x0, x1, #0x80
   a8f74:	528012c2 	mov	w2, #0x96                  	// #150
   a8f78:	97ffcdc2 	bl	9c680 <assertion_failed>
   a8f7c:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8f80:	912ac021 	add	x1, x1, #0xab0
   a8f84:	91024020 	add	x0, x1, #0x90
   a8f88:	528012e2 	mov	w2, #0x97                  	// #151
   a8f8c:	97ffcdbd 	bl	9c680 <assertion_failed>
   a8f90:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8f94:	912ac021 	add	x1, x1, #0xab0
   a8f98:	91028020 	add	x0, x1, #0xa0
   a8f9c:	52801302 	mov	w2, #0x98                  	// #152
   a8fa0:	97ffcdb8 	bl	9c680 <assertion_failed>
   a8fa4:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8fa8:	912ac021 	add	x1, x1, #0xab0
   a8fac:	9102e020 	add	x0, x1, #0xb8
   a8fb0:	52801342 	mov	w2, #0x9a                  	// #154
   a8fb4:	97ffcdb3 	bl	9c680 <assertion_failed>
   a8fb8:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8fbc:	912ac021 	add	x1, x1, #0xab0
   a8fc0:	91034020 	add	x0, x1, #0xd0
   a8fc4:	52801362 	mov	w2, #0x9b                  	// #155
   a8fc8:	97ffcdae 	bl	9c680 <assertion_failed>
   a8fcc:	90000061 	adrp	x1, b4000 <font_data+0x340>
   a8fd0:	912ac021 	add	x1, x1, #0xab0
   a8fd4:	9103a020 	add	x0, x1, #0xe8
   a8fd8:	52801382 	mov	w2, #0x9c                  	// #156
   a8fdc:	97ffcda9 	bl	9c680 <assertion_failed>

00000000000a8fe0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>:
   a8fe0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8fe4:	910003fd 	mov	x29, sp
   a8fe8:	b4000461 	cbz	x1, a9074 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x94>
   a8fec:	b40004e3 	cbz	x3, a9088 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xa8>
   a8ff0:	aa0003e7 	mov	x7, x0
   a8ff4:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   a8ff8:	eb00007f 	cmp	x3, x0
   a8ffc:	54000508 	b.hi	a909c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xbc>  // b.pmore
   a9000:	b94000e5 	ldr	w5, [x7]
   a9004:	aa0103e6 	mov	x6, x1
   a9008:	d29fffe0 	mov	x0, #0xffff                	// #65535
   a900c:	117f80a5 	add	w5, w5, #0xfe0, lsl #12
   a9010:	1101c0a5 	add	w5, w5, #0x70
   a9014:	53185ca5 	lsl	w5, w5, #8
   a9018:	110080a5 	add	w5, w5, #0x20
   a901c:	2a0503e5 	mov	w5, w5
   a9020:	b94000a1 	ldr	w1, [x5]
   a9024:	f264003f 	tst	x1, #0x10000000
   a9028:	fa401060 	ccmp	x3, x0, #0x0, ne  // ne = any
   a902c:	54000568 	b.hi	a90d8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xf8>  // b.pmore
   a9030:	72005c42 	ands	w2, w2, #0xffffff
   a9034:	540003e0 	b.eq	a90b0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xd0>  // b.none
   a9038:	52afc000 	mov	w0, #0x7e000000            	// #2113929216
   a903c:	f94008e5 	ldr	x5, [x7, #16]
   a9040:	0b000042 	add	w2, w2, w0
   a9044:	b4000405 	cbz	x5, a90c4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0xe4>
   a9048:	52808701 	mov	w1, #0x438                 	// #1080
   a904c:	320204c0 	orr	w0, w6, #0xc0000000
   a9050:	f90008bf 	str	xzr, [x5, #16]
   a9054:	2a044024 	orr	w4, w1, w4, lsl #16
   a9058:	aa0303e1 	mov	x1, x3
   a905c:	29010ca0 	stp	w0, w3, [x5, #8]
   a9060:	aa0603e0 	mov	x0, x6
   a9064:	290008a4 	stp	w4, w2, [x5]
   a9068:	a9040ce6 	stp	x6, x3, [x7, #64]
   a906c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9070:	17fff5ac 	b	a6720 <CleanAndInvalidateDataCacheRange>
   a9074:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9078:	912ac021 	add	x1, x1, #0xab0
   a907c:	9101a020 	add	x0, x1, #0x68
   a9080:	52801742 	mov	w2, #0xba                  	// #186
   a9084:	97ffcd7f 	bl	9c680 <assertion_failed>
   a9088:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a908c:	912ac021 	add	x1, x1, #0xab0
   a9090:	91024020 	add	x0, x1, #0x90
   a9094:	52801762 	mov	w2, #0xbb                  	// #187
   a9098:	97ffcd7a 	bl	9c680 <assertion_failed>
   a909c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a90a0:	912ac021 	add	x1, x1, #0xab0
   a90a4:	91034020 	add	x0, x1, #0xd0
   a90a8:	52801782 	mov	w2, #0xbc                  	// #188
   a90ac:	97ffcd75 	bl	9c680 <assertion_failed>
   a90b0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a90b4:	912ac021 	add	x1, x1, #0xab0
   a90b8:	91050020 	add	x0, x1, #0x140
   a90bc:	52801822 	mov	w2, #0xc1                  	// #193
   a90c0:	97ffcd70 	bl	9c680 <assertion_failed>
   a90c4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a90c8:	912ac021 	add	x1, x1, #0xab0
   a90cc:	9102e020 	add	x0, x1, #0xb8
   a90d0:	52801882 	mov	w2, #0xc4                  	// #196
   a90d4:	97ffcd6b 	bl	9c680 <assertion_failed>
   a90d8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a90dc:	912ac021 	add	x1, x1, #0xab0
   a90e0:	9103a020 	add	x0, x1, #0xe8
   a90e4:	528017a2 	mov	w2, #0xbd                  	// #189
   a90e8:	97ffcd66 	bl	9c680 <assertion_failed>
   a90ec:	d503201f 	nop

00000000000a90f0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>:
   a90f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a90f4:	910003fd 	mov	x29, sp
   a90f8:	b4000462 	cbz	x2, a9184 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x94>
   a90fc:	2a0103e6 	mov	w6, w1
   a9100:	aa0303e1 	mov	x1, x3
   a9104:	b40004a3 	cbz	x3, a9198 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xa8>
   a9108:	aa0003e7 	mov	x7, x0
   a910c:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   a9110:	eb00007f 	cmp	x3, x0
   a9114:	540004c8 	b.hi	a91ac <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xbc>  // b.pmore
   a9118:	b94000e5 	ldr	w5, [x7]
   a911c:	d29fffe0 	mov	x0, #0xffff                	// #65535
   a9120:	117f80a5 	add	w5, w5, #0xfe0, lsl #12
   a9124:	1101c0a5 	add	w5, w5, #0x70
   a9128:	53185ca5 	lsl	w5, w5, #8
   a912c:	110080a5 	add	w5, w5, #0x20
   a9130:	2a0503e5 	mov	w5, w5
   a9134:	b94000a3 	ldr	w3, [x5]
   a9138:	f264007f 	tst	x3, #0x10000000
   a913c:	fa401020 	ccmp	x1, x0, #0x0, ne  // ne = any
   a9140:	54000548 	b.hi	a91e8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xf8>  // b.pmore
   a9144:	72005cc6 	ands	w6, w6, #0xffffff
   a9148:	540003c0 	b.eq	a91c0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xd0>  // b.none
   a914c:	52afc000 	mov	w0, #0x7e000000            	// #2113929216
   a9150:	f94008e3 	ldr	x3, [x7, #16]
   a9154:	0b0000c6 	add	w6, w6, w0
   a9158:	b40003e3 	cbz	x3, a91d4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0xe4>
   a915c:	52806905 	mov	w5, #0x348                 	// #840
   a9160:	32020440 	orr	w0, w2, #0xc0000000
   a9164:	29010466 	stp	w6, w1, [x3, #8]
   a9168:	2a0440a4 	orr	w4, w5, w4, lsl #16
   a916c:	f900087f 	str	xzr, [x3, #16]
   a9170:	29000064 	stp	w4, w0, [x3]
   a9174:	aa0203e0 	mov	x0, x2
   a9178:	f90020ff 	str	xzr, [x7, #64]
   a917c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9180:	17fff568 	b	a6720 <CleanAndInvalidateDataCacheRange>
   a9184:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9188:	912ac021 	add	x1, x1, #0xab0
   a918c:	91020020 	add	x0, x1, #0x80
   a9190:	52801b22 	mov	w2, #0xd9                  	// #217
   a9194:	97ffcd3b 	bl	9c680 <assertion_failed>
   a9198:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a919c:	912ac021 	add	x1, x1, #0xab0
   a91a0:	91024020 	add	x0, x1, #0x90
   a91a4:	52801b42 	mov	w2, #0xda                  	// #218
   a91a8:	97ffcd36 	bl	9c680 <assertion_failed>
   a91ac:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a91b0:	912ac021 	add	x1, x1, #0xab0
   a91b4:	91034020 	add	x0, x1, #0xd0
   a91b8:	52801b62 	mov	w2, #0xdb                  	// #219
   a91bc:	97ffcd31 	bl	9c680 <assertion_failed>
   a91c0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a91c4:	912ac021 	add	x1, x1, #0xab0
   a91c8:	91050020 	add	x0, x1, #0x140
   a91cc:	52801c02 	mov	w2, #0xe0                  	// #224
   a91d0:	97ffcd2c 	bl	9c680 <assertion_failed>
   a91d4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a91d8:	912ac021 	add	x1, x1, #0xab0
   a91dc:	9102e020 	add	x0, x1, #0xb8
   a91e0:	52801c62 	mov	w2, #0xe3                  	// #227
   a91e4:	97ffcd27 	bl	9c680 <assertion_failed>
   a91e8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a91ec:	912ac021 	add	x1, x1, #0xab0
   a91f0:	9103a020 	add	x0, x1, #0xe8
   a91f4:	52801b82 	mov	w2, #0xdc                  	// #220
   a91f8:	97ffcd22 	bl	9c680 <assertion_failed>
   a91fc:	d503201f 	nop

00000000000a9200 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   a9200:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9204:	910003fd 	mov	x29, sp
   a9208:	b40005c1 	cbz	x1, a92c0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xc0>
   a920c:	b4000642 	cbz	x2, a92d4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xd4>
   a9210:	b40006c3 	cbz	x3, a92e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xe8>
   a9214:	aa0003e8 	mov	x8, x0
   a9218:	d29fffe0 	mov	x0, #0xffff                	// #65535
   a921c:	eb00007f 	cmp	x3, x0
   a9220:	540006e8 	b.hi	a92fc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xfc>  // b.pmore
   a9224:	34000764 	cbz	w4, a9310 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x110>
   a9228:	5287ffe7 	mov	w7, #0x3fff                	// #16383
   a922c:	6b07009f 	cmp	w4, w7
   a9230:	540007a8 	b.hi	a9324 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x124>  // b.pmore
   a9234:	eb0000bf 	cmp	x5, x0
   a9238:	540003a8 	b.hi	a92ac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0xac>  // b.pmore
   a923c:	71003cdf 	cmp	w6, #0xf
   a9240:	540007c8 	b.hi	a9338 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x138>  // b.pmore
   a9244:	b9400107 	ldr	w7, [x8]
   a9248:	117f80e7 	add	w7, w7, #0xfe0, lsl #12
   a924c:	1101c0e7 	add	w7, w7, #0x70
   a9250:	53185ce7 	lsl	w7, w7, #8
   a9254:	110080e7 	add	w7, w7, #0x20
   a9258:	2a0703e7 	mov	w7, w7
   a925c:	b94000e0 	ldr	w0, [x7]
   a9260:	37e00760 	tbnz	w0, #28, a934c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x14c>
   a9264:	f9400907 	ldr	x7, [x8, #16]
   a9268:	b40007c7 	cbz	x7, a9360 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x160>
   a926c:	52806640 	mov	w0, #0x332                 	// #818
   a9270:	51000489 	sub	w9, w4, #0x1
   a9274:	2a063006 	orr	w6, w0, w6, lsl #12
   a9278:	32020421 	orr	w1, w1, #0xc0000000
   a927c:	53103ca5 	lsl	w5, w5, #16
   a9280:	2a094069 	orr	w9, w3, w9, lsl #16
   a9284:	3202044a 	orr	w10, w2, #0xc0000000
   a9288:	2a0403e4 	mov	w4, w4
   a928c:	29027ce5 	stp	w5, wzr, [x7, #16]
   a9290:	aa0203e0 	mov	x0, x2
   a9294:	290028e6 	stp	w6, w10, [x7]
   a9298:	290124e1 	stp	w1, w9, [x7, #8]
   a929c:	9b037c81 	mul	x1, x4, x3
   a92a0:	f900211f 	str	xzr, [x8, #64]
   a92a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a92a8:	17fff51e 	b	a6720 <CleanAndInvalidateDataCacheRange>
   a92ac:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a92b0:	912ac021 	add	x1, x1, #0xab0
   a92b4:	9106a020 	add	x0, x1, #0x1a8
   a92b8:	52801fe2 	mov	w2, #0xff                  	// #255
   a92bc:	97ffccf1 	bl	9c680 <assertion_failed>
   a92c0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a92c4:	912ac021 	add	x1, x1, #0xab0
   a92c8:	9101a020 	add	x0, x1, #0x68
   a92cc:	52801f22 	mov	w2, #0xf9                  	// #249
   a92d0:	97ffccec 	bl	9c680 <assertion_failed>
   a92d4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a92d8:	912ac021 	add	x1, x1, #0xab0
   a92dc:	91020020 	add	x0, x1, #0x80
   a92e0:	52801f42 	mov	w2, #0xfa                  	// #250
   a92e4:	97ffcce7 	bl	9c680 <assertion_failed>
   a92e8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a92ec:	912ac021 	add	x1, x1, #0xab0
   a92f0:	91054020 	add	x0, x1, #0x150
   a92f4:	52801f62 	mov	w2, #0xfb                  	// #251
   a92f8:	97ffcce2 	bl	9c680 <assertion_failed>
   a92fc:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9300:	912ac021 	add	x1, x1, #0xab0
   a9304:	9105a020 	add	x0, x1, #0x168
   a9308:	52801f82 	mov	w2, #0xfc                  	// #252
   a930c:	97ffccdd 	bl	9c680 <assertion_failed>
   a9310:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9314:	912ac021 	add	x1, x1, #0xab0
   a9318:	91060020 	add	x0, x1, #0x180
   a931c:	52801fa2 	mov	w2, #0xfd                  	// #253
   a9320:	97ffccd8 	bl	9c680 <assertion_failed>
   a9324:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9328:	912ac021 	add	x1, x1, #0xab0
   a932c:	91064020 	add	x0, x1, #0x190
   a9330:	52801fc2 	mov	w2, #0xfe                  	// #254
   a9334:	97ffccd3 	bl	9c680 <assertion_failed>
   a9338:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a933c:	912ac021 	add	x1, x1, #0xab0
   a9340:	91028020 	add	x0, x1, #0xa0
   a9344:	52802002 	mov	w2, #0x100                 	// #256
   a9348:	97ffccce 	bl	9c680 <assertion_failed>
   a934c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9350:	912ac021 	add	x1, x1, #0xab0
   a9354:	91070020 	add	x0, x1, #0x1c0
   a9358:	52802042 	mov	w2, #0x102                 	// #258
   a935c:	97ffccc9 	bl	9c680 <assertion_failed>
   a9360:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9364:	912ac021 	add	x1, x1, #0xab0
   a9368:	9102e020 	add	x0, x1, #0xb8
   a936c:	52802082 	mov	w2, #0x104                 	// #260
   a9370:	97ffccc4 	bl	9c680 <assertion_failed>
   a9374:	d503201f 	nop
   a9378:	d503201f 	nop
   a937c:	d503201f 	nop

00000000000a9380 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   a9380:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9384:	910003fd 	mov	x29, sp
   a9388:	b9400003 	ldr	w3, [x0]
   a938c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9390:	f90013f5 	str	x21, [sp, #32]
   a9394:	7100307f 	cmp	w3, #0xc
   a9398:	540002e8 	b.hi	a93f4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>  // b.pmore
   a939c:	aa0003f3 	mov	x19, x0
   a93a0:	f9400c00 	ldr	x0, [x0, #24]
   a93a4:	b4000320 	cbz	x0, a9408 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x88>
   a93a8:	aa0103f4 	mov	x20, x1
   a93ac:	39408261 	ldrb	w1, [x19, #32]
   a93b0:	aa0203f5 	mov	x21, x2
   a93b4:	34000101 	cbz	w1, a93d4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x54>
   a93b8:	f9001674 	str	x20, [x19, #40]
   a93bc:	b4000314 	cbz	x20, a941c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   a93c0:	f9001a75 	str	x21, [x19, #48]
   a93c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a93c8:	f94013f5 	ldr	x21, [sp, #32]
   a93cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a93d0:	d65f03c0 	ret
   a93d4:	90000002 	adrp	x2, a9000 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x20>
   a93d8:	1101c061 	add	w1, w3, #0x70
   a93dc:	911e0042 	add	x2, x2, #0x780
   a93e0:	aa1303e3 	mov	x3, x19
   a93e4:	97fffa93 	bl	a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a93e8:	52800020 	mov	w0, #0x1                   	// #1
   a93ec:	39008260 	strb	w0, [x19, #32]
   a93f0:	17fffff2 	b	a93b8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x38>
   a93f4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a93f8:	912ac021 	add	x1, x1, #0xab0
   a93fc:	91014020 	add	x0, x1, #0x50
   a9400:	52802342 	mov	w2, #0x11a                 	// #282
   a9404:	97ffcc9f 	bl	9c680 <assertion_failed>
   a9408:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a940c:	912ac021 	add	x1, x1, #0xab0
   a9410:	9107e020 	add	x0, x1, #0x1f8
   a9414:	52802362 	mov	w2, #0x11b                 	// #283
   a9418:	97ffcc9a 	bl	9c680 <assertion_failed>
   a941c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9420:	912ac021 	add	x1, x1, #0xab0
   a9424:	91084020 	add	x0, x1, #0x210
   a9428:	528024a2 	mov	w2, #0x125                 	// #293
   a942c:	97ffcc95 	bl	9c680 <assertion_failed>

00000000000a9430 <CDMAChannel::Start()>:
   a9430:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9434:	910003fd 	mov	x29, sp
   a9438:	b9400002 	ldr	w2, [x0]
   a943c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9440:	71001c5f 	cmp	w2, #0x7
   a9444:	540005e8 	b.hi	a9500 <CDMAChannel::Start()+0xd0>  // b.pmore
   a9448:	aa0003f3 	mov	x19, x0
   a944c:	f9400800 	ldr	x0, [x0, #16]
   a9450:	b4000620 	cbz	x0, a9514 <CDMAChannel::Start()+0xe4>
   a9454:	f9401661 	ldr	x1, [x19, #40]
   a9458:	b4000101 	cbz	x1, a9478 <CDMAChannel::Start()+0x48>
   a945c:	f9400e61 	ldr	x1, [x19, #24]
   a9460:	b4000781 	cbz	x1, a9550 <CDMAChannel::Start()+0x120>
   a9464:	39408261 	ldrb	w1, [x19, #32]
   a9468:	34000421 	cbz	w1, a94ec <CDMAChannel::Start()+0xbc>
   a946c:	b9400001 	ldr	w1, [x0]
   a9470:	32000021 	orr	w1, w1, #0x1
   a9474:	b9000001 	str	w1, [x0]
   a9478:	52800e14 	mov	w20, #0x70                  	// #112
   a947c:	72a01fd4 	movk	w20, #0xfe, lsl #16
   a9480:	0b140041 	add	w1, w2, w20
   a9484:	53185c23 	lsl	w3, w1, #8
   a9488:	53185c21 	lsl	w1, w1, #8
   a948c:	b9400063 	ldr	w3, [x3]
   a9490:	371004c3 	tbnz	w3, #2, a9528 <CDMAChannel::Start()+0xf8>
   a9494:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   a9498:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   a949c:	b9400084 	ldr	w4, [x4]
   a94a0:	52800023 	mov	w3, #0x1                   	// #1
   a94a4:	1ac22062 	lsl	w2, w3, w2
   a94a8:	6a04005f 	tst	w2, w4
   a94ac:	54000481 	b.ne	a953c <CDMAChannel::Start()+0x10c>  // b.any
   a94b0:	11001021 	add	w1, w1, #0x4
   a94b4:	32020403 	orr	w3, w0, #0xc0000000
   a94b8:	2a0103e2 	mov	w2, w1
   a94bc:	d2800401 	mov	x1, #0x20                  	// #32
   a94c0:	b9000043 	str	w3, [x2]
   a94c4:	97fff497 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   a94c8:	b9400260 	ldr	w0, [x19]
   a94cc:	52800021 	mov	w1, #0x1                   	// #1
   a94d0:	72a21e21 	movk	w1, #0x10f1, lsl #16
   a94d4:	0b140000 	add	w0, w0, w20
   a94d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a94dc:	53185c00 	lsl	w0, w0, #8
   a94e0:	b9000001 	str	w1, [x0]
   a94e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a94e8:	d65f03c0 	ret
   a94ec:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a94f0:	912ac021 	add	x1, x1, #0xab0
   a94f4:	9108c020 	add	x0, x1, #0x230
   a94f8:	52802642 	mov	w2, #0x132                 	// #306
   a94fc:	97ffcc61 	bl	9c680 <assertion_failed>
   a9500:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9504:	912ac021 	add	x1, x1, #0xab0
   a9508:	9100c020 	add	x0, x1, #0x30
   a950c:	52802582 	mov	w2, #0x12c                 	// #300
   a9510:	97ffcc5c 	bl	9c680 <assertion_failed>
   a9514:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9518:	912ac021 	add	x1, x1, #0xab0
   a951c:	9102e020 	add	x0, x1, #0xb8
   a9520:	528025a2 	mov	w2, #0x12d                 	// #301
   a9524:	97ffcc57 	bl	9c680 <assertion_failed>
   a9528:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a952c:	912ac021 	add	x1, x1, #0xab0
   a9530:	91090020 	add	x0, x1, #0x240
   a9534:	52802702 	mov	w2, #0x138                 	// #312
   a9538:	97ffcc52 	bl	9c680 <assertion_failed>
   a953c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9540:	912ac021 	add	x1, x1, #0xab0
   a9544:	9109e020 	add	x0, x1, #0x278
   a9548:	52802722 	mov	w2, #0x139                 	// #313
   a954c:	97ffcc4d 	bl	9c680 <assertion_failed>
   a9550:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9554:	912ac021 	add	x1, x1, #0xab0
   a9558:	9107e020 	add	x0, x1, #0x1f8
   a955c:	52802622 	mov	w2, #0x131                 	// #305
   a9560:	97ffcc48 	bl	9c680 <assertion_failed>
   a9564:	d503201f 	nop
   a9568:	d503201f 	nop
   a956c:	d503201f 	nop

00000000000a9570 <CDMAChannel::Wait()>:
   a9570:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9574:	910003fd 	mov	x29, sp
   a9578:	b9400002 	ldr	w2, [x0]
   a957c:	f9000bf3 	str	x19, [sp, #16]
   a9580:	71001c5f 	cmp	w2, #0x7
   a9584:	54000308 	b.hi	a95e4 <CDMAChannel::Wait()+0x74>  // b.pmore
   a9588:	aa0003f3 	mov	x19, x0
   a958c:	f9401400 	ldr	x0, [x0, #40]
   a9590:	b5000340 	cbnz	x0, a95f8 <CDMAChannel::Wait()+0x88>
   a9594:	117f8042 	add	w2, w2, #0xfe0, lsl #12
   a9598:	1101c042 	add	w2, w2, #0x70
   a959c:	53185c42 	lsl	w2, w2, #8
   a95a0:	b9400041 	ldr	w1, [x2]
   a95a4:	3707ffe1 	tbnz	w1, #0, a95a0 <CDMAChannel::Wait()+0x30>
   a95a8:	d2780021 	eor	x1, x1, #0x100
   a95ac:	f9402262 	ldr	x2, [x19, #64]
   a95b0:	53082020 	ubfx	w0, w1, #8, #1
   a95b4:	3900e260 	strb	w0, [x19, #56]
   a95b8:	b5000082 	cbnz	x2, a95c8 <CDMAChannel::Wait()+0x58>
   a95bc:	f9400bf3 	ldr	x19, [sp, #16]
   a95c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a95c4:	d65f03c0 	ret
   a95c8:	aa0203e0 	mov	x0, x2
   a95cc:	f9402661 	ldr	x1, [x19, #72]
   a95d0:	97fff454 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   a95d4:	3940e260 	ldrb	w0, [x19, #56]
   a95d8:	f9400bf3 	ldr	x19, [sp, #16]
   a95dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a95e0:	d65f03c0 	ret
   a95e4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a95e8:	912ac021 	add	x1, x1, #0xab0
   a95ec:	9100c020 	add	x0, x1, #0x30
   a95f0:	52802922 	mov	w2, #0x149                 	// #329
   a95f4:	97ffcc23 	bl	9c680 <assertion_failed>
   a95f8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a95fc:	912ac021 	add	x1, x1, #0xab0
   a9600:	910ac020 	add	x0, x1, #0x2b0
   a9604:	52802942 	mov	w2, #0x14a                 	// #330
   a9608:	97ffcc1e 	bl	9c680 <assertion_failed>
   a960c:	d503201f 	nop

00000000000a9610 <CDMAChannel::GetStatus()>:
   a9610:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9614:	910003fd 	mov	x29, sp
   a9618:	b9400001 	ldr	w1, [x0]
   a961c:	71001c3f 	cmp	w1, #0x7
   a9620:	54000128 	b.hi	a9644 <CDMAChannel::GetStatus()+0x34>  // b.pmore
   a9624:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   a9628:	1101c021 	add	w1, w1, #0x70
   a962c:	53185c21 	lsl	w1, w1, #8
   a9630:	b9400021 	ldr	w1, [x1]
   a9634:	37000121 	tbnz	w1, #0, a9658 <CDMAChannel::GetStatus()+0x48>
   a9638:	3940e000 	ldrb	w0, [x0, #56]
   a963c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9640:	d65f03c0 	ret
   a9644:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9648:	912ac021 	add	x1, x1, #0xab0
   a964c:	9100c020 	add	x0, x1, #0x30
   a9650:	52802c42 	mov	w2, #0x162                 	// #354
   a9654:	97ffcc0b 	bl	9c680 <assertion_failed>
   a9658:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a965c:	912ac021 	add	x1, x1, #0xab0
   a9660:	910b4020 	add	x0, x1, #0x2d0
   a9664:	52802c62 	mov	w2, #0x163                 	// #355
   a9668:	97ffcc06 	bl	9c680 <assertion_failed>
   a966c:	d503201f 	nop

00000000000a9670 <CDMAChannel::InterruptHandler()>:
   a9670:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9674:	910003fd 	mov	x29, sp
   a9678:	f9000bf3 	str	x19, [sp, #16]
   a967c:	aa0003f3 	mov	x19, x0
   a9680:	f9402000 	ldr	x0, [x0, #64]
   a9684:	b5000400 	cbnz	x0, a9704 <CDMAChannel::InterruptHandler()+0x94>
   a9688:	b9400261 	ldr	w1, [x19]
   a968c:	71001c3f 	cmp	w1, #0x7
   a9690:	54000448 	b.hi	a9718 <CDMAChannel::InterruptHandler()+0xa8>  // b.pmore
   a9694:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   a9698:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   a969c:	b9400043 	ldr	w3, [x2]
   a96a0:	52800020 	mov	w0, #0x1                   	// #1
   a96a4:	1ac12000 	lsl	w0, w0, w1
   a96a8:	6a03001f 	tst	w0, w3
   a96ac:	54000400 	b.eq	a972c <CDMAChannel::InterruptHandler()+0xbc>  // b.none
   a96b0:	b9000040 	str	w0, [x2]
   a96b4:	b9400260 	ldr	w0, [x19]
   a96b8:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   a96bc:	1101c000 	add	w0, w0, #0x70
   a96c0:	53185c00 	lsl	w0, w0, #8
   a96c4:	b9400001 	ldr	w1, [x0]
   a96c8:	361003c1 	tbz	w1, #2, a9740 <CDMAChannel::InterruptHandler()+0xd0>
   a96cc:	37000441 	tbnz	w1, #0, a9754 <CDMAChannel::InterruptHandler()+0xe4>
   a96d0:	d2780021 	eor	x1, x1, #0x100
   a96d4:	52800082 	mov	w2, #0x4                   	// #4
   a96d8:	f9401663 	ldr	x3, [x19, #40]
   a96dc:	53082021 	ubfx	w1, w1, #8, #1
   a96e0:	b9000002 	str	w2, [x0]
   a96e4:	3900e261 	strb	w1, [x19, #56]
   a96e8:	b4000403 	cbz	x3, a9768 <CDMAChannel::InterruptHandler()+0xf8>
   a96ec:	b9400260 	ldr	w0, [x19]
   a96f0:	aa0303f0 	mov	x16, x3
   a96f4:	f9401a62 	ldr	x2, [x19, #48]
   a96f8:	f9400bf3 	ldr	x19, [sp, #16]
   a96fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9700:	d61f0200 	br	x16
   a9704:	f9402661 	ldr	x1, [x19, #72]
   a9708:	97fff406 	bl	a6720 <CleanAndInvalidateDataCacheRange>
   a970c:	b9400261 	ldr	w1, [x19]
   a9710:	71001c3f 	cmp	w1, #0x7
   a9714:	54fffc09 	b.ls	a9694 <CDMAChannel::InterruptHandler()+0x24>  // b.plast
   a9718:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a971c:	912ac021 	add	x1, x1, #0xab0
   a9720:	9100c020 	add	x0, x1, #0x30
   a9724:	52802e22 	mov	w2, #0x171                 	// #369
   a9728:	97ffcbd6 	bl	9c680 <assertion_failed>
   a972c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9730:	912ac021 	add	x1, x1, #0xab0
   a9734:	910c2020 	add	x0, x1, #0x308
   a9738:	52802ee2 	mov	w2, #0x177                 	// #375
   a973c:	97ffcbd1 	bl	9c680 <assertion_failed>
   a9740:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9744:	912ac021 	add	x1, x1, #0xab0
   a9748:	910c8020 	add	x0, x1, #0x320
   a974c:	52802f62 	mov	w2, #0x17b                 	// #379
   a9750:	97ffcbcc 	bl	9c680 <assertion_failed>
   a9754:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9758:	912ac021 	add	x1, x1, #0xab0
   a975c:	910cc020 	add	x0, x1, #0x330
   a9760:	52802f82 	mov	w2, #0x17c                 	// #380
   a9764:	97ffcbc7 	bl	9c680 <assertion_failed>
   a9768:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a976c:	912ac021 	add	x1, x1, #0xab0
   a9770:	91084020 	add	x0, x1, #0x210
   a9774:	52803062 	mov	w2, #0x183                 	// #387
   a9778:	97ffcbc2 	bl	9c680 <assertion_failed>
   a977c:	d503201f 	nop

00000000000a9780 <CDMAChannel::InterruptStub(void*)>:
   a9780:	b4000040 	cbz	x0, a9788 <CDMAChannel::InterruptStub(void*)+0x8>
   a9784:	17ffffbb 	b	a9670 <CDMAChannel::InterruptHandler()>
   a9788:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a978c:	912ac021 	add	x1, x1, #0xab0
   a9790:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9794:	910d2020 	add	x0, x1, #0x348
   a9798:	910003fd 	mov	x29, sp
   a979c:	52803142 	mov	w2, #0x18a                 	// #394
   a97a0:	97ffcbb8 	bl	9c680 <assertion_failed>
	...

00000000000a97b0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   a97b0:	91004002 	add	x2, x0, #0x10
   a97b4:	91070003 	add	x3, x0, #0x1c0
   a97b8:	f9000001 	str	x1, [x0]
   a97bc:	3900201f 	strb	wzr, [x0, #8]
   a97c0:	f800845f 	str	xzr, [x2], #8
   a97c4:	eb03005f 	cmp	x2, x3
   a97c8:	54ffffc1 	b.ne	a97c0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   a97cc:	d65f03c0 	ret

00000000000a97d0 <CGPIOManager::~CGPIOManager()>:
   a97d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a97d4:	91004001 	add	x1, x0, #0x10
   a97d8:	910003fd 	mov	x29, sp
   a97dc:	91070003 	add	x3, x0, #0x1c0
   a97e0:	14000004 	b	a97f0 <CGPIOManager::~CGPIOManager()+0x20>
   a97e4:	91002021 	add	x1, x1, #0x8
   a97e8:	eb03003f 	cmp	x1, x3
   a97ec:	54000120 	b.eq	a9810 <CGPIOManager::~CGPIOManager()+0x40>  // b.none
   a97f0:	f9400022 	ldr	x2, [x1]
   a97f4:	b4ffff82 	cbz	x2, a97e4 <CGPIOManager::~CGPIOManager()+0x14>
   a97f8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a97fc:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9800:	91382021 	add	x1, x1, #0xe08
   a9804:	91386000 	add	x0, x0, #0xe18
   a9808:	52800582 	mov	w2, #0x2c                  	// #44
   a980c:	97ffcb9d 	bl	9c680 <assertion_failed>
   a9810:	39402001 	ldrb	w1, [x0, #8]
   a9814:	340000c1 	cbz	w1, a982c <CGPIOManager::~CGPIOManager()+0x5c>
   a9818:	f9400000 	ldr	x0, [x0]
   a981c:	b40000c0 	cbz	x0, a9834 <CGPIOManager::~CGPIOManager()+0x64>
   a9820:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9824:	52801281 	mov	w1, #0x94                  	// #148
   a9828:	17fff9a2 	b	a7eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a982c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9830:	d65f03c0 	ret
   a9834:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9838:	d0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a983c:	91382021 	add	x1, x1, #0xe08
   a9840:	91222000 	add	x0, x0, #0x888
   a9844:	52800642 	mov	w2, #0x32                  	// #50
   a9848:	97ffcb8e 	bl	9c680 <assertion_failed>
   a984c:	d503201f 	nop

00000000000a9850 <CGPIOManager::Initialize()>:
   a9850:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9854:	910003fd 	mov	x29, sp
   a9858:	f9000bf3 	str	x19, [sp, #16]
   a985c:	aa0003f3 	mov	x19, x0
   a9860:	39402000 	ldrb	w0, [x0, #8]
   a9864:	350001a0 	cbnz	w0, a9898 <CGPIOManager::Initialize()+0x48>
   a9868:	f9400260 	ldr	x0, [x19]
   a986c:	b4000220 	cbz	x0, a98b0 <CGPIOManager::Initialize()+0x60>
   a9870:	aa1303e3 	mov	x3, x19
   a9874:	52801281 	mov	w1, #0x94                  	// #148
   a9878:	90000002 	adrp	x2, a9000 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x20>
   a987c:	912bc042 	add	x2, x2, #0xaf0
   a9880:	97fff96c 	bl	a7e30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a9884:	52800020 	mov	w0, #0x1                   	// #1
   a9888:	39002260 	strb	w0, [x19, #8]
   a988c:	f9400bf3 	ldr	x19, [sp, #16]
   a9890:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9894:	d65f03c0 	ret
   a9898:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a989c:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a98a0:	91382021 	add	x1, x1, #0xe08
   a98a4:	9138c000 	add	x0, x0, #0xe30
   a98a8:	52800762 	mov	w2, #0x3b                  	// #59
   a98ac:	97ffcb75 	bl	9c680 <assertion_failed>
   a98b0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a98b4:	d0000040 	adrp	x0, b3000 <vtable for CSerialDevice+0x18>
   a98b8:	91382021 	add	x1, x1, #0xe08
   a98bc:	91222000 	add	x0, x0, #0x888
   a98c0:	52800782 	mov	w2, #0x3c                  	// #60
   a98c4:	97ffcb6f 	bl	9c680 <assertion_failed>
   a98c8:	d503201f 	nop
   a98cc:	d503201f 	nop

00000000000a98d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   a98d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a98d4:	910003fd 	mov	x29, sp
   a98d8:	39402002 	ldrb	w2, [x0, #8]
   a98dc:	34000162 	cbz	w2, a9908 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x38>
   a98e0:	b4000201 	cbz	x1, a9920 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x50>
   a98e4:	b9400822 	ldr	w2, [x1, #8]
   a98e8:	7100d45f 	cmp	w2, #0x35
   a98ec:	54000268 	b.hi	a9938 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   a98f0:	8b224c00 	add	x0, x0, w2, uxtw #3
   a98f4:	f9400802 	ldr	x2, [x0, #16]
   a98f8:	b50002c2 	cbnz	x2, a9950 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   a98fc:	f9000801 	str	x1, [x0, #16]
   a9900:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9904:	d65f03c0 	ret
   a9908:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a990c:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9910:	91382021 	add	x1, x1, #0xe08
   a9914:	91392000 	add	x0, x0, #0xe48
   a9918:	528008a2 	mov	w2, #0x45                  	// #69
   a991c:	97ffcb59 	bl	9c680 <assertion_failed>
   a9920:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9924:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9928:	91382021 	add	x1, x1, #0xe08
   a992c:	91396000 	add	x0, x0, #0xe58
   a9930:	528008e2 	mov	w2, #0x47                  	// #71
   a9934:	97ffcb53 	bl	9c680 <assertion_failed>
   a9938:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a993c:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9940:	91382021 	add	x1, x1, #0xe08
   a9944:	9139a000 	add	x0, x0, #0xe68
   a9948:	52800922 	mov	w2, #0x49                  	// #73
   a994c:	97ffcb4d 	bl	9c680 <assertion_failed>
   a9950:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9954:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9958:	91382021 	add	x1, x1, #0xe08
   a995c:	91386000 	add	x0, x0, #0xe18
   a9960:	52800962 	mov	w2, #0x4b                  	// #75
   a9964:	97ffcb47 	bl	9c680 <assertion_failed>
   a9968:	d503201f 	nop
   a996c:	d503201f 	nop

00000000000a9970 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   a9970:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9974:	910003fd 	mov	x29, sp
   a9978:	39402002 	ldrb	w2, [x0, #8]
   a997c:	34000162 	cbz	w2, a99a8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   a9980:	b4000201 	cbz	x1, a99c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   a9984:	b9400821 	ldr	w1, [x1, #8]
   a9988:	7100d43f 	cmp	w1, #0x35
   a998c:	54000268 	b.hi	a99d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   a9990:	8b214c00 	add	x0, x0, w1, uxtw #3
   a9994:	f9400801 	ldr	x1, [x0, #16]
   a9998:	b40002c1 	cbz	x1, a99f0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   a999c:	f900081f 	str	xzr, [x0, #16]
   a99a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a99a4:	d65f03c0 	ret
   a99a8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a99ac:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a99b0:	91382021 	add	x1, x1, #0xe08
   a99b4:	91392000 	add	x0, x0, #0xe48
   a99b8:	52800a42 	mov	w2, #0x52                  	// #82
   a99bc:	97ffcb31 	bl	9c680 <assertion_failed>
   a99c0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a99c4:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a99c8:	91382021 	add	x1, x1, #0xe08
   a99cc:	91396000 	add	x0, x0, #0xe58
   a99d0:	52800a82 	mov	w2, #0x54                  	// #84
   a99d4:	97ffcb2b 	bl	9c680 <assertion_failed>
   a99d8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a99dc:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a99e0:	91382021 	add	x1, x1, #0xe08
   a99e4:	9139a000 	add	x0, x0, #0xe68
   a99e8:	52800ac2 	mov	w2, #0x56                  	// #86
   a99ec:	97ffcb25 	bl	9c680 <assertion_failed>
   a99f0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a99f4:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a99f8:	91382021 	add	x1, x1, #0xe08
   a99fc:	913a0000 	add	x0, x0, #0xe80
   a9a00:	52800b02 	mov	w2, #0x58                  	// #88
   a9a04:	97ffcb1f 	bl	9c680 <assertion_failed>
   a9a08:	d503201f 	nop
   a9a0c:	d503201f 	nop

00000000000a9a10 <CGPIOManager::InterruptHandler()>:
   a9a10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9a14:	910003fd 	mov	x29, sp
   a9a18:	39402001 	ldrb	w1, [x0, #8]
   a9a1c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9a20:	340005c1 	cbz	w1, a9ad8 <CGPIOManager::InterruptHandler()+0xc8>
   a9a24:	d2800801 	mov	x1, #0x40                  	// #64
   a9a28:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   a9a2c:	b9400021 	ldr	w1, [x1]
   a9a30:	d2800882 	mov	x2, #0x44                  	// #68
   a9a34:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   a9a38:	52800013 	mov	w19, #0x0                   	// #0
   a9a3c:	d503201f 	nop
   a9a40:	37000161 	tbnz	w1, #0, a9a6c <CGPIOManager::InterruptHandler()+0x5c>
   a9a44:	11000673 	add	w19, w19, #0x1
   a9a48:	53017c21 	lsr	w1, w1, #1
   a9a4c:	f240127f 	tst	x19, #0x1f
   a9a50:	54000041 	b.ne	a9a58 <CGPIOManager::InterruptHandler()+0x48>  // b.any
   a9a54:	b9400041 	ldr	w1, [x2]
   a9a58:	7100da7f 	cmp	w19, #0x36
   a9a5c:	54ffff21 	b.ne	a9a40 <CGPIOManager::InterruptHandler()+0x30>  // b.any
   a9a60:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9a64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9a68:	d65f03c0 	ret
   a9a6c:	8b334c00 	add	x0, x0, w19, uxtw #3
   a9a70:	f9400814 	ldr	x20, [x0, #16]
   a9a74:	b40001b4 	cbz	x20, a9aa8 <CGPIOManager::InterruptHandler()+0x98>
   a9a78:	aa1403e0 	mov	x0, x20
   a9a7c:	97ffd1bd 	bl	9e170 <CGPIOPin::InterruptHandler()>
   a9a80:	3940e280 	ldrb	w0, [x20, #56]
   a9a84:	34fffee0 	cbz	w0, a9a60 <CGPIOManager::InterruptHandler()+0x50>
   a9a88:	29418680 	ldp	w0, w1, [x20, #12]
   a9a8c:	52800802 	mov	w2, #0x40                  	// #64
   a9a90:	72bfc402 	movk	w2, #0xfe20, lsl #16
   a9a94:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9a98:	0b020000 	add	w0, w0, w2
   a9a9c:	b9000001 	str	w1, [x0]
   a9aa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9aa4:	d65f03c0 	ret
   a9aa8:	2a1303e0 	mov	w0, w19
   a9aac:	97ffd1d5 	bl	9e200 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   a9ab0:	52800200 	mov	w0, #0x10                  	// #16
   a9ab4:	72a7f100 	movk	w0, #0x3f88, lsl #16
   a9ab8:	0b531400 	add	w0, w0, w19, lsr #5
   a9abc:	52800021 	mov	w1, #0x1                   	// #1
   a9ac0:	1ad32021 	lsl	w1, w1, w19
   a9ac4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9ac8:	531e7400 	lsl	w0, w0, #2
   a9acc:	b9000001 	str	w1, [x0]
   a9ad0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9ad4:	d65f03c0 	ret
   a9ad8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9adc:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9ae0:	91382021 	add	x1, x1, #0xe08
   a9ae4:	91392000 	add	x0, x0, #0xe48
   a9ae8:	52800bc2 	mov	w2, #0x5e                  	// #94
   a9aec:	97ffcae5 	bl	9c680 <assertion_failed>

00000000000a9af0 <CGPIOManager::InterruptStub(void*)>:
   a9af0:	b4000040 	cbz	x0, a9af8 <CGPIOManager::InterruptStub(void*)+0x8>
   a9af4:	17ffffc7 	b	a9a10 <CGPIOManager::InterruptHandler()>
   a9af8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9afc:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9b00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9b04:	91382021 	add	x1, x1, #0xe08
   a9b08:	910003fd 	mov	x29, sp
   a9b0c:	913a6000 	add	x0, x0, #0xe98
   a9b10:	528011c2 	mov	w2, #0x8e                  	// #142
   a9b14:	97ffcadb 	bl	9c680 <assertion_failed>
	...

00000000000a9b20 <CPtrList::CPtrList()>:
   a9b20:	f900001f 	str	xzr, [x0]
   a9b24:	d65f03c0 	ret
   a9b28:	d503201f 	nop
   a9b2c:	d503201f 	nop

00000000000a9b30 <CPtrList::~CPtrList()>:
   a9b30:	f9400000 	ldr	x0, [x0]
   a9b34:	b5000040 	cbnz	x0, a9b3c <CPtrList::~CPtrList()+0xc>
   a9b38:	d65f03c0 	ret
   a9b3c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9b40:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9b44:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9b48:	913aa021 	add	x1, x1, #0xea8
   a9b4c:	910003fd 	mov	x29, sp
   a9b50:	913ae000 	add	x0, x0, #0xeb8
   a9b54:	52800542 	mov	w2, #0x2a                  	// #42
   a9b58:	97ffcaca 	bl	9c680 <assertion_failed>
   a9b5c:	d503201f 	nop

00000000000a9b60 <CPtrList::GetFirst()>:
   a9b60:	f9400000 	ldr	x0, [x0]
   a9b64:	d65f03c0 	ret
   a9b68:	d503201f 	nop
   a9b6c:	d503201f 	nop

00000000000a9b70 <CPtrList::GetNext(TPtrListElement*)>:
   a9b70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9b74:	910003fd 	mov	x29, sp
   a9b78:	b4000121 	cbz	x1, a9b9c <CPtrList::GetNext(TPtrListElement*)+0x2c>
   a9b7c:	5289a860 	mov	w0, #0x4d43                	// #19779
   a9b80:	72aa0980 	movk	w0, #0x504c, lsl #16
   a9b84:	b9400022 	ldr	w2, [x1]
   a9b88:	6b00005f 	cmp	w2, w0
   a9b8c:	54000141 	b.ne	a9bb4 <CPtrList::GetNext(TPtrListElement*)+0x44>  // b.any
   a9b90:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9b94:	f9400820 	ldr	x0, [x1, #16]
   a9b98:	d65f03c0 	ret
   a9b9c:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9ba0:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9ba4:	913aa021 	add	x1, x1, #0xea8
   a9ba8:	913b2000 	add	x0, x0, #0xec8
   a9bac:	52800682 	mov	w2, #0x34                  	// #52
   a9bb0:	97ffcab4 	bl	9c680 <assertion_failed>
   a9bb4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9bb8:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9bbc:	913aa021 	add	x1, x1, #0xea8
   a9bc0:	913b6000 	add	x0, x0, #0xed8
   a9bc4:	528006a2 	mov	w2, #0x35                  	// #53
   a9bc8:	97ffcaae 	bl	9c680 <assertion_failed>
   a9bcc:	d503201f 	nop

00000000000a9bd0 <CPtrList::GetPtr(TPtrListElement*)>:
   a9bd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9bd4:	910003fd 	mov	x29, sp
   a9bd8:	b4000121 	cbz	x1, a9bfc <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   a9bdc:	5289a860 	mov	w0, #0x4d43                	// #19779
   a9be0:	72aa0980 	movk	w0, #0x504c, lsl #16
   a9be4:	b9400022 	ldr	w2, [x1]
   a9be8:	6b00005f 	cmp	w2, w0
   a9bec:	54000141 	b.ne	a9c14 <CPtrList::GetPtr(TPtrListElement*)+0x44>  // b.any
   a9bf0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9bf4:	f9400c20 	ldr	x0, [x1, #24]
   a9bf8:	d65f03c0 	ret
   a9bfc:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9c00:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9c04:	913aa021 	add	x1, x1, #0xea8
   a9c08:	913b2000 	add	x0, x0, #0xec8
   a9c0c:	52800782 	mov	w2, #0x3c                  	// #60
   a9c10:	97ffca9c 	bl	9c680 <assertion_failed>
   a9c14:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9c18:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9c1c:	913aa021 	add	x1, x1, #0xea8
   a9c20:	913b6000 	add	x0, x0, #0xed8
   a9c24:	528007a2 	mov	w2, #0x3d                  	// #61
   a9c28:	97ffca96 	bl	9c680 <assertion_failed>
   a9c2c:	d503201f 	nop

00000000000a9c30 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   a9c30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9c34:	910003fd 	mov	x29, sp
   a9c38:	a90153f3 	stp	x19, x20, [sp, #16]
   a9c3c:	aa0003f4 	mov	x20, x0
   a9c40:	d2800400 	mov	x0, #0x20                  	// #32
   a9c44:	aa0103f3 	mov	x19, x1
   a9c48:	f90013f5 	str	x21, [sp, #32]
   a9c4c:	aa0203f5 	mov	x21, x2
   a9c50:	97ffee8c 	bl	a5680 <operator new(unsigned long)>
   a9c54:	5289a862 	mov	w2, #0x4d43                	// #19779
   a9c58:	72aa0982 	movk	w2, #0x504c, lsl #16
   a9c5c:	f9000c15 	str	x21, [x0, #24]
   a9c60:	f9400281 	ldr	x1, [x20]
   a9c64:	b9000002 	str	w2, [x0]
   a9c68:	b4000341 	cbz	x1, a9cd0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   a9c6c:	b40003f3 	cbz	x19, a9ce8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   a9c70:	b9400263 	ldr	w3, [x19]
   a9c74:	6b02007f 	cmp	w3, w2
   a9c78:	54000441 	b.ne	a9d00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>  // b.any
   a9c7c:	eb13003f 	cmp	x1, x19
   a9c80:	540001a0 	b.eq	a9cb4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x84>  // b.none
   a9c84:	f9400661 	ldr	x1, [x19, #8]
   a9c88:	a900cc01 	stp	x1, x19, [x0, #8]
   a9c8c:	b40000a1 	cbz	x1, a9ca0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   a9c90:	b9400022 	ldr	w2, [x1]
   a9c94:	6b03005f 	cmp	w2, w3
   a9c98:	54000401 	b.ne	a9d18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>  // b.any
   a9c9c:	f9000820 	str	x0, [x1, #16]
   a9ca0:	f9000660 	str	x0, [x19, #8]
   a9ca4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9ca8:	f94013f5 	ldr	x21, [sp, #32]
   a9cac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9cb0:	d65f03c0 	ret
   a9cb4:	f9000420 	str	x0, [x1, #8]
   a9cb8:	f9000280 	str	x0, [x20]
   a9cbc:	a900841f 	stp	xzr, x1, [x0, #8]
   a9cc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9cc4:	f94013f5 	ldr	x21, [sp, #32]
   a9cc8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9ccc:	d65f03c0 	ret
   a9cd0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9cd4:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9cd8:	913aa021 	add	x1, x1, #0xea8
   a9cdc:	913c0000 	add	x0, x0, #0xf00
   a9ce0:	52800982 	mov	w2, #0x4c                  	// #76
   a9ce4:	97ffca67 	bl	9c680 <assertion_failed>
   a9ce8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9cec:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9cf0:	913aa021 	add	x1, x1, #0xea8
   a9cf4:	913c4000 	add	x0, x0, #0xf10
   a9cf8:	528009a2 	mov	w2, #0x4d                  	// #77
   a9cfc:	97ffca61 	bl	9c680 <assertion_failed>
   a9d00:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9d04:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9d08:	913aa021 	add	x1, x1, #0xea8
   a9d0c:	913c8000 	add	x0, x0, #0xf20
   a9d10:	528009c2 	mov	w2, #0x4e                  	// #78
   a9d14:	97ffca5b 	bl	9c680 <assertion_failed>
   a9d18:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9d1c:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9d20:	913aa021 	add	x1, x1, #0xea8
   a9d24:	913d2000 	add	x0, x0, #0xf48
   a9d28:	52800c02 	mov	w2, #0x60                  	// #96
   a9d2c:	97ffca55 	bl	9c680 <assertion_failed>

00000000000a9d30 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   a9d30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9d34:	910003fd 	mov	x29, sp
   a9d38:	a90153f3 	stp	x19, x20, [sp, #16]
   a9d3c:	aa0003f4 	mov	x20, x0
   a9d40:	d2800400 	mov	x0, #0x20                  	// #32
   a9d44:	aa0103f3 	mov	x19, x1
   a9d48:	f90013f5 	str	x21, [sp, #32]
   a9d4c:	aa0203f5 	mov	x21, x2
   a9d50:	97ffee4c 	bl	a5680 <operator new(unsigned long)>
   a9d54:	5289a861 	mov	w1, #0x4d43                	// #19779
   a9d58:	72aa0981 	movk	w1, #0x504c, lsl #16
   a9d5c:	f9000c15 	str	x21, [x0, #24]
   a9d60:	b9000001 	str	w1, [x0]
   a9d64:	b4000253 	cbz	x19, a9dac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x7c>
   a9d68:	f9400282 	ldr	x2, [x20]
   a9d6c:	b4000302 	cbz	x2, a9dcc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   a9d70:	b9400262 	ldr	w2, [x19]
   a9d74:	6b01005f 	cmp	w2, w1
   a9d78:	54000361 	b.ne	a9de4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>  // b.any
   a9d7c:	f9400a61 	ldr	x1, [x19, #16]
   a9d80:	a9008413 	stp	x19, x1, [x0, #8]
   a9d84:	b40000a1 	cbz	x1, a9d98 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   a9d88:	b9400023 	ldr	w3, [x1]
   a9d8c:	6b02007f 	cmp	w3, w2
   a9d90:	54000361 	b.ne	a9dfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>  // b.any
   a9d94:	f9000420 	str	x0, [x1, #8]
   a9d98:	f9000a60 	str	x0, [x19, #16]
   a9d9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9da0:	f94013f5 	ldr	x21, [sp, #32]
   a9da4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9da8:	d65f03c0 	ret
   a9dac:	f9400281 	ldr	x1, [x20]
   a9db0:	b5000321 	cbnz	x1, a9e14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   a9db4:	f9000280 	str	x0, [x20]
   a9db8:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   a9dbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9dc0:	f94013f5 	ldr	x21, [sp, #32]
   a9dc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9dc8:	d65f03c0 	ret
   a9dcc:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9dd0:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9dd4:	913aa021 	add	x1, x1, #0xea8
   a9dd8:	913c0000 	add	x0, x0, #0xf00
   a9ddc:	52800fa2 	mov	w2, #0x7d                  	// #125
   a9de0:	97ffca28 	bl	9c680 <assertion_failed>
   a9de4:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9de8:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9dec:	913aa021 	add	x1, x1, #0xea8
   a9df0:	913dc000 	add	x0, x0, #0xf70
   a9df4:	52800fc2 	mov	w2, #0x7e                  	// #126
   a9df8:	97ffca22 	bl	9c680 <assertion_failed>
   a9dfc:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9e00:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9e04:	913aa021 	add	x1, x1, #0xea8
   a9e08:	913e6000 	add	x0, x0, #0xf98
   a9e0c:	528010a2 	mov	w2, #0x85                  	// #133
   a9e10:	97ffca1c 	bl	9c680 <assertion_failed>
   a9e14:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9e18:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9e1c:	913aa021 	add	x1, x1, #0xea8
   a9e20:	913ae000 	add	x0, x0, #0xeb8
   a9e24:	52800e82 	mov	w2, #0x74                  	// #116
   a9e28:	97ffca16 	bl	9c680 <assertion_failed>
   a9e2c:	d503201f 	nop

00000000000a9e30 <CPtrList::Remove(TPtrListElement*)>:
   a9e30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9e34:	910003fd 	mov	x29, sp
   a9e38:	b4000541 	cbz	x1, a9ee0 <CPtrList::Remove(TPtrListElement*)+0xb0>
   a9e3c:	5289a863 	mov	w3, #0x4d43                	// #19779
   a9e40:	72aa0983 	movk	w3, #0x504c, lsl #16
   a9e44:	b9400022 	ldr	w2, [x1]
   a9e48:	6b03005f 	cmp	w2, w3
   a9e4c:	54000561 	b.ne	a9ef8 <CPtrList::Remove(TPtrListElement*)+0xc8>  // b.any
   a9e50:	f9400003 	ldr	x3, [x0]
   a9e54:	eb01007f 	cmp	x3, x1
   a9e58:	54000220 	b.eq	a9e9c <CPtrList::Remove(TPtrListElement*)+0x6c>  // b.none
   a9e5c:	f9400420 	ldr	x0, [x1, #8]
   a9e60:	b4000580 	cbz	x0, a9f10 <CPtrList::Remove(TPtrListElement*)+0xe0>
   a9e64:	b9400003 	ldr	w3, [x0]
   a9e68:	6b02007f 	cmp	w3, w2
   a9e6c:	540002e1 	b.ne	a9ec8 <CPtrList::Remove(TPtrListElement*)+0x98>  // b.any
   a9e70:	f9400822 	ldr	x2, [x1, #16]
   a9e74:	f9000802 	str	x2, [x0, #16]
   a9e78:	b40000a2 	cbz	x2, a9e8c <CPtrList::Remove(TPtrListElement*)+0x5c>
   a9e7c:	b9400044 	ldr	w4, [x2]
   a9e80:	6b03009f 	cmp	w4, w3
   a9e84:	54000521 	b.ne	a9f28 <CPtrList::Remove(TPtrListElement*)+0xf8>  // b.any
   a9e88:	f9000440 	str	x0, [x2, #8]
   a9e8c:	aa0103e0 	mov	x0, x1
   a9e90:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9e94:	d2800401 	mov	x1, #0x20                  	// #32
   a9e98:	17ffee1e 	b	a5710 <operator delete(void*, unsigned long)>
   a9e9c:	f9400863 	ldr	x3, [x3, #16]
   a9ea0:	f9000003 	str	x3, [x0]
   a9ea4:	b4ffff43 	cbz	x3, a9e8c <CPtrList::Remove(TPtrListElement*)+0x5c>
   a9ea8:	b9400060 	ldr	w0, [x3]
   a9eac:	6b02001f 	cmp	w0, w2
   a9eb0:	54000481 	b.ne	a9f40 <CPtrList::Remove(TPtrListElement*)+0x110>  // b.any
   a9eb4:	aa0103e0 	mov	x0, x1
   a9eb8:	d2800401 	mov	x1, #0x20                  	// #32
   a9ebc:	f900047f 	str	xzr, [x3, #8]
   a9ec0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9ec4:	17ffee13 	b	a5710 <operator delete(void*, unsigned long)>
   a9ec8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9ecc:	90000060 	adrp	x0, b5000 <font_data+0x1340>
   a9ed0:	913aa021 	add	x1, x1, #0xea8
   a9ed4:	91004000 	add	x0, x0, #0x10
   a9ed8:	528013e2 	mov	w2, #0x9f                  	// #159
   a9edc:	97ffc9e9 	bl	9c680 <assertion_failed>
   a9ee0:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9ee4:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9ee8:	913aa021 	add	x1, x1, #0xea8
   a9eec:	913b2000 	add	x0, x0, #0xec8
   a9ef0:	528011e2 	mov	w2, #0x8f                  	// #143
   a9ef4:	97ffc9e3 	bl	9c680 <assertion_failed>
   a9ef8:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9efc:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9f00:	913aa021 	add	x1, x1, #0xea8
   a9f04:	913b6000 	add	x0, x0, #0xed8
   a9f08:	52801202 	mov	w2, #0x90                  	// #144
   a9f0c:	97ffc9dd 	bl	9c680 <assertion_failed>
   a9f10:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9f14:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9f18:	913aa021 	add	x1, x1, #0xea8
   a9f1c:	913fe000 	add	x0, x0, #0xff8
   a9f20:	528013c2 	mov	w2, #0x9e                  	// #158
   a9f24:	97ffc9d7 	bl	9c680 <assertion_failed>
   a9f28:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9f2c:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9f30:	913aa021 	add	x1, x1, #0xea8
   a9f34:	913f2000 	add	x0, x0, #0xfc8
   a9f38:	52801482 	mov	w2, #0xa4                  	// #164
   a9f3c:	97ffc9d1 	bl	9c680 <assertion_failed>
   a9f40:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9f44:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9f48:	913aa021 	add	x1, x1, #0xea8
   a9f4c:	913f2000 	add	x0, x0, #0xfc8
   a9f50:	52801302 	mov	w2, #0x98                  	// #152
   a9f54:	97ffc9cb 	bl	9c680 <assertion_failed>
   a9f58:	d503201f 	nop
   a9f5c:	d503201f 	nop

00000000000a9f60 <CPtrList::Find(void*)>:
   a9f60:	f9400000 	ldr	x0, [x0]
   a9f64:	b4000280 	cbz	x0, a9fb4 <CPtrList::Find(void*)+0x54>
   a9f68:	5289a863 	mov	w3, #0x4d43                	// #19779
   a9f6c:	72aa0983 	movk	w3, #0x504c, lsl #16
   a9f70:	14000006 	b	a9f88 <CPtrList::Find(void*)+0x28>
   a9f74:	f9400c02 	ldr	x2, [x0, #24]
   a9f78:	eb01005f 	cmp	x2, x1
   a9f7c:	540001c0 	b.eq	a9fb4 <CPtrList::Find(void*)+0x54>  // b.none
   a9f80:	f9400800 	ldr	x0, [x0, #16]
   a9f84:	b4000180 	cbz	x0, a9fb4 <CPtrList::Find(void*)+0x54>
   a9f88:	b9400002 	ldr	w2, [x0]
   a9f8c:	6b03005f 	cmp	w2, w3
   a9f90:	54ffff20 	b.eq	a9f74 <CPtrList::Find(void*)+0x14>  // b.none
   a9f94:	f0000041 	adrp	x1, b4000 <font_data+0x340>
   a9f98:	f0000040 	adrp	x0, b4000 <font_data+0x340>
   a9f9c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9fa0:	913aa021 	add	x1, x1, #0xea8
   a9fa4:	910003fd 	mov	x29, sp
   a9fa8:	913b6000 	add	x0, x0, #0xed8
   a9fac:	52801662 	mov	w2, #0xb3                  	// #179
   a9fb0:	97ffc9b4 	bl	9c680 <assertion_failed>
   a9fb4:	d65f03c0 	ret
	...

00000000000aa000 <VectorTable>:
   aa000:	140001ef 	b	aa7bc <SynchronousStub>
   aa004:	d503201f 	nop
   aa008:	d503201f 	nop
   aa00c:	d503201f 	nop
   aa010:	d503201f 	nop
   aa014:	d503201f 	nop
   aa018:	d503201f 	nop
   aa01c:	d503201f 	nop
   aa020:	d503201f 	nop
   aa024:	d503201f 	nop
   aa028:	d503201f 	nop
   aa02c:	d503201f 	nop
   aa030:	d503201f 	nop
   aa034:	d503201f 	nop
   aa038:	d503201f 	nop
   aa03c:	d503201f 	nop
   aa040:	d503201f 	nop
   aa044:	d503201f 	nop
   aa048:	d503201f 	nop
   aa04c:	d503201f 	nop
   aa050:	d503201f 	nop
   aa054:	d503201f 	nop
   aa058:	d503201f 	nop
   aa05c:	d503201f 	nop
   aa060:	d503201f 	nop
   aa064:	d503201f 	nop
   aa068:	d503201f 	nop
   aa06c:	d503201f 	nop
   aa070:	d503201f 	nop
   aa074:	d503201f 	nop
   aa078:	d503201f 	nop
   aa07c:	d503201f 	nop
   aa080:	140001eb 	b	aa82c <IRQStub>
   aa084:	d503201f 	nop
   aa088:	d503201f 	nop
   aa08c:	d503201f 	nop
   aa090:	d503201f 	nop
   aa094:	d503201f 	nop
   aa098:	d503201f 	nop
   aa09c:	d503201f 	nop
   aa0a0:	d503201f 	nop
   aa0a4:	d503201f 	nop
   aa0a8:	d503201f 	nop
   aa0ac:	d503201f 	nop
   aa0b0:	d503201f 	nop
   aa0b4:	d503201f 	nop
   aa0b8:	d503201f 	nop
   aa0bc:	d503201f 	nop
   aa0c0:	d503201f 	nop
   aa0c4:	d503201f 	nop
   aa0c8:	d503201f 	nop
   aa0cc:	d503201f 	nop
   aa0d0:	d503201f 	nop
   aa0d4:	d503201f 	nop
   aa0d8:	d503201f 	nop
   aa0dc:	d503201f 	nop
   aa0e0:	d503201f 	nop
   aa0e4:	d503201f 	nop
   aa0e8:	d503201f 	nop
   aa0ec:	d503201f 	nop
   aa0f0:	d503201f 	nop
   aa0f4:	d503201f 	nop
   aa0f8:	d503201f 	nop
   aa0fc:	d503201f 	nop
   aa100:	140001f7 	b	aa8dc <FIQStub>
   aa104:	d503201f 	nop
   aa108:	d503201f 	nop
   aa10c:	d503201f 	nop
   aa110:	d503201f 	nop
   aa114:	d503201f 	nop
   aa118:	d503201f 	nop
   aa11c:	d503201f 	nop
   aa120:	d503201f 	nop
   aa124:	d503201f 	nop
   aa128:	d503201f 	nop
   aa12c:	d503201f 	nop
   aa130:	d503201f 	nop
   aa134:	d503201f 	nop
   aa138:	d503201f 	nop
   aa13c:	d503201f 	nop
   aa140:	d503201f 	nop
   aa144:	d503201f 	nop
   aa148:	d503201f 	nop
   aa14c:	d503201f 	nop
   aa150:	d503201f 	nop
   aa154:	d503201f 	nop
   aa158:	d503201f 	nop
   aa15c:	d503201f 	nop
   aa160:	d503201f 	nop
   aa164:	d503201f 	nop
   aa168:	d503201f 	nop
   aa16c:	d503201f 	nop
   aa170:	d503201f 	nop
   aa174:	d503201f 	nop
   aa178:	d503201f 	nop
   aa17c:	d503201f 	nop
   aa180:	1400019d 	b	aa7f4 <SErrorStub>
   aa184:	d503201f 	nop
   aa188:	d503201f 	nop
   aa18c:	d503201f 	nop
   aa190:	d503201f 	nop
   aa194:	d503201f 	nop
   aa198:	d503201f 	nop
   aa19c:	d503201f 	nop
   aa1a0:	d503201f 	nop
   aa1a4:	d503201f 	nop
   aa1a8:	d503201f 	nop
   aa1ac:	d503201f 	nop
   aa1b0:	d503201f 	nop
   aa1b4:	d503201f 	nop
   aa1b8:	d503201f 	nop
   aa1bc:	d503201f 	nop
   aa1c0:	d503201f 	nop
   aa1c4:	d503201f 	nop
   aa1c8:	d503201f 	nop
   aa1cc:	d503201f 	nop
   aa1d0:	d503201f 	nop
   aa1d4:	d503201f 	nop
   aa1d8:	d503201f 	nop
   aa1dc:	d503201f 	nop
   aa1e0:	d503201f 	nop
   aa1e4:	d503201f 	nop
   aa1e8:	d503201f 	nop
   aa1ec:	d503201f 	nop
   aa1f0:	d503201f 	nop
   aa1f4:	d503201f 	nop
   aa1f8:	d503201f 	nop
   aa1fc:	d503201f 	nop
   aa200:	1400016f 	b	aa7bc <SynchronousStub>
   aa204:	d503201f 	nop
   aa208:	d503201f 	nop
   aa20c:	d503201f 	nop
   aa210:	d503201f 	nop
   aa214:	d503201f 	nop
   aa218:	d503201f 	nop
   aa21c:	d503201f 	nop
   aa220:	d503201f 	nop
   aa224:	d503201f 	nop
   aa228:	d503201f 	nop
   aa22c:	d503201f 	nop
   aa230:	d503201f 	nop
   aa234:	d503201f 	nop
   aa238:	d503201f 	nop
   aa23c:	d503201f 	nop
   aa240:	d503201f 	nop
   aa244:	d503201f 	nop
   aa248:	d503201f 	nop
   aa24c:	d503201f 	nop
   aa250:	d503201f 	nop
   aa254:	d503201f 	nop
   aa258:	d503201f 	nop
   aa25c:	d503201f 	nop
   aa260:	d503201f 	nop
   aa264:	d503201f 	nop
   aa268:	d503201f 	nop
   aa26c:	d503201f 	nop
   aa270:	d503201f 	nop
   aa274:	d503201f 	nop
   aa278:	d503201f 	nop
   aa27c:	d503201f 	nop
   aa280:	1400016b 	b	aa82c <IRQStub>
   aa284:	d503201f 	nop
   aa288:	d503201f 	nop
   aa28c:	d503201f 	nop
   aa290:	d503201f 	nop
   aa294:	d503201f 	nop
   aa298:	d503201f 	nop
   aa29c:	d503201f 	nop
   aa2a0:	d503201f 	nop
   aa2a4:	d503201f 	nop
   aa2a8:	d503201f 	nop
   aa2ac:	d503201f 	nop
   aa2b0:	d503201f 	nop
   aa2b4:	d503201f 	nop
   aa2b8:	d503201f 	nop
   aa2bc:	d503201f 	nop
   aa2c0:	d503201f 	nop
   aa2c4:	d503201f 	nop
   aa2c8:	d503201f 	nop
   aa2cc:	d503201f 	nop
   aa2d0:	d503201f 	nop
   aa2d4:	d503201f 	nop
   aa2d8:	d503201f 	nop
   aa2dc:	d503201f 	nop
   aa2e0:	d503201f 	nop
   aa2e4:	d503201f 	nop
   aa2e8:	d503201f 	nop
   aa2ec:	d503201f 	nop
   aa2f0:	d503201f 	nop
   aa2f4:	d503201f 	nop
   aa2f8:	d503201f 	nop
   aa2fc:	d503201f 	nop
   aa300:	14000177 	b	aa8dc <FIQStub>
   aa304:	d503201f 	nop
   aa308:	d503201f 	nop
   aa30c:	d503201f 	nop
   aa310:	d503201f 	nop
   aa314:	d503201f 	nop
   aa318:	d503201f 	nop
   aa31c:	d503201f 	nop
   aa320:	d503201f 	nop
   aa324:	d503201f 	nop
   aa328:	d503201f 	nop
   aa32c:	d503201f 	nop
   aa330:	d503201f 	nop
   aa334:	d503201f 	nop
   aa338:	d503201f 	nop
   aa33c:	d503201f 	nop
   aa340:	d503201f 	nop
   aa344:	d503201f 	nop
   aa348:	d503201f 	nop
   aa34c:	d503201f 	nop
   aa350:	d503201f 	nop
   aa354:	d503201f 	nop
   aa358:	d503201f 	nop
   aa35c:	d503201f 	nop
   aa360:	d503201f 	nop
   aa364:	d503201f 	nop
   aa368:	d503201f 	nop
   aa36c:	d503201f 	nop
   aa370:	d503201f 	nop
   aa374:	d503201f 	nop
   aa378:	d503201f 	nop
   aa37c:	d503201f 	nop
   aa380:	1400011d 	b	aa7f4 <SErrorStub>
   aa384:	d503201f 	nop
   aa388:	d503201f 	nop
   aa38c:	d503201f 	nop
   aa390:	d503201f 	nop
   aa394:	d503201f 	nop
   aa398:	d503201f 	nop
   aa39c:	d503201f 	nop
   aa3a0:	d503201f 	nop
   aa3a4:	d503201f 	nop
   aa3a8:	d503201f 	nop
   aa3ac:	d503201f 	nop
   aa3b0:	d503201f 	nop
   aa3b4:	d503201f 	nop
   aa3b8:	d503201f 	nop
   aa3bc:	d503201f 	nop
   aa3c0:	d503201f 	nop
   aa3c4:	d503201f 	nop
   aa3c8:	d503201f 	nop
   aa3cc:	d503201f 	nop
   aa3d0:	d503201f 	nop
   aa3d4:	d503201f 	nop
   aa3d8:	d503201f 	nop
   aa3dc:	d503201f 	nop
   aa3e0:	d503201f 	nop
   aa3e4:	d503201f 	nop
   aa3e8:	d503201f 	nop
   aa3ec:	d503201f 	nop
   aa3f0:	d503201f 	nop
   aa3f4:	d503201f 	nop
   aa3f8:	d503201f 	nop
   aa3fc:	d503201f 	nop
   aa400:	14000168 	b	aa9a0 <HVCStub>
   aa404:	d503201f 	nop
   aa408:	d503201f 	nop
   aa40c:	d503201f 	nop
   aa410:	d503201f 	nop
   aa414:	d503201f 	nop
   aa418:	d503201f 	nop
   aa41c:	d503201f 	nop
   aa420:	d503201f 	nop
   aa424:	d503201f 	nop
   aa428:	d503201f 	nop
   aa42c:	d503201f 	nop
   aa430:	d503201f 	nop
   aa434:	d503201f 	nop
   aa438:	d503201f 	nop
   aa43c:	d503201f 	nop
   aa440:	d503201f 	nop
   aa444:	d503201f 	nop
   aa448:	d503201f 	nop
   aa44c:	d503201f 	nop
   aa450:	d503201f 	nop
   aa454:	d503201f 	nop
   aa458:	d503201f 	nop
   aa45c:	d503201f 	nop
   aa460:	d503201f 	nop
   aa464:	d503201f 	nop
   aa468:	d503201f 	nop
   aa46c:	d503201f 	nop
   aa470:	d503201f 	nop
   aa474:	d503201f 	nop
   aa478:	d503201f 	nop
   aa47c:	d503201f 	nop
   aa480:	140000c1 	b	aa784 <UnexpectedStub>
   aa484:	d503201f 	nop
   aa488:	d503201f 	nop
   aa48c:	d503201f 	nop
   aa490:	d503201f 	nop
   aa494:	d503201f 	nop
   aa498:	d503201f 	nop
   aa49c:	d503201f 	nop
   aa4a0:	d503201f 	nop
   aa4a4:	d503201f 	nop
   aa4a8:	d503201f 	nop
   aa4ac:	d503201f 	nop
   aa4b0:	d503201f 	nop
   aa4b4:	d503201f 	nop
   aa4b8:	d503201f 	nop
   aa4bc:	d503201f 	nop
   aa4c0:	d503201f 	nop
   aa4c4:	d503201f 	nop
   aa4c8:	d503201f 	nop
   aa4cc:	d503201f 	nop
   aa4d0:	d503201f 	nop
   aa4d4:	d503201f 	nop
   aa4d8:	d503201f 	nop
   aa4dc:	d503201f 	nop
   aa4e0:	d503201f 	nop
   aa4e4:	d503201f 	nop
   aa4e8:	d503201f 	nop
   aa4ec:	d503201f 	nop
   aa4f0:	d503201f 	nop
   aa4f4:	d503201f 	nop
   aa4f8:	d503201f 	nop
   aa4fc:	d503201f 	nop
   aa500:	140000a1 	b	aa784 <UnexpectedStub>
   aa504:	d503201f 	nop
   aa508:	d503201f 	nop
   aa50c:	d503201f 	nop
   aa510:	d503201f 	nop
   aa514:	d503201f 	nop
   aa518:	d503201f 	nop
   aa51c:	d503201f 	nop
   aa520:	d503201f 	nop
   aa524:	d503201f 	nop
   aa528:	d503201f 	nop
   aa52c:	d503201f 	nop
   aa530:	d503201f 	nop
   aa534:	d503201f 	nop
   aa538:	d503201f 	nop
   aa53c:	d503201f 	nop
   aa540:	d503201f 	nop
   aa544:	d503201f 	nop
   aa548:	d503201f 	nop
   aa54c:	d503201f 	nop
   aa550:	d503201f 	nop
   aa554:	d503201f 	nop
   aa558:	d503201f 	nop
   aa55c:	d503201f 	nop
   aa560:	d503201f 	nop
   aa564:	d503201f 	nop
   aa568:	d503201f 	nop
   aa56c:	d503201f 	nop
   aa570:	d503201f 	nop
   aa574:	d503201f 	nop
   aa578:	d503201f 	nop
   aa57c:	d503201f 	nop
   aa580:	14000081 	b	aa784 <UnexpectedStub>
   aa584:	d503201f 	nop
   aa588:	d503201f 	nop
   aa58c:	d503201f 	nop
   aa590:	d503201f 	nop
   aa594:	d503201f 	nop
   aa598:	d503201f 	nop
   aa59c:	d503201f 	nop
   aa5a0:	d503201f 	nop
   aa5a4:	d503201f 	nop
   aa5a8:	d503201f 	nop
   aa5ac:	d503201f 	nop
   aa5b0:	d503201f 	nop
   aa5b4:	d503201f 	nop
   aa5b8:	d503201f 	nop
   aa5bc:	d503201f 	nop
   aa5c0:	d503201f 	nop
   aa5c4:	d503201f 	nop
   aa5c8:	d503201f 	nop
   aa5cc:	d503201f 	nop
   aa5d0:	d503201f 	nop
   aa5d4:	d503201f 	nop
   aa5d8:	d503201f 	nop
   aa5dc:	d503201f 	nop
   aa5e0:	d503201f 	nop
   aa5e4:	d503201f 	nop
   aa5e8:	d503201f 	nop
   aa5ec:	d503201f 	nop
   aa5f0:	d503201f 	nop
   aa5f4:	d503201f 	nop
   aa5f8:	d503201f 	nop
   aa5fc:	d503201f 	nop
   aa600:	14000061 	b	aa784 <UnexpectedStub>
   aa604:	d503201f 	nop
   aa608:	d503201f 	nop
   aa60c:	d503201f 	nop
   aa610:	d503201f 	nop
   aa614:	d503201f 	nop
   aa618:	d503201f 	nop
   aa61c:	d503201f 	nop
   aa620:	d503201f 	nop
   aa624:	d503201f 	nop
   aa628:	d503201f 	nop
   aa62c:	d503201f 	nop
   aa630:	d503201f 	nop
   aa634:	d503201f 	nop
   aa638:	d503201f 	nop
   aa63c:	d503201f 	nop
   aa640:	d503201f 	nop
   aa644:	d503201f 	nop
   aa648:	d503201f 	nop
   aa64c:	d503201f 	nop
   aa650:	d503201f 	nop
   aa654:	d503201f 	nop
   aa658:	d503201f 	nop
   aa65c:	d503201f 	nop
   aa660:	d503201f 	nop
   aa664:	d503201f 	nop
   aa668:	d503201f 	nop
   aa66c:	d503201f 	nop
   aa670:	d503201f 	nop
   aa674:	d503201f 	nop
   aa678:	d503201f 	nop
   aa67c:	d503201f 	nop
   aa680:	14000041 	b	aa784 <UnexpectedStub>
   aa684:	d503201f 	nop
   aa688:	d503201f 	nop
   aa68c:	d503201f 	nop
   aa690:	d503201f 	nop
   aa694:	d503201f 	nop
   aa698:	d503201f 	nop
   aa69c:	d503201f 	nop
   aa6a0:	d503201f 	nop
   aa6a4:	d503201f 	nop
   aa6a8:	d503201f 	nop
   aa6ac:	d503201f 	nop
   aa6b0:	d503201f 	nop
   aa6b4:	d503201f 	nop
   aa6b8:	d503201f 	nop
   aa6bc:	d503201f 	nop
   aa6c0:	d503201f 	nop
   aa6c4:	d503201f 	nop
   aa6c8:	d503201f 	nop
   aa6cc:	d503201f 	nop
   aa6d0:	d503201f 	nop
   aa6d4:	d503201f 	nop
   aa6d8:	d503201f 	nop
   aa6dc:	d503201f 	nop
   aa6e0:	d503201f 	nop
   aa6e4:	d503201f 	nop
   aa6e8:	d503201f 	nop
   aa6ec:	d503201f 	nop
   aa6f0:	d503201f 	nop
   aa6f4:	d503201f 	nop
   aa6f8:	d503201f 	nop
   aa6fc:	d503201f 	nop
   aa700:	14000021 	b	aa784 <UnexpectedStub>
   aa704:	d503201f 	nop
   aa708:	d503201f 	nop
   aa70c:	d503201f 	nop
   aa710:	d503201f 	nop
   aa714:	d503201f 	nop
   aa718:	d503201f 	nop
   aa71c:	d503201f 	nop
   aa720:	d503201f 	nop
   aa724:	d503201f 	nop
   aa728:	d503201f 	nop
   aa72c:	d503201f 	nop
   aa730:	d503201f 	nop
   aa734:	d503201f 	nop
   aa738:	d503201f 	nop
   aa73c:	d503201f 	nop
   aa740:	d503201f 	nop
   aa744:	d503201f 	nop
   aa748:	d503201f 	nop
   aa74c:	d503201f 	nop
   aa750:	d503201f 	nop
   aa754:	d503201f 	nop
   aa758:	d503201f 	nop
   aa75c:	d503201f 	nop
   aa760:	d503201f 	nop
   aa764:	d503201f 	nop
   aa768:	d503201f 	nop
   aa76c:	d503201f 	nop
   aa770:	d503201f 	nop
   aa774:	d503201f 	nop
   aa778:	d503201f 	nop
   aa77c:	d503201f 	nop
   aa780:	14000001 	b	aa784 <UnexpectedStub>

00000000000aa784 <UnexpectedStub>:
   aa784:	d5385200 	mrs	x0, esr_el1
   aa788:	d5384001 	mrs	x1, spsr_el1
   aa78c:	aa1e03e2 	mov	x2, x30
   aa790:	d5384023 	mrs	x3, elr_el1
   aa794:	d5384104 	mrs	x4, sp_el0
   aa798:	910003e5 	mov	x5, sp
   aa79c:	d5386006 	mrs	x6, far_el1
   aa7a0:	f81f0fe6 	str	x6, [sp, #-16]!
   aa7a4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   aa7a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   aa7ac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   aa7b0:	d2800000 	mov	x0, #0x0                   	// #0
   aa7b4:	910003e1 	mov	x1, sp
   aa7b8:	17ffedba 	b	a5ea0 <ExceptionHandler>

00000000000aa7bc <SynchronousStub>:
   aa7bc:	d5385200 	mrs	x0, esr_el1
   aa7c0:	d5384001 	mrs	x1, spsr_el1
   aa7c4:	aa1e03e2 	mov	x2, x30
   aa7c8:	d5384023 	mrs	x3, elr_el1
   aa7cc:	d5384104 	mrs	x4, sp_el0
   aa7d0:	910003e5 	mov	x5, sp
   aa7d4:	d5386006 	mrs	x6, far_el1
   aa7d8:	f81f0fe6 	str	x6, [sp, #-16]!
   aa7dc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   aa7e0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   aa7e4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   aa7e8:	d2800020 	mov	x0, #0x1                   	// #1
   aa7ec:	910003e1 	mov	x1, sp
   aa7f0:	17ffedac 	b	a5ea0 <ExceptionHandler>

00000000000aa7f4 <SErrorStub>:
   aa7f4:	d5385200 	mrs	x0, esr_el1
   aa7f8:	d5384001 	mrs	x1, spsr_el1
   aa7fc:	aa1e03e2 	mov	x2, x30
   aa800:	d5384023 	mrs	x3, elr_el1
   aa804:	d5384104 	mrs	x4, sp_el0
   aa808:	910003e5 	mov	x5, sp
   aa80c:	d5386006 	mrs	x6, far_el1
   aa810:	f81f0fe6 	str	x6, [sp, #-16]!
   aa814:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   aa818:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   aa81c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   aa820:	d2800040 	mov	x0, #0x2                   	// #2
   aa824:	910003e1 	mov	x1, sp
   aa828:	17ffed9e 	b	a5ea0 <ExceptionHandler>

00000000000aa82c <IRQStub>:
   aa82c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa830:	d538403d 	mrs	x29, elr_el1
   aa834:	d538401e 	mrs	x30, spsr_el1
   aa838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa83c:	d50341ff 	msr	daifclr, #0x1
   aa840:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   aa844:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   aa848:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   aa84c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   aa850:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   aa854:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   aa858:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   aa85c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   aa860:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   aa864:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   aa868:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   aa86c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   aa870:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   aa874:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   aa878:	f81f0fe0 	str	x0, [sp, #-16]!
   aa87c:	580009e0 	ldr	x0, aa9b8 <HVCStub+0x18>
   aa880:	f900001d 	str	x29, [x0]
   aa884:	97fff68f 	bl	a82c0 <InterruptHandler>
   aa888:	f84107e0 	ldr	x0, [sp], #16
   aa88c:	a8c10be1 	ldp	x1, x2, [sp], #16
   aa890:	a8c113e3 	ldp	x3, x4, [sp], #16
   aa894:	a8c11be5 	ldp	x5, x6, [sp], #16
   aa898:	a8c123e7 	ldp	x7, x8, [sp], #16
   aa89c:	a8c12be9 	ldp	x9, x10, [sp], #16
   aa8a0:	a8c133eb 	ldp	x11, x12, [sp], #16
   aa8a4:	a8c13bed 	ldp	x13, x14, [sp], #16
   aa8a8:	a8c143ef 	ldp	x15, x16, [sp], #16
   aa8ac:	a8c14bf1 	ldp	x17, x18, [sp], #16
   aa8b0:	a8c153f3 	ldp	x19, x20, [sp], #16
   aa8b4:	a8c15bf5 	ldp	x21, x22, [sp], #16
   aa8b8:	a8c163f7 	ldp	x23, x24, [sp], #16
   aa8bc:	a8c16bf9 	ldp	x25, x26, [sp], #16
   aa8c0:	a8c173fb 	ldp	x27, x28, [sp], #16
   aa8c4:	d50341df 	msr	daifset, #0x1
   aa8c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa8cc:	d518403d 	msr	elr_el1, x29
   aa8d0:	d518401e 	msr	spsr_el1, x30
   aa8d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa8d8:	d69f03e0 	eret

00000000000aa8dc <FIQStub>:
   aa8dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa8e0:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   aa8e4:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   aa8e8:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   aa8ec:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   aa8f0:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   aa8f4:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   aa8f8:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   aa8fc:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   aa900:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   aa904:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   aa908:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   aa90c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   aa910:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   aa914:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   aa918:	f81f0fe0 	str	x0, [sp, #-16]!
   aa91c:	58000522 	ldr	x2, aa9c0 <HVCStub+0x20>
   aa920:	f9400041 	ldr	x1, [x2]
   aa924:	f100003f 	cmp	x1, #0x0
   aa928:	54000280 	b.eq	aa978 <FIQStub+0x9c>  // b.none
   aa92c:	f9400440 	ldr	x0, [x2, #8]
   aa930:	d63f0020 	blr	x1
   aa934:	f84107e0 	ldr	x0, [sp], #16
   aa938:	a8c10be1 	ldp	x1, x2, [sp], #16
   aa93c:	a8c113e3 	ldp	x3, x4, [sp], #16
   aa940:	a8c11be5 	ldp	x5, x6, [sp], #16
   aa944:	a8c123e7 	ldp	x7, x8, [sp], #16
   aa948:	a8c12be9 	ldp	x9, x10, [sp], #16
   aa94c:	a8c133eb 	ldp	x11, x12, [sp], #16
   aa950:	a8c13bed 	ldp	x13, x14, [sp], #16
   aa954:	a8c143ef 	ldp	x15, x16, [sp], #16
   aa958:	a8c14bf1 	ldp	x17, x18, [sp], #16
   aa95c:	a8c153f3 	ldp	x19, x20, [sp], #16
   aa960:	a8c15bf5 	ldp	x21, x22, [sp], #16
   aa964:	a8c163f7 	ldp	x23, x24, [sp], #16
   aa968:	a8c16bf9 	ldp	x25, x26, [sp], #16
   aa96c:	a8c173fb 	ldp	x27, x28, [sp], #16
   aa970:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa974:	d69f03e0 	eret
   aa978:	58000281 	ldr	x1, aa9c8 <HVCStub+0x28>
   aa97c:	52800000 	mov	w0, #0x0                   	// #0
   aa980:	b9000020 	str	w0, [x1]
   aa984:	17ffffec 	b	aa934 <FIQStub+0x58>

00000000000aa988 <SMCStub>:
   aa988:	58000242 	ldr	x2, aa9d0 <HVCStub+0x30>
   aa98c:	9100005f 	mov	sp, x2
   aa990:	f81f0ffe 	str	x30, [sp, #-16]!
   aa994:	97fff6bb 	bl	a8480 <SecureMonitorHandler>
   aa998:	f84107fe 	ldr	x30, [sp], #16
   aa99c:	d69f03e0 	eret

00000000000aa9a0 <HVCStub>:
   aa9a0:	d53c4000 	mrs	x0, spsr_el2
   aa9a4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   aa9a8:	d2800121 	mov	x1, #0x9                   	// #9
   aa9ac:	aa010000 	orr	x0, x0, x1
   aa9b0:	d51c4000 	msr	spsr_el2, x0
   aa9b4:	d69f03e0 	eret
   aa9b8:	000b6428 	.word	0x000b6428
   aa9bc:	00000000 	.word	0x00000000
   aa9c0:	000b6410 	.word	0x000b6410
   aa9c4:	00000000 	.word	0x00000000
   aa9c8:	fe00b20c 	.word	0xfe00b20c
   aa9cc:	00000000 	.word	0x00000000
   aa9d0:	000b7080 	.word	0x000b7080
	...

00000000000aa9e0 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)>:
   aa9e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   aa9e4:	910003fd 	mov	x29, sp
   aa9e8:	a90153f3 	stp	x19, x20, [sp, #16]
   aa9ec:	91008014 	add	x20, x0, #0x20
   aa9f0:	aa1403f3 	mov	x19, x20
   aa9f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   aa9f8:	aa0003f5 	mov	x21, x0
   aa9fc:	91074016 	add	x22, x0, #0x1d0
   aaa00:	a90363f7 	stp	x23, x24, [sp, #48]
   aaa04:	aa0203f8 	mov	x24, x2
   aaa08:	aa0303f7 	mov	x23, x3
   aaa0c:	f90023f9 	str	x25, [sp, #64]
   aaa10:	aa0103f9 	mov	x25, x1
   aaa14:	97ffc8fb 	bl	9ce00 <CDevice::CDevice()>
   aaa18:	f0000040 	adrp	x0, b5000 <font_data+0x1340>
   aaa1c:	91014000 	add	x0, x0, #0x50
   aaa20:	a9015eb8 	stp	x24, x23, [x21, #16]
   aaa24:	a90066a0 	stp	x0, x25, [x21]
   aaa28:	aa1303e0 	mov	x0, x19
   aaa2c:	91012273 	add	x19, x19, #0x48
   aaa30:	97ffcaa0 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   aaa34:	eb16027f 	cmp	x19, x22
   aaa38:	54ffff81 	b.ne	aaa28 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x48>  // b.any
   aaa3c:	910e02b6 	add	x22, x21, #0x380
   aaa40:	aa1303e0 	mov	x0, x19
   aaa44:	91012273 	add	x19, x19, #0x48
   aaa48:	97ffca9a 	bl	9d4b0 <CGPIOPin::CGPIOPin()>
   aaa4c:	eb16027f 	cmp	x19, x22
   aaa50:	54ffff81 	b.ne	aaa40 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x60>  // b.any
   aaa54:	f901c2bf 	str	xzr, [x21, #896]
   aaa58:	f901c6bf 	str	xzr, [x21, #904]
   aaa5c:	b90392bf 	str	wzr, [x21, #912]
   aaa60:	f901e2bf 	str	xzr, [x21, #960]
   aaa64:	f94006a0 	ldr	x0, [x21, #8]
   aaa68:	b4000660 	cbz	x0, aab34 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x154>
   aaa6c:	f9400aa0 	ldr	x0, [x21, #16]
   aaa70:	b40006e0 	cbz	x0, aab4c <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x16c>
   aaa74:	d2800200 	mov	x0, #0x10                  	// #16
   aaa78:	97ffeb02 	bl	a5680 <operator new(unsigned long)>
   aaa7c:	f901e2a0 	str	x0, [x21, #960]
   aaa80:	97ffd3e8 	bl	9fa20 <CMachineInfo::Get()>
   aaa84:	97ffd2bf 	bl	9f580 <CMachineInfo::GetMachineModel() const>
   aaa88:	7100241f 	cmp	w0, #0x9
   aaa8c:	54000381 	b.ne	aaafc <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0x11c>  // b.any
   aaa90:	52800453 	mov	w19, #0x22                  	// #34
   aaa94:	d503201f 	nop
   aaa98:	2a1303e1 	mov	w1, w19
   aaa9c:	aa1403e0 	mov	x0, x20
   aaaa0:	97ffcab0 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   aaaa4:	52800002 	mov	w2, #0x0                   	// #0
   aaaa8:	aa1403e0 	mov	x0, x20
   aaaac:	52800001 	mov	w1, #0x0                   	// #0
   aaab0:	9106c295 	add	x21, x20, #0x1b0
   aaab4:	97ffcacf 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   aaab8:	11003a61 	add	w1, w19, #0xe
   aaabc:	aa1503e0 	mov	x0, x21
   aaac0:	97ffcaa8 	bl	9d560 <CGPIOPin::AssignPin(unsigned int)>
   aaac4:	aa1503e0 	mov	x0, x21
   aaac8:	52800002 	mov	w2, #0x0                   	// #0
   aaacc:	528000e1 	mov	w1, #0x7                   	// #7
   aaad0:	11000673 	add	w19, w19, #0x1
   aaad4:	97ffcac7 	bl	9d5f0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   aaad8:	7100a27f 	cmp	w19, #0x28
   aaadc:	91012294 	add	x20, x20, #0x48
   aaae0:	54fffdc1 	b.ne	aaa98 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb8>  // b.any
   aaae4:	a94153f3 	ldp	x19, x20, [sp, #16]
   aaae8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aaaec:	a94363f7 	ldp	x23, x24, [sp, #48]
   aaaf0:	f94023f9 	ldr	x25, [sp, #64]
   aaaf4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aaaf8:	d65f03c0 	ret
   aaafc:	97ffd3c9 	bl	9fa20 <CMachineInfo::Get()>
   aab00:	97ffd2a0 	bl	9f580 <CMachineInfo::GetMachineModel() const>
   aab04:	7100281f 	cmp	w0, #0xa
   aab08:	54fffc40 	b.eq	aaa90 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb0>  // b.none
   aab0c:	97ffd3c5 	bl	9fa20 <CMachineInfo::Get()>
   aab10:	97ffd29c 	bl	9f580 <CMachineInfo::GetMachineModel() const>
   aab14:	71002c1f 	cmp	w0, #0xb
   aab18:	54fffbc0 	b.eq	aaa90 <CEMMCDevice::CEMMCDevice(CInterruptSystem*, CTimer*, CActLED*)+0xb0>  // b.none
   aab1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aab20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aab24:	a94363f7 	ldp	x23, x24, [sp, #48]
   aab28:	f94023f9 	ldr	x25, [sp, #64]
   aab2c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aab30:	d65f03c0 	ret
   aab34:	f0000040 	adrp	x0, b5000 <font_data+0x1340>
   aab38:	91020000 	add	x0, x0, #0x80
   aab3c:	9108e001 	add	x1, x0, #0x238
   aab40:	52803be2 	mov	w2, #0x1df                 	// #479
   aab44:	91092000 	add	x0, x0, #0x248
   aab48:	97ffc6ce 	bl	9c680 <assertion_failed>
   aab4c:	f0000040 	adrp	x0, b5000 <font_data+0x1340>
   aab50:	91020000 	add	x0, x0, #0x80
   aab54:	9108e001 	add	x1, x0, #0x238
   aab58:	52803c02 	mov	w2, #0x1e0                 	// #480
   aab5c:	91098000 	add	x0, x0, #0x260
   aab60:	97ffc6c8 	bl	9c680 <assertion_failed>
   aab64:	d503201f 	nop
   aab68:	d503201f 	nop
   aab6c:	d503201f 	nop

00000000000aab70 <CEMMCDevice::~CEMMCDevice()>:
   aab70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aab74:	910003fd 	mov	x29, sp
   aab78:	f0000041 	adrp	x1, b5000 <font_data+0x1340>
   aab7c:	91014021 	add	x1, x1, #0x50
   aab80:	a9025bf5 	stp	x21, x22, [sp, #32]
   aab84:	aa0003f5 	mov	x21, x0
   aab88:	a90153f3 	stp	x19, x20, [sp, #16]
   aab8c:	f941e000 	ldr	x0, [x0, #960]
   aab90:	f90002a1 	str	x1, [x21]
   aab94:	b4000060 	cbz	x0, aaba0 <CEMMCDevice::~CEMMCDevice()+0x30>
   aab98:	d2800201 	mov	x1, #0x10                  	// #16
   aab9c:	97ffeadd 	bl	a5710 <operator delete(void*, unsigned long)>
   aaba0:	f901e2bf 	str	xzr, [x21, #960]
   aaba4:	f941c6b3 	ldr	x19, [x21, #904]
   aaba8:	b40000d3 	cbz	x19, aabc0 <CEMMCDevice::~CEMMCDevice()+0x50>
   aabac:	aa1303e0 	mov	x0, x19
   aabb0:	97ff9e18 	bl	92410 <CPartitionManager::~CPartitionManager()>
   aabb4:	aa1303e0 	mov	x0, x19
   aabb8:	d2800901 	mov	x1, #0x48                  	// #72
   aabbc:	97ffead5 	bl	a5710 <operator delete(void*, unsigned long)>
   aabc0:	910742b4 	add	x20, x21, #0x1d0
   aabc4:	910ce2b3 	add	x19, x21, #0x338
   aabc8:	a900febf 	stp	xzr, xzr, [x21, #8]
   aabcc:	910622b6 	add	x22, x21, #0x188
   aabd0:	f901c6bf 	str	xzr, [x21, #904]
   aabd4:	d503201f 	nop
   aabd8:	f9400261 	ldr	x1, [x19]
   aabdc:	aa1303e0 	mov	x0, x19
   aabe0:	d1012273 	sub	x19, x19, #0x48
   aabe4:	f9400021 	ldr	x1, [x1]
   aabe8:	d63f0020 	blr	x1
   aabec:	eb16027f 	cmp	x19, x22
   aabf0:	54ffff41 	b.ne	aabd8 <CEMMCDevice::~CEMMCDevice()+0x68>  // b.any
   aabf4:	910082b3 	add	x19, x21, #0x20
   aabf8:	f85b8e81 	ldr	x1, [x20, #-72]!
   aabfc:	aa1403e0 	mov	x0, x20
   aac00:	f9400021 	ldr	x1, [x1]
   aac04:	d63f0020 	blr	x1
   aac08:	eb14027f 	cmp	x19, x20
   aac0c:	54ffff61 	b.ne	aabf8 <CEMMCDevice::~CEMMCDevice()+0x88>  // b.any
   aac10:	aa1503e0 	mov	x0, x21
   aac14:	a94153f3 	ldp	x19, x20, [sp, #16]
   aac18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aac1c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aac20:	17ffc864 	b	9cdb0 <CDevice::~CDevice()>
   aac24:	d503201f 	nop
   aac28:	d503201f 	nop
   aac2c:	d503201f 	nop

00000000000aac30 <CEMMCDevice::~CEMMCDevice()>:
   aac30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aac34:	910003fd 	mov	x29, sp
   aac38:	f9000bf3 	str	x19, [sp, #16]
   aac3c:	aa0003f3 	mov	x19, x0
   aac40:	97ffffcc 	bl	aab70 <CEMMCDevice::~CEMMCDevice()>
   aac44:	aa1303e0 	mov	x0, x19
   aac48:	d2808101 	mov	x1, #0x408                 	// #1032
   aac4c:	f9400bf3 	ldr	x19, [sp, #16]
   aac50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aac54:	17ffeaaf 	b	a5710 <operator delete(void*, unsigned long)>
   aac58:	d503201f 	nop
   aac5c:	d503201f 	nop

00000000000aac60 <CEMMCDevice::Initialize()>:
   aac60:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   aac64:	910003fd 	mov	x29, sp
   aac68:	52800001 	mov	w1, #0x0                   	// #0
   aac6c:	a90153f3 	stp	x19, x20, [sp, #16]
   aac70:	aa0003f3 	mov	x19, x0
   aac74:	9100c3e0 	add	x0, sp, #0x30
   aac78:	97ffc6a6 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   aac7c:	d2801082 	mov	x2, #0x84                  	// #132
   aac80:	9100c3e0 	add	x0, sp, #0x30
   aac84:	52900821 	mov	w1, #0x8041                	// #32833
   aac88:	72a00061 	movk	w1, #0x3, lsl #16
   aac8c:	52800104 	mov	w4, #0x8                   	// #8
   aac90:	52800283 	mov	w3, #0x14                  	// #20
   aac94:	f80443e2 	stur	x2, [sp, #68]
   aac98:	9100e3e2 	add	x2, sp, #0x38
   aac9c:	97ffc6a5 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   aaca0:	72001c1f 	tst	w0, #0xff
   aaca4:	54000360 	b.eq	aad10 <CEMMCDevice::Initialize()+0xb0>  // b.none
   aaca8:	f9400a60 	ldr	x0, [x19, #16]
   aacac:	b4000560 	cbz	x0, aad58 <CEMMCDevice::Initialize()+0xf8>
   aacb0:	52827100 	mov	w0, #0x1388                	// #5000
   aacb4:	97ffe5b7 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   aacb8:	aa1303e0 	mov	x0, x19
   aacbc:	94000531 	bl	ac180 <CEMMCDevice::CardInit()>
   aacc0:	35000280 	cbnz	w0, aad10 <CEMMCDevice::Initialize()+0xb0>
   aacc4:	f0000040 	adrp	x0, b5000 <font_data+0x1340>
   aacc8:	91020000 	add	x0, x0, #0x80
   aaccc:	f941c661 	ldr	x1, [x19, #904]
   aacd0:	7944e802 	ldrh	w2, [x0, #628]
   aacd4:	b9427003 	ldr	w3, [x0, #624]
   aacd8:	79005be2 	strh	w2, [sp, #44]
   aacdc:	b9002be3 	str	w3, [sp, #40]
   aace0:	b50003e1 	cbnz	x1, aad5c <CEMMCDevice::Initialize()+0xfc>
   aace4:	d2800900 	mov	x0, #0x48                  	// #72
   aace8:	97ffea66 	bl	a5680 <operator new(unsigned long)>
   aacec:	aa0003f4 	mov	x20, x0
   aacf0:	9100a3e2 	add	x2, sp, #0x28
   aacf4:	aa1303e1 	mov	x1, x19
   aacf8:	97ff9db6 	bl	923d0 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   aacfc:	aa1403e0 	mov	x0, x20
   aad00:	f901c674 	str	x20, [x19, #904]
   aad04:	97ff9dfb 	bl	924f0 <CPartitionManager::Initialize()>
   aad08:	72001c14 	ands	w20, w0, #0xff
   aad0c:	54000101 	b.ne	aad2c <CEMMCDevice::Initialize()+0xcc>  // b.any
   aad10:	9100c3e0 	add	x0, sp, #0x30
   aad14:	52800014 	mov	w20, #0x0                   	// #0
   aad18:	97ffc682 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   aad1c:	2a1403e0 	mov	w0, w20
   aad20:	a94153f3 	ldp	x19, x20, [sp, #16]
   aad24:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aad28:	d65f03c0 	ret
   aad2c:	97ffc925 	bl	9d1c0 <CDeviceNameService::Get()>
   aad30:	aa1303e2 	mov	x2, x19
   aad34:	9100a3e1 	add	x1, sp, #0x28
   aad38:	52800023 	mov	w3, #0x1                   	// #1
   aad3c:	97ffc859 	bl	9cea0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   aad40:	9100c3e0 	add	x0, sp, #0x30
   aad44:	97ffc677 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   aad48:	2a1403e0 	mov	w0, w20
   aad4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aad50:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aad54:	d65f03c0 	ret
   aad58:	9400069e 	bl	ac7d0 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   aad5c:	9108e001 	add	x1, x0, #0x238
   aad60:	528045e2 	mov	w2, #0x22f                 	// #559
   aad64:	9109e000 	add	x0, x0, #0x278
   aad68:	97ffc646 	bl	9c680 <assertion_failed>
   aad6c:	d503201f 	nop

00000000000aad70 <CEMMCDevice::Read(void*, unsigned long)>:
   aad70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aad74:	910003fd 	mov	x29, sp
   aad78:	f941c003 	ldr	x3, [x0, #896]
   aad7c:	a9025bf5 	stp	x21, x22, [sp, #32]
   aad80:	f240207f 	tst	x3, #0x1ff
   aad84:	54000481 	b.ne	aae14 <CEMMCDevice::Read(void*, unsigned long)+0xa4>  // b.any
   aad88:	a90153f3 	stp	x19, x20, [sp, #16]
   aad8c:	aa0003f3 	mov	x19, x0
   aad90:	aa0103f6 	mov	x22, x1
   aad94:	aa0203f4 	mov	x20, x2
   aad98:	d349fc75 	lsr	x21, x3, #9
   aad9c:	f9400c00 	ldr	x0, [x0, #24]
   aada0:	b4000040 	cbz	x0, aada8 <CEMMCDevice::Read(void*, unsigned long)+0x38>
   aada4:	97ffc5b3 	bl	9c470 <CActLED::On()>
   aada8:	2a1503e3 	mov	w3, w21
   aadac:	aa1603e1 	mov	x1, x22
   aadb0:	aa1403e2 	mov	x2, x20
   aadb4:	aa1303e0 	mov	x0, x19
   aadb8:	940005ee 	bl	ac570 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)>
   aadbc:	6b14001f 	cmp	w0, w20
   aadc0:	2a1403f5 	mov	w21, w20
   aadc4:	f9400e60 	ldr	x0, [x19, #24]
   aadc8:	540001a1 	b.ne	aadfc <CEMMCDevice::Read(void*, unsigned long)+0x8c>  // b.any
   aadcc:	b40000e0 	cbz	x0, aade8 <CEMMCDevice::Read(void*, unsigned long)+0x78>
   aadd0:	97ffc5b4 	bl	9c4a0 <CActLED::Off()>
   aadd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   aadd8:	2a1503e0 	mov	w0, w21
   aaddc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aade0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aade4:	d65f03c0 	ret
   aade8:	2a1503e0 	mov	w0, w21
   aadec:	a94153f3 	ldp	x19, x20, [sp, #16]
   aadf0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aadf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aadf8:	d65f03c0 	ret
   aadfc:	b40000a0 	cbz	x0, aae10 <CEMMCDevice::Read(void*, unsigned long)+0xa0>
   aae00:	97ffc5a8 	bl	9c4a0 <CActLED::Off()>
   aae04:	12800015 	mov	w21, #0xffffffff            	// #-1
   aae08:	a94153f3 	ldp	x19, x20, [sp, #16]
   aae0c:	17fffff3 	b	aadd8 <CEMMCDevice::Read(void*, unsigned long)+0x68>
   aae10:	a94153f3 	ldp	x19, x20, [sp, #16]
   aae14:	12800015 	mov	w21, #0xffffffff            	// #-1
   aae18:	17fffff0 	b	aadd8 <CEMMCDevice::Read(void*, unsigned long)+0x68>
   aae1c:	d503201f 	nop

00000000000aae20 <CEMMCDevice::Write(void const*, unsigned long)>:
   aae20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aae24:	910003fd 	mov	x29, sp
   aae28:	f941c003 	ldr	x3, [x0, #896]
   aae2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   aae30:	f240207f 	tst	x3, #0x1ff
   aae34:	54000481 	b.ne	aaec4 <CEMMCDevice::Write(void const*, unsigned long)+0xa4>  // b.any
   aae38:	a90153f3 	stp	x19, x20, [sp, #16]
   aae3c:	aa0003f3 	mov	x19, x0
   aae40:	aa0103f6 	mov	x22, x1
   aae44:	aa0203f4 	mov	x20, x2
   aae48:	d349fc75 	lsr	x21, x3, #9
   aae4c:	f9400c00 	ldr	x0, [x0, #24]
   aae50:	b4000040 	cbz	x0, aae58 <CEMMCDevice::Write(void const*, unsigned long)+0x38>
   aae54:	97ffc587 	bl	9c470 <CActLED::On()>
   aae58:	2a1503e3 	mov	w3, w21
   aae5c:	aa1603e1 	mov	x1, x22
   aae60:	aa1403e2 	mov	x2, x20
   aae64:	aa1303e0 	mov	x0, x19
   aae68:	940005da 	bl	ac5d0 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)>
   aae6c:	6b14001f 	cmp	w0, w20
   aae70:	2a1403f5 	mov	w21, w20
   aae74:	f9400e60 	ldr	x0, [x19, #24]
   aae78:	540001a1 	b.ne	aaeac <CEMMCDevice::Write(void const*, unsigned long)+0x8c>  // b.any
   aae7c:	b40000e0 	cbz	x0, aae98 <CEMMCDevice::Write(void const*, unsigned long)+0x78>
   aae80:	97ffc588 	bl	9c4a0 <CActLED::Off()>
   aae84:	a94153f3 	ldp	x19, x20, [sp, #16]
   aae88:	2a1503e0 	mov	w0, w21
   aae8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aae90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aae94:	d65f03c0 	ret
   aae98:	2a1503e0 	mov	w0, w21
   aae9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aaea0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aaea4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aaea8:	d65f03c0 	ret
   aaeac:	b40000a0 	cbz	x0, aaec0 <CEMMCDevice::Write(void const*, unsigned long)+0xa0>
   aaeb0:	97ffc57c 	bl	9c4a0 <CActLED::Off()>
   aaeb4:	12800015 	mov	w21, #0xffffffff            	// #-1
   aaeb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   aaebc:	17fffff3 	b	aae88 <CEMMCDevice::Write(void const*, unsigned long)+0x68>
   aaec0:	a94153f3 	ldp	x19, x20, [sp, #16]
   aaec4:	12800015 	mov	w21, #0xffffffff            	// #-1
   aaec8:	17fffff0 	b	aae88 <CEMMCDevice::Write(void const*, unsigned long)+0x68>
   aaecc:	d503201f 	nop

00000000000aaed0 <CEMMCDevice::Seek(unsigned long)>:
   aaed0:	aa0003e2 	mov	x2, x0
   aaed4:	aa0103e0 	mov	x0, x1
   aaed8:	f901c041 	str	x1, [x2, #896]
   aaedc:	d65f03c0 	ret

00000000000aaee0 <CEMMCDevice::PowerOn()>:
   aaee0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aaee4:	52800001 	mov	w1, #0x0                   	// #0
   aaee8:	910003fd 	mov	x29, sp
   aaeec:	910083e0 	add	x0, sp, #0x20
   aaef0:	f9000bf3 	str	x19, [sp, #16]
   aaef4:	97ffc607 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   aaef8:	d2c00062 	mov	x2, #0x300000000           	// #12884901888
   aaefc:	910083e0 	add	x0, sp, #0x20
   aaf00:	52900021 	mov	w1, #0x8001                	// #32769
   aaf04:	72a00041 	movk	w1, #0x2, lsl #16
   aaf08:	52800004 	mov	w4, #0x0                   	// #0
   aaf0c:	52800283 	mov	w3, #0x14                  	// #20
   aaf10:	f80343e2 	stur	x2, [sp, #52]
   aaf14:	9100a3e2 	add	x2, sp, #0x28
   aaf18:	97ffc606 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   aaf1c:	72001c1f 	tst	w0, #0xff
   aaf20:	54000160 	b.eq	aaf4c <CEMMCDevice::PowerOn()+0x6c>  // b.none
   aaf24:	b9403be0 	ldr	w0, [sp, #56]
   aaf28:	37080120 	tbnz	w0, #1, aaf4c <CEMMCDevice::PowerOn()+0x6c>
   aaf2c:	52800013 	mov	w19, #0x0                   	// #0
   aaf30:	360000e0 	tbz	w0, #0, aaf4c <CEMMCDevice::PowerOn()+0x6c>
   aaf34:	910083e0 	add	x0, sp, #0x20
   aaf38:	97ffc5fa 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   aaf3c:	2a1303e0 	mov	w0, w19
   aaf40:	f9400bf3 	ldr	x19, [sp, #16]
   aaf44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aaf48:	d65f03c0 	ret
   aaf4c:	f0000041 	adrp	x1, b5000 <font_data+0x1340>
   aaf50:	91020021 	add	x1, x1, #0x80
   aaf54:	910a6021 	add	x1, x1, #0x298
   aaf58:	52800020 	mov	w0, #0x1                   	// #1
   aaf5c:	12800013 	mov	w19, #0xffffffff            	// #-1
   aaf60:	940005e8 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   aaf64:	17fffff4 	b	aaf34 <CEMMCDevice::PowerOn()+0x54>
   aaf68:	d503201f 	nop
   aaf6c:	d503201f 	nop

00000000000aaf70 <CEMMCDevice::PowerOff()>:
   aaf70:	d2800501 	mov	x1, #0x28                  	// #40
   aaf74:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   aaf78:	b9400020 	ldr	w0, [x1]
   aaf7c:	12177800 	and	w0, w0, #0xfffffeff
   aaf80:	b9000020 	str	w0, [x1]
   aaf84:	d65f03c0 	ret
   aaf88:	d503201f 	nop
   aaf8c:	d503201f 	nop

00000000000aaf90 <CEMMCDevice::GetBaseClock()>:
   aaf90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aaf94:	52800001 	mov	w1, #0x0                   	// #0
   aaf98:	910003fd 	mov	x29, sp
   aaf9c:	910083e0 	add	x0, sp, #0x20
   aafa0:	f9000bf3 	str	x19, [sp, #16]
   aafa4:	97ffc5db 	bl	9c710 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   aafa8:	52800182 	mov	w2, #0xc                   	// #12
   aafac:	910083e0 	add	x0, sp, #0x20
   aafb0:	52800041 	mov	w1, #0x2                   	// #2
   aafb4:	72a00061 	movk	w1, #0x3, lsl #16
   aafb8:	52800004 	mov	w4, #0x0                   	// #0
   aafbc:	52800283 	mov	w3, #0x14                  	// #20
   aafc0:	b90037e2 	str	w2, [sp, #52]
   aafc4:	9100a3e2 	add	x2, sp, #0x28
   aafc8:	97ffc5da 	bl	9c730 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   aafcc:	72001c1f 	tst	w0, #0xff
   aafd0:	54000100 	b.eq	aaff0 <CEMMCDevice::GetBaseClock()+0x60>  // b.none
   aafd4:	b9403bf3 	ldr	w19, [sp, #56]
   aafd8:	910083e0 	add	x0, sp, #0x20
   aafdc:	97ffc5d1 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   aafe0:	2a1303e0 	mov	w0, w19
   aafe4:	f9400bf3 	ldr	x19, [sp, #16]
   aafe8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aafec:	d65f03c0 	ret
   aaff0:	f0000041 	adrp	x1, b5000 <font_data+0x1340>
   aaff4:	91020021 	add	x1, x1, #0x80
   aaff8:	910b0021 	add	x1, x1, #0x2c0
   aaffc:	52800020 	mov	w0, #0x1                   	// #1
   ab000:	940005c0 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab004:	910083e0 	add	x0, sp, #0x20
   ab008:	52800013 	mov	w19, #0x0                   	// #0
   ab00c:	b9003bff 	str	wzr, [sp, #56]
   ab010:	97ffc5c4 	bl	9c720 <CBcmPropertyTags::~CBcmPropertyTags()>
   ab014:	2a1303e0 	mov	w0, w19
   ab018:	f9400bf3 	ldr	x19, [sp, #16]
   ab01c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ab020:	d65f03c0 	ret
   ab024:	d503201f 	nop
   ab028:	d503201f 	nop
   ab02c:	d503201f 	nop

00000000000ab030 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>:
   ab030:	6b01005f 	cmp	w2, w1
   ab034:	52800023 	mov	w3, #0x1                   	// #1
   ab038:	540000c8 	b.hi	ab050 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x20>  // b.pmore
   ab03c:	1ac20823 	udiv	w3, w1, w2
   ab040:	1b028462 	msub	w2, w3, w2, w1
   ab044:	7100005f 	cmp	w2, #0x0
   ab048:	1a9f07e0 	cset	w0, ne  // ne = any
   ab04c:	4b000063 	sub	w3, w3, w0
   ab050:	528003e1 	mov	w1, #0x1f                  	// #31
   ab054:	52800022 	mov	w2, #0x1                   	// #1
   ab058:	14000004 	b	ab068 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x38>
   ab05c:	51000421 	sub	w1, w1, #0x1
   ab060:	3100043f 	cmn	w1, #0x1
   ab064:	540002c0 	b.eq	ab0bc <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x8c>  // b.none
   ab068:	1ac12040 	lsl	w0, w2, w1
   ab06c:	6a00007f 	tst	w3, w0
   ab070:	54ffff60 	b.eq	ab05c <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x2c>  // b.none
   ab074:	6a200060 	bics	w0, w3, w0
   ab078:	540000c0 	b.eq	ab090 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x60>  // b.none
   ab07c:	11000421 	add	w1, w1, #0x1
   ab080:	529ff800 	mov	w0, #0xffc0                	// #65472
   ab084:	7100803f 	cmp	w1, #0x20
   ab088:	54000061 	b.ne	ab094 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x64>  // b.any
   ab08c:	d65f03c0 	ret
   ab090:	34ffffe1 	cbz	w1, ab08c <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)+0x5c>
   ab094:	52800020 	mov	w0, #0x1                   	// #1
   ab098:	51000421 	sub	w1, w1, #0x1
   ab09c:	1ac12001 	lsl	w1, w0, w1
   ab0a0:	52807fe0 	mov	w0, #0x3ff                 	// #1023
   ab0a4:	6b00003f 	cmp	w1, w0
   ab0a8:	1a80d021 	csel	w1, w1, w0, le
   ab0ac:	53181c22 	ubfiz	w2, w1, #8, #8
   ab0b0:	13087c20 	asr	w0, w1, #8
   ab0b4:	2a001840 	orr	w0, w2, w0, lsl #6
   ab0b8:	d65f03c0 	ret
   ab0bc:	529ff800 	mov	w0, #0xffc0                	// #65472
   ab0c0:	d65f03c0 	ret
   ab0c4:	d503201f 	nop
   ab0c8:	d503201f 	nop
   ab0cc:	d503201f 	nop

00000000000ab0d0 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>:
   ab0d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ab0d4:	2a0203e4 	mov	w4, w2
   ab0d8:	910003fd 	mov	x29, sp
   ab0dc:	a90153f3 	stp	x19, x20, [sp, #16]
   ab0e0:	aa0003f3 	mov	x19, x0
   ab0e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab0e8:	97ffffd2 	bl	ab030 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   ab0ec:	3100041f 	cmn	w0, #0x1
   ab0f0:	2a0003f5 	mov	w21, w0
   ab0f4:	54000560 	b.eq	ab1a0 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xd0>  // b.none
   ab0f8:	d2800494 	mov	x20, #0x24                  	// #36
   ab0fc:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   ab100:	b9400280 	ldr	w0, [x20]
   ab104:	f240041f 	tst	x0, #0x3
   ab108:	540000e1 	b.ne	ab124 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x54>  // b.any
   ab10c:	14000009 	b	ab130 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x60>
   ab110:	52807d00 	mov	w0, #0x3e8                 	// #1000
   ab114:	97ffe49f 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab118:	b9400281 	ldr	w1, [x20]
   ab11c:	f240043f 	tst	x1, #0x3
   ab120:	54000080 	b.eq	ab130 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x60>  // b.none
   ab124:	f9400a61 	ldr	x1, [x19, #16]
   ab128:	b5ffff41 	cbnz	x1, ab110 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x40>
   ab12c:	940005a9 	bl	ac7d0 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   ab130:	d2800594 	mov	x20, #0x2c                  	// #44
   ab134:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   ab138:	f9400a60 	ldr	x0, [x19, #16]
   ab13c:	b9400296 	ldr	w22, [x20]
   ab140:	121d7ac1 	and	w1, w22, #0xfffffffb
   ab144:	b9000281 	str	w1, [x20]
   ab148:	b4ffff20 	cbz	x0, ab12c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   ab14c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab150:	97ffe490 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab154:	129ffc81 	mov	w1, #0xffff001b            	// #-65509
   ab158:	f9400a60 	ldr	x0, [x19, #16]
   ab15c:	0a0102d6 	and	w22, w22, w1
   ab160:	2a1602b5 	orr	w21, w21, w22
   ab164:	b9000295 	str	w21, [x20]
   ab168:	b4fffe20 	cbz	x0, ab12c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   ab16c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab170:	321e02b5 	orr	w21, w21, #0x4
   ab174:	97ffe487 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab178:	f9400a60 	ldr	x0, [x19, #16]
   ab17c:	b9000295 	str	w21, [x20]
   ab180:	b4fffd60 	cbz	x0, ab12c <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0x5c>
   ab184:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab188:	97ffe482 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab18c:	52800000 	mov	w0, #0x0                   	// #0
   ab190:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab194:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab198:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ab19c:	d65f03c0 	ret
   ab1a0:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab1a4:	91020021 	add	x1, x1, #0x80
   ab1a8:	52800080 	mov	w0, #0x4                   	// #4
   ab1ac:	2a0403e2 	mov	w2, w4
   ab1b0:	910b6021 	add	x1, x1, #0x2d8
   ab1b4:	94000553 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab1b8:	2a1503e0 	mov	w0, w21
   ab1bc:	17fffff5 	b	ab190 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)+0xc0>

00000000000ab1c0 <CEMMCDevice::ResetCmd()>:
   ab1c0:	d2800586 	mov	x6, #0x2c                  	// #44
   ab1c4:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   ab1c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab1cc:	910003fd 	mov	x29, sp
   ab1d0:	52a04002 	mov	w2, #0x2000000             	// #33554432
   ab1d4:	52884804 	mov	w4, #0x4240                	// #16960
   ab1d8:	72a001e4 	movk	w4, #0xf, lsl #16
   ab1dc:	b94000c5 	ldr	w5, [x6]
   ab1e0:	52800581 	mov	w1, #0x2c                  	// #44
   ab1e4:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab1e8:	52800003 	mov	w3, #0x0                   	// #0
   ab1ec:	2a0200a5 	orr	w5, w5, w2
   ab1f0:	b90000c5 	str	w5, [x6]
   ab1f4:	9400050f 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab1f8:	37f80080 	tbnz	w0, #31, ab208 <CEMMCDevice::ResetCmd()+0x48>
   ab1fc:	52800000 	mov	w0, #0x0                   	// #0
   ab200:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab204:	d65f03c0 	ret
   ab208:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab20c:	91020021 	add	x1, x1, #0x80
   ab210:	52800020 	mov	w0, #0x1                   	// #1
   ab214:	910c4021 	add	x1, x1, #0x310
   ab218:	9400053a 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab21c:	12800000 	mov	w0, #0xffffffff            	// #-1
   ab220:	17fffff8 	b	ab200 <CEMMCDevice::ResetCmd()+0x40>
   ab224:	d503201f 	nop
   ab228:	d503201f 	nop
   ab22c:	d503201f 	nop

00000000000ab230 <CEMMCDevice::ResetDat()>:
   ab230:	d2800586 	mov	x6, #0x2c                  	// #44
   ab234:	f2bfc686 	movk	x6, #0xfe34, lsl #16
   ab238:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab23c:	910003fd 	mov	x29, sp
   ab240:	52a08002 	mov	w2, #0x4000000             	// #67108864
   ab244:	52884804 	mov	w4, #0x4240                	// #16960
   ab248:	72a001e4 	movk	w4, #0xf, lsl #16
   ab24c:	b94000c5 	ldr	w5, [x6]
   ab250:	52800581 	mov	w1, #0x2c                  	// #44
   ab254:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab258:	52800003 	mov	w3, #0x0                   	// #0
   ab25c:	2a0200a5 	orr	w5, w5, w2
   ab260:	b90000c5 	str	w5, [x6]
   ab264:	940004f3 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab268:	37f80080 	tbnz	w0, #31, ab278 <CEMMCDevice::ResetDat()+0x48>
   ab26c:	52800000 	mov	w0, #0x0                   	// #0
   ab270:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab274:	d65f03c0 	ret
   ab278:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab27c:	91020021 	add	x1, x1, #0x80
   ab280:	52800020 	mov	w0, #0x1                   	// #1
   ab284:	910cc021 	add	x1, x1, #0x330
   ab288:	9400051e 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab28c:	12800000 	mov	w0, #0xffffffff            	// #-1
   ab290:	17fffff8 	b	ab270 <CEMMCDevice::ResetDat()+0x40>
   ab294:	d503201f 	nop
   ab298:	d503201f 	nop
   ab29c:	d503201f 	nop

00000000000ab2a0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>:
   ab2a0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   ab2a4:	910003fd 	mov	x29, sp
   ab2a8:	b943f005 	ldr	w5, [x0, #1008]
   ab2ac:	a90153f3 	stp	x19, x20, [sp, #16]
   ab2b0:	2a0103f4 	mov	w20, w1
   ab2b4:	529fffe1 	mov	w1, #0xffff                	// #65535
   ab2b8:	aa0003f3 	mov	x19, x0
   ab2bc:	b903cc14 	str	w20, [x0, #972]
   ab2c0:	6b0100bf 	cmp	w5, w1
   ab2c4:	b903d41f 	str	wzr, [x0, #980]
   ab2c8:	5400088c 	b.gt	ab3d8 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x138>
   ab2cc:	f941fc0a 	ldr	x10, [x0, #1016]
   ab2d0:	d2800089 	mov	x9, #0x4                   	// #4
   ab2d4:	f2bfc689 	movk	x9, #0xfe34, lsl #16
   ab2d8:	2a0203e6 	mov	w6, w2
   ab2dc:	d2800108 	mov	x8, #0x8                   	// #8
   ab2e0:	f2bfc688 	movk	x8, #0xfe34, lsl #16
   ab2e4:	a9046bf9 	stp	x25, x26, [sp, #64]
   ab2e8:	d2800187 	mov	x7, #0xc                   	// #12
   ab2ec:	f2bfc687 	movk	x7, #0xfe34, lsl #16
   ab2f0:	2a0303e4 	mov	w4, w3
   ab2f4:	52900022 	mov	w2, #0x8001                	// #32769
   ab2f8:	2a0303fa 	mov	w26, w3
   ab2fc:	2a054145 	orr	w5, w10, w5, lsl #16
   ab300:	52800601 	mov	w1, #0x30                  	// #48
   ab304:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab308:	52800023 	mov	w3, #0x1                   	// #1
   ab30c:	b9000125 	str	w5, [x9]
   ab310:	b9000106 	str	w6, [x8]
   ab314:	b90000f4 	str	w20, [x7]
   ab318:	940004c6 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab31c:	d2800601 	mov	x1, #0x30                  	// #48
   ab320:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab324:	b9400020 	ldr	w0, [x1]
   ab328:	129fffc2 	mov	w2, #0xffff0001            	// #-65535
   ab32c:	b9000022 	str	w2, [x1]
   ab330:	0a020001 	and	w1, w0, w2
   ab334:	7100043f 	cmp	w1, #0x1
   ab338:	54000100 	b.eq	ab358 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xb8>  // b.none
   ab33c:	12103c01 	and	w1, w0, #0xffff0000
   ab340:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ab344:	b903b660 	str	w0, [x19, #948]
   ab348:	b903ba61 	str	w1, [x19, #952]
   ab34c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab350:	a8c77bfd 	ldp	x29, x30, [sp], #112
   ab354:	d65f03c0 	ret
   ab358:	12100680 	and	w0, w20, #0x30000
   ab35c:	120b0281 	and	w1, w20, #0x200000
   ab360:	37880f94 	tbnz	w20, #17, ab550 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2b0>
   ab364:	7140401f 	cmp	w0, #0x10, lsl #12
   ab368:	540004c0 	b.eq	ab400 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x160>  // b.none
   ab36c:	350006a1 	cbnz	w1, ab440 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1a0>
   ab370:	7140c01f 	cmp	w0, #0x30, lsl #12
   ab374:	54000261 	b.ne	ab3c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x120>  // b.any
   ab378:	52900042 	mov	w2, #0x8002                	// #32770
   ab37c:	2a1a03e4 	mov	w4, w26
   ab380:	52800601 	mov	w1, #0x30                  	// #48
   ab384:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab388:	52800023 	mov	w3, #0x1                   	// #1
   ab38c:	aa1303e0 	mov	x0, x19
   ab390:	940004a8 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab394:	d2800601 	mov	x1, #0x30                  	// #48
   ab398:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab39c:	b9400034 	ldr	w20, [x1]
   ab3a0:	52800040 	mov	w0, #0x2                   	// #2
   ab3a4:	72bffde0 	movk	w0, #0xffef, lsl #16
   ab3a8:	129fffa2 	mov	w2, #0xffff0002            	// #-65534
   ab3ac:	b9000022 	str	w2, [x1]
   ab3b0:	0a000280 	and	w0, w20, w0
   ab3b4:	7100081f 	cmp	w0, #0x2
   ab3b8:	54000f01 	b.ne	ab598 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2f8>  // b.any
   ab3bc:	b9000022 	str	w2, [x1]
   ab3c0:	52800020 	mov	w0, #0x1                   	// #1
   ab3c4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ab3c8:	b903d660 	str	w0, [x19, #980]
   ab3cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab3d0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   ab3d4:	d65f03c0 	ret
   ab3d8:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab3dc:	91020021 	add	x1, x1, #0x80
   ab3e0:	2a0503e2 	mov	w2, w5
   ab3e4:	910d4021 	add	x1, x1, #0x350
   ab3e8:	52800080 	mov	w0, #0x4                   	// #4
   ab3ec:	940004c5 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab3f0:	b903d67f 	str	wzr, [x19, #980]
   ab3f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab3f8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   ab3fc:	d65f03c0 	ret
   ab400:	d2800200 	mov	x0, #0x10                  	// #16
   ab404:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   ab408:	b9400004 	ldr	w4, [x0]
   ab40c:	d2800283 	mov	x3, #0x14                  	// #20
   ab410:	f2bfc683 	movk	x3, #0xfe34, lsl #16
   ab414:	d2800302 	mov	x2, #0x18                  	// #24
   ab418:	f2bfc682 	movk	x2, #0xfe34, lsl #16
   ab41c:	91003000 	add	x0, x0, #0xc
   ab420:	b903da64 	str	w4, [x19, #984]
   ab424:	b9400063 	ldr	w3, [x3]
   ab428:	b903de63 	str	w3, [x19, #988]
   ab42c:	b9400042 	ldr	w2, [x2]
   ab430:	b903e262 	str	w2, [x19, #992]
   ab434:	b9400000 	ldr	w0, [x0]
   ab438:	b903e660 	str	w0, [x19, #996]
   ab43c:	34fffc21 	cbz	w1, ab3c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x120>
   ab440:	f941f679 	ldr	x25, [x19, #1000]
   ab444:	721c0294 	ands	w20, w20, #0x10
   ab448:	1a9f17e0 	cset	w0, eq  // eq = none
   ab44c:	7100029f 	cmp	w20, #0x0
   ab450:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab454:	52800415 	mov	w21, #0x20                  	// #32
   ab458:	a90573fb 	stp	x27, x28, [sp, #80]
   ab45c:	b9006fe0 	str	w0, [sp, #108]
   ab460:	52800200 	mov	w0, #0x10                  	// #16
   ab464:	1a8012b5 	csel	w21, w21, w0, ne  // ne = any
   ab468:	f240073f 	tst	x25, #0x3
   ab46c:	54000ba1 	b.ne	ab5e0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x340>  // b.any
   ab470:	b943f260 	ldr	w0, [x19, #1008]
   ab474:	321102b6 	orr	w22, w21, #0x8000
   ab478:	32103ebc 	orr	w28, w21, #0xffff0000
   ab47c:	5280001b 	mov	w27, #0x0                   	// #0
   ab480:	7100001f 	cmp	w0, #0x0
   ab484:	54000bcd 	b.le	ab5fc <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x35c>
   ab488:	d2800414 	mov	x20, #0x20                  	// #32
   ab48c:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   ab490:	a90363f7 	stp	x23, x24, [sp, #48]
   ab494:	52800618 	mov	w24, #0x30                  	// #48
   ab498:	72bfc698 	movk	w24, #0xfe34, lsl #16
   ab49c:	d2800617 	mov	x23, #0x30                  	// #48
   ab4a0:	f2bfc697 	movk	x23, #0xfe34, lsl #16
   ab4a4:	2a1803e1 	mov	w1, w24
   ab4a8:	2a1a03e4 	mov	w4, w26
   ab4ac:	52800023 	mov	w3, #0x1                   	// #1
   ab4b0:	2a1603e2 	mov	w2, w22
   ab4b4:	aa1303e0 	mov	x0, x19
   ab4b8:	9400045e 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab4bc:	b94002e0 	ldr	w0, [x23]
   ab4c0:	b90002fc 	str	w28, [x23]
   ab4c4:	0a000381 	and	w1, w28, w0
   ab4c8:	6b15003f 	cmp	w1, w21
   ab4cc:	540007a1 	b.ne	ab5c0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x320>  // b.any
   ab4d0:	f941fe65 	ldr	x5, [x19, #1016]
   ab4d4:	f11000bf 	cmp	x5, #0x400
   ab4d8:	54000488 	b.hi	ab568 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2c8>  // b.pmore
   ab4dc:	f24004bf 	tst	x5, #0x3
   ab4e0:	54000501 	b.ne	ab580 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x2e0>  // b.any
   ab4e4:	b9406fe0 	ldr	w0, [sp, #108]
   ab4e8:	34000240 	cbz	w0, ab530 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x290>
   ab4ec:	b4000125 	cbz	x5, ab510 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x270>
   ab4f0:	aa1903e0 	mov	x0, x25
   ab4f4:	d503201f 	nop
   ab4f8:	b8404402 	ldr	w2, [x0], #4
   ab4fc:	cb0000a1 	sub	x1, x5, x0
   ab500:	b9000282 	str	w2, [x20]
   ab504:	ab01033f 	cmn	x25, x1
   ab508:	54ffff81 	b.ne	ab4f8 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x258>  // b.any
   ab50c:	aa0003f9 	mov	x25, x0
   ab510:	b943f260 	ldr	w0, [x19, #1008]
   ab514:	1100077b 	add	w27, w27, #0x1
   ab518:	6b1b001f 	cmp	w0, w27
   ab51c:	54fffc4c 	b.gt	ab4a4 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x204>
   ab520:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab524:	a94363f7 	ldp	x23, x24, [sp, #48]
   ab528:	a94573fb 	ldp	x27, x28, [sp, #80]
   ab52c:	17ffff93 	b	ab378 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xd8>
   ab530:	b4ffff05 	cbz	x5, ab510 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x270>
   ab534:	aa1903e0 	mov	x0, x25
   ab538:	b9400286 	ldr	w6, [x20]
   ab53c:	b8004406 	str	w6, [x0], #4
   ab540:	cb0000a6 	sub	x6, x5, x0
   ab544:	ab06033f 	cmn	x25, x6
   ab548:	54ffff81 	b.ne	ab538 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x298>  // b.any
   ab54c:	17fffff0 	b	ab50c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x26c>
   ab550:	d2800202 	mov	x2, #0x10                  	// #16
   ab554:	f2bfc682 	movk	x2, #0xfe34, lsl #16
   ab558:	b9400042 	ldr	w2, [x2]
   ab55c:	b903da62 	str	w2, [x19, #984]
   ab560:	35fff701 	cbnz	w1, ab440 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0x1a0>
   ab564:	17ffff83 	b	ab370 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xd0>
   ab568:	d0000040 	adrp	x0, b5000 <font_data+0x1340>
   ab56c:	91020000 	add	x0, x0, #0x80
   ab570:	9108e001 	add	x1, x0, #0x238
   ab574:	52807cc2 	mov	w2, #0x3e6                 	// #998
   ab578:	910e6000 	add	x0, x0, #0x398
   ab57c:	97ffc441 	bl	9c680 <assertion_failed>
   ab580:	d0000040 	adrp	x0, b5000 <font_data+0x1340>
   ab584:	91020000 	add	x0, x0, #0x80
   ab588:	9108e001 	add	x1, x0, #0x238
   ab58c:	52807d02 	mov	w2, #0x3e8                 	// #1000
   ab590:	910ec000 	add	x0, x0, #0x3b0
   ab594:	97ffc43b 	bl	9c680 <assertion_failed>
   ab598:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab59c:	91020021 	add	x1, x1, #0x80
   ab5a0:	52800040 	mov	w0, #0x2                   	// #2
   ab5a4:	910f2021 	add	x1, x1, #0x3c8
   ab5a8:	94000456 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab5ac:	12103e80 	and	w0, w20, #0xffff0000
   ab5b0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ab5b4:	b903b674 	str	w20, [x19, #948]
   ab5b8:	b903ba60 	str	w0, [x19, #952]
   ab5bc:	17ffff64 	b	ab34c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xac>
   ab5c0:	12103c01 	and	w1, w0, #0xffff0000
   ab5c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab5c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   ab5cc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ab5d0:	a94573fb 	ldp	x27, x28, [sp, #80]
   ab5d4:	b903b660 	str	w0, [x19, #948]
   ab5d8:	b903ba61 	str	w1, [x19, #952]
   ab5dc:	17ffff5c 	b	ab34c <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xac>
   ab5e0:	d0000040 	adrp	x0, b5000 <font_data+0x1340>
   ab5e4:	91020000 	add	x0, x0, #0x80
   ab5e8:	a90363f7 	stp	x23, x24, [sp, #48]
   ab5ec:	9108e001 	add	x1, x0, #0x238
   ab5f0:	52807a22 	mov	w2, #0x3d1                 	// #977
   ab5f4:	910de000 	add	x0, x0, #0x378
   ab5f8:	97ffc422 	bl	9c680 <assertion_failed>
   ab5fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab600:	a94573fb 	ldp	x27, x28, [sp, #80]
   ab604:	17ffff5d 	b	ab378 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)+0xd8>
   ab608:	d503201f 	nop
   ab60c:	d503201f 	nop

00000000000ab610 <CEMMCDevice::HandleCardInterrupt()>:
   ab610:	b943b002 	ldr	w2, [x0, #944]
   ab614:	35000042 	cbnz	w2, ab61c <CEMMCDevice::HandleCardInterrupt()+0xc>
   ab618:	d65f03c0 	ret
   ab61c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab620:	53103c42 	lsl	w2, w2, #16
   ab624:	910003fd 	mov	x29, sp
   ab628:	52942403 	mov	w3, #0xa120                	// #41248
   ab62c:	72a000e3 	movk	w3, #0x7, lsl #16
   ab630:	52a1a141 	mov	w1, #0xd0a0000             	// #218759168
   ab634:	f9000bf3 	str	x19, [sp, #16]
   ab638:	aa0003f3 	mov	x19, x0
   ab63c:	97ffff19 	bl	ab2a0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   ab640:	b943d660 	ldr	w0, [x19, #980]
   ab644:	34000080 	cbz	w0, ab654 <CEMMCDevice::HandleCardInterrupt()+0x44>
   ab648:	f9400bf3 	ldr	x19, [sp, #16]
   ab64c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab650:	d65f03c0 	ret
   ab654:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab658:	91020021 	add	x1, x1, #0x80
   ab65c:	f9400bf3 	ldr	x19, [sp, #16]
   ab660:	91102021 	add	x1, x1, #0x408
   ab664:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab668:	52800040 	mov	w0, #0x2                   	// #2
   ab66c:	14000425 	b	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>

00000000000ab670 <CEMMCDevice::HandleInterrupts()>:
   ab670:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ab674:	d2800601 	mov	x1, #0x30                  	// #48
   ab678:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab67c:	910003fd 	mov	x29, sp
   ab680:	a90153f3 	stp	x19, x20, [sp, #16]
   ab684:	b9400034 	ldr	w20, [x1]
   ab688:	f90013f5 	str	x21, [sp, #32]
   ab68c:	aa0003f5 	mov	x21, x0
   ab690:	12000e93 	and	w19, w20, #0xf
   ab694:	37200294 	tbnz	w20, #4, ab6e4 <CEMMCDevice::HandleInterrupts()+0x74>
   ab698:	372802d4 	tbnz	w20, #5, ab6f0 <CEMMCDevice::HandleInterrupts()+0x80>
   ab69c:	f27a029f 	tst	x20, #0x40
   ab6a0:	321a0260 	orr	w0, w19, #0x40
   ab6a4:	1a931013 	csel	w19, w0, w19, ne  // ne = any
   ab6a8:	36380094 	tbz	w20, #7, ab6b8 <CEMMCDevice::HandleInterrupts()+0x48>
   ab6ac:	52800020 	mov	w0, #0x1                   	// #1
   ab6b0:	32190273 	orr	w19, w19, #0x80
   ab6b4:	b90402a0 	str	w0, [x21, #1024]
   ab6b8:	37400254 	tbnz	w20, #8, ab700 <CEMMCDevice::HandleInterrupts()+0x90>
   ab6bc:	d2800600 	mov	x0, #0x30                  	// #48
   ab6c0:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   ab6c4:	f271029f 	tst	x20, #0x8000
   ab6c8:	32103e61 	orr	w1, w19, #0xffff0000
   ab6cc:	1a931033 	csel	w19, w1, w19, ne  // ne = any
   ab6d0:	f94013f5 	ldr	x21, [sp, #32]
   ab6d4:	b9000013 	str	w19, [x0]
   ab6d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab6dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ab6e0:	d65f03c0 	ret
   ab6e4:	321c0273 	orr	w19, w19, #0x10
   ab6e8:	97fffed2 	bl	ab230 <CEMMCDevice::ResetDat()>
   ab6ec:	362ffd94 	tbz	w20, #5, ab69c <CEMMCDevice::HandleInterrupts()+0x2c>
   ab6f0:	aa1503e0 	mov	x0, x21
   ab6f4:	321b0273 	orr	w19, w19, #0x20
   ab6f8:	97fffece 	bl	ab230 <CEMMCDevice::ResetDat()>
   ab6fc:	17ffffe8 	b	ab69c <CEMMCDevice::HandleInterrupts()+0x2c>
   ab700:	aa1503e0 	mov	x0, x21
   ab704:	32180273 	orr	w19, w19, #0x100
   ab708:	97ffffc2 	bl	ab610 <CEMMCDevice::HandleCardInterrupt()>
   ab70c:	17ffffec 	b	ab6bc <CEMMCDevice::HandleInterrupts()+0x4c>

00000000000ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>:
   ab710:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ab714:	910003fd 	mov	x29, sp
   ab718:	a90153f3 	stp	x19, x20, [sp, #16]
   ab71c:	aa0003f3 	mov	x19, x0
   ab720:	2a0103f4 	mov	w20, w1
   ab724:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab728:	2a0203f6 	mov	w22, w2
   ab72c:	2a0303f5 	mov	w21, w3
   ab730:	97ffffd0 	bl	ab670 <CEMMCDevice::HandleInterrupts()>
   ab734:	b9440260 	ldr	w0, [x19, #1024]
   ab738:	350005a0 	cbnz	w0, ab7ec <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xdc>
   ab73c:	37f80274 	tbnz	w20, #31, ab788 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x78>
   ab740:	d0000040 	adrp	x0, b5000 <font_data+0x1340>
   ab744:	91020000 	add	x0, x0, #0x80
   ab748:	9100e001 	add	x1, x0, #0x38
   ab74c:	b8745821 	ldr	w1, [x1, w20, uxtw #2]
   ab750:	3100043f 	cmn	w1, #0x1
   ab754:	54000440 	b.eq	ab7dc <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xcc>  // b.none
   ab758:	aa1303e0 	mov	x0, x19
   ab75c:	2a1503e3 	mov	w3, w21
   ab760:	b903d274 	str	w20, [x19, #976]
   ab764:	2a1603e2 	mov	w2, w22
   ab768:	97fffece 	bl	ab2a0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   ab76c:	b943d660 	ldr	w0, [x19, #980]
   ab770:	7100001f 	cmp	w0, #0x0
   ab774:	1a9f07e0 	cset	w0, ne  // ne = any
   ab778:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab77c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab780:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ab784:	d65f03c0 	ret
   ab788:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   ab78c:	91020021 	add	x1, x1, #0x80
   ab790:	f9001bf7 	str	x23, [sp, #48]
   ab794:	92401e82 	and	x2, x20, #0xff
   ab798:	9104e020 	add	x0, x1, #0x138
   ab79c:	b8627817 	ldr	w23, [x0, x2, lsl #2]
   ab7a0:	12001e94 	and	w20, w20, #0xff
   ab7a4:	310006ff 	cmn	w23, #0x1
   ab7a8:	54000420 	b.eq	ab82c <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x11c>  // b.none
   ab7ac:	b943b262 	ldr	w2, [x19, #944]
   ab7b0:	528006e4 	mov	w4, #0x37                  	// #55
   ab7b4:	aa1303e0 	mov	x0, x19
   ab7b8:	2a1503e3 	mov	w3, w21
   ab7bc:	52a6e141 	mov	w1, #0x370a0000            	// #923402240
   ab7c0:	b903d264 	str	w4, [x19, #976]
   ab7c4:	53103c42 	lsl	w2, w2, #16
   ab7c8:	97fffeb6 	bl	ab2a0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   ab7cc:	b943d660 	ldr	w0, [x19, #980]
   ab7d0:	350001a0 	cbnz	w0, ab804 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0xf4>
   ab7d4:	f9401bf7 	ldr	x23, [sp, #48]
   ab7d8:	17ffffe6 	b	ab770 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x60>
   ab7dc:	91110001 	add	x1, x0, #0x440
   ab7e0:	2a1403e2 	mov	w2, w20
   ab7e4:	52800020 	mov	w0, #0x1                   	// #1
   ab7e8:	940003c6 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab7ec:	52800000 	mov	w0, #0x0                   	// #0
   ab7f0:	b903d67f 	str	wzr, [x19, #980]
   ab7f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab7f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab7fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ab800:	d65f03c0 	ret
   ab804:	32010294 	orr	w20, w20, #0x80000000
   ab808:	2a1703e1 	mov	w1, w23
   ab80c:	aa1303e0 	mov	x0, x19
   ab810:	2a1503e3 	mov	w3, w21
   ab814:	2a1603e2 	mov	w2, w22
   ab818:	b903d274 	str	w20, [x19, #976]
   ab81c:	97fffea1 	bl	ab2a0 <CEMMCDevice::IssueCommandInt(unsigned int, unsigned int, int)>
   ab820:	b943d660 	ldr	w0, [x19, #980]
   ab824:	f9401bf7 	ldr	x23, [sp, #48]
   ab828:	17ffffd2 	b	ab770 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x60>
   ab82c:	52800020 	mov	w0, #0x1                   	// #1
   ab830:	2a1403e2 	mov	w2, w20
   ab834:	9110a021 	add	x1, x1, #0x428
   ab838:	940003b2 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ab83c:	52800000 	mov	w0, #0x0                   	// #0
   ab840:	f9401bf7 	ldr	x23, [sp, #48]
   ab844:	b903d67f 	str	wzr, [x19, #980]
   ab848:	17ffffcc 	b	ab778 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)+0x68>
   ab84c:	d503201f 	nop

00000000000ab850 <CEMMCDevice::CardReset()>:
   ab850:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   ab854:	910003fd 	mov	x29, sp
   ab858:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab85c:	d0000056 	adrp	x22, b5000 <font_data+0x1340>
   ab860:	910202d6 	add	x22, x22, #0x80
   ab864:	a90153f3 	stp	x19, x20, [sp, #16]
   ab868:	d2800594 	mov	x20, #0x2c                  	// #44
   ab86c:	f2bfc694 	movk	x20, #0xfe34, lsl #16
   ab870:	aa0003f3 	mov	x19, x0
   ab874:	a90363f7 	stp	x23, x24, [sp, #48]
   ab878:	52884817 	mov	w23, #0x4240                	// #16960
   ab87c:	72a001f7 	movk	w23, #0xf, lsl #16
   ab880:	911262d8 	add	x24, x22, #0x498
   ab884:	a9046bf9 	stp	x25, x26, [sp, #64]
   ab888:	a90573fb 	stp	x27, x28, [sp, #80]
   ab88c:	128000a6 	mov	w6, #0xfffffffa            	// #-6
   ab890:	52800581 	mov	w1, #0x2c                  	// #44
   ab894:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab898:	2a1703e4 	mov	w4, w23
   ab89c:	b9400285 	ldr	w5, [x20]
   ab8a0:	52800003 	mov	w3, #0x0                   	// #0
   ab8a4:	52a0e002 	mov	w2, #0x7000000             	// #117440512
   ab8a8:	aa1303e0 	mov	x0, x19
   ab8ac:	0a0600a5 	and	w5, w5, w6
   ab8b0:	320800a5 	orr	w5, w5, #0x1000000
   ab8b4:	b9000285 	str	w5, [x20]
   ab8b8:	9400035e 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab8bc:	37f82400 	tbnz	w0, #31, abd3c <CEMMCDevice::CardReset()+0x4ec>
   ab8c0:	d2800501 	mov	x1, #0x28                  	// #40
   ab8c4:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab8c8:	f9400a62 	ldr	x2, [x19, #16]
   ab8cc:	b9400020 	ldr	w0, [x1]
   ab8d0:	32180c00 	orr	w0, w0, #0xf00
   ab8d4:	b9000020 	str	w0, [x1]
   ab8d8:	b40014e2 	cbz	x2, abb74 <CEMMCDevice::CardReset()+0x324>
   ab8dc:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab8e0:	97ffe2ac 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab8e4:	52942404 	mov	w4, #0xa120                	// #41248
   ab8e8:	72a000e4 	movk	w4, #0x7, lsl #16
   ab8ec:	52800481 	mov	w1, #0x24                  	// #36
   ab8f0:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab8f4:	52800023 	mov	w3, #0x1                   	// #1
   ab8f8:	52a00022 	mov	w2, #0x10000               	// #65536
   ab8fc:	aa1303e0 	mov	x0, x19
   ab900:	9400034c 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab904:	d2800480 	mov	x0, #0x24                  	// #36
   ab908:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   ab90c:	b9400000 	ldr	w0, [x0]
   ab910:	36802240 	tbz	w0, #16, abd58 <CEMMCDevice::CardReset()+0x508>
   ab914:	d2800781 	mov	x1, #0x3c                  	// #60
   ab918:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab91c:	aa1303e0 	mov	x0, x19
   ab920:	b900003f 	str	wzr, [x1]
   ab924:	97fffd9b 	bl	aaf90 <CEMMCDevice::GetBaseClock()>
   ab928:	2a0003f5 	mov	w21, w0
   ab92c:	340013e0 	cbz	w0, abba8 <CEMMCDevice::CardReset()+0x358>
   ab930:	b9400284 	ldr	w4, [x20]
   ab934:	52835002 	mov	w2, #0x1a80                	// #6784
   ab938:	72a000c2 	movk	w2, #0x6, lsl #16
   ab93c:	2a1503e1 	mov	w1, w21
   ab940:	aa1303e0 	mov	x0, x19
   ab944:	97fffdbb 	bl	ab030 <CEMMCDevice::GetClockDivider(unsigned int, unsigned int)>
   ab948:	3100041f 	cmn	w0, #0x1
   ab94c:	2a0003f9 	mov	w25, w0
   ab950:	2a040004 	orr	w4, w0, w4
   ab954:	54002100 	b.eq	abd74 <CEMMCDevice::CardReset()+0x524>  // b.none
   ab958:	120c6c84 	and	w4, w4, #0xfff0ffff
   ab95c:	52800025 	mov	w5, #0x1                   	// #1
   ab960:	72a00165 	movk	w5, #0xb, lsl #16
   ab964:	52800581 	mov	w1, #0x2c                  	// #44
   ab968:	72bfc681 	movk	w1, #0xfe34, lsl #16
   ab96c:	2a050085 	orr	w5, w4, w5
   ab970:	52800023 	mov	w3, #0x1                   	// #1
   ab974:	2a1703e4 	mov	w4, w23
   ab978:	52800042 	mov	w2, #0x2                   	// #2
   ab97c:	aa1303e0 	mov	x0, x19
   ab980:	b9000285 	str	w5, [x20]
   ab984:	9400032b 	bl	ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>
   ab988:	37f82040 	tbnz	w0, #31, abd90 <CEMMCDevice::CardReset()+0x540>
   ab98c:	f9400a60 	ldr	x0, [x19, #16]
   ab990:	b4000f20 	cbz	x0, abb74 <CEMMCDevice::CardReset()+0x324>
   ab994:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab998:	97ffe27e 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab99c:	b9400280 	ldr	w0, [x20]
   ab9a0:	f9400a61 	ldr	x1, [x19, #16]
   ab9a4:	321e0000 	orr	w0, w0, #0x4
   ab9a8:	b9000280 	str	w0, [x20]
   ab9ac:	b4000e41 	cbz	x1, abb74 <CEMMCDevice::CardReset()+0x324>
   ab9b0:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab9b4:	12800019 	mov	w25, #0xffffffff            	// #-1
   ab9b8:	97ffe276 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab9bc:	d2800704 	mov	x4, #0x38                  	// #56
   ab9c0:	f2bfc684 	movk	x4, #0xfe34, lsl #16
   ab9c4:	f9400a60 	ldr	x0, [x19, #16]
   ab9c8:	d2800603 	mov	x3, #0x30                  	// #48
   ab9cc:	f2bfc683 	movk	x3, #0xfe34, lsl #16
   ab9d0:	d2800681 	mov	x1, #0x34                  	// #52
   ab9d4:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   ab9d8:	b900009f 	str	wzr, [x4]
   ab9dc:	12802002 	mov	w2, #0xfffffeff            	// #-257
   ab9e0:	b9000079 	str	w25, [x3]
   ab9e4:	b9000022 	str	w2, [x1]
   ab9e8:	b4000c60 	cbz	x0, abb74 <CEMMCDevice::CardReset()+0x324>
   ab9ec:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   ab9f0:	9110027c 	add	x28, x19, #0x400
   ab9f4:	97ffe267 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ab9f8:	d101b384 	sub	x4, x28, #0x6c
   ab9fc:	910f2265 	add	x5, x19, #0x3c8
   aba00:	52942403 	mov	w3, #0xa120                	// #41248
   aba04:	72a000e3 	movk	w3, #0x7, lsl #16
   aba08:	a9007c9f 	stp	xzr, xzr, [x4]
   aba0c:	52800002 	mov	w2, #0x0                   	// #0
   aba10:	52800001 	mov	w1, #0x0                   	// #0
   aba14:	aa1303e0 	mov	x0, x19
   aba18:	a9017c9f 	stp	xzr, xzr, [x4, #16]
   aba1c:	f81b439f 	stur	xzr, [x28, #-76]
   aba20:	a9007cbf 	stp	xzr, xzr, [x5]
   aba24:	a9017cbf 	stp	xzr, xzr, [x5, #16]
   aba28:	f901f67f 	str	xzr, [x19, #1000]
   aba2c:	b903f27f 	str	wzr, [x19, #1008]
   aba30:	f901fe7f 	str	xzr, [x19, #1016]
   aba34:	b904027f 	str	wzr, [x19, #1024]
   aba38:	b9040675 	str	w21, [x19, #1028]
   aba3c:	97ffff35 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   aba40:	72001c1f 	tst	w0, #0xff
   aba44:	54001c60 	b.eq	abdd0 <CEMMCDevice::CardReset()+0x580>  // b.none
   aba48:	52942403 	mov	w3, #0xa120                	// #41248
   aba4c:	72a000e3 	movk	w3, #0x7, lsl #16
   aba50:	52803542 	mov	w2, #0x1aa                 	// #426
   aba54:	52800101 	mov	w1, #0x8                   	// #8
   aba58:	aa1303e0 	mov	x0, x19
   aba5c:	97ffff2d 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   aba60:	b943d660 	ldr	w0, [x19, #980]
   aba64:	340008a0 	cbz	w0, abb78 <CEMMCDevice::CardReset()+0x328>
   aba68:	b943da60 	ldr	w0, [x19, #984]
   aba6c:	12002c00 	and	w0, w0, #0xfff
   aba70:	7106a81f 	cmp	w0, #0x1aa
   aba74:	54001d81 	b.ne	abe24 <CEMMCDevice::CardReset()+0x5d4>  // b.any
   aba78:	52800039 	mov	w25, #0x1                   	// #1
   aba7c:	5284e203 	mov	w3, #0x2710                	// #10000
   aba80:	52800002 	mov	w2, #0x0                   	// #0
   aba84:	528000a1 	mov	w1, #0x5                   	// #5
   aba88:	aa1303e0 	mov	x0, x19
   aba8c:	97ffff21 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   aba90:	b943d660 	ldr	w0, [x19, #980]
   aba94:	340001c0 	cbz	w0, abacc <CEMMCDevice::CardReset()+0x27c>
   aba98:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   aba9c:	91020021 	add	x1, x1, #0x80
   abaa0:	52800020 	mov	w0, #0x1                   	// #1
   abaa4:	9115e021 	add	x1, x1, #0x578
   abaa8:	94000316 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abaac:	12800000 	mov	w0, #0xffffffff            	// #-1
   abab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   abab4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   abab8:	a94363f7 	ldp	x23, x24, [sp, #48]
   ababc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   abac0:	a94573fb 	ldp	x27, x28, [sp, #80]
   abac4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   abac8:	d65f03c0 	ret
   abacc:	b943ba60 	ldr	w0, [x19, #952]
   abad0:	34000140 	cbz	w0, abaf8 <CEMMCDevice::CardReset()+0x2a8>
   abad4:	3687fe20 	tbz	w0, #16, aba98 <CEMMCDevice::CardReset()+0x248>
   abad8:	aa1303e0 	mov	x0, x19
   abadc:	97fffdb9 	bl	ab1c0 <CEMMCDevice::ResetCmd()>
   abae0:	3100041f 	cmn	w0, #0x1
   abae4:	540019c0 	b.eq	abe1c <CEMMCDevice::CardReset()+0x5cc>  // b.none
   abae8:	d2800600 	mov	x0, #0x30                  	// #48
   abaec:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   abaf0:	52a00021 	mov	w1, #0x10000               	// #65536
   abaf4:	b9000001 	str	w1, [x0]
   abaf8:	52942403 	mov	w3, #0xa120                	// #41248
   abafc:	72a000e3 	movk	w3, #0x7, lsl #16
   abb00:	52800521 	mov	w1, #0x29                  	// #41
   abb04:	72b00001 	movk	w1, #0x8000, lsl #16
   abb08:	52800002 	mov	w2, #0x0                   	// #0
   abb0c:	aa1303e0 	mov	x0, x19
   abb10:	97ffff00 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abb14:	72001c1f 	tst	w0, #0xff
   abb18:	540016a0 	b.eq	abdec <CEMMCDevice::CardReset()+0x59c>  // b.none
   abb1c:	7100033f 	cmp	w25, #0x0
   abb20:	52aa001a 	mov	w26, #0x50000000            	// #1342177280
   abb24:	1a9f135a 	csel	w26, w26, wzr, ne  // ne = any
   abb28:	52942419 	mov	w25, #0xa120                	// #41248
   abb2c:	72a000f9 	movk	w25, #0x7, lsl #16
   abb30:	5280053b 	mov	w27, #0x29                  	// #41
   abb34:	72b0001b 	movk	w27, #0x8000, lsl #16
   abb38:	3211235a 	orr	w26, w26, #0xff8000
   abb3c:	14000003 	b	abb48 <CEMMCDevice::CardReset()+0x2f8>
   abb40:	2a1903e0 	mov	w0, w25
   abb44:	97ffe213 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   abb48:	2a1903e3 	mov	w3, w25
   abb4c:	2a1a03e2 	mov	w2, w26
   abb50:	2a1b03e1 	mov	w1, w27
   abb54:	aa1303e0 	mov	x0, x19
   abb58:	97fffeee 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abb5c:	72001c1f 	tst	w0, #0xff
   abb60:	54000440 	b.eq	abbe8 <CEMMCDevice::CardReset()+0x398>  // b.none
   abb64:	b943da60 	ldr	w0, [x19, #984]
   abb68:	37f805a0 	tbnz	w0, #31, abc1c <CEMMCDevice::CardReset()+0x3cc>
   abb6c:	f9400a60 	ldr	x0, [x19, #16]
   abb70:	b5fffe80 	cbnz	x0, abb40 <CEMMCDevice::CardReset()+0x2f0>
   abb74:	94000317 	bl	ac7d0 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   abb78:	b943ba60 	ldr	w0, [x19, #952]
   abb7c:	35000060 	cbnz	w0, abb88 <CEMMCDevice::CardReset()+0x338>
   abb80:	52800019 	mov	w25, #0x0                   	// #0
   abb84:	17ffffbe 	b	aba7c <CEMMCDevice::CardReset()+0x22c>
   abb88:	378001c0 	tbnz	w0, #16, abbc0 <CEMMCDevice::CardReset()+0x370>
   abb8c:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abb90:	91020021 	add	x1, x1, #0x80
   abb94:	52800020 	mov	w0, #0x1                   	// #1
   abb98:	9114e021 	add	x1, x1, #0x538
   abb9c:	940002d9 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abba0:	2a1903e0 	mov	w0, w25
   abba4:	17ffffc3 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abba8:	aa1803e1 	mov	x1, x24
   abbac:	52800040 	mov	w0, #0x2                   	// #2
   abbb0:	529c2015 	mov	w21, #0xe100                	// #57600
   abbb4:	72a0beb5 	movk	w21, #0x5f5, lsl #16
   abbb8:	940002d2 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abbbc:	17ffff5d 	b	ab930 <CEMMCDevice::CardReset()+0xe0>
   abbc0:	aa1303e0 	mov	x0, x19
   abbc4:	97fffd7f 	bl	ab1c0 <CEMMCDevice::ResetCmd()>
   abbc8:	3100041f 	cmn	w0, #0x1
   abbcc:	54001280 	b.eq	abe1c <CEMMCDevice::CardReset()+0x5cc>  // b.none
   abbd0:	d2800600 	mov	x0, #0x30                  	// #48
   abbd4:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   abbd8:	52a00021 	mov	w1, #0x10000               	// #65536
   abbdc:	52800019 	mov	w25, #0x0                   	// #0
   abbe0:	b9000001 	str	w1, [x0]
   abbe4:	17ffffa6 	b	aba7c <CEMMCDevice::CardReset()+0x22c>
   abbe8:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abbec:	91020021 	add	x1, x1, #0x80
   abbf0:	91170021 	add	x1, x1, #0x5c0
   abbf4:	52800020 	mov	w0, #0x1                   	// #1
   abbf8:	940002c2 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abbfc:	12800000 	mov	w0, #0xffffffff            	// #-1
   abc00:	a94153f3 	ldp	x19, x20, [sp, #16]
   abc04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   abc08:	a94363f7 	ldp	x23, x24, [sp, #48]
   abc0c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   abc10:	a94573fb 	ldp	x27, x28, [sp, #80]
   abc14:	a8c67bfd 	ldp	x29, x30, [sp], #96
   abc18:	d65f03c0 	ret
   abc1c:	d3485c04 	ubfx	x4, x0, #8, #16
   abc20:	d35e7803 	ubfx	x3, x0, #30, #1
   abc24:	2a1503e1 	mov	w1, w21
   abc28:	528f0802 	mov	w2, #0x7840                	// #30784
   abc2c:	72a02fa2 	movk	w2, #0x17d, lsl #16
   abc30:	aa1303e0 	mov	x0, x19
   abc34:	b903a663 	str	w3, [x19, #932]
   abc38:	b903ae64 	str	w4, [x19, #940]
   abc3c:	97fffd25 	bl	ab0d0 <CEMMCDevice::SwitchClockRate(unsigned int, unsigned int)>
   abc40:	f9400a60 	ldr	x0, [x19, #16]
   abc44:	b4fff980 	cbz	x0, abb74 <CEMMCDevice::CardReset()+0x324>
   abc48:	52827100 	mov	w0, #0x1388                	// #5000
   abc4c:	97ffe1d1 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   abc50:	b943aa60 	ldr	w0, [x19, #936]
   abc54:	34000fe0 	cbz	w0, abe50 <CEMMCDevice::CardReset()+0x600>
   abc58:	52942403 	mov	w3, #0xa120                	// #41248
   abc5c:	72a000e3 	movk	w3, #0x7, lsl #16
   abc60:	52800002 	mov	w2, #0x0                   	// #0
   abc64:	52800161 	mov	w1, #0xb                   	// #11
   abc68:	aa1303e0 	mov	x0, x19
   abc6c:	97fffea9 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abc70:	72001c1f 	tst	w0, #0xff
   abc74:	54000540 	b.eq	abd1c <CEMMCDevice::CardReset()+0x4cc>  // b.none
   abc78:	b9400280 	ldr	w0, [x20]
   abc7c:	d2800499 	mov	x25, #0x24                  	// #36
   abc80:	f2bfc699 	movk	x25, #0xfe34, lsl #16
   abc84:	121d7800 	and	w0, w0, #0xfffffffb
   abc88:	b9000280 	str	w0, [x20]
   abc8c:	b9400320 	ldr	w0, [x25]
   abc90:	f26c0c1f 	tst	x0, #0xf00000
   abc94:	540004c1 	b.ne	abd2c <CEMMCDevice::CardReset()+0x4dc>  // b.any
   abc98:	d2800515 	mov	x21, #0x28                  	// #40
   abc9c:	f2bfc695 	movk	x21, #0xfe34, lsl #16
   abca0:	f9400a61 	ldr	x1, [x19, #16]
   abca4:	b94002a0 	ldr	w0, [x21]
   abca8:	32180000 	orr	w0, w0, #0x100
   abcac:	b90002a0 	str	w0, [x21]
   abcb0:	b4fff621 	cbz	x1, abb74 <CEMMCDevice::CardReset()+0x324>
   abcb4:	52827100 	mov	w0, #0x1388                	// #5000
   abcb8:	97ffe1b6 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   abcbc:	b94002a0 	ldr	w0, [x21]
   abcc0:	36400760 	tbz	w0, #8, abdac <CEMMCDevice::CardReset()+0x55c>
   abcc4:	b9400280 	ldr	w0, [x20]
   abcc8:	f9400a61 	ldr	x1, [x19, #16]
   abccc:	321e0000 	orr	w0, w0, #0x4
   abcd0:	b9000280 	str	w0, [x20]
   abcd4:	b4fff501 	cbz	x1, abb74 <CEMMCDevice::CardReset()+0x324>
   abcd8:	5284e200 	mov	w0, #0x2710                	// #10000
   abcdc:	97ffe1ad 	bl	a4390 <CTimer::SimpleusDelay(unsigned int)>
   abce0:	b9400322 	ldr	w2, [x25]
   abce4:	d3545c42 	ubfx	x2, x2, #20, #4
   abce8:	71003c5f 	cmp	w2, #0xf
   abcec:	54000b20 	b.eq	abe50 <CEMMCDevice::CardReset()+0x600>  // b.none
   abcf0:	911922c1 	add	x1, x22, #0x648
   abcf4:	52800080 	mov	w0, #0x4                   	// #4
   abcf8:	94000282 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abcfc:	52800020 	mov	w0, #0x1                   	// #1
   abd00:	d2800501 	mov	x1, #0x28                  	// #40
   abd04:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   abd08:	b903ca60 	str	w0, [x19, #968]
   abd0c:	b9400020 	ldr	w0, [x1]
   abd10:	12177800 	and	w0, w0, #0xfffffeff
   abd14:	b9000020 	str	w0, [x1]
   abd18:	17fffedd 	b	ab88c <CEMMCDevice::CardReset()+0x3c>
   abd1c:	911762c1 	add	x1, x22, #0x5d8
   abd20:	52800080 	mov	w0, #0x4                   	// #4
   abd24:	94000277 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abd28:	17fffff5 	b	abcfc <CEMMCDevice::CardReset()+0x4ac>
   abd2c:	9117e2c1 	add	x1, x22, #0x5f8
   abd30:	52800080 	mov	w0, #0x4                   	// #4
   abd34:	94000273 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abd38:	17fffff1 	b	abcfc <CEMMCDevice::CardReset()+0x4ac>
   abd3c:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abd40:	91020021 	add	x1, x1, #0x80
   abd44:	52800020 	mov	w0, #0x1                   	// #1
   abd48:	91116021 	add	x1, x1, #0x458
   abd4c:	9400026d 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abd50:	12800000 	mov	w0, #0xffffffff            	// #-1
   abd54:	17ffff57 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abd58:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abd5c:	91020021 	add	x1, x1, #0x80
   abd60:	52800040 	mov	w0, #0x2                   	// #2
   abd64:	91120021 	add	x1, x1, #0x480
   abd68:	94000266 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abd6c:	12800000 	mov	w0, #0xffffffff            	// #-1
   abd70:	17ffff50 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abd74:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abd78:	91020021 	add	x1, x1, #0x80
   abd7c:	52800080 	mov	w0, #0x4                   	// #4
   abd80:	91130021 	add	x1, x1, #0x4c0
   abd84:	9400025f 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abd88:	2a1903e0 	mov	w0, w25
   abd8c:	17ffff49 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abd90:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abd94:	91020021 	add	x1, x1, #0x80
   abd98:	52800020 	mov	w0, #0x1                   	// #1
   abd9c:	9113e021 	add	x1, x1, #0x4f8
   abda0:	94000258 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abda4:	12800000 	mov	w0, #0xffffffff            	// #-1
   abda8:	17ffff42 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abdac:	52800080 	mov	w0, #0x4                   	// #4
   abdb0:	911862c1 	add	x1, x22, #0x618
   abdb4:	94000253 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abdb8:	52800020 	mov	w0, #0x1                   	// #1
   abdbc:	b903ca60 	str	w0, [x19, #968]
   abdc0:	b94002a0 	ldr	w0, [x21]
   abdc4:	12177800 	and	w0, w0, #0xfffffeff
   abdc8:	b90002a0 	str	w0, [x21]
   abdcc:	17fffeb0 	b	ab88c <CEMMCDevice::CardReset()+0x3c>
   abdd0:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abdd4:	91020021 	add	x1, x1, #0x80
   abdd8:	52800020 	mov	w0, #0x1                   	// #1
   abddc:	91148021 	add	x1, x1, #0x520
   abde0:	94000248 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abde4:	2a1903e0 	mov	w0, w25
   abde8:	17ffff32 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abdec:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abdf0:	91020021 	add	x1, x1, #0x80
   abdf4:	52800020 	mov	w0, #0x1                   	// #1
   abdf8:	9116a021 	add	x1, x1, #0x5a8
   abdfc:	94000241 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abe00:	12800000 	mov	w0, #0xffffffff            	// #-1
   abe04:	17ffff2b 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abe08:	d0000041 	adrp	x1, b5000 <font_data+0x1340>
   abe0c:	91020021 	add	x1, x1, #0x80
   abe10:	911cc021 	add	x1, x1, #0x730
   abe14:	52800020 	mov	w0, #0x1                   	// #1
   abe18:	9400023a 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abe1c:	12800000 	mov	w0, #0xffffffff            	// #-1
   abe20:	17ffff24 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abe24:	d0000054 	adrp	x20, b5000 <font_data+0x1340>
   abe28:	91020294 	add	x20, x20, #0x80
   abe2c:	91154281 	add	x1, x20, #0x550
   abe30:	52800020 	mov	w0, #0x1                   	// #1
   abe34:	94000233 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abe38:	52800080 	mov	w0, #0x4                   	// #4
   abe3c:	b943da62 	ldr	w2, [x19, #984]
   abe40:	91158281 	add	x1, x20, #0x560
   abe44:	9400022f 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abe48:	2a1903e0 	mov	w0, w25
   abe4c:	17ffff19 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abe50:	52942403 	mov	w3, #0xa120                	// #41248
   abe54:	72a000e3 	movk	w3, #0x7, lsl #16
   abe58:	52800002 	mov	w2, #0x0                   	// #0
   abe5c:	52800041 	mov	w1, #0x2                   	// #2
   abe60:	aa1303e0 	mov	x0, x19
   abe64:	97fffe2b 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abe68:	72001c1f 	tst	w0, #0xff
   abe6c:	540017a0 	b.eq	ac160 <CEMMCDevice::CardReset()+0x910>  // b.none
   abe70:	f941ee64 	ldr	x4, [x19, #984]
   abe74:	52942403 	mov	w3, #0xa120                	// #41248
   abe78:	72a000e3 	movk	w3, #0x7, lsl #16
   abe7c:	52800002 	mov	w2, #0x0                   	// #0
   abe80:	52800061 	mov	w1, #0x3                   	// #3
   abe84:	aa1303e0 	mov	x0, x19
   abe88:	f8194384 	stur	x4, [x28, #-108]
   abe8c:	f941f264 	ldr	x4, [x19, #992]
   abe90:	f819c384 	stur	x4, [x28, #-100]
   abe94:	97fffe1f 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abe98:	72001c1f 	tst	w0, #0xff
   abe9c:	54001540 	b.eq	ac144 <CEMMCDevice::CardReset()+0x8f4>  // b.none
   abea0:	b943da62 	ldr	w2, [x19, #984]
   abea4:	53107c44 	lsr	w4, w2, #16
   abea8:	d34e3843 	ubfx	x3, x2, #14, #1
   abeac:	d34d3441 	ubfx	x1, x2, #13, #1
   abeb0:	d3482040 	ubfx	x0, x2, #8, #1
   abeb4:	b903b264 	str	w4, [x19, #944]
   abeb8:	37781382 	tbnz	w2, #15, ac128 <CEMMCDevice::CardReset()+0x8d8>
   abebc:	35001283 	cbnz	w3, ac10c <CEMMCDevice::CardReset()+0x8bc>
   abec0:	35001181 	cbnz	w1, ac0f0 <CEMMCDevice::CardReset()+0x8a0>
   abec4:	34001080 	cbz	w0, ac0d4 <CEMMCDevice::CardReset()+0x884>
   abec8:	12103c42 	and	w2, w2, #0xffff0000
   abecc:	52942403 	mov	w3, #0xa120                	// #41248
   abed0:	72a000e3 	movk	w3, #0x7, lsl #16
   abed4:	528000e1 	mov	w1, #0x7                   	// #7
   abed8:	aa1303e0 	mov	x0, x19
   abedc:	97fffe0d 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abee0:	72001c1f 	tst	w0, #0xff
   abee4:	54000ea0 	b.eq	ac0b8 <CEMMCDevice::CardReset()+0x868>  // b.none
   abee8:	b943da62 	ldr	w2, [x19, #984]
   abeec:	d3493042 	ubfx	x2, x2, #9, #4
   abef0:	51000c40 	sub	w0, w2, #0x3
   abef4:	7100041f 	cmp	w0, #0x1
   abef8:	54000d28 	b.hi	ac09c <CEMMCDevice::CardReset()+0x84c>  // b.pmore
   abefc:	b943a660 	ldr	w0, [x19, #932]
   abf00:	35000120 	cbnz	w0, abf24 <CEMMCDevice::CardReset()+0x6d4>
   abf04:	52942403 	mov	w3, #0xa120                	// #41248
   abf08:	72a000e3 	movk	w3, #0x7, lsl #16
   abf0c:	52804002 	mov	w2, #0x200                 	// #512
   abf10:	52800201 	mov	w1, #0x10                  	// #16
   abf14:	aa1303e0 	mov	x0, x19
   abf18:	97fffdfe 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abf1c:	72001c1f 	tst	w0, #0xff
   abf20:	54fff740 	b.eq	abe08 <CEMMCDevice::CardReset()+0x5b8>  // b.none
   abf24:	d2800085 	mov	x5, #0x4                   	// #4
   abf28:	f2bfc685 	movk	x5, #0xfe34, lsl #16
   abf2c:	f941e267 	ldr	x7, [x19, #960]
   abf30:	d2800106 	mov	x6, #0x8                   	// #8
   abf34:	52800034 	mov	w20, #0x1                   	// #1
   abf38:	b94000a4 	ldr	w4, [x5]
   abf3c:	52884803 	mov	w3, #0x4240                	// #16960
   abf40:	72a001e3 	movk	w3, #0xf, lsl #16
   abf44:	52800661 	mov	w1, #0x33                  	// #51
   abf48:	72b00001 	movk	w1, #0x8000, lsl #16
   abf4c:	52800002 	mov	w2, #0x0                   	// #0
   abf50:	aa1303e0 	mov	x0, x19
   abf54:	12144c84 	and	w4, w4, #0xfffff000
   abf58:	32170084 	orr	w4, w4, #0x200
   abf5c:	b90000a4 	str	w4, [x5]
   abf60:	f901f667 	str	x7, [x19, #1000]
   abf64:	b903f274 	str	w20, [x19, #1008]
   abf68:	f901fe66 	str	x6, [x19, #1016]
   abf6c:	97fffde9 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   abf70:	d2804001 	mov	x1, #0x200                 	// #512
   abf74:	b943d660 	ldr	w0, [x19, #980]
   abf78:	f901fe61 	str	x1, [x19, #1016]
   abf7c:	340008c0 	cbz	w0, ac094 <CEMMCDevice::CardReset()+0x844>
   abf80:	f941e260 	ldr	x0, [x19, #960]
   abf84:	b9400001 	ldr	w1, [x0]
   abf88:	5ac00821 	rev	w1, w1
   abf8c:	d3504c24 	ubfx	x4, x1, #16, #4
   abf90:	d3586c22 	ubfx	x2, x1, #24, #4
   abf94:	53107c23 	lsr	w3, w1, #16
   abf98:	29017c04 	stp	w4, wzr, [x0, #8]
   abf9c:	35000242 	cbnz	w2, abfe4 <CEMMCDevice::CardReset()+0x794>
   abfa0:	b9000c14 	str	w20, [x0, #12]
   abfa4:	d0000054 	adrp	x20, b5000 <font_data+0x1340>
   abfa8:	91020294 	add	x20, x20, #0x80
   abfac:	371002c3 	tbnz	w3, #2, ac004 <CEMMCDevice::CardReset()+0x7b4>
   abfb0:	b9800c03 	ldrsw	x3, [x0, #12]
   abfb4:	f0000042 	adrp	x2, b6000 <s_OldInfo+0x68>
   abfb8:	9110c042 	add	x2, x2, #0x430
   abfbc:	911de281 	add	x1, x20, #0x778
   abfc0:	52800060 	mov	w0, #0x3                   	// #3
   abfc4:	f8637842 	ldr	x2, [x2, x3, lsl #3]
   abfc8:	940001ce 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   abfcc:	d2800601 	mov	x1, #0x30                  	// #48
   abfd0:	f2bfc681 	movk	x1, #0xfe34, lsl #16
   abfd4:	12800002 	mov	w2, #0xffffffff            	// #-1
   abfd8:	52800000 	mov	w0, #0x0                   	// #0
   abfdc:	b9000022 	str	w2, [x1]
   abfe0:	17fffeb4 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   abfe4:	7100045f 	cmp	w2, #0x1
   abfe8:	540003a0 	b.eq	ac05c <CEMMCDevice::CardReset()+0x80c>  // b.none
   abfec:	7100085f 	cmp	w2, #0x2
   abff0:	54fffda1 	b.ne	abfa4 <CEMMCDevice::CardReset()+0x754>  // b.any
   abff4:	37780441 	tbnz	w1, #15, ac07c <CEMMCDevice::CardReset()+0x82c>
   abff8:	52800061 	mov	w1, #0x3                   	// #3
   abffc:	b9000c01 	str	w1, [x0, #12]
   ac000:	17ffffe9 	b	abfa4 <CEMMCDevice::CardReset()+0x754>
   ac004:	d2800695 	mov	x21, #0x34                  	// #52
   ac008:	f2bfc695 	movk	x21, #0xfe34, lsl #16
   ac00c:	b94002b6 	ldr	w22, [x21]
   ac010:	52942403 	mov	w3, #0xa120                	// #41248
   ac014:	72a000e3 	movk	w3, #0x7, lsl #16
   ac018:	528000c1 	mov	w1, #0x6                   	// #6
   ac01c:	72b00001 	movk	w1, #0x8000, lsl #16
   ac020:	52800042 	mov	w2, #0x2                   	// #2
   ac024:	aa1303e0 	mov	x0, x19
   ac028:	12177ac4 	and	w4, w22, #0xfffffeff
   ac02c:	b90002a4 	str	w4, [x21]
   ac030:	97fffdb8 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac034:	72001c1f 	tst	w0, #0xff
   ac038:	54000180 	b.eq	ac068 <CEMMCDevice::CardReset()+0x818>  // b.none
   ac03c:	d2800502 	mov	x2, #0x28                  	// #40
   ac040:	f2bfc682 	movk	x2, #0xfe34, lsl #16
   ac044:	f941e260 	ldr	x0, [x19, #960]
   ac048:	b9400041 	ldr	w1, [x2]
   ac04c:	321f0021 	orr	w1, w1, #0x2
   ac050:	b9000041 	str	w1, [x2]
   ac054:	b90002b6 	str	w22, [x21]
   ac058:	17ffffd6 	b	abfb0 <CEMMCDevice::CardReset()+0x760>
   ac05c:	52800041 	mov	w1, #0x2                   	// #2
   ac060:	b9000c01 	str	w1, [x0, #12]
   ac064:	17ffffd0 	b	abfa4 <CEMMCDevice::CardReset()+0x754>
   ac068:	52800020 	mov	w0, #0x1                   	// #1
   ac06c:	911d4281 	add	x1, x20, #0x750
   ac070:	940001a4 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac074:	f941e260 	ldr	x0, [x19, #960]
   ac078:	17ffffce 	b	abfb0 <CEMMCDevice::CardReset()+0x760>
   ac07c:	f276003f 	tst	x1, #0x400
   ac080:	528000a2 	mov	w2, #0x5                   	// #5
   ac084:	52800081 	mov	w1, #0x4                   	// #4
   ac088:	1a820021 	csel	w1, w1, w2, eq  // eq = none
   ac08c:	b9000c01 	str	w1, [x0, #12]
   ac090:	17ffffc5 	b	abfa4 <CEMMCDevice::CardReset()+0x754>
   ac094:	12800020 	mov	w0, #0xfffffffe            	// #-2
   ac098:	17fffe86 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac09c:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac0a0:	91020021 	add	x1, x1, #0x80
   ac0a4:	52800020 	mov	w0, #0x1                   	// #1
   ac0a8:	911c6021 	add	x1, x1, #0x718
   ac0ac:	94000195 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac0b0:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac0b4:	17fffe7f 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac0b8:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac0bc:	91020021 	add	x1, x1, #0x80
   ac0c0:	52800080 	mov	w0, #0x4                   	// #4
   ac0c4:	911c0021 	add	x1, x1, #0x700
   ac0c8:	9400018e 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac0cc:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac0d0:	17fffe78 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac0d4:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac0d8:	91020021 	add	x1, x1, #0x80
   ac0dc:	52800020 	mov	w0, #0x1                   	// #1
   ac0e0:	911ba021 	add	x1, x1, #0x6e8
   ac0e4:	94000187 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac0e8:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac0ec:	17fffe71 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac0f0:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac0f4:	91020021 	add	x1, x1, #0x80
   ac0f8:	52800020 	mov	w0, #0x1                   	// #1
   ac0fc:	911b6021 	add	x1, x1, #0x6d8
   ac100:	94000180 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac104:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac108:	17fffe6a 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac10c:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac110:	91020021 	add	x1, x1, #0x80
   ac114:	52800020 	mov	w0, #0x1                   	// #1
   ac118:	911b2021 	add	x1, x1, #0x6c8
   ac11c:	94000179 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac120:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac124:	17fffe63 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac128:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac12c:	91020021 	add	x1, x1, #0x80
   ac130:	52800020 	mov	w0, #0x1                   	// #1
   ac134:	911ae021 	add	x1, x1, #0x6b8
   ac138:	94000172 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac13c:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac140:	17fffe5c 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac144:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac148:	91020021 	add	x1, x1, #0x80
   ac14c:	52800020 	mov	w0, #0x1                   	// #1
   ac150:	911a4021 	add	x1, x1, #0x690
   ac154:	9400016b 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac158:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac15c:	17fffe55 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac160:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac164:	91020021 	add	x1, x1, #0x80
   ac168:	52800020 	mov	w0, #0x1                   	// #1
   ac16c:	9119c021 	add	x1, x1, #0x670
   ac170:	94000164 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac174:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac178:	17fffe4e 	b	abab0 <CEMMCDevice::CardReset()+0x260>
   ac17c:	d503201f 	nop

00000000000ac180 <CEMMCDevice::CardInit()>:
   ac180:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac184:	910003fd 	mov	x29, sp
   ac188:	a90153f3 	stp	x19, x20, [sp, #16]
   ac18c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac190:	aa0003f6 	mov	x22, x0
   ac194:	97fffb53 	bl	aaee0 <CEMMCDevice::PowerOn()>
   ac198:	35000440 	cbnz	w0, ac220 <CEMMCDevice::CardInit()+0xa0>
   ac19c:	d2801f80 	mov	x0, #0xfc                  	// #252
   ac1a0:	f2bfc680 	movk	x0, #0xfe34, lsl #16
   ac1a4:	b9400000 	ldr	w0, [x0]
   ac1a8:	d3505c01 	ubfx	x1, x0, #16, #8
   ac1ac:	53107c00 	lsr	w0, w0, #16
   ac1b0:	721f181f 	tst	w0, #0xfe
   ac1b4:	b90392c1 	str	w1, [x22, #912]
   ac1b8:	54000280 	b.eq	ac208 <CEMMCDevice::CardInit()+0x88>  // b.none
   ac1bc:	b0000055 	adrp	x21, b5000 <font_data+0x1340>
   ac1c0:	910202b5 	add	x21, x21, #0x80
   ac1c4:	911fe2b5 	add	x21, x21, #0x7f8
   ac1c8:	52800074 	mov	w20, #0x3                   	// #3
   ac1cc:	aa1603e0 	mov	x0, x22
   ac1d0:	97fffda0 	bl	ab850 <CEMMCDevice::CardReset()>
   ac1d4:	2a0003f3 	mov	w19, w0
   ac1d8:	aa1503e1 	mov	x1, x21
   ac1dc:	31000a7f 	cmn	w19, #0x2
   ac1e0:	52800040 	mov	w0, #0x2                   	// #2
   ac1e4:	54000081 	b.ne	ac1f4 <CEMMCDevice::CardInit()+0x74>  // b.any
   ac1e8:	94000146 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac1ec:	71000694 	subs	w20, w20, #0x1
   ac1f0:	54fffee1 	b.ne	ac1cc <CEMMCDevice::CardInit()+0x4c>  // b.any
   ac1f4:	2a1303e0 	mov	w0, w19
   ac1f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac1fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac200:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac204:	d65f03c0 	ret
   ac208:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac20c:	91020021 	add	x1, x1, #0x80
   ac210:	911f6021 	add	x1, x1, #0x7d8
   ac214:	52800040 	mov	w0, #0x2                   	// #2
   ac218:	9400013a 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac21c:	17ffffe8 	b	ac1bc <CEMMCDevice::CardInit()+0x3c>
   ac220:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac224:	91020021 	add	x1, x1, #0x80
   ac228:	911e8021 	add	x1, x1, #0x7a0
   ac22c:	52800020 	mov	w0, #0x1                   	// #1
   ac230:	12800013 	mov	w19, #0xffffffff            	// #-1
   ac234:	94000133 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac238:	17ffffef 	b	ac1f4 <CEMMCDevice::CardInit()+0x74>
   ac23c:	d503201f 	nop

00000000000ac240 <CEMMCDevice::EnsureDataMode()>:
   ac240:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ac244:	910003fd 	mov	x29, sp
   ac248:	b943b002 	ldr	w2, [x0, #944]
   ac24c:	f9000bf3 	str	x19, [sp, #16]
   ac250:	aa0003f3 	mov	x19, x0
   ac254:	35000082 	cbnz	w2, ac264 <CEMMCDevice::EnsureDataMode()+0x24>
   ac258:	97fffd7e 	bl	ab850 <CEMMCDevice::CardReset()>
   ac25c:	35000260 	cbnz	w0, ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac260:	b943b262 	ldr	w2, [x19, #944]
   ac264:	53103c42 	lsl	w2, w2, #16
   ac268:	52942403 	mov	w3, #0xa120                	// #41248
   ac26c:	72a000e3 	movk	w3, #0x7, lsl #16
   ac270:	528001a1 	mov	w1, #0xd                   	// #13
   ac274:	aa1303e0 	mov	x0, x19
   ac278:	97fffd26 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac27c:	72001c1f 	tst	w0, #0xff
   ac280:	54000820 	b.eq	ac384 <CEMMCDevice::EnsureDataMode()+0x144>  // b.none
   ac284:	b943da60 	ldr	w0, [x19, #984]
   ac288:	d3493000 	ubfx	x0, x0, #9, #4
   ac28c:	71000c1f 	cmp	w0, #0x3
   ac290:	54000420 	b.eq	ac314 <CEMMCDevice::EnsureDataMode()+0xd4>  // b.none
   ac294:	7100141f 	cmp	w0, #0x5
   ac298:	54000600 	b.eq	ac358 <CEMMCDevice::EnsureDataMode()+0x118>  // b.none
   ac29c:	7100101f 	cmp	w0, #0x4
   ac2a0:	540000a1 	b.ne	ac2b4 <CEMMCDevice::EnsureDataMode()+0x74>  // b.any
   ac2a4:	52800000 	mov	w0, #0x0                   	// #0
   ac2a8:	f9400bf3 	ldr	x19, [sp, #16]
   ac2ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac2b0:	d65f03c0 	ret
   ac2b4:	aa1303e0 	mov	x0, x19
   ac2b8:	97fffd66 	bl	ab850 <CEMMCDevice::CardReset()>
   ac2bc:	35ffff60 	cbnz	w0, ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac2c0:	b943b262 	ldr	w2, [x19, #944]
   ac2c4:	52942403 	mov	w3, #0xa120                	// #41248
   ac2c8:	72a000e3 	movk	w3, #0x7, lsl #16
   ac2cc:	528001a1 	mov	w1, #0xd                   	// #13
   ac2d0:	aa1303e0 	mov	x0, x19
   ac2d4:	53103c42 	lsl	w2, w2, #16
   ac2d8:	97fffd0e 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac2dc:	72001c1f 	tst	w0, #0xff
   ac2e0:	54000620 	b.eq	ac3a4 <CEMMCDevice::EnsureDataMode()+0x164>  // b.none
   ac2e4:	b943da62 	ldr	w2, [x19, #984]
   ac2e8:	d3493042 	ubfx	x2, x2, #9, #4
   ac2ec:	7100105f 	cmp	w2, #0x4
   ac2f0:	54fffda0 	b.eq	ac2a4 <CEMMCDevice::EnsureDataMode()+0x64>  // b.none
   ac2f4:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac2f8:	91020021 	add	x1, x1, #0x80
   ac2fc:	52800040 	mov	w0, #0x2                   	// #2
   ac300:	9122e021 	add	x1, x1, #0x8b8
   ac304:	940000ff 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac308:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac30c:	b903b27f 	str	wzr, [x19, #944]
   ac310:	17ffffe6 	b	ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac314:	b943b262 	ldr	w2, [x19, #944]
   ac318:	52942403 	mov	w3, #0xa120                	// #41248
   ac31c:	72a000e3 	movk	w3, #0x7, lsl #16
   ac320:	528000e1 	mov	w1, #0x7                   	// #7
   ac324:	aa1303e0 	mov	x0, x19
   ac328:	53103c42 	lsl	w2, w2, #16
   ac32c:	97fffcf9 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac330:	72001c1f 	tst	w0, #0xff
   ac334:	54fffc61 	b.ne	ac2c0 <CEMMCDevice::EnsureDataMode()+0x80>  // b.any
   ac338:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac33c:	91020021 	add	x1, x1, #0x80
   ac340:	52800040 	mov	w0, #0x2                   	// #2
   ac344:	91210021 	add	x1, x1, #0x840
   ac348:	940000ee 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac34c:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac350:	b903b27f 	str	wzr, [x19, #944]
   ac354:	17ffffd5 	b	ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac358:	52942403 	mov	w3, #0xa120                	// #41248
   ac35c:	72a000e3 	movk	w3, #0x7, lsl #16
   ac360:	52800002 	mov	w2, #0x0                   	// #0
   ac364:	52800181 	mov	w1, #0xc                   	// #12
   ac368:	aa1303e0 	mov	x0, x19
   ac36c:	97fffce9 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac370:	72001c1f 	tst	w0, #0xff
   ac374:	54000280 	b.eq	ac3c4 <CEMMCDevice::EnsureDataMode()+0x184>  // b.none
   ac378:	aa1303e0 	mov	x0, x19
   ac37c:	97fffbad 	bl	ab230 <CEMMCDevice::ResetDat()>
   ac380:	17ffffd0 	b	ac2c0 <CEMMCDevice::EnsureDataMode()+0x80>
   ac384:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac388:	91020021 	add	x1, x1, #0x80
   ac38c:	52800040 	mov	w0, #0x2                   	// #2
   ac390:	91206021 	add	x1, x1, #0x818
   ac394:	940000db 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac398:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac39c:	b903b27f 	str	wzr, [x19, #944]
   ac3a0:	17ffffc2 	b	ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac3a4:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac3a8:	91020021 	add	x1, x1, #0x80
   ac3ac:	52800040 	mov	w0, #0x2                   	// #2
   ac3b0:	91224021 	add	x1, x1, #0x890
   ac3b4:	940000d3 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac3b8:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac3bc:	b903b27f 	str	wzr, [x19, #944]
   ac3c0:	17ffffba 	b	ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac3c4:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac3c8:	91020021 	add	x1, x1, #0x80
   ac3cc:	52800040 	mov	w0, #0x2                   	// #2
   ac3d0:	9121a021 	add	x1, x1, #0x868
   ac3d4:	940000cb 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac3d8:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac3dc:	b903b27f 	str	wzr, [x19, #944]
   ac3e0:	17ffffb2 	b	ac2a8 <CEMMCDevice::EnsureDataMode()+0x68>
   ac3e4:	d503201f 	nop
   ac3e8:	d503201f 	nop
   ac3ec:	d503201f 	nop

00000000000ac3f0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>:
   ac3f0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ac3f4:	910003fd 	mov	x29, sp
   ac3f8:	b943a405 	ldr	w5, [x0, #932]
   ac3fc:	a90153f3 	stp	x19, x20, [sp, #16]
   ac400:	aa0003f3 	mov	x19, x0
   ac404:	aa0303e0 	mov	x0, x3
   ac408:	f941fe63 	ldr	x3, [x19, #1016]
   ac40c:	710000bf 	cmp	w5, #0x0
   ac410:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac414:	2a0403f6 	mov	w22, w4
   ac418:	53175884 	lsl	w4, w4, #9
   ac41c:	1a960096 	csel	w22, w4, w22, eq  // eq = none
   ac420:	eb00007f 	cmp	x3, x0
   ac424:	54000968 	b.hi	ac550 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x160>  // b.pmore
   ac428:	9ac30804 	udiv	x4, x0, x3
   ac42c:	9b038085 	msub	x5, x4, x3, x0
   ac430:	b903f264 	str	w4, [x19, #1008]
   ac434:	b50007e5 	cbnz	x5, ac530 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x140>
   ac438:	a90363f7 	stp	x23, x24, [sp, #48]
   ac43c:	7100049f 	cmp	w4, #0x1
   ac440:	a9046bf9 	stp	x25, x26, [sp, #64]
   ac444:	f901f662 	str	x2, [x19, #1000]
   ac448:	35000441 	cbnz	w1, ac4d0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0xe0>
   ac44c:	52800257 	mov	w23, #0x12                  	// #18
   ac450:	2a1703f8 	mov	w24, w23
   ac454:	5400006c 	b.gt	ac460 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x70>
   ac458:	52800237 	mov	w23, #0x11                  	// #17
   ac45c:	2a1703f8 	mov	w24, w23
   ac460:	b0000055 	adrp	x21, b5000 <font_data+0x1340>
   ac464:	910202b5 	add	x21, x21, #0x80
   ac468:	52896819 	mov	w25, #0x4b40                	// #19264
   ac46c:	72a00999 	movk	w25, #0x4c, lsl #16
   ac470:	912642ba 	add	x26, x21, #0x990
   ac474:	52800074 	mov	w20, #0x3                   	// #3
   ac478:	2a1903e3 	mov	w3, w25
   ac47c:	2a1603e2 	mov	w2, w22
   ac480:	2a1703e1 	mov	w1, w23
   ac484:	aa1303e0 	mov	x0, x19
   ac488:	97fffca2 	bl	ab710 <CEMMCDevice::IssueCommand(unsigned int, unsigned int, int)>
   ac48c:	2a0003e3 	mov	w3, w0
   ac490:	2a1803e2 	mov	w2, w24
   ac494:	72001c7f 	tst	w3, #0xff
   ac498:	aa1a03e1 	mov	x1, x26
   ac49c:	52800040 	mov	w0, #0x2                   	// #2
   ac4a0:	540003a1 	b.ne	ac514 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x124>  // b.any
   ac4a4:	94000097 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac4a8:	9126a2a1 	add	x1, x21, #0x9a8
   ac4ac:	52800080 	mov	w0, #0x4                   	// #4
   ac4b0:	b943ba62 	ldr	w2, [x19, #952]
   ac4b4:	94000093 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac4b8:	71000694 	subs	w20, w20, #0x1
   ac4bc:	9126e2a1 	add	x1, x21, #0x9b8
   ac4c0:	52800080 	mov	w0, #0x4                   	// #4
   ac4c4:	54000120 	b.eq	ac4e8 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0xf8>  // b.none
   ac4c8:	9400008e 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac4cc:	17ffffeb 	b	ac478 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x88>
   ac4d0:	52800337 	mov	w23, #0x19                  	// #25
   ac4d4:	2a1703f8 	mov	w24, w23
   ac4d8:	54fffc4c 	b.gt	ac460 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x70>
   ac4dc:	52800317 	mov	w23, #0x18                  	// #24
   ac4e0:	2a1703f8 	mov	w24, w23
   ac4e4:	17ffffdf 	b	ac460 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x70>
   ac4e8:	52800080 	mov	w0, #0x4                   	// #4
   ac4ec:	912722a1 	add	x1, x21, #0x9c8
   ac4f0:	94000084 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac4f4:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac4f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   ac4fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ac500:	b903b27f 	str	wzr, [x19, #944]
   ac504:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac508:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac50c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ac510:	d65f03c0 	ret
   ac514:	52800000 	mov	w0, #0x0                   	// #0
   ac518:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac51c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac520:	a94363f7 	ldp	x23, x24, [sp, #48]
   ac524:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ac528:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ac52c:	d65f03c0 	ret
   ac530:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac534:	91020021 	add	x1, x1, #0x80
   ac538:	aa0003e2 	mov	x2, x0
   ac53c:	9124e021 	add	x1, x1, #0x938
   ac540:	52800040 	mov	w0, #0x2                   	// #2
   ac544:	9400006f 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac548:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac54c:	17ffffee 	b	ac504 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x114>
   ac550:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac554:	91020021 	add	x1, x1, #0x80
   ac558:	aa0003e2 	mov	x2, x0
   ac55c:	9123c021 	add	x1, x1, #0x8f0
   ac560:	52800040 	mov	w0, #0x2                   	// #2
   ac564:	94000067 	bl	ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>
   ac568:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac56c:	17ffffe6 	b	ac504 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)+0x114>

00000000000ac570 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)>:
   ac570:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac574:	910003fd 	mov	x29, sp
   ac578:	a90153f3 	stp	x19, x20, [sp, #16]
   ac57c:	aa0203f3 	mov	x19, x2
   ac580:	aa0003f4 	mov	x20, x0
   ac584:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac588:	aa0103f5 	mov	x21, x1
   ac58c:	2a0303f6 	mov	w22, w3
   ac590:	97ffff2c 	bl	ac240 <CEMMCDevice::EnsureDataMode()>
   ac594:	350001a0 	cbnz	w0, ac5c8 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x58>
   ac598:	2a1603e4 	mov	w4, w22
   ac59c:	aa1503e2 	mov	x2, x21
   ac5a0:	aa1403e0 	mov	x0, x20
   ac5a4:	aa1303e3 	mov	x3, x19
   ac5a8:	52800001 	mov	w1, #0x0                   	// #0
   ac5ac:	97ffff91 	bl	ac3f0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>
   ac5b0:	37f800c0 	tbnz	w0, #31, ac5c8 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x58>
   ac5b4:	2a1303e0 	mov	w0, w19
   ac5b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac5bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac5c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac5c4:	d65f03c0 	ret
   ac5c8:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac5cc:	17fffffb 	b	ac5b8 <CEMMCDevice::DoRead(unsigned char*, unsigned long, unsigned int)+0x48>

00000000000ac5d0 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)>:
   ac5d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac5d4:	910003fd 	mov	x29, sp
   ac5d8:	a90153f3 	stp	x19, x20, [sp, #16]
   ac5dc:	aa0203f3 	mov	x19, x2
   ac5e0:	aa0003f4 	mov	x20, x0
   ac5e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac5e8:	aa0103f5 	mov	x21, x1
   ac5ec:	2a0303f6 	mov	w22, w3
   ac5f0:	97ffff14 	bl	ac240 <CEMMCDevice::EnsureDataMode()>
   ac5f4:	350001a0 	cbnz	w0, ac628 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x58>
   ac5f8:	2a1603e4 	mov	w4, w22
   ac5fc:	aa1503e2 	mov	x2, x21
   ac600:	aa1403e0 	mov	x0, x20
   ac604:	aa1303e3 	mov	x3, x19
   ac608:	52800021 	mov	w1, #0x1                   	// #1
   ac60c:	97ffff79 	bl	ac3f0 <CEMMCDevice::DoDataCommand(int, unsigned char*, unsigned long, unsigned int)>
   ac610:	37f800c0 	tbnz	w0, #31, ac628 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x58>
   ac614:	2a1303e0 	mov	w0, w19
   ac618:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac61c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac620:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac624:	d65f03c0 	ret
   ac628:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac62c:	17fffffb 	b	ac618 <CEMMCDevice::DoWrite(unsigned char*, unsigned long, unsigned int)+0x48>

00000000000ac630 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)>:
   ac630:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ac634:	910003fd 	mov	x29, sp
   ac638:	a90153f3 	stp	x19, x20, [sp, #16]
   ac63c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac640:	f9400800 	ldr	x0, [x0, #16]
   ac644:	f9001bf7 	str	x23, [sp, #48]
   ac648:	b40003e0 	cbz	x0, ac6c4 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x94>
   ac64c:	2a0103f4 	mov	w20, w1
   ac650:	2a0203f5 	mov	w21, w2
   ac654:	2a0303f3 	mov	w19, w3
   ac658:	2a0403f6 	mov	w22, w4
   ac65c:	97ffdc85 	bl	a3870 <CTimer::GetClockTicks()>
   ac660:	2a1403f4 	mov	w20, w20
   ac664:	2a0003f7 	mov	w23, w0
   ac668:	b9400285 	ldr	w5, [x20]
   ac66c:	2a1303e1 	mov	w1, w19
   ac670:	6a0502bf 	tst	w21, w5
   ac674:	54000061 	b.ne	ac680 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x50>  // b.any
   ac678:	7100027f 	cmp	w19, #0x0
   ac67c:	1a9f17e1 	cset	w1, eq  // eq = none
   ac680:	35000161 	cbnz	w1, ac6ac <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x7c>
   ac684:	97ffdc7b 	bl	a3870 <CTimer::GetClockTicks()>
   ac688:	4b170000 	sub	w0, w0, w23
   ac68c:	6b16001f 	cmp	w0, w22
   ac690:	54fffec3 	b.cc	ac668 <CEMMCDevice::TimeoutWait(unsigned int, unsigned int, int, unsigned int)+0x38>  // b.lo, b.ul, b.last
   ac694:	12800000 	mov	w0, #0xffffffff            	// #-1
   ac698:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac69c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac6a0:	f9401bf7 	ldr	x23, [sp, #48]
   ac6a4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ac6a8:	d65f03c0 	ret
   ac6ac:	52800000 	mov	w0, #0x0                   	// #0
   ac6b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac6b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac6b8:	f9401bf7 	ldr	x23, [sp, #48]
   ac6bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ac6c0:	d65f03c0 	ret
   ac6c4:	b0000040 	adrp	x0, b5000 <font_data+0x1340>
   ac6c8:	91020000 	add	x0, x0, #0x80
   ac6cc:	9108e001 	add	x1, x0, #0x238
   ac6d0:	52812022 	mov	w2, #0x901                 	// #2305
   ac6d4:	91098000 	add	x0, x0, #0x260
   ac6d8:	97ffbfea 	bl	9c680 <assertion_failed>
   ac6dc:	d503201f 	nop

00000000000ac6e0 <CEMMCDevice::usDelay(unsigned int)>:
   ac6e0:	f9400802 	ldr	x2, [x0, #16]
   ac6e4:	b4000062 	cbz	x2, ac6f0 <CEMMCDevice::usDelay(unsigned int)+0x10>
   ac6e8:	2a0103e0 	mov	w0, w1
   ac6ec:	17ffdf29 	b	a4390 <CTimer::SimpleusDelay(unsigned int)>
   ac6f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac6f4:	910003fd 	mov	x29, sp
   ac6f8:	94000036 	bl	ac7d0 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>
   ac6fc:	d503201f 	nop

00000000000ac700 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)>:
   ac700:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
   ac704:	910003fd 	mov	x29, sp
   ac708:	a90153f3 	stp	x19, x20, [sp, #16]
   ac70c:	3d801be0 	str	q0, [sp, #96]
   ac710:	3d801fe1 	str	q1, [sp, #112]
   ac714:	3d8023e2 	str	q2, [sp, #128]
   ac718:	3d8027e3 	str	q3, [sp, #144]
   ac71c:	3d802be4 	str	q4, [sp, #160]
   ac720:	3d802fe5 	str	q5, [sp, #176]
   ac724:	3d8033e6 	str	q6, [sp, #192]
   ac728:	3d8037e7 	str	q7, [sp, #208]
   ac72c:	a90e0fe2 	stp	x2, x3, [sp, #224]
   ac730:	a90f17e4 	stp	x4, x5, [sp, #240]
   ac734:	a9101fe6 	stp	x6, x7, [sp, #256]
   ac738:	b4000361 	cbz	x1, ac7a4 <CEMMCDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
   ac73c:	910443e3 	add	x3, sp, #0x110
   ac740:	2a0003f4 	mov	w20, w0
   ac744:	910443e0 	add	x0, sp, #0x110
   ac748:	910383e2 	add	x2, sp, #0xe0
   ac74c:	aa0103f3 	mov	x19, x1
   ac750:	128005e1 	mov	w1, #0xffffffd0            	// #-48
   ac754:	a9040fe0 	stp	x0, x3, [sp, #64]
   ac758:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   ac75c:	f9002be2 	str	x2, [sp, #80]
   ac760:	b9005be1 	str	w1, [sp, #88]
   ac764:	b9005fe0 	str	w0, [sp, #92]
   ac768:	97ffc95a 	bl	9ecd0 <CLogger::Get()>
   ac76c:	a9441fe6 	ldp	x6, x7, [sp, #64]
   ac770:	b0000041 	adrp	x1, b5000 <font_data+0x1340>
   ac774:	91020021 	add	x1, x1, #0x80
   ac778:	aa1303e3 	mov	x3, x19
   ac77c:	2a1403e2 	mov	w2, w20
   ac780:	910083e4 	add	x4, sp, #0x20
   ac784:	9127a021 	add	x1, x1, #0x9e8
   ac788:	a94527e8 	ldp	x8, x9, [sp, #80]
   ac78c:	a9021fe6 	stp	x6, x7, [sp, #32]
   ac790:	a90327e8 	stp	x8, x9, [sp, #48]
   ac794:	97ffc8ab 	bl	9ea40 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   ac798:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac79c:	a8d17bfd 	ldp	x29, x30, [sp], #272
   ac7a0:	d65f03c0 	ret
   ac7a4:	b0000040 	adrp	x0, b5000 <font_data+0x1340>
   ac7a8:	91020000 	add	x0, x0, #0x80
   ac7ac:	9108e001 	add	x1, x0, #0x238
   ac7b0:	52812362 	mov	w2, #0x91b                 	// #2331
   ac7b4:	91276000 	add	x0, x0, #0x9d8
   ac7b8:	97ffbfb2 	bl	9c680 <assertion_failed>
   ac7bc:	d503201f 	nop

00000000000ac7c0 <CEMMCDevice::GetID()>:
   ac7c0:	910e5000 	add	x0, x0, #0x394
   ac7c4:	d65f03c0 	ret
   ac7c8:	d503201f 	nop
   ac7cc:	d503201f 	nop

00000000000ac7d0 <CEMMCDevice::usDelay(unsigned int) [clone .part.0]>:
   ac7d0:	b0000040 	adrp	x0, b5000 <font_data+0x1340>
   ac7d4:	91020000 	add	x0, x0, #0x80
   ac7d8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac7dc:	9108e001 	add	x1, x0, #0x238
   ac7e0:	910003fd 	mov	x29, sp
   ac7e4:	91098000 	add	x0, x0, #0x260
   ac7e8:	528122a2 	mov	w2, #0x915                 	// #2325
   ac7ec:	97ffbfa5 	bl	9c680 <assertion_failed>

00000000000ac7f0 <awful_funct()>:
   ac7f0:	d65f03c0 	ret
